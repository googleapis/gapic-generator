
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_addresses` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_addresses(project, page_token: token)
end

items.each do |name, addresses_scoped_list|
  # TODO: Change code below to process each (name, addresses_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(addresses_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the address resource to delete.
address = '{MY-ADDRESS}'


# Perform the call
response = service.delete_address(project, region, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the address resource to return.
address = '{MY-ADDRESS}'


# Perform the call
response = service.get_address(project, region, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::Address.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_address(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_addresses` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_addresses(project, region, page_token: token)
end

items.each do |address|
  # TODO: Change code below to process each `address` resource:
  puts JSON.pretty_generate(address)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_autoscalers` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_autoscalers(project, page_token: token)
end

items.each do |name, autoscalers_scoped_list|
  # TODO: Change code below to process each (name, autoscalers_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(autoscalers_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_autoscaler` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to delete.
autoscaler = '{MY-AUTOSCALER}'


# Perform the call
response = service.delete_autoscaler(project, zone, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_autoscaler` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to return.
autoscaler = '{MY-AUTOSCALER}'


# Perform the call
response = service.get_autoscaler(project, zone, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_autoscaler` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request_body = Google::Apis::ComputeV1::Autoscaler.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_autoscaler(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_autoscalers` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_autoscalers(project, zone, page_token: token)
end

items.each do |autoscaler|
  # TODO: Change code below to process each `autoscaler` resource:
  puts JSON.pretty_generate(autoscaler)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_autoscaler` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to update.
autoscaler = '{MY-AUTOSCALER}'


request_body = Google::Apis::ComputeV1::Autoscaler.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_autoscaler(project, zone, autoscaler, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_autoscaler` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request_body = Google::Apis::ComputeV1::Autoscaler.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_autoscaler(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to delete.
backend_service = '{MY-BACKEND-SERVICE}'


# Perform the call
response = service.delete_backend_service(project, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to return.
backend_service = '{MY-BACKEND-SERVICE}'


# Perform the call
response = service.get_backend_service(project, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_backend_service_health` method:

# project
project = '{MY-PROJECT}'

# Name of the BackendService resource to which the queried instance belongs.
backend_service = '{MY-BACKEND-SERVICE}'


request_body = Google::Apis::ComputeV1::ResourceGroupReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.get_backend_service_health(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::BackendService.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_backend_service(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_backend_services` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_backend_services(project, page_token: token)
end

items.each do |backend_service|
  # TODO: Change code below to process each `backend_service` resource:
  puts JSON.pretty_generate(backend_service)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to update.
backend_service = '{MY-BACKEND-SERVICE}'


request_body = Google::Apis::ComputeV1::BackendService.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_backend_service(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to update.
backend_service = '{MY-BACKEND-SERVICE}'


request_body = Google::Apis::ComputeV1::BackendService.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_backend_service(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_disk_types` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_disk_types(project, page_token: token)
end

items.each do |name, disk_types_scoped_list|
  # TODO: Change code below to process each (name, disk_types_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(disk_types_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_disk_type` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the disk type to return.
disk_type = '{MY-DISK-TYPE}'


# Perform the call
response = service.get_disk_type(project, zone, disk_type)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_disk_types` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_disk_types(project, zone, page_token: token)
end

items.each do |disk_type|
  # TODO: Change code below to process each `disk_type` resource:
  puts JSON.pretty_generate(disk_type)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_disk(project, page_token: token)
end

items.each do |name, disks_scoped_list|
  # TODO: Change code below to process each (name, disks_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(disks_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `create_disk_snapshot` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to snapshot.
disk = '{MY-DISK}'


request_body = Google::Apis::ComputeV1::Snapshot.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.create_disk_snapshot(project, zone, disk, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to delete.
disk = '{MY-DISK}'


# Perform the call
response = service.delete_disk(project, zone, disk)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to return.
disk = '{MY-DISK}'


# Perform the call
response = service.get_disk(project, zone, disk)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request_body = Google::Apis::ComputeV1::Disk.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_disk(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_disks` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_disks(project, zone, page_token: token)
end

items.each do |disk|
  # TODO: Change code below to process each `disk` resource:
  puts JSON.pretty_generate(disk)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `resize_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The name of the persistent disk.
disk = '{MY-DISK}'


request_body = Google::Apis::ComputeV1::DisksResizeRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.resize_disk(project, zone, disk, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_firewall` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to delete.
firewall = '{MY-FIREWALL}'


# Perform the call
response = service.delete_firewall(project, firewall)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_firewall` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to return.
firewall = '{MY-FIREWALL}'


# Perform the call
response = service.get_firewall(project, firewall)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_firewall` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Firewall.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_firewall(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_firewalls` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_firewalls(project, page_token: token)
end

items.each do |firewall|
  # TODO: Change code below to process each `firewall` resource:
  puts JSON.pretty_generate(firewall)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_firewall` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to update.
firewall = '{MY-FIREWALL}'


request_body = Google::Apis::ComputeV1::Firewall.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_firewall(project, firewall, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_firewall` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to update.
firewall = '{MY-FIREWALL}'


request_body = Google::Apis::ComputeV1::Firewall.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_firewall(project, firewall, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_forwarding_rules` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_forwarding_rules(project, page_token: token)
end

items.each do |name, forwarding_rules_scoped_list|
  # TODO: Change code below to process each (name, forwarding_rules_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(forwarding_rules_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource to delete.
forwarding_rule = '{MY-FORWARDING-RULE}'


# Perform the call
response = service.delete_forwarding_rule(project, region, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource to return.
forwarding_rule = '{MY-FORWARDING-RULE}'


# Perform the call
response = service.get_forwarding_rule(project, region, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::ForwardingRule.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_forwarding_rule(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_forwarding_rules` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_forwarding_rules(project, region, page_token: token)
end

items.each do |forwarding_rule|
  # TODO: Change code below to process each `forwarding_rule` resource:
  puts JSON.pretty_generate(forwarding_rule)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_forwarding_rule_target` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = '{MY-FORWARDING-RULE}'


request_body = Google::Apis::ComputeV1::TargetReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_forwarding_rule_target(project, region, forwarding_rule, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_global_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the address resource to delete.
address = '{MY-ADDRESS}'


# Perform the call
response = service.delete_global_address(project, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_global_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the address resource to return.
address = '{MY-ADDRESS}'


# Perform the call
response = service.get_global_address(project, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_global_address` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Address.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_global_address(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_global_addresses` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_global_addresses(project, page_token: token)
end

items.each do |address|
  # TODO: Change code below to process each `address` resource:
  puts JSON.pretty_generate(address)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_global_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource to delete.
forwarding_rule = '{MY-FORWARDING-RULE}'


# Perform the call
response = service.delete_global_forwarding_rule(project, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_global_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource to return.
forwarding_rule = '{MY-FORWARDING-RULE}'


# Perform the call
response = service.get_global_forwarding_rule(project, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_global_forwarding_rule` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::ForwardingRule.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_global_forwarding_rule(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_global_forwarding_rules` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_global_forwarding_rules(project, page_token: token)
end

items.each do |forwarding_rule|
  # TODO: Change code below to process each `forwarding_rule` resource:
  puts JSON.pretty_generate(forwarding_rule)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_global_forwarding_rule_target` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = '{MY-FORWARDING-RULE}'


request_body = Google::Apis::ComputeV1::TargetReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_global_forwarding_rule_target(project, forwarding_rule, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_global_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_global_operation(project, page_token: token)
end

items.each do |name, operations_scoped_list|
  # TODO: Change code below to process each (name, operations_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(operations_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_global_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


# Perform the call
service.delete_global_operation(project, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_global_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


# Perform the call
response = service.get_global_operation(project, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_global_operations` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_global_operations(project, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to delete.
health_check = '{MY-HEALTH-CHECK}'


# Perform the call
response = service.delete_health_check(project, health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to return.
health_check = '{MY-HEALTH-CHECK}'


# Perform the call
response = service.get_health_check(project, health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::HealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_health_checks` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_health_checks(project, page_token: token)
end

items.each do |health_check|
  # TODO: Change code below to process each `health_check` resource:
  puts JSON.pretty_generate(health_check)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to update.
health_check = '{MY-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HealthCheck.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_health_check(project, health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to update.
health_check = '{MY-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_health_check(project, health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_http_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to delete.
http_health_check = '{MY-HTTP-HEALTH-CHECK}'


# Perform the call
response = service.delete_http_health_check(project, http_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_http_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to return.
http_health_check = '{MY-HTTP-HEALTH-CHECK}'


# Perform the call
response = service.get_http_health_check(project, http_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_http_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::HttpHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_http_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_http_health_checks` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_http_health_checks(project, page_token: token)
end

items.each do |http_health_check|
  # TODO: Change code below to process each `http_health_check` resource:
  puts JSON.pretty_generate(http_health_check)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_http_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to update.
http_health_check = '{MY-HTTP-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HttpHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_http_health_check(project, http_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_http_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to update.
http_health_check = '{MY-HTTP-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HttpHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_http_health_check(project, http_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_https_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to delete.
https_health_check = '{MY-HTTPS-HEALTH-CHECK}'


# Perform the call
response = service.delete_https_health_check(project, https_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_https_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to return.
https_health_check = '{MY-HTTPS-HEALTH-CHECK}'


# Perform the call
response = service.get_https_health_check(project, https_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_https_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_https_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_https_health_checks` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_https_health_checks(project, page_token: token)
end

items.each do |https_health_check|
  # TODO: Change code below to process each `https_health_check` resource:
  puts JSON.pretty_generate(https_health_check)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_https_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to update.
https_health_check = '{MY-HTTPS-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_https_health_check(project, https_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_https_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to update.
https_health_check = '{MY-HTTPS-HEALTH-CHECK}'


request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_https_health_check(project, https_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_image` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image resource to delete.
image = '{MY-IMAGE}'


# Perform the call
response = service.delete_image(project, image)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `deprecate_image` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Image name.
image = '{MY-IMAGE}'


request_body = Google::Apis::ComputeV1::DeprecationStatus.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.deprecate_image(project, image, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_image` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image resource to return.
image = '{MY-IMAGE}'


# Perform the call
response = service.get_image(project, image)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_image_from_family` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image family to search for.
family = '{MY-FAMILY}'


# Perform the call
response = service.get_image_from_family(project, family)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_image` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Image.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_image(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_images` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_images(project, page_token: token)
end

items.each do |image|
  # TODO: Change code below to process each `image` resource:
  puts JSON.pretty_generate(image)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `abandon_instance_group_manager_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


request_body = Google::Apis::ComputeV1::InstanceGroupManagersAbandonInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.abandon_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_instance_group_managers` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_instance_group_managers(project, page_token: token)
end

items.each do |name, instance_group_managers_scoped_list|
  # TODO: Change code below to process each (name, instance_group_managers_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(instance_group_managers_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance_group_manager` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group to delete.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


# Perform the call
response = service.delete_instance_group_manager(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance_group_manager_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


request_body = Google::Apis::ComputeV1::InstanceGroupManagersDeleteInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.delete_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_instance_group_manager` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


# Perform the call
response = service.get_instance_group_manager(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_instance_group_manager` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where you want to create the managed instance group.
zone = '{MY-ZONE}'


request_body = Google::Apis::ComputeV1::InstanceGroupManager.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_instance_group_manager(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_instance_group_managers` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instance_group_managers(project, zone, page_token: token)
end

items.each do |instance_group_manager|
  # TODO: Change code below to process each `instance_group_manager` resource:
  puts JSON.pretty_generate(instance_group_manager)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_instance_group_manager_managed_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


# Perform the call
response = service.list_instance_group_manager_managed_instances(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `recreate_instance_group_manager_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


request_body = Google::Apis::ComputeV1::InstanceGroupManagersRecreateInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.recreate_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `resize_instance_group_manager` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'

# The number of running instances that the managed instance group should maintain at any given time.
# The group automatically adds or removes instances to maintain the number of instances specified by
# this parameter.
size = 0


# Perform the call
response = service.resize_instance_group_manager(project, zone, instance_group_manager, size)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_group_manager_instance_template` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


request_body = Google::Apis::ComputeV1::InstanceGroupManagersSetInstanceTemplateRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_group_manager_instance_template(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_group_manager_target_pools` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instance_group_manager = '{MY-INSTANCE-GROUP-MANAGER}'


request_body = Google::Apis::ComputeV1::InstanceGroupManagersSetTargetPoolsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_group_manager_target_pools(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `add_instance_group_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where you are adding instances.
instance_group = '{MY-INSTANCE-GROUP}'


request_body = Google::Apis::ComputeV1::InstanceGroupsAddInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.add_instance_group_instances(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_instance_groups` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_instance_groups(project, page_token: token)
end

items.each do |name, instance_groups_scoped_list|
  # TODO: Change code below to process each (name, instance_groups_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(instance_groups_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance_group` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group to delete.
instance_group = '{MY-INSTANCE-GROUP}'


# Perform the call
response = service.delete_instance_group(project, zone, instance_group)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_instance_group` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group.
instance_group = '{MY-INSTANCE-GROUP}'


# Perform the call
response = service.get_instance_group(project, zone, instance_group)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_instance_group` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where you want to create the instance group.
zone = '{MY-ZONE}'


request_body = Google::Apis::ComputeV1::InstanceGroup.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_instance_group(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_instance_groups` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instance_groups(project, zone, page_token: token)
end

items.each do |instance_group|
  # TODO: Change code below to process each `instance_group` resource:
  puts JSON.pretty_generate(instance_group)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_instance_group_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group from which you want to generate a list of included instances.
instance_group = '{MY-INSTANCE-GROUP}'


request_body = Google::Apis::ComputeV1::InstanceGroupsListInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instance_group_instances(project, zone, instance_group, request_body, page_token: token)
end

items.each do |instance_with_named_ports|
  # TODO: Change code below to process each `instance_with_named_ports` resource:
  puts JSON.pretty_generate(instance_with_named_ports)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `remove_instance_group_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where the specified instances will be removed.
instance_group = '{MY-INSTANCE-GROUP}'


request_body = Google::Apis::ComputeV1::InstanceGroupsRemoveInstancesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.remove_instance_group_instances(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_group_named_ports` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where the named ports are updated.
instance_group = '{MY-INSTANCE-GROUP}'


request_body = Google::Apis::ComputeV1::InstanceGroupsSetNamedPortsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_group_named_ports(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance_template` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the instance template to delete.
instance_template = '{MY-INSTANCE-TEMPLATE}'


# Perform the call
response = service.delete_instance_template(project, instance_template)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_instance_template` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the instance template.
instance_template = '{MY-INSTANCE-TEMPLATE}'


# Perform the call
response = service.get_instance_template(project, instance_template)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_instance_template` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::InstanceTemplate.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_instance_template(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_instance_templates` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instance_templates(project, page_token: token)
end

items.each do |instance_template|
  # TODO: Change code below to process each `instance_template` resource:
  puts JSON.pretty_generate(instance_template)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `add_instance_access_config` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'

# The name of the network interface to add to this instance.
network_interface = '{MY-NETWORK-INTERFACE}'


request_body = Google::Apis::ComputeV1::AccessConfig.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.add_instance_access_config(project, zone, instance, network_interface, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_instances(project, page_token: token)
end

items.each do |name, instances_scoped_list|
  # TODO: Change code below to process each (name, instances_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(instances_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `attach_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::AttachedDisk.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.attach_disk(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to delete.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.delete_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_instance_access_config` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'

# The name of the access config to delete.
access_config = '{MY-ACCESS-CONFIG}'

# The name of the network interface.
network_interface = '{MY-NETWORK-INTERFACE}'


# Perform the call
response = service.delete_instance_access_config(project, zone, instance, access_config, network_interface)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `detach_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Instance name.
instance = '{MY-INSTANCE}'

# Disk device name to detach.
device_name = '{MY-DEVICE-NAME}'


# Perform the call
response = service.detach_disk(project, zone, instance, device_name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to return.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.get_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_instance_serial_port_output` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.get_instance_serial_port_output(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request_body = Google::Apis::ComputeV1::Instance.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_instance(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instances(project, zone, page_token: token)
end

items.each do |instance|
  # TODO: Change code below to process each `instance` resource:
  puts JSON.pretty_generate(instance)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `reset_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.reset_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_disk_auto_delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name.
instance = '{MY-INSTANCE}'

# Whether to auto-delete the disk when the instance is deleted.
auto_delete = false

# The device name of the disk to modify.
device_name = '{MY-DEVICE-NAME}'


# Perform the call
response = service.set_disk_auto_delete(project, zone, instance, auto_delete, device_name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_machine_type` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::InstancesSetMachineTypeRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_machine_type(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_metadata` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::Metadata.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_metadata(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_scheduling` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Instance name.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::Scheduling.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_scheduling(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_instance_tags` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::Tags.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_instance_tags(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `start_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to start.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.start_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `start_instance_with_encryption_key` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to start.
instance = '{MY-INSTANCE}'


request_body = Google::Apis::ComputeV1::InstancesStartWithEncryptionKeyRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.start_instance_with_encryption_key(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `stop_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to stop.
instance = '{MY-INSTANCE}'


# Perform the call
response = service.stop_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_license` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the License resource to return.
license = '{MY-LICENSE}'


# Perform the call
response = service.get_license(project, license)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_machine_types` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_machine_types(project, page_token: token)
end

items.each do |name, machine_types_scoped_list|
  # TODO: Change code below to process each (name, machine_types_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(machine_types_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_machine_type` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the machine type to return.
machine_type = '{MY-MACHINE-TYPE}'


# Perform the call
response = service.get_machine_type(project, zone, machine_type)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_machine_types` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_machine_types(project, zone, page_token: token)
end

items.each do |machine_type|
  # TODO: Change code below to process each `machine_type` resource:
  puts JSON.pretty_generate(machine_type)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_network` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the network to delete.
network = '{MY-NETWORK}'


# Perform the call
response = service.delete_network(project, network)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_network` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the network to return.
network = '{MY-NETWORK}'


# Perform the call
response = service.get_network(project, network)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_network` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Network.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_network(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_networks` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_networks(project, page_token: token)
end

items.each do |network|
  # TODO: Change code below to process each `network` resource:
  puts JSON.pretty_generate(network)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_project` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
response = service.get_project(project)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `move_disk` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::MoveDiskRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.move_disk(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `move_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::MoveInstanceRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.move_instance(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `set_common_instance_metadata` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Metadata.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_common_instance_metadata(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `set_usage_export_bucket` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::UsageExportLocation.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_usage_export_bucket(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_region_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


# Perform the call
service.delete_region_operation(project, region, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_region_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


# Perform the call
response = service.get_region_operation(project, region, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_region_operations` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_region_operations(project, region, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_region` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region resource to return.
region = '{MY-REGION}'


# Perform the call
response = service.get_region(project, region)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_regions` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_regions(project, page_token: token)
end

items.each do |region|
  # TODO: Change code below to process each `region` resource:
  puts JSON.pretty_generate(region)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `aggregated_router_list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.aggregated_router_list(project, page_token: token)
end

items.each do |name, routers_scoped_list|
  # TODO: Change code below to process each (name, routers_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(routers_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to delete.
router = '{MY-ROUTER}'


# Perform the call
response = service.delete_router(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to return.
router = '{MY-ROUTER}'


# Perform the call
response = service.get_router(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_router_router_status` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to query.
router = '{MY-ROUTER}'


# Perform the call
response = service.get_router_router_status(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::Router.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_router(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_routers` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_routers(project, region, page_token: token)
end

items.each do |router|
  # TODO: Change code below to process each `router` resource:
  puts JSON.pretty_generate(router)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to update.
router = '{MY-ROUTER}'


request_body = Google::Apis::ComputeV1::Router.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `preview_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to query.
router = '{MY-ROUTER}'


request_body = Google::Apis::ComputeV1::Router.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.preview_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_router` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to update.
router = '{MY-ROUTER}'


request_body = Google::Apis::ComputeV1::Router.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_route` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Route resource to delete.
route = '{MY-ROUTE}'


# Perform the call
response = service.delete_route(project, route)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_route` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Route resource to return.
route = '{MY-ROUTE}'


# Perform the call
response = service.get_route(project, route)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_route` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::Route.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_route(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_routes` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_routes(project, page_token: token)
end

items.each do |route|
  # TODO: Change code below to process each `route` resource:
  puts JSON.pretty_generate(route)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_snapshot` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Snapshot resource to delete.
snapshot = '{MY-SNAPSHOT}'


# Perform the call
response = service.delete_snapshot(project, snapshot)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_snapshot` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Snapshot resource to return.
snapshot = '{MY-SNAPSHOT}'


# Perform the call
response = service.get_snapshot(project, snapshot)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_snapshots` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_snapshots(project, page_token: token)
end

items.each do |snapshot|
  # TODO: Change code below to process each `snapshot` resource:
  puts JSON.pretty_generate(snapshot)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_ssl_certificate` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the SslCertificate resource to delete.
ssl_certificate = '{MY-SSL-CERTIFICATE}'


# Perform the call
response = service.delete_ssl_certificate(project, ssl_certificate)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_ssl_certificate` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the SslCertificate resource to return.
ssl_certificate = '{MY-SSL-CERTIFICATE}'


# Perform the call
response = service.get_ssl_certificate(project, ssl_certificate)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_ssl_certificate` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::SslCertificate.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_ssl_certificate(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_ssl_certificates` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_ssl_certificates(project, page_token: token)
end

items.each do |ssl_certificate|
  # TODO: Change code below to process each `ssl_certificate` resource:
  puts JSON.pretty_generate(ssl_certificate)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `aggregated_subnetwork_list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.aggregated_subnetwork_list(project, page_token: token)
end

items.each do |name, subnetworks_scoped_list|
  # TODO: Change code below to process each (name, subnetworks_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(subnetworks_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_subnetwork` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the Subnetwork resource to delete.
subnetwork = '{MY-SUBNETWORK}'


# Perform the call
response = service.delete_subnetwork(project, region, subnetwork)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_subnetwork` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the Subnetwork resource to return.
subnetwork = '{MY-SUBNETWORK}'


# Perform the call
response = service.get_subnetwork(project, region, subnetwork)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_subnetwork` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::Subnetwork.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_subnetwork(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_subnetworks` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_subnetworks(project, region, page_token: token)
end

items.each do |subnetwork|
  # TODO: Change code below to process each `subnetwork` resource:
  puts JSON.pretty_generate(subnetwork)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_http_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy resource to delete.
target_http_proxy = '{MY-TARGET-HTTP-PROXY}'


# Perform the call
response = service.delete_target_http_proxy(project, target_http_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_http_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy resource to return.
target_http_proxy = '{MY-TARGET-HTTP-PROXY}'


# Perform the call
response = service.get_target_http_proxy(project, target_http_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_target_http_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::TargetHttpProxy.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_http_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_target_http_proxies` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_http_proxies(project, page_token: token)
end

items.each do |target_http_proxy|
  # TODO: Change code below to process each `target_http_proxy` resource:
  puts JSON.pretty_generate(target_http_proxy)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_http_proxy_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy to set a URL map for.
target_http_proxy = '{MY-TARGET-HTTP-PROXY}'


request_body = Google::Apis::ComputeV1::UrlMapReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_http_proxy_url_map(project, target_http_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_https_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to delete.
target_https_proxy = '{MY-TARGET-HTTPS-PROXY}'


# Perform the call
response = service.delete_target_https_proxy(project, target_https_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_https_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to return.
target_https_proxy = '{MY-TARGET-HTTPS-PROXY}'


# Perform the call
response = service.get_target_https_proxy(project, target_https_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_target_https_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::TargetHttpsProxy.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_https_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_target_https_proxies` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_https_proxies(project, page_token: token)
end

items.each do |target_https_proxy|
  # TODO: Change code below to process each `target_https_proxy` resource:
  puts JSON.pretty_generate(target_https_proxy)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_https_proxy_ssl_certificates` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
target_https_proxy = '{MY-TARGET-HTTPS-PROXY}'


request_body = Google::Apis::ComputeV1::TargetHttpsProxiesSetSslCertificatesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_https_proxy_ssl_certificates(project, target_https_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_https_proxy_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource whose URL map is to be set.
target_https_proxy = '{MY-TARGET-HTTPS-PROXY}'


request_body = Google::Apis::ComputeV1::UrlMapReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_https_proxy_url_map(project, target_https_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_target_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_target_instance(project, page_token: token)
end

items.each do |name, target_instances_scoped_list|
  # TODO: Change code below to process each (name, target_instances_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(target_instances_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the TargetInstance resource to delete.
target_instance = '{MY-TARGET-INSTANCE}'


# Perform the call
response = service.delete_target_instance(project, zone, target_instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the TargetInstance resource to return.
target_instance = '{MY-TARGET-INSTANCE}'


# Perform the call
response = service.get_target_instance(project, zone, target_instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_target_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request_body = Google::Apis::ComputeV1::TargetInstance.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_instance(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_target_instances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_instances(project, zone, page_token: token)
end

items.each do |target_instance|
  # TODO: Change code below to process each `target_instance` resource:
  puts JSON.pretty_generate(target_instance)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `add_target_pool_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the target pool to add a health check to.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::AddTargetPoolsHealthCheckRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.add_target_pool_health_check(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `add_target_pool_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to add instances to.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::AddTargetPoolsInstanceRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.add_target_pool_instance(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_target_pools` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_target_pools(project, page_token: token)
end

items.each do |name, target_pools_scoped_list|
  # TODO: Change code below to process each (name, target_pools_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(target_pools_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_pool` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to delete.
target_pool = '{MY-TARGET-POOL}'


# Perform the call
response = service.delete_target_pool(project, region, target_pool)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_pool` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to return.
target_pool = '{MY-TARGET-POOL}'


# Perform the call
response = service.get_target_pool(project, region, target_pool)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_pool_health` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to which the queried instance belongs.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::InstanceReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.get_target_pool_health(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_target_pool` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::TargetPool.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_pool(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_target_pools` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_pools(project, region, page_token: token)
end

items.each do |target_pool|
  # TODO: Change code below to process each `target_pool` resource:
  puts JSON.pretty_generate(target_pool)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `remove_target_pool_health_check` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target pool to remove health checks from.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::RemoveTargetPoolsHealthCheckRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.remove_target_pool_health_check(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `remove_target_pool_instance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to remove instances from.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::RemoveTargetPoolsInstanceRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.remove_target_pool_instance(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_pool_backup` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to set a backup pool for.
target_pool = '{MY-TARGET-POOL}'


request_body = Google::Apis::ComputeV1::TargetReference.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_pool_backup(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_ssl_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource to delete.
target_ssl_proxy = '{MY-TARGET-SSL-PROXY}'


# Perform the call
response = service.delete_target_ssl_proxy(project, target_ssl_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_ssl_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource to return.
target_ssl_proxy = '{MY-TARGET-SSL-PROXY}'


# Perform the call
response = service.get_target_ssl_proxy(project, target_ssl_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_target_ssl_proxy` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::TargetSslProxy.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_ssl_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_target_ssl_proxies` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_ssl_proxies(project, page_token: token)
end

items.each do |target_ssl_proxy|
  # TODO: Change code below to process each `target_ssl_proxy` resource:
  puts JSON.pretty_generate(target_ssl_proxy)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_ssl_proxy_backend_service` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose BackendService resource is to be set.
target_ssl_proxy = '{MY-TARGET-SSL-PROXY}'


request_body = Google::Apis::ComputeV1::TargetSslProxiesSetBackendServiceRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_ssl_proxy_backend_service(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_ssl_proxy_proxy_header` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose ProxyHeader is to be set.
target_ssl_proxy = '{MY-TARGET-SSL-PROXY}'


request_body = Google::Apis::ComputeV1::TargetSslProxiesSetProxyHeaderRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_ssl_proxy_proxy_header(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `set_target_ssl_proxy_ssl_certificates` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
target_ssl_proxy = '{MY-TARGET-SSL-PROXY}'


request_body = Google::Apis::ComputeV1::TargetSslProxiesSetSslCertificatesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_target_ssl_proxy_ssl_certificates(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_target_vpn_gateways` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_target_vpn_gateways(project, page_token: token)
end

items.each do |name, target_vpn_gateways_scoped_list|
  # TODO: Change code below to process each (name, target_vpn_gateways_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(target_vpn_gateways_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_target_vpn_gateway` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target VPN gateway to delete.
target_vpn_gateway = '{MY-TARGET-VPN-GATEWAY}'


# Perform the call
response = service.delete_target_vpn_gateway(project, region, target_vpn_gateway)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_target_vpn_gateway` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target VPN gateway to return.
target_vpn_gateway = '{MY-TARGET-VPN-GATEWAY}'


# Perform the call
response = service.get_target_vpn_gateway(project, region, target_vpn_gateway)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_target_vpn_gateway` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::TargetVpnGateway.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_target_vpn_gateway(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_target_vpn_gateways` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_target_vpn_gateways(project, region, page_token: token)
end

items.each do |target_vpn_gateway|
  # TODO: Change code below to process each `target_vpn_gateway` resource:
  puts JSON.pretty_generate(target_vpn_gateway)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to delete.
url_map = '{MY-URL-MAP}'


# Perform the call
response = service.delete_url_map(project, url_map)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to return.
url_map = '{MY-URL-MAP}'


# Perform the call
response = service.get_url_map(project, url_map)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `insert_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request_body = Google::Apis::ComputeV1::UrlMap.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_url_map(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `invalidate_url_map_cache` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap scoping this request.
url_map = '{MY-URL-MAP}'


request_body = Google::Apis::ComputeV1::CacheInvalidationRule.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.invalidate_url_map_cache(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_url_maps` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_url_maps(project, page_token: token)
end

items.each do |url_map|
  # TODO: Change code below to process each `url_map` resource:
  puts JSON.pretty_generate(url_map)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to update.
url_map = '{MY-URL-MAP}'


request_body = Google::Apis::ComputeV1::UrlMap.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to update.
url_map = '{MY-URL-MAP}'


request_body = Google::Apis::ComputeV1::UrlMap.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `validate_url_map` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to be validated as.
url_map = '{MY-URL-MAP}'


request_body = Google::Apis::ComputeV1::ValidateUrlMapsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.validate_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_aggregated_vpn_tunnel` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_aggregated_vpn_tunnel(project, page_token: token)
end

items.each do |name, vpn_tunnels_scoped_list|
  # TODO: Change code below to process each (name, vpn_tunnels_scoped_list) pair:
  puts String(name) << " => " << JSON.pretty_generate(vpn_tunnels_scoped_list)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_vpn_tunnel` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the VpnTunnel resource to delete.
vpn_tunnel = '{MY-VPN-TUNNEL}'


# Perform the call
response = service.delete_vpn_tunnel(project, region, vpn_tunnel)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_vpn_tunnel` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the VpnTunnel resource to return.
vpn_tunnel = '{MY-VPN-TUNNEL}'


# Perform the call
response = service.get_vpn_tunnel(project, region, vpn_tunnel)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `insert_vpn_tunnel` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


request_body = Google::Apis::ComputeV1::VpnTunnel.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_vpn_tunnel(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_vpn_tunnels` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_vpn_tunnels(project, region, page_token: token)
end

items.each do |vpn_tunnel|
  # TODO: Change code below to process each `vpn_tunnel` resource:
  puts JSON.pretty_generate(vpn_tunnel)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_zone_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


# Perform the call
service.delete_zone_operation(project, zone, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_zone_operation` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


# Perform the call
response = service.get_zone_operation(project, zone, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_zone_operations` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_zone_operations(project, zone, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_zone` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone resource to return.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


# Perform the call
response = service.get_zone(project, zone)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_zones` method:

# Project ID for this request.
project = '{MY-PROJECT}'


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_zones(project, page_token: token)
end

items.each do |zone|
  # TODO: Change code below to process each `zone` resource:
  puts JSON.pretty_generate(zone)
end
