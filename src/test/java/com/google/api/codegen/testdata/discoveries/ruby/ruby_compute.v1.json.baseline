
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_addresses(project, page_token: token)
end

items.each do |name, addresses_scoped_list|
  # TODO: Change code below to process each (name, addresses_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(addresses_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the address resource to delete.
address = 'my-address'  # TODO: Update placeholder value.

response = service.delete_address(project, region, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the address resource to return.
address = 'my-address'  # TODO: Update placeholder value.

response = service.get_address(project, region, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Address.new

response = service.insert_address(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_addresses(project, region, page_token: token)
end

items.each do |address|
  # TODO: Change code below to process each `address` resource:
  puts JSON.pretty_unparse(address.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_autoscalers(project, page_token: token)
end

items.each do |name, autoscalers_scoped_list|
  # TODO: Change code below to process each (name, autoscalers_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(autoscalers_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the autoscaler to delete.
autoscaler = 'my-autoscaler'  # TODO: Update placeholder value.

response = service.delete_autoscaler(project, zone, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the autoscaler to return.
autoscaler = 'my-autoscaler'  # TODO: Update placeholder value.

response = service.get_autoscaler(project, zone, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.insert_autoscaler(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_autoscalers(project, zone, page_token: token)
end

items.each do |autoscaler|
  # TODO: Change code below to process each `autoscaler` resource:
  puts JSON.pretty_unparse(autoscaler.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the autoscaler to update.
autoscaler = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.patch_autoscaler(project, zone, autoscaler, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.update_autoscaler(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Name of the project scoping this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.aggregated_backend_service_list(project, page_token: token)
end

items.each do |name, backend_services_scoped_list|
  # TODO: Change code below to process each (name, backend_services_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(backend_services_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the BackendService resource to delete.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

response = service.delete_backend_service(project, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the BackendService resource to return.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

response = service.get_backend_service(project, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

project = 'my-project'  # TODO: Update placeholder value.

# Name of the BackendService resource to which the queried instance belongs.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::ResourceGroupReference.new

response = service.get_backend_service_health(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.insert_backend_service(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_backend_services(project, page_token: token)
end

items.each do |backend_service|
  # TODO: Change code below to process each `backend_service` resource:
  puts JSON.pretty_unparse(backend_service.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the BackendService resource to update.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.patch_backend_service(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the BackendService resource to update.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.update_backend_service(project, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_disk_types(project, page_token: token)
end

items.each do |name, disk_types_scoped_list|
  # TODO: Change code below to process each (name, disk_types_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(disk_types_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the disk type to return.
disk_type = 'my-disk-type'  # TODO: Update placeholder value.

response = service.get_disk_type(project, zone, disk_type)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_disk_types(project, zone, page_token: token)
end

items.each do |disk_type|
  # TODO: Change code below to process each `disk_type` resource:
  puts JSON.pretty_unparse(disk_type.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_disk(project, page_token: token)
end

items.each do |name, disks_scoped_list|
  # TODO: Change code below to process each (name, disks_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(disks_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the persistent disk to snapshot.
disk = 'my-disk'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Snapshot.new

response = service.create_disk_snapshot(project, zone, disk, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the persistent disk to delete.
disk = 'my-disk'  # TODO: Update placeholder value.

response = service.delete_disk(project, zone, disk)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the persistent disk to return.
disk = 'my-disk'  # TODO: Update placeholder value.

response = service.get_disk(project, zone, disk)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Disk.new

response = service.insert_disk(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_disks(project, zone, page_token: token)
end

items.each do |disk|
  # TODO: Change code below to process each `disk` resource:
  puts JSON.pretty_unparse(disk.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the persistent disk.
disk = 'my-disk'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::DisksResizeRequest.new

response = service.resize_disk(project, zone, disk, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the firewall rule to delete.
firewall = 'my-firewall'  # TODO: Update placeholder value.

response = service.delete_firewall(project, firewall)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the firewall rule to return.
firewall = 'my-firewall'  # TODO: Update placeholder value.

response = service.get_firewall(project, firewall)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Firewall.new

response = service.insert_firewall(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_firewalls(project, page_token: token)
end

items.each do |firewall|
  # TODO: Change code below to process each `firewall` resource:
  puts JSON.pretty_unparse(firewall.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the firewall rule to update.
firewall = 'my-firewall'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::Firewall.new

response = service.patch_firewall(project, firewall, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the firewall rule to update.
firewall = 'my-firewall'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::Firewall.new

response = service.update_firewall(project, firewall, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_forwarding_rules(project, page_token: token)
end

items.each do |name, forwarding_rules_scoped_list|
  # TODO: Change code below to process each (name, forwarding_rules_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(forwarding_rules_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource to delete.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

response = service.delete_forwarding_rule(project, region, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource to return.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

response = service.get_forwarding_rule(project, region, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::ForwardingRule.new

response = service.insert_forwarding_rule(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_forwarding_rules(project, region, page_token: token)
end

items.each do |forwarding_rule|
  # TODO: Change code below to process each `forwarding_rule` resource:
  puts JSON.pretty_unparse(forwarding_rule.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetReference.new

response = service.set_forwarding_rule_target(project, region, forwarding_rule, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the address resource to delete.
address = 'my-address'  # TODO: Update placeholder value.

response = service.delete_global_address(project, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the address resource to return.
address = 'my-address'  # TODO: Update placeholder value.

response = service.get_global_address(project, address)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Address.new

response = service.insert_global_address(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_global_addresses(project, page_token: token)
end

items.each do |address|
  # TODO: Change code below to process each `address` resource:
  puts JSON.pretty_unparse(address.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource to delete.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

response = service.delete_global_forwarding_rule(project, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource to return.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

response = service.get_global_forwarding_rule(project, forwarding_rule)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::ForwardingRule.new

response = service.insert_global_forwarding_rule(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_global_forwarding_rules(project, page_token: token)
end

items.each do |forwarding_rule|
  # TODO: Change code below to process each `forwarding_rule` resource:
  puts JSON.pretty_unparse(forwarding_rule.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = 'my-forwarding-rule'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetReference.new

response = service.set_global_forwarding_rule_target(project, forwarding_rule, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_global_operation(project, page_token: token)
end

items.each do |name, operations_scoped_list|
  # TODO: Change code below to process each (name, operations_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(operations_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Operations resource to delete.
operation = 'my-operation'  # TODO: Update placeholder value.

service.delete_global_operation(project, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Operations resource to return.
operation = 'my-operation'  # TODO: Update placeholder value.

response = service.get_global_operation(project, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_global_operations(project, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_unparse(operation.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HealthCheck resource to delete.
health_check = 'my-health-check'  # TODO: Update placeholder value.

response = service.delete_health_check(project, health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HealthCheck resource to return.
health_check = 'my-health-check'  # TODO: Update placeholder value.

response = service.get_health_check(project, health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::HealthCheck.new

response = service.insert_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_health_checks(project, page_token: token)
end

items.each do |health_check|
  # TODO: Change code below to process each `health_check` resource:
  puts JSON.pretty_unparse(health_check.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HealthCheck resource to update.
health_check = 'my-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::HealthCheck.new

response = service.patch_health_check(project, health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HealthCheck resource to update.
health_check = 'my-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::HealthCheck.new

response = service.update_health_check(project, health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpHealthCheck resource to delete.
http_health_check = 'my-http-health-check'  # TODO: Update placeholder value.

response = service.delete_http_health_check(project, http_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpHealthCheck resource to return.
http_health_check = 'my-http-health-check'  # TODO: Update placeholder value.

response = service.get_http_health_check(project, http_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::HttpHealthCheck.new

response = service.insert_http_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_http_health_checks(project, page_token: token)
end

items.each do |http_health_check|
  # TODO: Change code below to process each `http_health_check` resource:
  puts JSON.pretty_unparse(http_health_check.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpHealthCheck resource to update.
http_health_check = 'my-http-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::HttpHealthCheck.new

response = service.patch_http_health_check(project, http_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpHealthCheck resource to update.
http_health_check = 'my-http-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::HttpHealthCheck.new

response = service.update_http_health_check(project, http_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpsHealthCheck resource to delete.
https_health_check = 'my-https-health-check'  # TODO: Update placeholder value.

response = service.delete_https_health_check(project, https_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpsHealthCheck resource to return.
https_health_check = 'my-https-health-check'  # TODO: Update placeholder value.

response = service.get_https_health_check(project, https_health_check)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new

response = service.insert_https_health_check(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_https_health_checks(project, page_token: token)
end

items.each do |https_health_check|
  # TODO: Change code below to process each `https_health_check` resource:
  puts JSON.pretty_unparse(https_health_check.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpsHealthCheck resource to update.
https_health_check = 'my-https-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new

response = service.patch_https_health_check(project, https_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the HttpsHealthCheck resource to update.
https_health_check = 'my-https-health-check'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::HttpsHealthCheck.new

response = service.update_https_health_check(project, https_health_check, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the image resource to delete.
image = 'my-image'  # TODO: Update placeholder value.

response = service.delete_image(project, image)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Image name.
image = 'my-image'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::DeprecationStatus.new

response = service.deprecate_image(project, image, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the image resource to return.
image = 'my-image'  # TODO: Update placeholder value.

response = service.get_image(project, image)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the image family to search for.
family = 'my-family'  # TODO: Update placeholder value.

response = service.get_image_from_family(project, family)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Image.new

response = service.insert_image(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_images(project, page_token: token)
end

items.each do |image|
  # TODO: Change code below to process each `image` resource:
  puts JSON.pretty_unparse(image.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManagersAbandonInstancesRequest.new

response = service.abandon_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_instance_group_managers(project, page_token: token)
end

items.each do |name, instance_group_managers_scoped_list|
  # TODO: Change code below to process each (name, instance_group_managers_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(instance_group_managers_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group to delete.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.delete_instance_group_manager(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManagersDeleteInstancesRequest.new

response = service.delete_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.get_instance_group_manager(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where you want to create the managed instance group.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManager.new

response = service.insert_instance_group_manager(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_instance_group_managers(project, zone, page_token: token)
end

items.each do |instance_group_manager|
  # TODO: Change code below to process each `instance_group_manager` resource:
  puts JSON.pretty_unparse(instance_group_manager.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.list_instance_group_manager_managed_instances(project, zone, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManagersRecreateInstancesRequest.new

response = service.recreate_instance_group_manager_instances(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# The number of running instances that the managed instance group should maintain at any given time.
# The group automatically adds or removes instances to maintain the number of instances specified by
# this parameter.
size = 0  # TODO: Update placeholder value.

response = service.resize_instance_group_manager(project, zone, instance_group_manager, size)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManagersSetInstanceTemplateRequest.new

response = service.set_instance_group_manager_instance_template(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the managed instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManagersSetTargetPoolsRequest.new

response = service.set_instance_group_manager_target_pools(project, zone, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group where you are adding instances.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupsAddInstancesRequest.new

response = service.add_instance_group_instances(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_instance_groups(project, page_token: token)
end

items.each do |name, instance_groups_scoped_list|
  # TODO: Change code below to process each (name, instance_groups_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(instance_groups_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group to delete.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

response = service.delete_instance_group(project, zone, instance_group)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

response = service.get_instance_group(project, zone, instance_group)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where you want to create the instance group.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroup.new

response = service.insert_instance_group(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_instance_groups(project, zone, page_token: token)
end

items.each do |instance_group|
  # TODO: Change code below to process each `instance_group` resource:
  puts JSON.pretty_unparse(instance_group.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group from which you want to generate a list of included instances.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupsListInstancesRequest.new

items = service.fetch_all do |token|
  service.list_instance_group_instances(project, zone, instance_group, request_body, page_token: token)
end

items.each do |instance_with_named_ports|
  # TODO: Change code below to process each `instance_with_named_ports` resource:
  puts JSON.pretty_unparse(instance_with_named_ports.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group where the specified instances will be removed.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupsRemoveInstancesRequest.new

response = service.remove_instance_group_instances(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone where the instance group is located.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the instance group where the named ports are updated.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupsSetNamedPortsRequest.new

response = service.set_instance_group_named_ports(project, zone, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the instance template to delete.
instance_template = 'my-instance-template'  # TODO: Update placeholder value.

response = service.delete_instance_template(project, instance_template)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the instance template.
instance_template = 'my-instance-template'  # TODO: Update placeholder value.

response = service.get_instance_template(project, instance_template)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceTemplate.new

response = service.insert_instance_template(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_instance_templates(project, page_token: token)
end

items.each do |instance_template|
  # TODO: Change code below to process each `instance_template` resource:
  puts JSON.pretty_unparse(instance_template.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The instance name for this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# The name of the network interface to add to this instance.
network_interface = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::AccessConfig.new

response = service.add_instance_access_config(project, zone, instance, network_interface, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_instances(project, page_token: token)
end

items.each do |name, instances_scoped_list|
  # TODO: Change code below to process each (name, instances_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(instances_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The instance name for this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::AttachedDisk.new

response = service.attach_disk(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to delete.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.delete_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The instance name for this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# The name of the access config to delete.
access_config = ''  # TODO: Update placeholder value.

# The name of the network interface.
network_interface = ''  # TODO: Update placeholder value.

response = service.delete_instance_access_config(project, zone, instance, access_config, network_interface)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Instance name.
instance = 'my-instance'  # TODO: Update placeholder value.

# Disk device name to detach.
device_name = ''  # TODO: Update placeholder value.

response = service.detach_disk(project, zone, instance, device_name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to return.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.get_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance scoping this request.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.get_instance_serial_port_output(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Instance.new

response = service.insert_instance(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_instances(project, zone, page_token: token)
end

items.each do |instance|
  # TODO: Change code below to process each `instance` resource:
  puts JSON.pretty_unparse(instance.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance scoping this request.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.reset_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The instance name.
instance = 'my-instance'  # TODO: Update placeholder value.

# Whether to auto-delete the disk when the instance is deleted.
auto_delete = false  # TODO: Update placeholder value.

# The device name of the disk to modify.
device_name = ''  # TODO: Update placeholder value.

response = service.set_disk_auto_delete(project, zone, instance, auto_delete, device_name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance scoping this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstancesSetMachineTypeRequest.new

response = service.set_instance_machine_type(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance scoping this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Metadata.new

response = service.set_instance_metadata(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Instance name.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Scheduling.new

response = service.set_instance_scheduling(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to start.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstancesSetServiceAccountRequest.new

response = service.set_instance_service_account(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance scoping this request.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Tags.new

response = service.set_instance_tags(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to start.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.start_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to start.
instance = 'my-instance'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstancesStartWithEncryptionKeyRequest.new

response = service.start_instance_with_encryption_key(project, zone, instance, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the instance resource to stop.
instance = 'my-instance'  # TODO: Update placeholder value.

response = service.stop_instance(project, zone, instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the License resource to return.
license = 'my-license'  # TODO: Update placeholder value.

response = service.get_license(project, license)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_machine_types(project, page_token: token)
end

items.each do |name, machine_types_scoped_list|
  # TODO: Change code below to process each (name, machine_types_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(machine_types_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the machine type to return.
machine_type = 'my-machine-type'  # TODO: Update placeholder value.

response = service.get_machine_type(project, zone, machine_type)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# The name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_machine_types(project, zone, page_token: token)
end

items.each do |machine_type|
  # TODO: Change code below to process each `machine_type` resource:
  puts JSON.pretty_unparse(machine_type.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the network to delete.
network = 'my-network'  # TODO: Update placeholder value.

response = service.delete_network(project, network)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the network to return.
network = 'my-network'  # TODO: Update placeholder value.

response = service.get_network(project, network)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Network.new

response = service.insert_network(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_networks(project, page_token: token)
end

items.each do |network|
  # TODO: Change code below to process each `network` resource:
  puts JSON.pretty_unparse(network.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the network to be updated.
network = 'my-network'  # TODO: Update placeholder value.

response = service.switch_network_to_custom_mode(project, network)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

response = service.get_project(project)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::MoveDiskRequest.new

response = service.move_disk(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::MoveInstanceRequest.new

response = service.move_instance(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Metadata.new

response = service.set_common_instance_metadata(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::UsageExportLocation.new

response = service.set_usage_export_bucket(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the autoscaler to delete.
autoscaler = 'my-autoscaler'  # TODO: Update placeholder value.

response = service.delete_region_autoscaler(project, region, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the autoscaler to return.
autoscaler = 'my-autoscaler'  # TODO: Update placeholder value.

response = service.get_region_autoscaler(project, region, autoscaler)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.insert_region_autoscaler(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_region_autoscalers(project, region, page_token: token)
end

items.each do |autoscaler|
  # TODO: Change code below to process each `autoscaler` resource:
  puts JSON.pretty_unparse(autoscaler.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the autoscaler to update.
autoscaler = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.patch_region_autoscaler(project, region, autoscaler, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::Autoscaler.new

response = service.update_region_autoscaler(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the BackendService resource to delete.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

response = service.delete_region_backend_service(project, region, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the BackendService resource to return.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

response = service.get_region_backend_service(project, region, backend_service)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the BackendService resource to which the queried instance belongs.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::ResourceGroupReference.new

response = service.get_region_backend_service_health(project, region, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.insert_region_backend_service(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_region_backend_services(project, region, page_token: token)
end

items.each do |backend_service|
  # TODO: Change code below to process each `backend_service` resource:
  puts JSON.pretty_unparse(backend_service.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the BackendService resource to update.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.patch_region_backend_service(project, region, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the BackendService resource to update.
backend_service = 'my-backend-service'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::BackendService.new

response = service.update_region_backend_service(project, region, backend_service, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupManagersAbandonInstancesRequest.new

response = service.abandon_region_instance_group_manager_instances(project, region, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group to delete.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.delete_region_instance_group_manager(project, region, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupManagersDeleteInstancesRequest.new

response = service.delete_region_instance_group_manager_instances(project, region, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group to return.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.get_region_instance_group_manager(project, region, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceGroupManager.new

response = service.insert_region_instance_group_manager(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_region_instance_group_managers(project, region, page_token: token)
end

items.each do |instance_group_manager|
  # TODO: Change code below to process each `instance_group_manager` resource:
  puts JSON.pretty_unparse(instance_group_manager.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

response = service.list_region_instance_group_manager_managed_instances(project, region, instance_group_manager)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupManagersRecreateRequest.new

response = service.recreate_region_instance_group_manager_instances(project, region, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# Number of instances that should exist in this instance group manager.
size = 0  # TODO: Update placeholder value.

response = service.resize_region_instance_group_manager(project, region, instance_group_manager, size)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# The name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupManagersSetTemplateRequest.new

response = service.set_region_instance_group_manager_instance_template(project, region, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the managed instance group.
instance_group_manager = 'my-instance-group-manager'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupManagersSetTargetPoolsRequest.new

response = service.set_region_instance_group_manager_target_pools(project, region, instance_group_manager, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the instance group resource to return.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

response = service.get_region_instance_group(project, region, instance_group)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_region_instance_groups(project, region, page_token: token)
end

items.each do |instance_group|
  # TODO: Change code below to process each `instance_group` resource:
  puts JSON.pretty_unparse(instance_group.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the regional instance group for which we want to list the instances.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupsListInstancesRequest.new

items = service.fetch_all do |token|
  service.list_region_instance_group_instances(project, region, instance_group, request_body, page_token: token)
end

items.each do |instance_with_named_ports|
  # TODO: Change code below to process each `instance_with_named_ports` resource:
  puts JSON.pretty_unparse(instance_with_named_ports.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# The name of the regional instance group where the named ports are updated.
instance_group = 'my-instance-group'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RegionInstanceGroupsSetNamedPortsRequest.new

response = service.set_region_instance_group_named_ports(project, region, instance_group, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Operations resource to delete.
operation = 'my-operation'  # TODO: Update placeholder value.

service.delete_region_operation(project, region, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Operations resource to return.
operation = 'my-operation'  # TODO: Update placeholder value.

response = service.get_region_operation(project, region, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_region_operations(project, region, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_unparse(operation.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region resource to return.
region = 'my-region'  # TODO: Update placeholder value.

response = service.get_region(project, region)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_regions(project, page_token: token)
end

items.each do |region|
  # TODO: Change code below to process each `region` resource:
  puts JSON.pretty_unparse(region.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.aggregated_router_list(project, page_token: token)
end

items.each do |name, routers_scoped_list|
  # TODO: Change code below to process each (name, routers_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(routers_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to delete.
router = 'my-router'  # TODO: Update placeholder value.

response = service.delete_router(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to return.
router = 'my-router'  # TODO: Update placeholder value.

response = service.get_router(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to query.
router = 'my-router'  # TODO: Update placeholder value.

response = service.get_router_router_status(project, region, router)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Router.new

response = service.insert_router(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_routers(project, region, page_token: token)
end

items.each do |router|
  # TODO: Change code below to process each `router` resource:
  puts JSON.pretty_unparse(router.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to update.
router = 'my-router'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::Router.new

response = service.patch_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to query.
router = 'my-router'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Router.new

response = service.preview_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Router resource to update.
router = 'my-router'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::Router.new

response = service.update_router(project, region, router, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Route resource to delete.
route = 'my-route'  # TODO: Update placeholder value.

response = service.delete_route(project, route)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Route resource to return.
route = 'my-route'  # TODO: Update placeholder value.

response = service.get_route(project, route)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Route.new

response = service.insert_route(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_routes(project, page_token: token)
end

items.each do |route|
  # TODO: Change code below to process each `route` resource:
  puts JSON.pretty_unparse(route.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Snapshot resource to delete.
snapshot = 'my-snapshot'  # TODO: Update placeholder value.

response = service.delete_snapshot(project, snapshot)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Snapshot resource to return.
snapshot = 'my-snapshot'  # TODO: Update placeholder value.

response = service.get_snapshot(project, snapshot)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_snapshots(project, page_token: token)
end

items.each do |snapshot|
  # TODO: Change code below to process each `snapshot` resource:
  puts JSON.pretty_unparse(snapshot.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the SslCertificate resource to delete.
ssl_certificate = 'my-ssl-certificate'  # TODO: Update placeholder value.

response = service.delete_ssl_certificate(project, ssl_certificate)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the SslCertificate resource to return.
ssl_certificate = 'my-ssl-certificate'  # TODO: Update placeholder value.

response = service.get_ssl_certificate(project, ssl_certificate)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::SslCertificate.new

response = service.insert_ssl_certificate(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_ssl_certificates(project, page_token: token)
end

items.each do |ssl_certificate|
  # TODO: Change code below to process each `ssl_certificate` resource:
  puts JSON.pretty_unparse(ssl_certificate.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.aggregated_subnetwork_list(project, page_token: token)
end

items.each do |name, subnetworks_scoped_list|
  # TODO: Change code below to process each (name, subnetworks_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(subnetworks_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Subnetwork resource to delete.
subnetwork = 'my-subnetwork'  # TODO: Update placeholder value.

response = service.delete_subnetwork(project, region, subnetwork)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Subnetwork resource to update.
subnetwork = 'my-subnetwork'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::SubnetworksExpandIpCidrRangeRequest.new

response = service.expand_subnetwork_ip_cidr_range(project, region, subnetwork, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the Subnetwork resource to return.
subnetwork = 'my-subnetwork'  # TODO: Update placeholder value.

response = service.get_subnetwork(project, region, subnetwork)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::Subnetwork.new

response = service.insert_subnetwork(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_subnetworks(project, region, page_token: token)
end

items.each do |subnetwork|
  # TODO: Change code below to process each `subnetwork` resource:
  puts JSON.pretty_unparse(subnetwork.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpProxy resource to delete.
target_http_proxy = 'my-target-http-proxy'  # TODO: Update placeholder value.

response = service.delete_target_http_proxy(project, target_http_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpProxy resource to return.
target_http_proxy = 'my-target-http-proxy'  # TODO: Update placeholder value.

response = service.get_target_http_proxy(project, target_http_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetHttpProxy.new

response = service.insert_target_http_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_http_proxies(project, page_token: token)
end

items.each do |target_http_proxy|
  # TODO: Change code below to process each `target_http_proxy` resource:
  puts JSON.pretty_unparse(target_http_proxy.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpProxy to set a URL map for.
target_http_proxy = 'my-target-http-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::UrlMapReference.new

response = service.set_target_http_proxy_url_map(project, target_http_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpsProxy resource to delete.
target_https_proxy = 'my-target-https-proxy'  # TODO: Update placeholder value.

response = service.delete_target_https_proxy(project, target_https_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpsProxy resource to return.
target_https_proxy = 'my-target-https-proxy'  # TODO: Update placeholder value.

response = service.get_target_https_proxy(project, target_https_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetHttpsProxy.new

response = service.insert_target_https_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_https_proxies(project, page_token: token)
end

items.each do |target_https_proxy|
  # TODO: Change code below to process each `target_https_proxy` resource:
  puts JSON.pretty_unparse(target_https_proxy.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
target_https_proxy = 'my-target-https-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetHttpsProxiesSetSslCertificatesRequest.new

response = service.set_target_https_proxy_ssl_certificates(project, target_https_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetHttpsProxy resource whose URL map is to be set.
target_https_proxy = 'my-target-https-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::UrlMapReference.new

response = service.set_target_https_proxy_url_map(project, target_https_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_target_instance(project, page_token: token)
end

items.each do |name, target_instances_scoped_list|
  # TODO: Change code below to process each (name, target_instances_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(target_instances_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone scoping this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the TargetInstance resource to delete.
target_instance = 'my-target-instance'  # TODO: Update placeholder value.

response = service.delete_target_instance(project, zone, target_instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone scoping this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the TargetInstance resource to return.
target_instance = 'my-target-instance'  # TODO: Update placeholder value.

response = service.get_target_instance(project, zone, target_instance)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone scoping this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetInstance.new

response = service.insert_target_instance(project, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone scoping this request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_instances(project, zone, page_token: token)
end

items.each do |target_instance|
  # TODO: Change code below to process each `target_instance` resource:
  puts JSON.pretty_unparse(target_instance.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the target pool to add a health check to.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::AddTargetPoolsHealthCheckRequest.new

response = service.add_target_pool_health_check(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to add instances to.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::AddTargetPoolsInstanceRequest.new

response = service.add_target_pool_instance(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_target_pools(project, page_token: token)
end

items.each do |name, target_pools_scoped_list|
  # TODO: Change code below to process each (name, target_pools_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(target_pools_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to delete.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

response = service.delete_target_pool(project, region, target_pool)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to return.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

response = service.get_target_pool(project, region, target_pool)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to which the queried instance belongs.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::InstanceReference.new

response = service.get_target_pool_health(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetPool.new

response = service.insert_target_pool(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_pools(project, region, page_token: token)
end

items.each do |target_pool|
  # TODO: Change code below to process each `target_pool` resource:
  puts JSON.pretty_unparse(target_pool.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the target pool to remove health checks from.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RemoveTargetPoolsHealthCheckRequest.new

response = service.remove_target_pool_health_check(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to remove instances from.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::RemoveTargetPoolsInstanceRequest.new

response = service.remove_target_pool_instance(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region scoping this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the TargetPool resource to set a backup pool for.
target_pool = 'my-target-pool'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetReference.new

response = service.set_target_pool_backup(project, region, target_pool, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetSslProxy resource to delete.
target_ssl_proxy = 'my-target-ssl-proxy'  # TODO: Update placeholder value.

response = service.delete_target_ssl_proxy(project, target_ssl_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetSslProxy resource to return.
target_ssl_proxy = 'my-target-ssl-proxy'  # TODO: Update placeholder value.

response = service.get_target_ssl_proxy(project, target_ssl_proxy)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetSslProxy.new

response = service.insert_target_ssl_proxy(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_ssl_proxies(project, page_token: token)
end

items.each do |target_ssl_proxy|
  # TODO: Change code below to process each `target_ssl_proxy` resource:
  puts JSON.pretty_unparse(target_ssl_proxy.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetSslProxy resource whose BackendService resource is to be set.
target_ssl_proxy = 'my-target-ssl-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetSslProxiesSetBackendServiceRequest.new

response = service.set_target_ssl_proxy_backend_service(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetSslProxy resource whose ProxyHeader is to be set.
target_ssl_proxy = 'my-target-ssl-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetSslProxiesSetProxyHeaderRequest.new

response = service.set_target_ssl_proxy_proxy_header(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
target_ssl_proxy = 'my-target-ssl-proxy'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetSslProxiesSetSslCertificatesRequest.new

response = service.set_target_ssl_proxy_ssl_certificates(project, target_ssl_proxy, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_target_vpn_gateways(project, page_token: token)
end

items.each do |name, target_vpn_gateways_scoped_list|
  # TODO: Change code below to process each (name, target_vpn_gateways_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(target_vpn_gateways_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the target VPN gateway to delete.
target_vpn_gateway = 'my-target-vpn-gateway'  # TODO: Update placeholder value.

response = service.delete_target_vpn_gateway(project, region, target_vpn_gateway)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the target VPN gateway to return.
target_vpn_gateway = 'my-target-vpn-gateway'  # TODO: Update placeholder value.

response = service.get_target_vpn_gateway(project, region, target_vpn_gateway)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::TargetVpnGateway.new

response = service.insert_target_vpn_gateway(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_target_vpn_gateways(project, region, page_token: token)
end

items.each do |target_vpn_gateway|
  # TODO: Change code below to process each `target_vpn_gateway` resource:
  puts JSON.pretty_unparse(target_vpn_gateway.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap resource to delete.
url_map = 'my-url-map'  # TODO: Update placeholder value.

response = service.delete_url_map(project, url_map)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap resource to return.
url_map = 'my-url-map'  # TODO: Update placeholder value.

response = service.get_url_map(project, url_map)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::UrlMap.new

response = service.insert_url_map(project, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap scoping this request.
url_map = 'my-url-map'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::CacheInvalidationRule.new

response = service.invalidate_url_map_cache(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_url_maps(project, page_token: token)
end

items.each do |url_map|
  # TODO: Change code below to process each `url_map` resource:
  puts JSON.pretty_unparse(url_map.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap resource to update.
url_map = 'my-url-map'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. Only assigned
# members will be changed:
request_body = Google::Apis::ComputeV1::UrlMap.new

response = service.patch_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap resource to update.
url_map = 'my-url-map'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::ComputeV1::UrlMap.new

response = service.update_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the UrlMap resource to be validated as.
url_map = 'my-url-map'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::ValidateUrlMapsRequest.new

response = service.validate_url_map(project, url_map, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_aggregated_vpn_tunnel(project, page_token: token)
end

items.each do |name, vpn_tunnels_scoped_list|
  # TODO: Change code below to process each (name, vpn_tunnels_scoped_list) pair:
  puts String(name << " => " << JSON.pretty_unparse(vpn_tunnels_scoped_list.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the VpnTunnel resource to delete.
vpn_tunnel = 'my-vpn-tunnel'  # TODO: Update placeholder value.

response = service.delete_vpn_tunnel(project, region, vpn_tunnel)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# Name of the VpnTunnel resource to return.
vpn_tunnel = 'my-vpn-tunnel'  # TODO: Update placeholder value.

response = service.get_vpn_tunnel(project, region, vpn_tunnel)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::ComputeV1::VpnTunnel.new

response = service.insert_vpn_tunnel(project, region, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the region for this request.
region = 'my-region'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_vpn_tunnels(project, region, page_token: token)
end

items.each do |vpn_tunnel|
  # TODO: Change code below to process each `vpn_tunnel` resource:
  puts JSON.pretty_unparse(vpn_tunnel.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the Operations resource to delete.
operation = 'my-operation'  # TODO: Update placeholder value.

service.delete_zone_operation(project, zone, operation)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# Name of the Operations resource to return.
operation = 'my-operation'  # TODO: Update placeholder value.

response = service.get_zone_operation(project, zone, operation)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for request.
zone = 'my-zone'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_zone_operations(project, zone, page_token: token)
end

items.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_unparse(operation.to_h)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone resource to return.
zone = 'my-zone'  # TODO: Update placeholder value.

response = service.get_zone(project, zone)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_unparse(response.to_h)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk and run
#    `gcloud beta auth application-default login`.
#    For more information, see
#    https://developers.google.com/identity/protocols/application-default-credentials
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`

require 'googleauth'
require 'google/apis/compute_v1'
require 'json'

service = Google::Apis::ComputeV1::ComputeService.new

service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

items = service.fetch_all do |token|
  service.list_zones(project, page_token: token)
end

items.each do |zone|
  # TODO: Change code below to process each `zone` resource:
  puts JSON.pretty_unparse(zone.to_h)
end
