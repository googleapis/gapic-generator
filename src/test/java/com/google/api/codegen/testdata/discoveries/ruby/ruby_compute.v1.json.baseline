
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_addresses' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_addresses(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_address' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the address resource to delete.
address = ''

# Perform the call
response = service.delete_address(project, region, address)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_address' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the address resource to return.
address = ''

# Perform the call
response = service.get_address(project, region, address)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_address' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

address_object = Google::Apis::ComputeV1::Address.new


# Perform the call
response = service.insert_address(project, region, address_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_addresses' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_addresses(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_autoscalers' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_autoscalers(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_autoscaler' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to delete.
autoscaler = ''

# Perform the call
response = service.delete_autoscaler(project, zone, autoscaler)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_autoscaler' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to return.
autoscaler = ''

# Perform the call
response = service.get_autoscaler(project, zone, autoscaler)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_autoscaler' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

autoscaler_object = Google::Apis::ComputeV1::Autoscaler.new


# Perform the call
response = service.insert_autoscaler(project, zone, autoscaler_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_autoscalers' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_autoscalers(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_autoscaler' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to update.
autoscaler = ''

autoscaler_object = Google::Apis::ComputeV1::Autoscaler.new


# Perform the call
response = service.patch_autoscaler(project, zone, autoscaler, autoscaler_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_autoscaler' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

autoscaler_object = Google::Apis::ComputeV1::Autoscaler.new


# Perform the call
response = service.update_autoscaler(project, zone, autoscaler_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_backend_service' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to delete.
backend_service = ''

# Perform the call
response = service.delete_backend_service(project, backend_service)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_backend_service' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to return.
backend_service = ''

# Perform the call
response = service.get_backend_service(project, backend_service)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_backend_service_health' method:


project = ''

# * Name of the BackendService resource to which the queried instance belongs.
backend_service = ''

resource_group_reference_object = Google::Apis::ComputeV1::ResourceGroupReference.new


# Perform the call
response = service.get_backend_service_health(project, backend_service, resource_group_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_backend_service' method:

# * Project ID for this request.
project = ''

backend_service_object = Google::Apis::ComputeV1::BackendService.new


# Perform the call
response = service.insert_backend_service(project, backend_service_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_backend_services' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_backend_services(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_backend_service' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to update.
backend_service = ''

backend_service_object = Google::Apis::ComputeV1::BackendService.new


# Perform the call
response = service.patch_backend_service(project, backend_service, backend_service_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_backend_service' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to update.
backend_service = ''

backend_service_object = Google::Apis::ComputeV1::BackendService.new


# Perform the call
response = service.update_backend_service(project, backend_service, backend_service_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_disk_types' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_disk_types(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_disk_type' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the disk type to return.
disk_type = ''

# Perform the call
response = service.get_disk_type(project, zone, disk_type)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_disk_types' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_disk_types(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_disk' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_disk(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_disk_snapshot' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to snapshot.
disk = ''

snapshot_object = Google::Apis::ComputeV1::Snapshot.new


# Perform the call
response = service.create_disk_snapshot(project, zone, disk, snapshot_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_disk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to delete.
disk = ''

# Perform the call
response = service.delete_disk(project, zone, disk)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_disk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to return.
disk = ''

# Perform the call
response = service.get_disk(project, zone, disk)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_disk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

disk_object = Google::Apis::ComputeV1::Disk.new


# Perform the call
response = service.insert_disk(project, zone, disk_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_disks' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_disks(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_firewall' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to delete.
firewall = ''

# Perform the call
response = service.delete_firewall(project, firewall)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_firewall' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to return.
firewall = ''

# Perform the call
response = service.get_firewall(project, firewall)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_firewall' method:

# * Project ID for this request.
project = ''

firewall_object = Google::Apis::ComputeV1::Firewall.new


# Perform the call
response = service.insert_firewall(project, firewall_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_firewalls' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_firewalls(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_firewall' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to update.
firewall = ''

firewall_object = Google::Apis::ComputeV1::Firewall.new


# Perform the call
response = service.patch_firewall(project, firewall, firewall_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_firewall' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to update.
firewall = ''

firewall_object = Google::Apis::ComputeV1::Firewall.new


# Perform the call
response = service.update_firewall(project, firewall, firewall_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_forwarding_rules' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_forwarding_rules(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_forwarding_rule' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource to delete.
forwarding_rule = ''

# Perform the call
response = service.delete_forwarding_rule(project, region, forwarding_rule)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_forwarding_rule' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource to return.
forwarding_rule = ''

# Perform the call
response = service.get_forwarding_rule(project, region, forwarding_rule)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_forwarding_rule' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

forwarding_rule_object = Google::Apis::ComputeV1::ForwardingRule.new


# Perform the call
response = service.insert_forwarding_rule(project, region, forwarding_rule_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_forwarding_rules' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_forwarding_rules(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_forwarding_rule_target' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = ''

target_reference_object = Google::Apis::ComputeV1::TargetReference.new


# Perform the call
response = service.set_forwarding_rule_target(project, region, forwarding_rule, target_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_global_address' method:

# * Project ID for this request.
project = ''

# * Name of the address resource to delete.
address = ''

# Perform the call
response = service.delete_global_address(project, address)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_global_address' method:

# * Project ID for this request.
project = ''

# * Name of the address resource to return.
address = ''

# Perform the call
response = service.get_global_address(project, address)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_global_address' method:

# * Project ID for this request.
project = ''

address_object = Google::Apis::ComputeV1::Address.new


# Perform the call
response = service.insert_global_address(project, address_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_global_addresses' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_global_addresses(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_global_forwarding_rule' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource to delete.
forwarding_rule = ''

# Perform the call
response = service.delete_global_forwarding_rule(project, forwarding_rule)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_global_forwarding_rule' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource to return.
forwarding_rule = ''

# Perform the call
response = service.get_global_forwarding_rule(project, forwarding_rule)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_global_forwarding_rule' method:

# * Project ID for this request.
project = ''

forwarding_rule_object = Google::Apis::ComputeV1::ForwardingRule.new


# Perform the call
response = service.insert_global_forwarding_rule(project, forwarding_rule_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_global_forwarding_rules' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_global_forwarding_rules(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_global_forwarding_rule_target' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource in which target is to be set.
forwarding_rule = ''

target_reference_object = Google::Apis::ComputeV1::TargetReference.new


# Perform the call
response = service.set_global_forwarding_rule_target(project, forwarding_rule, target_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_global_operation' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_global_operation(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_global_operation' method:

# * Project ID for this request.
project = ''

# * Name of the Operations resource to delete.
operation = ''

# Perform the call
service.delete_global_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_global_operation' method:

# * Project ID for this request.
project = ''

# * Name of the Operations resource to return.
operation = ''

# Perform the call
response = service.get_global_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_global_operations' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_global_operations(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_http_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to delete.
http_health_check = ''

# Perform the call
response = service.delete_http_health_check(project, http_health_check)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_http_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to return.
http_health_check = ''

# Perform the call
response = service.get_http_health_check(project, http_health_check)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_http_health_check' method:

# * Project ID for this request.
project = ''

http_health_check_object = Google::Apis::ComputeV1::HttpHealthCheck.new


# Perform the call
response = service.insert_http_health_check(project, http_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_http_health_checks' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_http_health_checks(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_http_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to update.
http_health_check = ''

http_health_check_object = Google::Apis::ComputeV1::HttpHealthCheck.new


# Perform the call
response = service.patch_http_health_check(project, http_health_check, http_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_http_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to update.
http_health_check = ''

http_health_check_object = Google::Apis::ComputeV1::HttpHealthCheck.new


# Perform the call
response = service.update_http_health_check(project, http_health_check, http_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_https_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to delete.
https_health_check = ''

# Perform the call
response = service.delete_https_health_check(project, https_health_check)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_https_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to return.
https_health_check = ''

# Perform the call
response = service.get_https_health_check(project, https_health_check)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_https_health_check' method:

# * Project ID for this request.
project = ''

https_health_check_object = Google::Apis::ComputeV1::HttpsHealthCheck.new


# Perform the call
response = service.insert_https_health_check(project, https_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_https_health_checks' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_https_health_checks(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_https_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to update.
https_health_check = ''

https_health_check_object = Google::Apis::ComputeV1::HttpsHealthCheck.new


# Perform the call
response = service.patch_https_health_check(project, https_health_check, https_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_https_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to update.
https_health_check = ''

https_health_check_object = Google::Apis::ComputeV1::HttpsHealthCheck.new


# Perform the call
response = service.update_https_health_check(project, https_health_check, https_health_check_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_image' method:

# * Project ID for this request.
project = ''

# * Name of the image resource to delete.
image = ''

# Perform the call
response = service.delete_image(project, image)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'deprecate_image' method:

# * Project ID for this request.
project = ''

# * Image name.
image = ''

deprecation_status_object = Google::Apis::ComputeV1::DeprecationStatus.new


# Perform the call
response = service.deprecate_image(project, image, deprecation_status_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_image' method:

# * Project ID for this request.
project = ''

# * Name of the image resource to return.
image = ''

# Perform the call
response = service.get_image(project, image)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_image' method:

# * Project ID for this request.
project = ''

image_object = Google::Apis::ComputeV1::Image.new


# Perform the call
response = service.insert_image(project, image_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_images' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_images(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'abandon_instance_group_manager_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

instance_group_managers_abandon_instances_request_object = Google::Apis::ComputeV1::InstanceGroupManagersAbandonInstancesRequest.new


# Perform the call
response = service.abandon_instance_group_manager_instances(project, zone, instance_group_manager, instance_group_managers_abandon_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_instance_group_managers' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_instance_group_managers(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance_group_manager' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group to delete.
instance_group_manager = ''

# Perform the call
response = service.delete_instance_group_manager(project, zone, instance_group_manager)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance_group_manager_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

instance_group_managers_delete_instances_request_object = Google::Apis::ComputeV1::InstanceGroupManagersDeleteInstancesRequest.new


# Perform the call
response = service.delete_instance_group_manager_instances(project, zone, instance_group_manager, instance_group_managers_delete_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance_group_manager' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

# Perform the call
response = service.get_instance_group_manager(project, zone, instance_group_manager)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_instance_group_manager' method:

# * Project ID for this request.
project = ''

# * The name of the zone where you want to create the managed instance group.
zone = ''

instance_group_manager_object = Google::Apis::ComputeV1::InstanceGroupManager.new


# Perform the call
response = service.insert_instance_group_manager(project, zone, instance_group_manager_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_group_managers' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instance_group_managers(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_group_manager_managed_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

# Perform the call
response = service.list_instance_group_manager_managed_instances(project, zone, instance_group_manager)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'recreate_instance_group_manager_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

instance_group_managers_recreate_instances_request_object = Google::Apis::ComputeV1::InstanceGroupManagersRecreateInstancesRequest.new


# Perform the call
response = service.recreate_instance_group_manager_instances(project, zone, instance_group_manager, instance_group_managers_recreate_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'resize_instance_group_manager' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

# * The number of running instances that the managed instance group should maintain at any given time.
#   The group automatically adds or removes instances to maintain the number of instances specified by
#   this parameter.
size = 0

# Perform the call
response = service.resize_instance_group_manager(project, zone, instance_group_manager, size)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_group_manager_instance_template' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

instance_group_managers_set_instance_template_request_object = Google::Apis::ComputeV1::InstanceGroupManagersSetInstanceTemplateRequest.new


# Perform the call
response = service.set_instance_group_manager_instance_template(project, zone, instance_group_manager, instance_group_managers_set_instance_template_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_group_manager_target_pools' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instance_group_manager = ''

instance_group_managers_set_target_pools_request_object = Google::Apis::ComputeV1::InstanceGroupManagersSetTargetPoolsRequest.new


# Perform the call
response = service.set_instance_group_manager_target_pools(project, zone, instance_group_manager, instance_group_managers_set_target_pools_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_instance_group_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where you are adding instances.
instance_group = ''

instance_groups_add_instances_request_object = Google::Apis::ComputeV1::InstanceGroupsAddInstancesRequest.new


# Perform the call
response = service.add_instance_group_instances(project, zone, instance_group, instance_groups_add_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_instance_groups' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_instance_groups(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance_group' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group to delete.
instance_group = ''

# Perform the call
response = service.delete_instance_group(project, zone, instance_group)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance_group' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group.
instance_group = ''

# Perform the call
response = service.get_instance_group(project, zone, instance_group)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_instance_group' method:

# * Project ID for this request.
project = ''

# * The name of the zone where you want to create the instance group.
zone = ''

instance_group_object = Google::Apis::ComputeV1::InstanceGroup.new


# Perform the call
response = service.insert_instance_group(project, zone, instance_group_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_groups' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instance_groups(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_group_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group from which you want to generate a list of included instances.
instance_group = ''

instance_groups_list_instances_request_object = Google::Apis::ComputeV1::InstanceGroupsListInstancesRequest.new


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instance_group_instances(project, zone, instance_group, instance_groups_list_instances_request_object, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'remove_instance_group_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where the specified instances will be removed.
instance_group = ''

instance_groups_remove_instances_request_object = Google::Apis::ComputeV1::InstanceGroupsRemoveInstancesRequest.new


# Perform the call
response = service.remove_instance_group_instances(project, zone, instance_group, instance_groups_remove_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_group_named_ports' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where the named ports are updated.
instance_group = ''

instance_groups_set_named_ports_request_object = Google::Apis::ComputeV1::InstanceGroupsSetNamedPortsRequest.new


# Perform the call
response = service.set_instance_group_named_ports(project, zone, instance_group, instance_groups_set_named_ports_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance_template' method:

# * Project ID for this request.
project = ''

# * The name of the instance template to delete.
instance_template = ''

# Perform the call
response = service.delete_instance_template(project, instance_template)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance_template' method:

# * Project ID for this request.
project = ''

# * The name of the instance template.
instance_template = ''

# Perform the call
response = service.get_instance_template(project, instance_template)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_instance_template' method:

# * Project ID for this request.
project = ''

instance_template_object = Google::Apis::ComputeV1::InstanceTemplate.new


# Perform the call
response = service.insert_instance_template(project, instance_template_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_templates' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instance_templates(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_instance_access_config' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

# * The name of the network interface to add to this instance.
network_interface = ''

access_config_object = Google::Apis::ComputeV1::AccessConfig.new


# Perform the call
response = service.add_instance_access_config(project, zone, instance, network_interface, access_config_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_instances' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_instances(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'attach_disk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

attached_disk_object = Google::Apis::ComputeV1::AttachedDisk.new


# Perform the call
response = service.attach_disk(project, zone, instance, attached_disk_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to delete.
instance = ''

# Perform the call
response = service.delete_instance(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance_access_config' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

# * The name of the access config to delete.
access_config = ''

# * The name of the network interface.
network_interface = ''

# Perform the call
response = service.delete_instance_access_config(project, zone, instance, access_config, network_interface)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'detach_disk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Instance name.
instance = ''

# * Disk device name to detach.
device_name = ''

# Perform the call
response = service.detach_disk(project, zone, instance, device_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to return.
instance = ''

# Perform the call
response = service.get_instance(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance_serial_port_output' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

# Perform the call
response = service.get_instance_serial_port_output(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

instance_object = Google::Apis::ComputeV1::Instance.new


# Perform the call
response = service.insert_instance(project, zone, instance_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instances' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instances(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'reset_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

# Perform the call
response = service.reset_instance(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_disk_auto_delete' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name.
instance = ''

# * Whether to auto-delete the disk when the instance is deleted.
auto_delete = false

# * The device name of the disk to modify.
device_name = ''

# Perform the call
response = service.set_disk_auto_delete(project, zone, instance, auto_delete, device_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_machine_type' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

instances_set_machine_type_request_object = Google::Apis::ComputeV1::InstancesSetMachineTypeRequest.new


# Perform the call
response = service.set_instance_machine_type(project, zone, instance, instances_set_machine_type_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_metadata' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

metadata_object = Google::Apis::ComputeV1::Metadata.new


# Perform the call
response = service.set_instance_metadata(project, zone, instance, metadata_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_scheduling' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Instance name.
instance = ''

scheduling_object = Google::Apis::ComputeV1::Scheduling.new


# Perform the call
response = service.set_instance_scheduling(project, zone, instance, scheduling_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_instance_tags' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

tags_object = Google::Apis::ComputeV1::Tags.new


# Perform the call
response = service.set_instance_tags(project, zone, instance, tags_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'start_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to start.
instance = ''

# Perform the call
response = service.start_instance(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'stop_instance' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to stop.
instance = ''

# Perform the call
response = service.stop_instance(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_license' method:

# * Project ID for this request.
project = ''

# * Name of the License resource to return.
license = ''

# Perform the call
response = service.get_license(project, license)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_machine_types' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_machine_types(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_machine_type' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the machine type to return.
machine_type = ''

# Perform the call
response = service.get_machine_type(project, zone, machine_type)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_machine_types' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_machine_types(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_network' method:

# * Project ID for this request.
project = ''

# * Name of the network to delete.
network = ''

# Perform the call
response = service.delete_network(project, network)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_network' method:

# * Project ID for this request.
project = ''

# * Name of the network to return.
network = ''

# Perform the call
response = service.get_network(project, network)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_network' method:

# * Project ID for this request.
project = ''

network_object = Google::Apis::ComputeV1::Network.new


# Perform the call
response = service.insert_network(project, network_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_networks' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_networks(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project' method:

# * Project ID for this request.
project = ''

# Perform the call
response = service.get_project(project)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'move_disk' method:

# * Project ID for this request.
project = ''

move_disk_request_object = Google::Apis::ComputeV1::MoveDiskRequest.new


# Perform the call
response = service.move_disk(project, move_disk_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'move_instance' method:

# * Project ID for this request.
project = ''

move_instance_request_object = Google::Apis::ComputeV1::MoveInstanceRequest.new


# Perform the call
response = service.move_instance(project, move_instance_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_common_instance_metadata' method:

# * Project ID for this request.
project = ''

metadata_object = Google::Apis::ComputeV1::Metadata.new


# Perform the call
response = service.set_common_instance_metadata(project, metadata_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_usage_export_bucket' method:

# * Project ID for this request.
project = ''

usage_export_location_object = Google::Apis::ComputeV1::UsageExportLocation.new


# Perform the call
response = service.set_usage_export_bucket(project, usage_export_location_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_region_operation' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the Operations resource to delete.
operation = ''

# Perform the call
service.delete_region_operation(project, region, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_region_operation' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the Operations resource to return.
operation = ''

# Perform the call
response = service.get_region_operation(project, region, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_region_operations' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_region_operations(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_region' method:

# * Project ID for this request.
project = ''

# * Name of the region resource to return.
region = ''

# Perform the call
response = service.get_region(project, region)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_regions' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_regions(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_route' method:

# * Project ID for this request.
project = ''

# * Name of the Route resource to delete.
route = ''

# Perform the call
response = service.delete_route(project, route)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_route' method:

# * Project ID for this request.
project = ''

# * Name of the Route resource to return.
route = ''

# Perform the call
response = service.get_route(project, route)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_route' method:

# * Project ID for this request.
project = ''

route_object = Google::Apis::ComputeV1::Route.new


# Perform the call
response = service.insert_route(project, route_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_routes' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_routes(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_snapshot' method:

# * Project ID for this request.
project = ''

# * Name of the Snapshot resource to delete.
snapshot = ''

# Perform the call
response = service.delete_snapshot(project, snapshot)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_snapshot' method:

# * Project ID for this request.
project = ''

# * Name of the Snapshot resource to return.
snapshot = ''

# Perform the call
response = service.get_snapshot(project, snapshot)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_snapshots' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_snapshots(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_ssl_certificate' method:

# * Project ID for this request.
project = ''

# * Name of the SslCertificate resource to delete.
ssl_certificate = ''

# Perform the call
response = service.delete_ssl_certificate(project, ssl_certificate)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_ssl_certificate' method:

# * Project ID for this request.
project = ''

# * Name of the SslCertificate resource to return.
ssl_certificate = ''

# Perform the call
response = service.get_ssl_certificate(project, ssl_certificate)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_ssl_certificate' method:

# * Project ID for this request.
project = ''

ssl_certificate_object = Google::Apis::ComputeV1::SslCertificate.new


# Perform the call
response = service.insert_ssl_certificate(project, ssl_certificate_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_ssl_certificates' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_ssl_certificates(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'aggregated_subnetwork_list' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.aggregated_subnetwork_list(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_subnetwork' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the Subnetwork resource to delete.
subnetwork = ''

# Perform the call
response = service.delete_subnetwork(project, region, subnetwork)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_subnetwork' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the Subnetwork resource to return.
subnetwork = ''

# Perform the call
response = service.get_subnetwork(project, region, subnetwork)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_subnetwork' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

subnetwork_object = Google::Apis::ComputeV1::Subnetwork.new


# Perform the call
response = service.insert_subnetwork(project, region, subnetwork_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_subnetworks' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_subnetworks(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_target_http_proxy' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy resource to delete.
target_http_proxy = ''

# Perform the call
response = service.delete_target_http_proxy(project, target_http_proxy)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_http_proxy' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy resource to return.
target_http_proxy = ''

# Perform the call
response = service.get_target_http_proxy(project, target_http_proxy)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_target_http_proxy' method:

# * Project ID for this request.
project = ''

target_http_proxy_object = Google::Apis::ComputeV1::TargetHttpProxy.new


# Perform the call
response = service.insert_target_http_proxy(project, target_http_proxy_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_target_http_proxies' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_target_http_proxies(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_target_http_proxy_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy to set a URL map for.
target_http_proxy = ''

url_map_reference_object = Google::Apis::ComputeV1::UrlMapReference.new


# Perform the call
response = service.set_target_http_proxy_url_map(project, target_http_proxy, url_map_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_target_https_proxy' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to delete.
target_https_proxy = ''

# Perform the call
response = service.delete_target_https_proxy(project, target_https_proxy)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_https_proxy' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to return.
target_https_proxy = ''

# Perform the call
response = service.get_target_https_proxy(project, target_https_proxy)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_target_https_proxy' method:

# * Project ID for this request.
project = ''

target_https_proxy_object = Google::Apis::ComputeV1::TargetHttpsProxy.new


# Perform the call
response = service.insert_target_https_proxy(project, target_https_proxy_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_target_https_proxies' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_target_https_proxies(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_target_https_proxy_ssl_certificates' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
target_https_proxy = ''

target_https_proxies_set_ssl_certificates_request_object = Google::Apis::ComputeV1::TargetHttpsProxiesSetSslCertificatesRequest.new


# Perform the call
response = service.set_target_https_proxy_ssl_certificates(project, target_https_proxy, target_https_proxies_set_ssl_certificates_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_target_https_proxy_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource whose URL map is to be set.
target_https_proxy = ''

url_map_reference_object = Google::Apis::ComputeV1::UrlMapReference.new


# Perform the call
response = service.set_target_https_proxy_url_map(project, target_https_proxy, url_map_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_target_instance' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_target_instance(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_target_instance' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

# * Name of the TargetInstance resource to delete.
target_instance = ''

# Perform the call
response = service.delete_target_instance(project, zone, target_instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_instance' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

# * Name of the TargetInstance resource to return.
target_instance = ''

# Perform the call
response = service.get_target_instance(project, zone, target_instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_target_instance' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

target_instance_object = Google::Apis::ComputeV1::TargetInstance.new


# Perform the call
response = service.insert_target_instance(project, zone, target_instance_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_target_instances' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_target_instances(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_target_pool_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the target pool to add a health check to.
target_pool = ''

add_target_pools_health_check_request_object = Google::Apis::ComputeV1::AddTargetPoolsHealthCheckRequest.new


# Perform the call
response = service.add_target_pool_health_check(project, region, target_pool, add_target_pools_health_check_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_target_pool_instance' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to add instances to.
target_pool = ''

add_target_pools_instance_request_object = Google::Apis::ComputeV1::AddTargetPoolsInstanceRequest.new


# Perform the call
response = service.add_target_pool_instance(project, region, target_pool, add_target_pools_instance_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_target_pools' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_target_pools(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_target_pool' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to delete.
target_pool = ''

# Perform the call
response = service.delete_target_pool(project, region, target_pool)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_pool' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to return.
target_pool = ''

# Perform the call
response = service.get_target_pool(project, region, target_pool)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_pool_health' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to which the queried instance belongs.
target_pool = ''

instance_reference_object = Google::Apis::ComputeV1::InstanceReference.new


# Perform the call
response = service.get_target_pool_health(project, region, target_pool, instance_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_target_pool' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

target_pool_object = Google::Apis::ComputeV1::TargetPool.new


# Perform the call
response = service.insert_target_pool(project, region, target_pool_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_target_pools' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_target_pools(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'remove_target_pool_health_check' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target pool to remove health checks from.
target_pool = ''

remove_target_pools_health_check_request_object = Google::Apis::ComputeV1::RemoveTargetPoolsHealthCheckRequest.new


# Perform the call
response = service.remove_target_pool_health_check(project, region, target_pool, remove_target_pools_health_check_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'remove_target_pool_instance' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to remove instances from.
target_pool = ''

remove_target_pools_instance_request_object = Google::Apis::ComputeV1::RemoveTargetPoolsInstanceRequest.new


# Perform the call
response = service.remove_target_pool_instance(project, region, target_pool, remove_target_pools_instance_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_target_pool_backup' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to set a backup pool for.
target_pool = ''

target_reference_object = Google::Apis::ComputeV1::TargetReference.new


# Perform the call
response = service.set_target_pool_backup(project, region, target_pool, target_reference_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_target_vpn_gateways' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_target_vpn_gateways(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_target_vpn_gateway' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target VPN gateway to delete.
target_vpn_gateway = ''

# Perform the call
response = service.delete_target_vpn_gateway(project, region, target_vpn_gateway)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_target_vpn_gateway' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target VPN gateway to return.
target_vpn_gateway = ''

# Perform the call
response = service.get_target_vpn_gateway(project, region, target_vpn_gateway)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_target_vpn_gateway' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

target_vpn_gateway_object = Google::Apis::ComputeV1::TargetVpnGateway.new


# Perform the call
response = service.insert_target_vpn_gateway(project, region, target_vpn_gateway_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_target_vpn_gateways' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_target_vpn_gateways(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to delete.
url_map = ''

# Perform the call
response = service.delete_url_map(project, url_map)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to return.
url_map = ''

# Perform the call
response = service.get_url_map(project, url_map)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_url_map' method:

# * Project ID for this request.
project = ''

url_map_object = Google::Apis::ComputeV1::UrlMap.new


# Perform the call
response = service.insert_url_map(project, url_map_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_url_maps' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_url_maps(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to update.
url_map = ''

url_map_object = Google::Apis::ComputeV1::UrlMap.new


# Perform the call
response = service.patch_url_map(project, url_map, url_map_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to update.
url_map = ''

url_map_object = Google::Apis::ComputeV1::UrlMap.new


# Perform the call
response = service.update_url_map(project, url_map, url_map_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'validate_url_map' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to be validated as.
url_map = ''

validate_url_maps_request_object = Google::Apis::ComputeV1::ValidateUrlMapsRequest.new


# Perform the call
response = service.validate_url_map(project, url_map, validate_url_maps_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_aggregated_vpn_tunnel' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_aggregated_vpn_tunnel(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_vpn_tunnel' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the VpnTunnel resource to delete.
vpn_tunnel = ''

# Perform the call
response = service.delete_vpn_tunnel(project, region, vpn_tunnel)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_vpn_tunnel' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the VpnTunnel resource to return.
vpn_tunnel = ''

# Perform the call
response = service.get_vpn_tunnel(project, region, vpn_tunnel)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_vpn_tunnel' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

vpn_tunnel_object = Google::Apis::ComputeV1::VpnTunnel.new


# Perform the call
response = service.insert_vpn_tunnel(project, region, vpn_tunnel_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_vpn_tunnels' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_vpn_tunnels(project, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_zone_operation' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the Operations resource to delete.
operation = ''

# Perform the call
service.delete_zone_operation(project, zone, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_zone_operation' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the Operations resource to return.
operation = ''

# Perform the call
response = service.get_zone_operation(project, zone, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_zone_operations' method:

# * Project ID for this request.
project = ''

# * Name of the zone for request.
zone = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_zone_operations(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_zone' method:

# * Project ID for this request.
project = ''

# * Name of the zone resource to return.
zone = ''

# Perform the call
response = service.get_zone(project, zone)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Compute Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/compute
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/compute_v1'

service = Google::Apis::ComputeV1::ComputeService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_zones' method:

# * Project ID for this request.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_zones(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
