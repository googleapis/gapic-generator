
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Application;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // TODO: Assign values to desired fields of `requestBody`:
    Application requestBody = new Application();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Create request = appengineService.apps().create(requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Application;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the application to get. Example: `apps/myapp`.
    String appsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Get request = appengineService.apps().get(appsId);

    Application response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Location;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Resource name for the location.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String locationsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Locations.Get request = appengineService.apps().locations().get(appsId, locationsId);

    Location response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.ListLocationsResponse;
import com.google.api.services.appengine.model.Location;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. The resource that owns the locations collection, if applicable.
    String appsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Locations.List request = appengineService.apps().locations().list(appsId);

    ListLocationsResponse response;
    do {
      response = request.execute();
      if (response.getLocations() == null) {
        continue;
      }
      for (Location location : response.getLocations()) {
        // TODO: Change code below to process each `location` resource:
        System.out.println(location);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. The name of the operation resource.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String operationsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Operations.Get request = appengineService.apps().operations().get(appsId, operationsId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.ListOperationsResponse;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. The name of the operation collection.
    String appsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Operations.List request = appengineService.apps().operations().list(appsId);

    ListOperationsResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation operation : response.getOperations()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(operation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Application;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the application to update. Example: `apps/myapp`.
    String appsId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Application requestBody = new Application();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Patch request = appengineService.apps().patch(appsId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Delete request = appengineService.apps().services().delete(appsId, servicesId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Get request = appengineService.apps().services().get(appsId, servicesId);

    Service response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.ListServicesResponse;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp`.
    String appsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.List request = appengineService.apps().services().list(appsId);

    ListServicesResponse response;
    do {
      response = request.execute();
      if (response.getServices() == null) {
        continue;
      }
      for (Service service : response.getServices()) {
        // TODO: Change code below to process each `service` resource:
        System.out.println(service);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Service requestBody = new Service();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Patch request = appengineService.apps().services().patch(appsId, servicesId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Version requestBody = new Version();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Create request = appengineService.apps().services().versions().create(appsId, servicesId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Delete request = appengineService.apps().services().versions().delete(appsId, servicesId, versionsId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Get request = appengineService.apps().services().versions().get(appsId, servicesId, versionsId);

    Version response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.DebugInstanceRequest;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example:
    // `apps/myapp/services/default/versions/v1/instances/instance-1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String instancesId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DebugInstanceRequest requestBody = new DebugInstanceRequest();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Instances.Debug request = appengineService.apps().services().versions().instances().debug(appsId, servicesId, versionsId, instancesId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1/instances/instance-1".
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String instancesId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Instances.Delete request = appengineService.apps().services().versions().instances().delete(appsId, servicesId, versionsId, instancesId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Instance;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example:
    // `apps/myapp/services/default/versions/v1/instances/instance-1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String instancesId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Instances.Get request = appengineService.apps().services().versions().instances().get(appsId, servicesId, versionsId, instancesId);

    Instance response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Instance;
import com.google.api.services.appengine.model.ListInstancesResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Instances.List request = appengineService.apps().services().versions().instances().list(appsId, servicesId, versionsId);

    ListInstancesResponse response;
    do {
      response = request.execute();
      if (response.getInstances() == null) {
        continue;
      }
      for (Instance instance : response.getInstances()) {
        // TODO: Change code below to process each `instance` resource:
        System.out.println(instance);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.ListVersionsResponse;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.List request = appengineService.apps().services().versions().list(appsId, servicesId);

    ListVersionsResponse response;
    do {
      response = request.execute();
      if (response.getVersions() == null) {
        continue;
      }
      for (Version version : response.getVersions()) {
        // TODO: Change code below to process each `version` resource:
        System.out.println(version);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default/versions/1`.
    String appsId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String servicesId = "";  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    String versionsId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Version requestBody = new Version();

    Appengine appengineService = createAppengineService();
    Appengine.Apps.Services.Versions.Patch request = appengineService.apps().services().versions().patch(appsId, servicesId, versionsId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Appengine createAppengineService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-AppengineSample/0.1")
        .build();
  }
}
