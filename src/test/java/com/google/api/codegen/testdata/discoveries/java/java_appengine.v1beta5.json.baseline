
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Get;
import com.google.api.services.appengine.model.Application;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the application to get. For example: "apps/myapp".
    String appsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Get request = service.apps().get(appsId);
    Application response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Operations.Get;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. The name of the operation resource.
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String operationsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Get request = service.apps().operations().get(appsId, operationsId);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Operations.List;
import com.google.api.services.appengine.model.ListOperationsResponse;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. The name of the operation collection.
    String appsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    List request = service.apps().operations().list(appsId);
    ListOperationsResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation item : response.getOperations()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Delete;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Delete request = service.apps().services().delete(appsId, servicesId);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Get;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Get request = service.apps().services().get(appsId, servicesId);
    Service response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.List;
import com.google.api.services.appengine.model.ListServicesResponse;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp".
    String appsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    List request = service.apps().services().list(appsId);
    ListServicesResponse response;
    do {
      response = request.execute();
      if (response.getServices() == null) {
        continue;
      }
      for (Service item : response.getServices()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Patch;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Service;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Service requestBody = new Service();

    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Patch request = service.apps().services().patch(appsId, servicesId, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.Create;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Version requestBody = new Version();

    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Create request = service.apps().services().versions().create(appsId, servicesId, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.Delete;
import com.google.api.services.appengine.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String versionsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Delete request = service.apps().services().versions().delete(appsId, servicesId, versionsId);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.Get;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String versionsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Get request = service.apps().services().versions().get(appsId, servicesId, versionsId);
    Version response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.Instances.List;
import com.google.api.services.appengine.model.Instance;
import com.google.api.services.appengine.model.ListInstancesResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String versionsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    List request = service.apps().services().versions().instances().list(appsId, servicesId, versionsId);
    ListInstancesResponse response;
    do {
      response = request.execute();
      if (response.getInstances() == null) {
        continue;
      }
      for (Instance item : response.getInstances()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.List;
import com.google.api.services.appengine.model.ListVersionsResponse;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    Appengine service = createService();
    List request = service.apps().services().versions().list(appsId, servicesId);
    ListVersionsResponse response;
    do {
      response = request.execute();
      if (response.getVersions() == null) {
        continue;
      }
      for (Version item : response.getVersions()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/appengine/v1beta5/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.appengine.Appengine;
import com.google.api.services.appengine.Appengine.Apps.Services.Versions.Patch;
import com.google.api.services.appengine.model.Operation;
import com.google.api.services.appengine.model.Version;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class AppengineExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Version requestBody = new Version();

    // Part of `name`. Name of the resource to update. For example:
    // "apps/myapp/services/default/versions/1".
    String appsId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String servicesId = ""; // TODO: Update field(s).

    // Part of `name`. See documentation of `appsId`.
    String versionsId = ""; // TODO: Update field(s).

    Appengine service = createService();
    Patch request = service.apps().services().versions().patch(appsId, servicesId, versionsId, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Appengine createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Appengine.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AppengineExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
