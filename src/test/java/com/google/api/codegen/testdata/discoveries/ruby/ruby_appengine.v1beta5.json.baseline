
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_app' method:
# Part of `name`. Name of the application to get. For example: "apps/myapp".
apps_id = ''


# Perform the call
response = service.get_app(apps_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_app_operation' method:
# Part of `name`. The name of the operation resource.
apps_id = ''

# Part of `name`. See documentation of `appsId`.
operations_id = ''


# Perform the call
response = service.get_app_operation(apps_id, operations_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_app_operations' method:
# Part of `name`. The name of the operation collection.
apps_id = ''


# Perform the call
result_list = service.fetch_all(items: :operations) { |token|
  service.list_app_operations(apps_id, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_app_service' method:
# Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
response = service.delete_app_service(apps_id, services_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_app_service' method:
# Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
response = service.get_app_service(apps_id, services_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_app_services' method:
# Part of `name`. Name of the resource requested. For example: "apps/myapp".
apps_id = ''


# Perform the call
result_list = service.fetch_all(items: :services) { |token|
  service.list_app_services(apps_id, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_app_service' method:
# Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''
service_object = Google::Apis::AppengineV1beta5::Service.new


# Perform the call
response = service.patch_app_service(apps_id, services_id, service_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_app_service_version' method:
# Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''
version_object = Google::Apis::AppengineV1beta5::Version.new


# Perform the call
response = service.create_app_service_version(apps_id, services_id, version_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_app_service_version' method:
# Part of `name`. Name of the resource requested. For example:
# "apps/myapp/services/default/versions/v1".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''

# Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
response = service.delete_app_service_version(apps_id, services_id, versions_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_app_service_version' method:
# Part of `name`. Name of the resource requested. For example:
# "apps/myapp/services/default/versions/v1".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''

# Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
response = service.get_app_service_version(apps_id, services_id, versions_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_app_service_version_instances' method:
# Part of `name`. Name of the resource requested. For example:
# "apps/myapp/services/default/versions/v1".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''

# Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
result_list = service.fetch_all(items: :instances) { |token|
  service.list_app_service_version_instances(apps_id, services_id, versions_id, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_app_service_versions' method:
# Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
result_list = service.fetch_all(items: :versions) { |token|
  service.list_app_service_versions(apps_id, services_id, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/appengine_v1beta5'

service = Google::Apis::AppengineV1beta5::AppengineService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_app_service_version' method:
# Part of `name`. Name of the resource to update. For example:
# "apps/myapp/services/default/versions/1".
apps_id = ''

# Part of `name`. See documentation of `appsId`.
services_id = ''

# Part of `name`. See documentation of `appsId`.
versions_id = ''
version_object = Google::Apis::AppengineV1beta5::Version.new


# Perform the call
response = service.patch_app_service_version(apps_id, services_id, versions_id, version_object)
