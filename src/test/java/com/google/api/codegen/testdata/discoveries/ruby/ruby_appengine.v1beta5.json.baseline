
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_app` method:

# * Part of `name`. Name of the application to get. For example: "apps/myapp".
apps_id = ''


# Perform the call
response = service.get_app(apps_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_app_operation` method:

# * Part of `name`. The name of the operation resource.
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
operations_id = ''


# Perform the call
response = service.get_app_operation(apps_id, operations_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_app_operations` method:

# * Part of `name`. The name of the operation collection.
apps_id = ''


# Perform the call
operations = service.fetch_all(items: :operations) do |token|
  service.list_app_operations(apps_id, page_token: token)
end

operations.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_app_service` method:

# * Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
response = service.delete_app_service(apps_id, services_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_app_service` method:

# * Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
response = service.get_app_service(apps_id, services_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_app_services` method:

# * Part of `name`. Name of the resource requested. For example: "apps/myapp".
apps_id = ''


# Perform the call
services = service.fetch_all(items: :services) do |token|
  service.list_app_services(apps_id, page_token: token)
end

services.each do |service|
  # TODO: Change code below to process each `service` resource:
  puts JSON.pretty_generate(service)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_app_service` method:

# * Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''


service_body = Google::Apis::AppengineV1beta5::Service.new
# TODO: Assign values to desired members of the `service_body` object to be changed.


# Perform the call
response = service.patch_app_service(apps_id, services_id, service_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `create_app_service_version` method:

# * Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''


version_body = Google::Apis::AppengineV1beta5::Version.new
# TODO: Assign values to desired members of the `version_body` object.


# Perform the call
response = service.create_app_service_version(apps_id, services_id, version_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_app_service_version` method:

# * Part of `name`. Name of the resource requested. For example:
#   "apps/myapp/services/default/versions/v1".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''

# * Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
response = service.delete_app_service_version(apps_id, services_id, versions_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_app_service_version` method:

# * Part of `name`. Name of the resource requested. For example:
#   "apps/myapp/services/default/versions/v1".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''

# * Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
response = service.get_app_service_version(apps_id, services_id, versions_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_app_service_version_instances` method:

# * Part of `name`. Name of the resource requested. For example:
#   "apps/myapp/services/default/versions/v1".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''

# * Part of `name`. See documentation of `appsId`.
versions_id = ''


# Perform the call
instances = service.fetch_all(items: :instances) do |token|
  service.list_app_service_version_instances(apps_id, services_id, versions_id, page_token: token)
end

instances.each do |instance|
  # TODO: Change code below to process each `instance` resource:
  puts JSON.pretty_generate(instance)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_app_service_versions` method:

# * Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''


# Perform the call
versions = service.fetch_all(items: :versions) do |token|
  service.list_app_service_versions(apps_id, services_id, page_token: token)
end

versions.each do |version|
  # TODO: Change code below to process each `version` resource:
  puts JSON.pretty_generate(version)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google App Engine Admin API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/appengine
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/appengine_v1beta5'
require 'json'

# Construct the appengine service object (version v1beta5) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::AppengineV1beta5::AppengineService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `patch_app_service_version` method:

# * Part of `name`. Name of the resource to update. For example:
#   "apps/myapp/services/default/versions/1".
apps_id = ''

# * Part of `name`. See documentation of `appsId`.
services_id = ''

# * Part of `name`. See documentation of `appsId`.
versions_id = ''


version_body = Google::Apis::AppengineV1beta5::Version.new
# TODO: Assign values to desired members of the `version_body` object to be changed.


# Perform the call
response = service.patch_app_service_version(apps_id, services_id, versions_id, version_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
