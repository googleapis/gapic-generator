
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)



request = service.v1().getGoogleServiceAccount()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The ID of the Google Developers Console project that the Google service account is associated with. Required.
projectId = ''

request = service.googleServiceAccounts().get(projectId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)



transfer_job = {
# TODO: Add desired entries of the 'transfer_job' dict
}

request = service.transferJobs().create(transfer_job)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The job to get. Required.
jobName = ''

request = service.transferJobs().get(jobName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)



transferJobs = service.transferJobs()
request = transferJobs.list()
while request is not None:
    response = request.execute()

    for transfer_job in response['transferJobs']:
        # TODO: Add code here to process each 'transfer_job' resource

    request = transferJobs.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The name of job to update. Required.
jobName = ''

update_transfer_job_request = {
# TODO: Add desired entries of the 'update_transfer_job_request' dict to be changed
}

request = service.transferJobs().patch(jobName, update_transfer_job_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:
# * The name of the operation resource to be cancelled.
name = ''

request = service.transferOperations().cancel(name)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * The name of the operation resource to be deleted.
name = ''

request = service.transferOperations().delete(name)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The name of the operation resource.
name = ''

request = service.transferOperations().get(name)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The value `transferOperations`.
name = ''

transferOperations = service.transferOperations()
request = transferOperations.list(name)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Add code here to process each 'operation' resource

    request = transferOperations.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'pause' method:
# * The name of the transfer operation. Required.
name = ''

pause_transfer_operation_request = {
# TODO: Add desired entries of the 'pause_transfer_operation_request' dict
}

request = service.transferOperations().pause(name, pause_transfer_operation_request)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Storage Transfer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storagetransfer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storagetransfer service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storagetransfer', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'resume' method:
# * The name of the transfer operation. Required.
name = ''

resume_transfer_operation_request = {
# TODO: Add desired entries of the 'resume_transfer_operation_request' dict
}

request = service.transferOperations().resume(name, resume_transfer_operation_request)
request.execute()
