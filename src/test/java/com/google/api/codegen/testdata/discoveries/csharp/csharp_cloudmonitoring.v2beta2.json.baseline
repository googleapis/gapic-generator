
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Create` method:

            // The project id. The value can be the numeric project ID or string-based project name.
            string project = "{MY-PROJECT}";


            Data.MetricDescriptor requestBody = new Data.MetricDescriptor();
            // TODO: Assign values to desired properties of the `requestBody` object.


            MetricDescriptorsResource.CreateRequest request = cloudMonitoringService.MetricDescriptors.Create(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.MetricDescriptor response = request.Execute();
            // Data.MetricDescriptor response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The project ID to which the metric belongs.
            string project = "{MY-PROJECT}";

            // Name of the metric.
            string metric = "{MY-METRIC}";


            MetricDescriptorsResource.DeleteRequest request = cloudMonitoringService.MetricDescriptors.Delete(project, metric);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DeleteMetricDescriptorResponse response = request.Execute();
            // Data.DeleteMetricDescriptorResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The project id. The value can be the numeric project ID or string-based project name.
            string project = "{MY-PROJECT}";


            Data.ListMetricDescriptorsRequest requestBody = new Data.ListMetricDescriptorsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            MetricDescriptorsResource.ListRequest request = cloudMonitoringService.MetricDescriptors.List(requestBody, project);

            Data.ListMetricDescriptorsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.MetricDescriptor metricDescriptor in response.Metrics)
                {
                    // TODO: Change code below to process each `metricDescriptor` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(metricDescriptor));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The project ID to which this time series belongs. The value can be the numeric project ID or
            // string-based project name.
            string project = "{MY-PROJECT}";

            // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
            // compute.googleapis.com/instance/disk/read_ops_count.
            string metric = "{MY-METRIC}";

            // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
            string youngest = "{MY-YOUNGEST}";


            Data.ListTimeseriesRequest requestBody = new Data.ListTimeseriesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TimeseriesResource.ListRequest request = cloudMonitoringService.Timeseries.List(requestBody, project, metric, youngest);

            Data.ListTimeseriesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Timeseries == null)
                {
                    continue;
                }
                foreach (Data.Timeseries timeseries in response.Timeseries)
                {
                    // TODO: Change code below to process each `timeseries` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(timeseries));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Write` method:

            // The project ID. The value can be the numeric project ID or string-based project name.
            string project = "{MY-PROJECT}";


            Data.WriteTimeseriesRequest requestBody = new Data.WriteTimeseriesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TimeseriesResource.WriteRequest request = cloudMonitoringService.Timeseries.Write(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.WriteTimeseriesResponse response = request.Execute();
            // Data.WriteTimeseriesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;


namespace CloudMonitoringSample
{
    public class CloudMonitoringServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The project ID to which this time series belongs. The value can be the numeric project ID or
            // string-based project name.
            string project = "{MY-PROJECT}";

            // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
            // compute.googleapis.com/instance/disk/read_ops_count.
            string metric = "{MY-METRIC}";

            // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
            string youngest = "{MY-YOUNGEST}";


            Data.ListTimeseriesDescriptorsRequest requestBody = new Data.ListTimeseriesDescriptorsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TimeseriesDescriptorsResource.ListRequest request = cloudMonitoringService.TimeseriesDescriptors.List(requestBody, project, metric, youngest);

            Data.ListTimeseriesDescriptorsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Timeseries == null)
                {
                    continue;
                }
                foreach (Data.TimeseriesDescriptor timeseriesDescriptor in response.Timeseries)
                {
                    // TODO: Change code below to process each `timeseriesDescriptor` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(timeseriesDescriptor));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
