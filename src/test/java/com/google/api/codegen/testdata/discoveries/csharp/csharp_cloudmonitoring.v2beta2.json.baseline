
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:
            // The project id. The value can be the numeric project ID or string-based project name.
            string project = "";

            // TODO Add code to assign values to fields of 'content'.
            Data.MetricDescriptor content = new Data.MetricDescriptor();

            MetricDescriptorsResource.CreateRequest request = cloudMonitoringService.MetricDescriptors.Create(content, project);
            Data.MetricDescriptor response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.MetricDescriptor response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // The project ID to which the metric belongs.
            string project = "";
            // Name of the metric.
            string metric = "";

            MetricDescriptorsResource.DeleteRequest request = cloudMonitoringService.MetricDescriptors.Delete(project, metric);
            Data.DeleteMetricDescriptorResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.DeleteMetricDescriptorResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The project id. The value can be the numeric project ID or string-based project name.
            string project = "";

            // TODO Add code to assign values to fields of 'content'.
            Data.ListMetricDescriptorsRequest content = new Data.ListMetricDescriptorsRequest();

            MetricDescriptorsResource.ListRequest request = cloudMonitoringService.MetricDescriptors.List(content, project);
            Data.ListMetricDescriptorsResponse response;
            do
            {
                response = request.Execute();
                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.MetricDescriptor item in response.Metrics)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListMetricDescriptorsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The project ID to which this time series belongs. The value can be the numeric project ID or
            // string-based project name.
            string project = "";
            // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
            // compute.googleapis.com/instance/disk/read_ops_count.
            string metric = "";
            // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
            string youngest = "";

            // TODO Add code to assign values to fields of 'content'.
            Data.ListTimeseriesRequest content = new Data.ListTimeseriesRequest();

            TimeseriesResource.ListRequest request = cloudMonitoringService.Timeseries.List(content, project, metric, youngest);
            Data.ListTimeseriesResponse response;
            do
            {
                response = request.Execute();
                if (response.Timeseries == null)
                {
                    continue;
                }
                foreach (Data.Timeseries item in response.Timeseries)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListTimeseriesResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Write() method:
            // The project ID. The value can be the numeric project ID or string-based project name.
            string project = "";

            // TODO Add code to assign values to fields of 'content'.
            Data.WriteTimeseriesRequest content = new Data.WriteTimeseriesRequest();

            TimeseriesResource.WriteRequest request = cloudMonitoringService.Timeseries.Write(content, project);
            Data.WriteTimeseriesResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.WriteTimeseriesResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudMonitoring.v2beta2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.CloudMonitoring.v2beta2.Data;

namespace CloudMonitoringSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudMonitoringService cloudMonitoringService = new CloudMonitoringService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The project ID to which this time series belongs. The value can be the numeric project ID or
            // string-based project name.
            string project = "";
            // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
            // compute.googleapis.com/instance/disk/read_ops_count.
            string metric = "";
            // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
            string youngest = "";

            // TODO Add code to assign values to fields of 'content'.
            Data.ListTimeseriesDescriptorsRequest content = new Data.ListTimeseriesDescriptorsRequest();

            TimeseriesDescriptorsResource.ListRequest request = cloudMonitoringService.TimeseriesDescriptors.List(content, project, metric, youngest);
            Data.ListTimeseriesDescriptorsResponse response;
            do
            {
                response = request.Execute();
                if (response.Timeseries == null)
                {
                    continue;
                }
                foreach (Data.TimeseriesDescriptor item in response.Timeseries)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListTimeseriesDescriptorsResponse response = await request.ExecuteAsync();
        }
    }
}
