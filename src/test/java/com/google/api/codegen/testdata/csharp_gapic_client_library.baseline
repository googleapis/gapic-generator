============== file: Google/Example/Library/V1/LibraryServiceClient.cs ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using Google.Api.Gax.Grpc;
using Google.Longrunning;
using Google.Protobuf.WellKnownTypes;
using Google.Tagger.V1;
using Grpc.Core;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading;
using System.Threading.Tasks;

namespace Google.Example.Library.V1
{
    /// <summary>
    /// Settings for a <see cref="LibraryServiceClient"/>.
    /// </summary>
    public sealed partial class LibraryServiceSettings : ServiceSettingsBase
    {
        /// <summary>
        /// Get a new instance of the default <see cref="LibraryServiceSettings"/>.
        /// </summary>
        /// <returns>
        /// A new instance of the default <see cref="LibraryServiceSettings"/>.
        /// </returns>
        public static LibraryServiceSettings GetDefault() => new LibraryServiceSettings();

        /// <summary>
        /// Constructs a new <see cref="LibraryServiceSettings"/> object with default settings.
        /// </summary>
        public LibraryServiceSettings() { }

        private LibraryServiceSettings(LibraryServiceSettings existing) : base(existing)
        {
            GaxPreconditions.CheckNotNull(existing, nameof(existing));
            CreateShelfSettings = existing.CreateShelfSettings;
            GetShelfSettings = existing.GetShelfSettings;
            ListShelvesSettings = existing.ListShelvesSettings;
            DeleteShelfSettings = existing.DeleteShelfSettings;
            MergeShelvesSettings = existing.MergeShelvesSettings;
            CreateBookSettings = existing.CreateBookSettings;
            PublishSeriesSettings = existing.PublishSeriesSettings;
            GetBookSettings = existing.GetBookSettings;
            ListBooksSettings = existing.ListBooksSettings;
            DeleteBookSettings = existing.DeleteBookSettings;
            UpdateBookSettings = existing.UpdateBookSettings;
            MoveBookSettings = existing.MoveBookSettings;
            ListStringsSettings = existing.ListStringsSettings;
            AddCommentsSettings = existing.AddCommentsSettings;
            GetBookFromArchiveSettings = existing.GetBookFromArchiveSettings;
            GetBookFromAnywhereSettings = existing.GetBookFromAnywhereSettings;
            UpdateBookIndexSettings = existing.UpdateBookIndexSettings;
            FindRelatedBooksSettings = existing.FindRelatedBooksSettings;
            AddTagSettings = existing.AddTagSettings;
            AddLabelSettings = existing.AddLabelSettings;
            GetBigBookSettings = existing.GetBigBookSettings;
        }

        /// <summary>
        /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
        /// for "Idempotent" <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <remarks>
        /// The eligible RPC <see cref="StatusCode"/>s for retry for "Idempotent" RPC methods are:
        /// <list type="bullet">
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// </remarks>
        public static Predicate<RpcException> IdempotentRetryFilter { get; } =
            RetrySettings.FilterForStatusCodes(StatusCode.DeadlineExceeded, StatusCode.Unavailable);

        /// <summary>
        /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
        /// for "NonIdempotent" <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <remarks>
        /// There are no RPC <see cref="StatusCode"/>s eligible for retry for "NonIdempotent" RPC methods.
        /// </remarks>
        public static Predicate<RpcException> NonIdempotentRetryFilter { get; } =
            RetrySettings.FilterForStatusCodes();

        /// <summary>
        /// "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <returns>
        /// The "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </returns>
        /// <remarks>
        /// The "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods is defined as:
        /// <list type="bullet">
        /// <item><description>Initial delay: 100 milliseconds</description></item>
        /// <item><description>Maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Delay multiplier: 1.2</description></item>
        /// </list>
        /// </remarks>
        public static BackoffSettings GetDefaultRetryBackoff() => new BackoffSettings(
            delay: TimeSpan.FromMilliseconds(100),
            maxDelay: TimeSpan.FromMilliseconds(1000),
            delayMultiplier: 1.2
        );

        /// <summary>
        /// "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <returns>
        /// The "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </returns>
        /// <remarks>
        /// The "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods is defined as:
        /// <list type="bullet">
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Maximum timeout: 3000 milliseconds</description></item>
        /// </list>
        /// </remarks>
        public static BackoffSettings GetDefaultTimeoutBackoff() => new BackoffSettings(
            delay: TimeSpan.FromMilliseconds(300),
            maxDelay: TimeSpan.FromMilliseconds(3000),
            delayMultiplier: 1.3
        );

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.CreateShelf</c> and <c>LibraryServiceClient.CreateShelfAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.CreateShelf</c> and
        /// <c>LibraryServiceClient.CreateShelfAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings CreateShelfSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.GetShelf</c> and <c>LibraryServiceClient.GetShelfAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.GetShelf</c> and
        /// <c>LibraryServiceClient.GetShelfAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetShelfSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.ListShelves</c> and <c>LibraryServiceClient.ListShelvesAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.ListShelves</c> and
        /// <c>LibraryServiceClient.ListShelvesAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListShelvesSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.DeleteShelf</c> and <c>LibraryServiceClient.DeleteShelfAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.DeleteShelf</c> and
        /// <c>LibraryServiceClient.DeleteShelfAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings DeleteShelfSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.MergeShelves</c> and <c>LibraryServiceClient.MergeShelvesAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.MergeShelves</c> and
        /// <c>LibraryServiceClient.MergeShelvesAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings MergeShelvesSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.CreateBook</c> and <c>LibraryServiceClient.CreateBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.CreateBook</c> and
        /// <c>LibraryServiceClient.CreateBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings CreateBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.PublishSeries</c> and <c>LibraryServiceClient.PublishSeriesAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.PublishSeries</c> and
        /// <c>LibraryServiceClient.PublishSeriesAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings PublishSeriesSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.GetBook</c> and <c>LibraryServiceClient.GetBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.GetBook</c> and
        /// <c>LibraryServiceClient.GetBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.ListBooks</c> and <c>LibraryServiceClient.ListBooksAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.ListBooks</c> and
        /// <c>LibraryServiceClient.ListBooksAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListBooksSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.DeleteBook</c> and <c>LibraryServiceClient.DeleteBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.DeleteBook</c> and
        /// <c>LibraryServiceClient.DeleteBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings DeleteBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.UpdateBook</c> and <c>LibraryServiceClient.UpdateBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.UpdateBook</c> and
        /// <c>LibraryServiceClient.UpdateBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings UpdateBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.MoveBook</c> and <c>LibraryServiceClient.MoveBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.MoveBook</c> and
        /// <c>LibraryServiceClient.MoveBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings MoveBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.ListStrings</c> and <c>LibraryServiceClient.ListStringsAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.ListStrings</c> and
        /// <c>LibraryServiceClient.ListStringsAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListStringsSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.AddComments</c> and <c>LibraryServiceClient.AddCommentsAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.AddComments</c> and
        /// <c>LibraryServiceClient.AddCommentsAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings AddCommentsSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.GetBookFromArchive</c> and <c>LibraryServiceClient.GetBookFromArchiveAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.GetBookFromArchive</c> and
        /// <c>LibraryServiceClient.GetBookFromArchiveAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBookFromArchiveSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.GetBookFromAnywhere</c> and <c>LibraryServiceClient.GetBookFromAnywhereAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.GetBookFromAnywhere</c> and
        /// <c>LibraryServiceClient.GetBookFromAnywhereAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBookFromAnywhereSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.UpdateBookIndex</c> and <c>LibraryServiceClient.UpdateBookIndexAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.UpdateBookIndex</c> and
        /// <c>LibraryServiceClient.UpdateBookIndexAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings UpdateBookIndexSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.FindRelatedBooks</c> and <c>LibraryServiceClient.FindRelatedBooksAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.FindRelatedBooks</c> and
        /// <c>LibraryServiceClient.FindRelatedBooksAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings FindRelatedBooksSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: IdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.AddTag</c> and <c>LibraryServiceClient.AddTagAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.AddTag</c> and
        /// <c>LibraryServiceClient.AddTagAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings AddTagSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.AddLabel</c> and <c>LibraryServiceClient.AddLabelAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.AddLabel</c> and
        /// <c>LibraryServiceClient.AddLabelAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings AddLabelSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <c>LibraryServiceClient.GetBigBook</c> and <c>LibraryServiceClient.GetBigBookAsync</c>.
        /// </summary>
        /// <remarks>
        /// The default <c>LibraryServiceClient.GetBigBook</c> and
        /// <c>LibraryServiceClient.GetBigBookAsync</c> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBigBookSettings { get; set; } = CallSettings.FromCallTiming(
            CallTiming.FromRetry(new RetrySettings(
                retryBackoff: GetDefaultRetryBackoff(),
                timeoutBackoff: GetDefaultTimeoutBackoff(),
                totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
                retryFilter: NonIdempotentRetryFilter
            )));

        /// <summary>
        /// Creates a deep clone of this object, with all the same property values.
        /// </summary>
        /// <returns>A deep clone of this <see cref="LibraryServiceSettings"/> object.</returns>
        public LibraryServiceSettings Clone() => new LibraryServiceSettings(this);
    }

    /// <summary>
    /// LibraryService client wrapper, for convenient use.
    /// </summary>
    public abstract partial class LibraryServiceClient
    {
        /// <summary>
        /// The default endpoint for the LibraryService service, which is a host of "library-example.googleapis.com" and a port of 443.
        /// </summary>
        public static ServiceEndpoint DefaultEndpoint { get; } = new ServiceEndpoint("library-example.googleapis.com", 443);

        /// <summary>
        /// The default LibraryService scopes.
        /// </summary>
        /// <remarks>
        /// The default LibraryService scopes are:
        /// <list type="bullet">
        /// <item><description>"https://www.googleapis.com/auth/cloud-platform"</description></item>
        /// <item><description>"https://www.googleapis.com/auth/library"</description></item>
        /// </list>
        /// </remarks>
        public static IReadOnlyList<string> DefaultScopes { get; } = new ReadOnlyCollection<string>(new string[] {
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/library",
        });

        private static readonly ChannelPool s_channelPool = new ChannelPool(DefaultScopes);

        /// <summary>
        /// Path template for a shelf resource. Parameters:
        /// <list type="bullet">
        /// <item><description>shelfId</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate ShelfTemplate { get; } = new PathTemplate("shelves/{shelf_id}");

        /// <summary>
        /// Creates a shelf resource name from its component IDs.
        /// </summary>
        /// <param name="shelfIdId">The shelfId ID.</param>
        /// <returns>
        /// The full shelf resource name.
        /// </returns>
        public static string FormatShelfName(string shelfIdId) => ShelfTemplate.Expand(shelfIdId);

        /// <summary>
        /// Path template for a book resource. Parameters:
        /// <list type="bullet">
        /// <item><description>shelfId</description></item>
        /// <item><description>bookId</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate BookTemplate { get; } = new PathTemplate("shelves/{shelf_id}/books/{book_id}");

        /// <summary>
        /// Creates a book resource name from its component IDs.
        /// </summary>
        /// <param name="shelfIdId">The shelfId ID.</param>
        /// <param name="bookIdId">The bookId ID.</param>
        /// <returns>
        /// The full book resource name.
        /// </returns>
        public static string FormatBookName(string shelfIdId, string bookIdId) => BookTemplate.Expand(shelfIdId, bookIdId);

        /// <summary>
        /// Path template for a return resource. Parameters:
        /// <list type="bullet">
        /// <item><description>shelf</description></item>
        /// <item><description>book</description></item>
        /// <item><description>return</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate ReturnTemplate { get; } = new PathTemplate("shelves/{shelf}/books/{book}/returns/{return}");

        /// <summary>
        /// Creates a return resource name from its component IDs.
        /// </summary>
        /// <param name="shelfId">The shelf ID.</param>
        /// <param name="bookId">The book ID.</param>
        /// <param name="returnId">The return ID.</param>
        /// <returns>
        /// The full return resource name.
        /// </returns>
        public static string FormatReturnName(string shelfId, string bookId, string returnId) => ReturnTemplate.Expand(shelfId, bookId, returnId);

        // Note: we could have parameterless overloads of Create and CreateAsync,
        // documented to just use the default endpoint, settings and credentials.
        // Pros:
        // - Might be more reassuring on first use
        // - Allows method group conversions
        // Con: overloads!

        /// <summary>
        /// Asynchronously creates a <see cref="LibraryServiceClient"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The task representing the created <see cref="LibraryServiceClient"/>.</returns>
        public static async Task<LibraryServiceClient> CreateAsync(ServiceEndpoint endpoint = null, LibraryServiceSettings settings = null)
        {
            Channel channel = await s_channelPool.GetChannelAsync(endpoint ?? DefaultEndpoint).ConfigureAwait(false);
            return Create(channel, settings);
        }

        /// <summary>
        /// Synchronously creates a <see cref="LibraryServiceClient"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The created <see cref="LibraryServiceClient"/>.</returns>
        public static LibraryServiceClient Create(ServiceEndpoint endpoint = null, LibraryServiceSettings settings = null)
        {
            Channel channel = s_channelPool.GetChannel(endpoint ?? DefaultEndpoint);
            return Create(channel, settings);
        }

        /// <summary>
        /// Creates a <see cref="LibraryServiceClient"/> which uses the specified channel for remote operations.
        /// </summary>
        /// <param name="channel">The <see cref="Channel"/> for remote operations. Must not be null.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The created <see cref="LibraryServiceClient"/>.</returns>
        public static LibraryServiceClient Create(Channel channel, LibraryServiceSettings settings = null)
        {
            GaxPreconditions.CheckNotNull(channel, nameof(channel));
            LibraryService.LibraryServiceClient grpcClient = new LibraryService.LibraryServiceClient(channel);
            return new LibraryServiceClientImpl(grpcClient, settings);
        }

        /// <summary>
        /// Shuts down any channels automatically created by <see cref="Create(ServiceEndpoint, LibraryServiceSettings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, LibraryServiceSettings)"/>. Channels which weren't automatically
        /// created are not affected.
        /// </summary>
        /// <remarks>After calling this method, further calls to <see cref="Create(ServiceEndpoint, LibraryServiceSettings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, LibraryServiceSettings)"/> will create new channels, which could
        /// in turn be shut down by another call to this method.</remarks>
        /// <returns>A task representing the asynchronous shutdown operation.</returns>
        public static Task ShutdownDefaultChannelsAsync() => s_channelPool.ShutdownChannelsAsync();

        /// <summary>
        /// The underlying gRPC LibraryService client.
        /// </summary>
        public virtual LibraryService.LibraryServiceClient GrpcClient
        {
            get { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">
        /// The shelf to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">
        /// The shelf to create.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CancellationToken cancellationToken) => CreateShelfAsync(
                shelf,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">
        /// The shelf to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Shelf CreateShelf(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            ShelfName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            ShelfName name,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Shelf GetShelf(
            ShelfName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                message,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Shelf GetShelf(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="stringBuilder">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="stringBuilder">
        ///
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                message,
                stringBuilder,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="stringBuilder">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Shelf GetShelf(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="Shelf"/> resources.
        /// </returns>
        public virtual IPagedAsyncEnumerable<ListShelvesResponse, Shelf> ListShelvesAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="Shelf"/> resources.
        /// </returns>
        public virtual IPagedEnumerable<ListShelvesResponse, Shelf> ListShelves(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task DeleteShelfAsync(
            ShelfName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to delete.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task DeleteShelfAsync(
            ShelfName name,
            CancellationToken cancellationToken) => DeleteShelfAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual void DeleteShelf(
            ShelfName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf we're adding books to.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> MergeShelvesAsync(
            ShelfName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf we're adding books to.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Shelf> MergeShelvesAsync(
            ShelfName name,
            ShelfName otherShelfName,
            CancellationToken cancellationToken) => MergeShelvesAsync(
                name,
                otherShelfName,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf we're adding books to.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Shelf MergeShelves(
            ShelfName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf in which the book is created.
        /// </param>
        /// <param name="book">
        /// The book to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> CreateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf in which the book is created.
        /// </param>
        /// <param name="book">
        /// The book to create.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> CreateBookAsync(
            string name,
            Book book,
            CancellationToken cancellationToken) => CreateBookAsync(
                name,
                book,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf in which the book is created.
        /// </param>
        /// <param name="book">
        /// The book to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Book CreateBook(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">
        /// The shelf in which the series is created.
        /// </param>
        /// <param name="books">
        /// The books to publish in the series.
        /// </param>
        /// <param name="edition">
        /// The edition of the series
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">
        /// The shelf in which the series is created.
        /// </param>
        /// <param name="books">
        /// The books to publish in the series.
        /// </param>
        /// <param name="edition">
        /// The edition of the series
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CancellationToken cancellationToken) => PublishSeriesAsync(
                shelf,
                books,
                edition,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">
        /// The shelf in which the series is created.
        /// </param>
        /// <param name="books">
        /// The books to publish in the series.
        /// </param>
        /// <param name="edition">
        /// The edition of the series
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual PublishSeriesResponse PublishSeries(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> GetBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> GetBookAsync(
            BookName name,
            CancellationToken cancellationToken) => GetBookAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Book GetBook(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf whose books we'd like to list.
        /// </param>
        /// <param name="filter">
        /// To test python built-in wrapping.
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="Book"/> resources.
        /// </returns>
        public virtual IPagedAsyncEnumerable<ListBooksResponse, Book> ListBooksAsync(
            ShelfName name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf whose books we'd like to list.
        /// </param>
        /// <param name="filter">
        /// To test python built-in wrapping.
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="Book"/> resources.
        /// </returns>
        public virtual IPagedEnumerable<ListBooksResponse, Book> ListBooks(
            ShelfName name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task DeleteBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to delete.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task DeleteBookAsync(
            BookName name,
            CancellationToken cancellationToken) => DeleteBookAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual void DeleteBook(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            CancellationToken cancellationToken) => UpdateBookAsync(
                name,
                book,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Book UpdateBook(
            BookName name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </param>
        /// <param name="physicalMask">
        /// To test Python import clash resolution.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </param>
        /// <param name="physicalMask">
        /// To test Python import clash resolution.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CancellationToken cancellationToken) => UpdateBookAsync(
                name,
                book,
                updateMask,
                physicalMask,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </param>
        /// <param name="physicalMask">
        /// To test Python import clash resolution.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Book UpdateBook(
            BookName name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to move.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the destination shelf.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> MoveBookAsync(
            BookName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to move.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the destination shelf.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Book> MoveBookAsync(
            BookName name,
            ShelfName otherShelfName,
            CancellationToken cancellationToken) => MoveBookAsync(
                name,
                otherShelfName,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to move.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the destination shelf.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Book MoveBook(
            BookName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedEnumerable<ListStringsResponse, string> ListStrings(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            ResourceName name,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedEnumerable<ListStringsResponse, string> ListStrings(
            ResourceName name,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="comments">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="comments">
        ///
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CancellationToken cancellationToken) => AddCommentsAsync(
                name,
                comments,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="comments">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual void AddComments(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<BookFromArchive> GetBookFromArchiveAsync(
            ArchivedBookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<BookFromArchive> GetBookFromArchiveAsync(
            ArchivedBookName name,
            CancellationToken cancellationToken) => GetBookFromArchiveAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual BookFromArchive GetBookFromArchive(
            ArchivedBookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from a shelf or archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="altBookName">
        /// An alternate book name, used to test restricting flattened field to a
        /// single resource name type in a oneof.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<BookFromAnywhere> GetBookFromAnywhereAsync(
            BookNameOneof name,
            BookName altBookName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from a shelf or archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="altBookName">
        /// An alternate book name, used to test restricting flattened field to a
        /// single resource name type in a oneof.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<BookFromAnywhere> GetBookFromAnywhereAsync(
            BookNameOneof name,
            BookName altBookName,
            CancellationToken cancellationToken) => GetBookFromAnywhereAsync(
                name,
                altBookName,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets a book from a shelf or archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="altBookName">
        /// An alternate book name, used to test restricting flattened field to a
        /// single resource name type in a oneof.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual BookFromAnywhere GetBookFromAnywhere(
            BookNameOneof name,
            BookName altBookName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="indexName">
        /// The name of the index for the book
        /// </param>
        /// <param name="indexMap">
        /// The index to update the book with
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task UpdateBookIndexAsync(
            BookName name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="indexName">
        /// The name of the index for the book
        /// </param>
        /// <param name="indexMap">
        /// The index to update the book with
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task UpdateBookIndexAsync(
            BookName name,
            string indexName,
            IDictionary<string, string> indexMap,
            CancellationToken cancellationToken) => UpdateBookIndexAsync(
                name,
                indexName,
                indexMap,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="indexName">
        /// The name of the index for the book
        /// </param>
        /// <param name="indexMap">
        /// The index to update the book with
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual void UpdateBookIndex(
            BookName name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="names">
        ///
        /// </param>
        /// <param name="shelves">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedAsyncEnumerable<FindRelatedBooksResponse, BookName> FindRelatedBooksAsync(
            IEnumerable<BookName> names,
            IEnumerable<ShelfName> shelves,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="names">
        ///
        /// </param>
        /// <param name="shelves">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public virtual IPagedEnumerable<FindRelatedBooksResponse, BookName> FindRelatedBooks(
            IEnumerable<BookName> names,
            IEnumerable<ShelfName> shelves,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a tag to the book. This RPC is a mixin.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the tag is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="tag">
        /// REQUIRED: The tag to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<AddTagResponse> AddTagAsync(
            string resource,
            string tag,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a tag to the book. This RPC is a mixin.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the tag is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="tag">
        /// REQUIRED: The tag to add.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<AddTagResponse> AddTagAsync(
            string resource,
            string tag,
            CancellationToken cancellationToken) => AddTagAsync(
                resource,
                tag,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Adds a tag to the book. This RPC is a mixin.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the tag is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="tag">
        /// REQUIRED: The tag to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual AddTagResponse AddTag(
            string resource,
            string tag,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a label to the entity.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the label is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="label">
        /// REQUIRED: The label to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<AddLabelResponse> AddLabelAsync(
            string resource,
            string label,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a label to the entity.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the label is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="label">
        /// REQUIRED: The label to add.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<AddLabelResponse> AddLabelAsync(
            string resource,
            string label,
            CancellationToken cancellationToken) => AddLabelAsync(
                resource,
                label,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Adds a label to the entity.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the label is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="label">
        /// REQUIRED: The label to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual AddLabelResponse AddLabel(
            string resource,
            string label,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Test long-running operations
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Operation> GetBigBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Test long-running operations
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="cancellationToken">
        /// A <see cref="CancellationToken"/> to use for this RPC.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public virtual Task<Operation> GetBigBookAsync(
            BookName name,
            CancellationToken cancellationToken) => GetBigBookAsync(
                name,
                CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Test long-running operations
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public virtual Operation GetBigBook(
            BookName name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

    }

    /// <summary>
    /// LibraryService client wrapper implementation, for convenient use.
    /// </summary>
    public sealed partial class LibraryServiceClientImpl : LibraryServiceClient
    {
        private readonly ClientHelper _clientHelper;
        private readonly ApiCall<CreateShelfRequest, Shelf> _callCreateShelf;
        private readonly ApiCall<GetShelfRequest, Shelf> _callGetShelf;
        private readonly ApiCall<ListShelvesRequest, ListShelvesResponse> _callListShelves;
        private readonly ApiCall<DeleteShelfRequest, Empty> _callDeleteShelf;
        private readonly ApiCall<MergeShelvesRequest, Shelf> _callMergeShelves;
        private readonly ApiCall<CreateBookRequest, Book> _callCreateBook;
        private readonly ApiCall<PublishSeriesRequest, PublishSeriesResponse> _callPublishSeries;
        private readonly ApiCall<GetBookRequest, Book> _callGetBook;
        private readonly ApiCall<ListBooksRequest, ListBooksResponse> _callListBooks;
        private readonly ApiCall<DeleteBookRequest, Empty> _callDeleteBook;
        private readonly ApiCall<UpdateBookRequest, Book> _callUpdateBook;
        private readonly ApiCall<MoveBookRequest, Book> _callMoveBook;
        private readonly ApiCall<ListStringsRequest, ListStringsResponse> _callListStrings;
        private readonly ApiCall<AddCommentsRequest, Empty> _callAddComments;
        private readonly ApiCall<GetBookFromArchiveRequest, BookFromArchive> _callGetBookFromArchive;
        private readonly ApiCall<GetBookFromAnywhereRequest, BookFromAnywhere> _callGetBookFromAnywhere;
        private readonly ApiCall<UpdateBookIndexRequest, Empty> _callUpdateBookIndex;
        private readonly ApiCall<FindRelatedBooksRequest, FindRelatedBooksResponse> _callFindRelatedBooks;
        private readonly ApiCall<AddTagRequest, AddTagResponse> _callAddTag;
        private readonly ApiCall<AddLabelRequest, AddLabelResponse> _callAddLabel;
        private readonly ApiCall<GetBookRequest, Operation> _callGetBigBook;

        /// <summary>
        /// Constructs a client wrapper for the LibraryService service, with the specified gRPC client and settings.
        /// </summary>
        /// <param name="grpcClient">The underlying gRPC client.</param>
        /// <param name="settings">The base <see cref="LibraryServiceSettings"/> used within this client </param>
        public LibraryServiceClientImpl(LibraryService.LibraryServiceClient grpcClient, LibraryServiceSettings settings)
        {
            this.GrpcClient = grpcClient;
            LibraryServiceSettings effectiveSettings = settings ?? LibraryServiceSettings.GetDefault();
            _clientHelper = new ClientHelper(effectiveSettings);
            var grpcLabelerClient = grpcClient.CreateLabelerClient();
            _callCreateShelf = _clientHelper.BuildApiCall<CreateShelfRequest, Shelf>(
                GrpcClient.CreateShelfAsync, GrpcClient.CreateShelf, effectiveSettings.CreateShelfSettings);
            _callGetShelf = _clientHelper.BuildApiCall<GetShelfRequest, Shelf>(
                GrpcClient.GetShelfAsync, GrpcClient.GetShelf, effectiveSettings.GetShelfSettings);
            _callListShelves = _clientHelper.BuildApiCall<ListShelvesRequest, ListShelvesResponse>(
                GrpcClient.ListShelvesAsync, GrpcClient.ListShelves, effectiveSettings.ListShelvesSettings);
            _callDeleteShelf = _clientHelper.BuildApiCall<DeleteShelfRequest, Empty>(
                GrpcClient.DeleteShelfAsync, GrpcClient.DeleteShelf, effectiveSettings.DeleteShelfSettings);
            _callMergeShelves = _clientHelper.BuildApiCall<MergeShelvesRequest, Shelf>(
                GrpcClient.MergeShelvesAsync, GrpcClient.MergeShelves, effectiveSettings.MergeShelvesSettings);
            _callCreateBook = _clientHelper.BuildApiCall<CreateBookRequest, Book>(
                GrpcClient.CreateBookAsync, GrpcClient.CreateBook, effectiveSettings.CreateBookSettings);
            _callPublishSeries = _clientHelper.BuildApiCall<PublishSeriesRequest, PublishSeriesResponse>(
                GrpcClient.PublishSeriesAsync, GrpcClient.PublishSeries, effectiveSettings.PublishSeriesSettings);
            _callGetBook = _clientHelper.BuildApiCall<GetBookRequest, Book>(
                GrpcClient.GetBookAsync, GrpcClient.GetBook, effectiveSettings.GetBookSettings);
            _callListBooks = _clientHelper.BuildApiCall<ListBooksRequest, ListBooksResponse>(
                GrpcClient.ListBooksAsync, GrpcClient.ListBooks, effectiveSettings.ListBooksSettings);
            _callDeleteBook = _clientHelper.BuildApiCall<DeleteBookRequest, Empty>(
                GrpcClient.DeleteBookAsync, GrpcClient.DeleteBook, effectiveSettings.DeleteBookSettings);
            _callUpdateBook = _clientHelper.BuildApiCall<UpdateBookRequest, Book>(
                GrpcClient.UpdateBookAsync, GrpcClient.UpdateBook, effectiveSettings.UpdateBookSettings);
            _callMoveBook = _clientHelper.BuildApiCall<MoveBookRequest, Book>(
                GrpcClient.MoveBookAsync, GrpcClient.MoveBook, effectiveSettings.MoveBookSettings);
            _callListStrings = _clientHelper.BuildApiCall<ListStringsRequest, ListStringsResponse>(
                GrpcClient.ListStringsAsync, GrpcClient.ListStrings, effectiveSettings.ListStringsSettings);
            _callAddComments = _clientHelper.BuildApiCall<AddCommentsRequest, Empty>(
                GrpcClient.AddCommentsAsync, GrpcClient.AddComments, effectiveSettings.AddCommentsSettings);
            _callGetBookFromArchive = _clientHelper.BuildApiCall<GetBookFromArchiveRequest, BookFromArchive>(
                GrpcClient.GetBookFromArchiveAsync, GrpcClient.GetBookFromArchive, effectiveSettings.GetBookFromArchiveSettings);
            _callGetBookFromAnywhere = _clientHelper.BuildApiCall<GetBookFromAnywhereRequest, BookFromAnywhere>(
                GrpcClient.GetBookFromAnywhereAsync, GrpcClient.GetBookFromAnywhere, effectiveSettings.GetBookFromAnywhereSettings);
            _callUpdateBookIndex = _clientHelper.BuildApiCall<UpdateBookIndexRequest, Empty>(
                GrpcClient.UpdateBookIndexAsync, GrpcClient.UpdateBookIndex, effectiveSettings.UpdateBookIndexSettings);
            _callFindRelatedBooks = _clientHelper.BuildApiCall<FindRelatedBooksRequest, FindRelatedBooksResponse>(
                GrpcClient.FindRelatedBooksAsync, GrpcClient.FindRelatedBooks, effectiveSettings.FindRelatedBooksSettings);
            _callAddTag = _clientHelper.BuildApiCall<AddTagRequest, AddTagResponse>(
                GrpcClient.AddTagAsync, GrpcClient.AddTag, effectiveSettings.AddTagSettings);
            _callAddLabel = _clientHelper.BuildApiCall<AddLabelRequest, AddLabelResponse>(
                grpcLabelerClient.AddLabelAsync, grpcLabelerClient.AddLabel, effectiveSettings.AddLabelSettings);
            _callGetBigBook = _clientHelper.BuildApiCall<GetBookRequest, Operation>(
                GrpcClient.GetBigBookAsync, GrpcClient.GetBigBook, effectiveSettings.GetBigBookSettings);
        }

        /// <summary>
        /// The underlying gRPC LibraryService client.
        /// </summary>
        public override LibraryService.LibraryServiceClient GrpcClient { get; }

        // Partial modifier methods contain '_' to ensure no name conflicts with RPC methods.
        partial void Modify_CreateShelfRequest(ref CreateShelfRequest request, ref CallSettings settings);
        partial void Modify_GetShelfRequest(ref GetShelfRequest request, ref CallSettings settings);
        partial void Modify_ListShelvesRequest(ref ListShelvesRequest request, ref CallSettings settings);
        partial void Modify_DeleteShelfRequest(ref DeleteShelfRequest request, ref CallSettings settings);
        partial void Modify_MergeShelvesRequest(ref MergeShelvesRequest request, ref CallSettings settings);
        partial void Modify_CreateBookRequest(ref CreateBookRequest request, ref CallSettings settings);
        partial void Modify_PublishSeriesRequest(ref PublishSeriesRequest request, ref CallSettings settings);
        partial void Modify_GetBookRequest(ref GetBookRequest request, ref CallSettings settings);
        partial void Modify_ListBooksRequest(ref ListBooksRequest request, ref CallSettings settings);
        partial void Modify_DeleteBookRequest(ref DeleteBookRequest request, ref CallSettings settings);
        partial void Modify_UpdateBookRequest(ref UpdateBookRequest request, ref CallSettings settings);
        partial void Modify_MoveBookRequest(ref MoveBookRequest request, ref CallSettings settings);
        partial void Modify_ListStringsRequest(ref ListStringsRequest request, ref CallSettings settings);
        partial void Modify_AddCommentsRequest(ref AddCommentsRequest request, ref CallSettings settings);
        partial void Modify_GetBookFromArchiveRequest(ref GetBookFromArchiveRequest request, ref CallSettings settings);
        partial void Modify_GetBookFromAnywhereRequest(ref GetBookFromAnywhereRequest request, ref CallSettings settings);
        partial void Modify_UpdateBookIndexRequest(ref UpdateBookIndexRequest request, ref CallSettings settings);
        partial void Modify_FindRelatedBooksRequest(ref FindRelatedBooksRequest request, ref CallSettings settings);
        partial void Modify_AddTagRequest(ref AddTagRequest request, ref CallSettings settings);
        partial void Modify_AddLabelRequest(ref AddLabelRequest request, ref CallSettings settings);
        partial void Modify_GetBookRequest(ref GetBookRequest request, ref CallSettings settings);

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">
        /// The shelf to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            CreateShelfRequest request = new CreateShelfRequest
            {
                Shelf = shelf,
            };
            Modify_CreateShelfRequest(ref request, ref callSettings);
            return _callCreateShelf.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">
        /// The shelf to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Shelf CreateShelf(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            CreateShelfRequest request = new CreateShelfRequest
            {
                Shelf = shelf,
            };
            Modify_CreateShelfRequest(ref request, ref callSettings);
            return _callCreateShelf.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Shelf> GetShelfAsync(
            ShelfName name,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                ShelfName = name,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Shelf GetShelf(
            ShelfName name,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                ShelfName = name,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                Name = name,
                Message = message,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Shelf GetShelf(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                Name = name,
                Message = message,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="stringBuilder">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                Name = name,
                Message = message,
                StringBuilder = stringBuilder,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to retrieve.
        /// </param>
        /// <param name="message">
        /// Field to verify that message-type query parameter gets flattened.
        /// </param>
        /// <param name="stringBuilder">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Shelf GetShelf(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            GetShelfRequest request = new GetShelfRequest
            {
                Name = name,
                Message = message,
                StringBuilder = stringBuilder,
            };
            Modify_GetShelfRequest(ref request, ref callSettings);
            return _callGetShelf.Sync(request, callSettings);
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="Shelf"/> resources.
        /// </returns>
        public override IPagedAsyncEnumerable<ListShelvesResponse, Shelf> ListShelvesAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListShelvesRequest request = new ListShelvesRequest
            {

                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListShelvesRequest(ref request, ref callSettings);
            return new PagedAsyncEnumerable<ListShelvesRequest, ListShelvesResponse, Shelf>(_callListShelves, request, callSettings);
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="Shelf"/> resources.
        /// </returns>
        public override IPagedEnumerable<ListShelvesResponse, Shelf> ListShelves(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListShelvesRequest request = new ListShelvesRequest
            {

                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListShelvesRequest(ref request, ref callSettings);
            return new PagedEnumerable<ListShelvesRequest, ListShelvesResponse, Shelf>(_callListShelves, request, callSettings);
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task DeleteShelfAsync(
            ShelfName name,
            CallSettings callSettings = null)
        {
            DeleteShelfRequest request = new DeleteShelfRequest
            {
                ShelfName = name,
            };
            Modify_DeleteShelfRequest(ref request, ref callSettings);
            return _callDeleteShelf.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override void DeleteShelf(
            ShelfName name,
            CallSettings callSettings = null)
        {
            DeleteShelfRequest request = new DeleteShelfRequest
            {
                ShelfName = name,
            };
            Modify_DeleteShelfRequest(ref request, ref callSettings);
            _callDeleteShelf.Sync(request, callSettings);
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf we're adding books to.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Shelf> MergeShelvesAsync(
            ShelfName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            MergeShelvesRequest request = new MergeShelvesRequest
            {
                ShelfName = name,
                OtherShelfNameAsShelfName = otherShelfName,
            };
            Modify_MergeShelvesRequest(ref request, ref callSettings);
            return _callMergeShelves.Async(request, callSettings);
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf we're adding books to.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the shelf we're removing books from and deleting.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Shelf MergeShelves(
            ShelfName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            MergeShelvesRequest request = new MergeShelvesRequest
            {
                ShelfName = name,
                OtherShelfNameAsShelfName = otherShelfName,
            };
            Modify_MergeShelvesRequest(ref request, ref callSettings);
            return _callMergeShelves.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf in which the book is created.
        /// </param>
        /// <param name="book">
        /// The book to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Book> CreateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            CreateBookRequest request = new CreateBookRequest
            {
                Name = name,
                Book = book,
            };
            Modify_CreateBookRequest(ref request, ref callSettings);
            return _callCreateBook.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf in which the book is created.
        /// </param>
        /// <param name="book">
        /// The book to create.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Book CreateBook(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            CreateBookRequest request = new CreateBookRequest
            {
                Name = name,
                Book = book,
            };
            Modify_CreateBookRequest(ref request, ref callSettings);
            return _callCreateBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">
        /// The shelf in which the series is created.
        /// </param>
        /// <param name="books">
        /// The books to publish in the series.
        /// </param>
        /// <param name="edition">
        /// The edition of the series
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            PublishSeriesRequest request = new PublishSeriesRequest
            {
                Shelf = shelf,
                Books = { books },
                Edition = edition,
            };
            Modify_PublishSeriesRequest(ref request, ref callSettings);
            return _callPublishSeries.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">
        /// The shelf in which the series is created.
        /// </param>
        /// <param name="books">
        /// The books to publish in the series.
        /// </param>
        /// <param name="edition">
        /// The edition of the series
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override PublishSeriesResponse PublishSeries(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            PublishSeriesRequest request = new PublishSeriesRequest
            {
                Shelf = shelf,
                Books = { books },
                Edition = edition,
            };
            Modify_PublishSeriesRequest(ref request, ref callSettings);
            return _callPublishSeries.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Book> GetBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            GetBookRequest request = new GetBookRequest
            {
                BookName = name,
            };
            Modify_GetBookRequest(ref request, ref callSettings);
            return _callGetBook.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Book GetBook(
            BookName name,
            CallSettings callSettings = null)
        {
            GetBookRequest request = new GetBookRequest
            {
                BookName = name,
            };
            Modify_GetBookRequest(ref request, ref callSettings);
            return _callGetBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf whose books we'd like to list.
        /// </param>
        /// <param name="filter">
        /// To test python built-in wrapping.
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="Book"/> resources.
        /// </returns>
        public override IPagedAsyncEnumerable<ListBooksResponse, Book> ListBooksAsync(
            ShelfName name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListBooksRequest request = new ListBooksRequest
            {
                ShelfName = name,
                Filter = filter,
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListBooksRequest(ref request, ref callSettings);
            return new PagedAsyncEnumerable<ListBooksRequest, ListBooksResponse, Book>(_callListBooks, request, callSettings);
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">
        /// The name of the shelf whose books we'd like to list.
        /// </param>
        /// <param name="filter">
        /// To test python built-in wrapping.
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="Book"/> resources.
        /// </returns>
        public override IPagedEnumerable<ListBooksResponse, Book> ListBooks(
            ShelfName name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListBooksRequest request = new ListBooksRequest
            {
                ShelfName = name,
                Filter = filter,
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListBooksRequest(ref request, ref callSettings);
            return new PagedEnumerable<ListBooksRequest, ListBooksResponse, Book>(_callListBooks, request, callSettings);
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task DeleteBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            DeleteBookRequest request = new DeleteBookRequest
            {
                BookName = name,
            };
            Modify_DeleteBookRequest(ref request, ref callSettings);
            return _callDeleteBook.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to delete.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override void DeleteBook(
            BookName name,
            CallSettings callSettings = null)
        {
            DeleteBookRequest request = new DeleteBookRequest
            {
                BookName = name,
            };
            Modify_DeleteBookRequest(ref request, ref callSettings);
            _callDeleteBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            CallSettings callSettings = null)
        {
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = name,
                Book = book,
            };
            Modify_UpdateBookRequest(ref request, ref callSettings);
            return _callUpdateBook.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Book UpdateBook(
            BookName name,
            Book book,
            CallSettings callSettings = null)
        {
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = name,
                Book = book,
            };
            Modify_UpdateBookRequest(ref request, ref callSettings);
            return _callUpdateBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </param>
        /// <param name="physicalMask">
        /// To test Python import clash resolution.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Book> UpdateBookAsync(
            BookName name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = name,
                Book = book,
                UpdateMask = updateMask,
                PhysicalMask = physicalMask,
            };
            Modify_UpdateBookRequest(ref request, ref callSettings);
            return _callUpdateBook.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="book">
        /// The book to update with.
        /// </param>
        /// <param name="updateMask">
        /// A field mask to apply, rendered as an HTTP parameter.
        /// </param>
        /// <param name="physicalMask">
        /// To test Python import clash resolution.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Book UpdateBook(
            BookName name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = name,
                Book = book,
                UpdateMask = updateMask,
                PhysicalMask = physicalMask,
            };
            Modify_UpdateBookRequest(ref request, ref callSettings);
            return _callUpdateBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to move.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the destination shelf.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Book> MoveBookAsync(
            BookName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            MoveBookRequest request = new MoveBookRequest
            {
                BookName = name,
                OtherShelfNameAsShelfName = otherShelfName,
            };
            Modify_MoveBookRequest(ref request, ref callSettings);
            return _callMoveBook.Async(request, callSettings);
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to move.
        /// </param>
        /// <param name="otherShelfName">
        /// The name of the destination shelf.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Book MoveBook(
            BookName name,
            ShelfName otherShelfName,
            CallSettings callSettings = null)
        {
            MoveBookRequest request = new MoveBookRequest
            {
                BookName = name,
                OtherShelfNameAsShelfName = otherShelfName,
            };
            Modify_MoveBookRequest(ref request, ref callSettings);
            return _callMoveBook.Sync(request, callSettings);
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListStringsRequest request = new ListStringsRequest
            {

                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListStringsRequest(ref request, ref callSettings);
            return new PagedAsyncEnumerable<ListStringsRequest, ListStringsResponse, string>(_callListStrings, request, callSettings);
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedEnumerable<ListStringsResponse, string> ListStrings(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListStringsRequest request = new ListStringsRequest
            {

                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListStringsRequest(ref request, ref callSettings);
            return new PagedEnumerable<ListStringsRequest, ListStringsResponse, string>(_callListStrings, request, callSettings);
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            ResourceName name,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListStringsRequest request = new ListStringsRequest
            {
                ResourceName = name,
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListStringsRequest(ref request, ref callSettings);
            return new PagedAsyncEnumerable<ListStringsRequest, ListStringsResponse, string>(_callListStrings, request, callSettings);
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedEnumerable<ListStringsResponse, string> ListStrings(
            ResourceName name,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            ListStringsRequest request = new ListStringsRequest
            {
                ResourceName = name,
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_ListStringsRequest(ref request, ref callSettings);
            return new PagedEnumerable<ListStringsRequest, ListStringsResponse, string>(_callListStrings, request, callSettings);
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="comments">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            AddCommentsRequest request = new AddCommentsRequest
            {
                Name = name,
                Comments = { comments },
            };
            Modify_AddCommentsRequest(ref request, ref callSettings);
            return _callAddComments.Async(request, callSettings);
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name">
        ///
        /// </param>
        /// <param name="comments">
        ///
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override void AddComments(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            AddCommentsRequest request = new AddCommentsRequest
            {
                Name = name,
                Comments = { comments },
            };
            Modify_AddCommentsRequest(ref request, ref callSettings);
            _callAddComments.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<BookFromArchive> GetBookFromArchiveAsync(
            ArchivedBookName name,
            CallSettings callSettings = null)
        {
            GetBookFromArchiveRequest request = new GetBookFromArchiveRequest
            {
                ArchivedBookName = name,
            };
            Modify_GetBookFromArchiveRequest(ref request, ref callSettings);
            return _callGetBookFromArchive.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override BookFromArchive GetBookFromArchive(
            ArchivedBookName name,
            CallSettings callSettings = null)
        {
            GetBookFromArchiveRequest request = new GetBookFromArchiveRequest
            {
                ArchivedBookName = name,
            };
            Modify_GetBookFromArchiveRequest(ref request, ref callSettings);
            return _callGetBookFromArchive.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets a book from a shelf or archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="altBookName">
        /// An alternate book name, used to test restricting flattened field to a
        /// single resource name type in a oneof.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<BookFromAnywhere> GetBookFromAnywhereAsync(
            BookNameOneof name,
            BookName altBookName,
            CallSettings callSettings = null)
        {
            GetBookFromAnywhereRequest request = new GetBookFromAnywhereRequest
            {
                BookNameOneof = name,
                AltBookNameAsBookNameOneof = BookNameOneof.From(altBookName),
            };
            Modify_GetBookFromAnywhereRequest(ref request, ref callSettings);
            return _callGetBookFromAnywhere.Async(request, callSettings);
        }

        /// <summary>
        /// Gets a book from a shelf or archive.
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="altBookName">
        /// An alternate book name, used to test restricting flattened field to a
        /// single resource name type in a oneof.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override BookFromAnywhere GetBookFromAnywhere(
            BookNameOneof name,
            BookName altBookName,
            CallSettings callSettings = null)
        {
            GetBookFromAnywhereRequest request = new GetBookFromAnywhereRequest
            {
                BookNameOneof = name,
                AltBookNameAsBookNameOneof = BookNameOneof.From(altBookName),
            };
            Modify_GetBookFromAnywhereRequest(ref request, ref callSettings);
            return _callGetBookFromAnywhere.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="indexName">
        /// The name of the index for the book
        /// </param>
        /// <param name="indexMap">
        /// The index to update the book with
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task UpdateBookIndexAsync(
            BookName name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            UpdateBookIndexRequest request = new UpdateBookIndexRequest
            {
                BookName = name,
                IndexName = indexName,
                IndexMap = { indexMap },
            };
            Modify_UpdateBookIndexRequest(ref request, ref callSettings);
            return _callUpdateBookIndex.Async(request, callSettings);
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">
        /// The name of the book to update.
        /// </param>
        /// <param name="indexName">
        /// The name of the index for the book
        /// </param>
        /// <param name="indexMap">
        /// The index to update the book with
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override void UpdateBookIndex(
            BookName name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            UpdateBookIndexRequest request = new UpdateBookIndexRequest
            {
                BookName = name,
                IndexName = indexName,
                IndexMap = { indexMap },
            };
            Modify_UpdateBookIndexRequest(ref request, ref callSettings);
            _callUpdateBookIndex.Sync(request, callSettings);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="names">
        ///
        /// </param>
        /// <param name="shelves">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedAsyncEnumerable<FindRelatedBooksResponse, BookName> FindRelatedBooksAsync(
            IEnumerable<BookName> names,
            IEnumerable<ShelfName> shelves,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            FindRelatedBooksRequest request = new FindRelatedBooksRequest
            {
                BookNames = { names },
                ShelvesAsShelfNames = { shelves },
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_FindRelatedBooksRequest(ref request, ref callSettings);
            return new PagedAsyncEnumerable<FindRelatedBooksRequest, FindRelatedBooksResponse, BookName>(_callFindRelatedBooks, request, callSettings);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="names">
        ///
        /// </param>
        /// <param name="shelves">
        ///
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A pageable sequence of <see cref="string"/> resources.
        /// </returns>
        public override IPagedEnumerable<FindRelatedBooksResponse, BookName> FindRelatedBooks(
            IEnumerable<BookName> names,
            IEnumerable<ShelfName> shelves,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            FindRelatedBooksRequest request = new FindRelatedBooksRequest
            {
                BookNames = { names },
                ShelvesAsShelfNames = { shelves },
                PageToken = pageToken ?? "",
                PageSize = pageSize ?? 0,
            };
            Modify_FindRelatedBooksRequest(ref request, ref callSettings);
            return new PagedEnumerable<FindRelatedBooksRequest, FindRelatedBooksResponse, BookName>(_callFindRelatedBooks, request, callSettings);
        }

        /// <summary>
        /// Adds a tag to the book. This RPC is a mixin.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the tag is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="tag">
        /// REQUIRED: The tag to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<AddTagResponse> AddTagAsync(
            string resource,
            string tag,
            CallSettings callSettings = null)
        {
            AddTagRequest request = new AddTagRequest
            {
                Resource = resource,
                Tag = tag,
            };
            Modify_AddTagRequest(ref request, ref callSettings);
            return _callAddTag.Async(request, callSettings);
        }

        /// <summary>
        /// Adds a tag to the book. This RPC is a mixin.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the tag is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="tag">
        /// REQUIRED: The tag to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override AddTagResponse AddTag(
            string resource,
            string tag,
            CallSettings callSettings = null)
        {
            AddTagRequest request = new AddTagRequest
            {
                Resource = resource,
                Tag = tag,
            };
            Modify_AddTagRequest(ref request, ref callSettings);
            return _callAddTag.Sync(request, callSettings);
        }

        /// <summary>
        /// Adds a label to the entity.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the label is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="label">
        /// REQUIRED: The label to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<AddLabelResponse> AddLabelAsync(
            string resource,
            string label,
            CallSettings callSettings = null)
        {
            AddLabelRequest request = new AddLabelRequest
            {
                Resource = resource,
                Label = label,
            };
            Modify_AddLabelRequest(ref request, ref callSettings);
            return _callAddLabel.Async(request, callSettings);
        }

        /// <summary>
        /// Adds a label to the entity.
        /// </summary>
        /// <param name="resource">
        /// REQUIRED: The resource which the label is being added to.
        /// Resource is usually specified as a path, such as,
        /// projects/{project}/zones/{zone}/disks/{disk}.
        /// </param>
        /// <param name="label">
        /// REQUIRED: The label to add.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override AddLabelResponse AddLabel(
            string resource,
            string label,
            CallSettings callSettings = null)
        {
            AddLabelRequest request = new AddLabelRequest
            {
                Resource = resource,
                Label = label,
            };
            Modify_AddLabelRequest(ref request, ref callSettings);
            return _callAddLabel.Sync(request, callSettings);
        }

        /// <summary>
        /// Test long-running operations
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// A Task containing the RPC response.
        /// </returns>
        public override Task<Operation> GetBigBookAsync(
            BookName name,
            CallSettings callSettings = null)
        {
            GetBookRequest request = new GetBookRequest
            {
                BookName = name,
            };
            Modify_GetBookRequest(ref request, ref callSettings);
            return _callGetBigBook.Async(request, callSettings);
        }

        /// <summary>
        /// Test long-running operations
        /// </summary>
        /// <param name="name">
        /// The name of the book to retrieve.
        /// </param>
        /// <param name="callSettings">
        /// If not null, applies overrides to this RPC call.
        /// </param>
        /// <returns>
        /// The RPC response.
        /// </returns>
        public override Operation GetBigBook(
            BookName name,
            CallSettings callSettings = null)
        {
            GetBookRequest request = new GetBookRequest
            {
                BookName = name,
            };
            Modify_GetBookRequest(ref request, ref callSettings);
            return _callGetBigBook.Sync(request, callSettings);
        }

    }

    // Partial classes to enable page-streaming

    public partial class ListShelvesRequest : IPageRequest { }
    public partial class ListShelvesResponse : IPageResponse<Shelf>
    {
        /// <summary>
        /// Returns an enumerator that iterates through the resources in this response.
        /// </summary>
        public IEnumerator<Shelf> GetEnumerator() => Shelves.GetEnumerator();

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListBooksRequest : IPageRequest { }
    public partial class ListBooksResponse : IPageResponse<Book>
    {
        /// <summary>
        /// Returns an enumerator that iterates through the resources in this response.
        /// </summary>
        public IEnumerator<Book> GetEnumerator() => Books.GetEnumerator();

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListStringsRequest : IPageRequest { }
    public partial class ListStringsResponse : IPageResponse<string>
    {
        /// <summary>
        /// Returns an enumerator that iterates through the resources in this response.
        /// </summary>
        public IEnumerator<string> GetEnumerator() => Strings.GetEnumerator();

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListStringsRequest : IPageRequest { }
    public partial class ListStringsResponse : IPageResponse<string>
    {
        /// <summary>
        /// Returns an enumerator that iterates through the resources in this response.
        /// </summary>
        public IEnumerator<string> GetEnumerator() => Strings.GetEnumerator();

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class FindRelatedBooksRequest : IPageRequest { }
    public partial class FindRelatedBooksResponse : IPageResponse<BookName>
    {
        /// <summary>
        /// Returns an enumerator that iterates through the resources in this response.
        /// </summary>
        public IEnumerator<BookName> GetEnumerator() => BookNames.GetEnumerator();

        /// <inheritdoc/>
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

}

