
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Operations resource to delete.
    operation = ""
  )

  if err = client.GlobalAccountsOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Operations resource to return.
    operation = ""
  )

  response, err := client.GlobalAccountsOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""
  )

  fn := func(page *clouduseraccounts.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.GlobalAccountsOperations.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addMember' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the group for this request.
    groupName = ""

    requestBody = &clouduseraccounts.GroupsAddMemberRequest{}
  )

  response, err := client.Groups.AddMember(project, groupName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Group resource to delete.
    groupName = ""
  )

  response, err := client.Groups.Delete(project, groupName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Group resource to return.
    groupName = ""
  )

  response, err := client.Groups.Get(project, groupName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    requestBody = &clouduseraccounts.Group{}
  )

  response, err := client.Groups.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""
  )

  fn := func(page *clouduseraccounts.GroupList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Groups.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'removeMember' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the group for this request.
    groupName = ""

    requestBody = &clouduseraccounts.GroupsRemoveMemberRequest{}
  )

  response, err := client.Groups.RemoveMember(project, groupName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getAuthorizedKeysView' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // The user account for which you want to get a list of authorized public keys.
    user = ""

    // The fully-qualified URL of the virtual machine requesting the view.
    instance = ""
  )

  response, err := client.Linux.GetAuthorizedKeysView(project, zone, user, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getLinuxAccountViews' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // The fully-qualified URL of the virtual machine requesting the views.
    instance = ""
  )

  response, err := client.Linux.GetLinuxAccountViews(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addPublicKey' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the user for this request.
    user = ""

    requestBody = &clouduseraccounts.PublicKey{}
  )

  response, err := client.Users.AddPublicKey(project, user, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the user resource to delete.
    user = ""
  )

  response, err := client.Users.Delete(project, user).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the user resource to return.
    user = ""
  )

  response, err := client.Users.Get(project, user).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    requestBody = &clouduseraccounts.User{}
  )

  response, err := client.Users.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""
  )

  fn := func(page *clouduseraccounts.UserList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Users.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouduseraccounts/v0.beta'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'removePublicKey' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the user for this request.
    user = ""

    // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
    // is defined by RFC4716 to be the MD5 digest of the public key.
    fingerprint = ""
  )

  response, err := client.Users.RemovePublicKey(project, user, fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
