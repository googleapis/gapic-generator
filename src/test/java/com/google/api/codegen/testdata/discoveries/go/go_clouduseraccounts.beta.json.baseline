
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := "" // TODO: Update placeholder value.

  if err := client.GlobalAccountsOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := "" // TODO: Update placeholder value.

  resp, err := client.GlobalAccountsOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.GlobalAccountsOperations.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the group for this request.
  groupName := "" // TODO: Update placeholder value.

  resp, err := client.Groups.AddMember(project, groupName, &clouduseraccounts.GroupsAddMemberRequest{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Group resource to delete.
  groupName := "" // TODO: Update placeholder value.

  resp, err := client.Groups.Delete(project, groupName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Group resource to return.
  groupName := "" // TODO: Update placeholder value.

  resp, err := client.Groups.Get(project, groupName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := client.Groups.Insert(project, &clouduseraccounts.Group{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.Groups.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.GroupList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the group for this request.
  groupName := "" // TODO: Update placeholder value.

  resp, err := client.Groups.RemoveMember(project, groupName, &clouduseraccounts.GroupsRemoveMemberRequest{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The user account for which you want to get a list of authorized public keys.
  user := "" // TODO: Update placeholder value.

  // The fully-qualified URL of the virtual machine requesting the view.
  instance := "" // TODO: Update placeholder value.

  resp, err := client.Linux.GetAuthorizedKeysView(project, zone, user, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The fully-qualified URL of the virtual machine requesting the views.
  instance := "" // TODO: Update placeholder value.

  resp, err := client.Linux.GetLinuxAccountViews(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the user for this request.
  user := "" // TODO: Update placeholder value.

  resp, err := client.Users.AddPublicKey(project, user, &clouduseraccounts.PublicKey{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the user resource to delete.
  user := "" // TODO: Update placeholder value.

  resp, err := client.Users.Delete(project, user).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the user resource to return.
  user := "" // TODO: Update placeholder value.

  resp, err := client.Users.Get(project, user).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := client.Users.Insert(project, &clouduseraccounts.User{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.Users.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.UserList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/clouduseraccounts/v0.beta

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/v0.beta"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouduseraccounts.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the user for this request.
  user := "" // TODO: Update placeholder value.

  // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
  // is defined by RFC4716 to be the MD5 digest of the public key.
  fingerprint := "" // TODO: Update placeholder value.

  resp, err := client.Users.RemovePublicKey(project, user, fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
