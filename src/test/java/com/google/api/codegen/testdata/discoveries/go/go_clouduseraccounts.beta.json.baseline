
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  if err := s.GlobalAccountsOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalAccountsOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.GlobalAccountsOperations.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      fmt.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the group for this request.
  groupName := "{MY-GROUP-NAME}" // TODO: Update placeholder value(s).

  groupsAddMemberRequest := &clouduseraccounts.GroupsAddMemberRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Groups.AddMember(project, groupName, &groupsAddMemberRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Group resource to delete.
  groupName := "{MY-GROUP-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Groups.Delete(project, groupName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Group resource to return.
  groupName := "{MY-GROUP-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Groups.Get(project, groupName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  group := &clouduseraccounts.Group{
    // TODO: Add the desired fields.
  }

  resp, err := s.Groups.Insert(project, &group).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Groups.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.GroupList) error {
    for _, group := range page.Items {
      // TODO: Use group
      fmt.Printf("%#v\n", group)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the group for this request.
  groupName := "{MY-GROUP-NAME}" // TODO: Update placeholder value(s).

  groupsRemoveMemberRequest := &clouduseraccounts.GroupsRemoveMemberRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Groups.RemoveMember(project, groupName, &groupsRemoveMemberRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // eg. "us-central1-f" // TODO: Update placeholder value(s).

  // The user account for which you want to get a list of authorized public keys.
  user := "{MY-USER}" // TODO: Update placeholder value(s).

  // The fully-qualified URL of the virtual machine requesting the view.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Linux.GetAuthorizedKeysView(project, zone, user, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // eg. "us-central1-f" // TODO: Update placeholder value(s).

  // The fully-qualified URL of the virtual machine requesting the views.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Linux.GetLinuxAccountViews(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the user for this request.
  user := "{MY-USER}" // TODO: Update placeholder value(s).

  publicKey := &clouduseraccounts.PublicKey{
    // TODO: Add the desired fields.
  }

  resp, err := s.Users.AddPublicKey(project, user, &publicKey).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the user resource to delete.
  user := "{MY-USER}" // TODO: Update placeholder value(s).

  resp, err := s.Users.Delete(project, user).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the user resource to return.
  user := "{MY-USER}" // TODO: Update placeholder value(s).

  resp, err := s.Users.Get(project, user).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  user := &clouduseraccounts.User{
    // TODO: Add the desired fields.
  }

  resp, err := s.Users.Insert(project, &user).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Users.List(project)
  if err := call.Pages(ctx, func(page *clouduseraccounts.UserList) error {
    for _, user := range page.Items {
      // TODO: Use user
      fmt.Printf("%#v\n", user)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouduseraccounts/beta"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, clouduseraccounts.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := clouduseraccounts.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the user for this request.
  user := "{MY-USER}" // TODO: Update placeholder value(s).

  // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
  // is defined by RFC4716 to be the MD5 digest of the public key.
  fingerprint := "{MY-FINGERPRINT}" // TODO: Update placeholder value(s).

  resp, err := s.Users.RemovePublicKey(project, user, fingerprint).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
