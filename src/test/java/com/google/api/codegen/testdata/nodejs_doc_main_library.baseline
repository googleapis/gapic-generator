============== file: src/v1/library_service_client.js ==============
/*
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/googleapis/googleapis/blob/master/library.proto,
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google
 * engineers.
 *
 * The only allowed edits are to method and file documentation. A 3-way
 * merge preserves those additions if the generated source changes.
 */
/* TODO: introduce line-wrapping so that it never exceeds the limit. */
/* jscs: disable maximumLineLength */
'use strict';

var configData = require('./library_service_client_config');
var extend = require('extend');
var gax = require('google-gax');
var merge = require('lodash.merge');

var SERVICE_ADDRESS = 'library-example.googleapis.com';

var DEFAULT_SERVICE_PORT = 443;

var CODE_GEN_NAME_VERSION = 'gapic/0.1.0';

var PAGE_DESCRIPTORS = {
  listShelves: new gax.PageDescriptor(
      'pageToken',
      'nextPageToken',
      'shelves'),
  listBooks: new gax.PageDescriptor(
      'pageToken',
      'nextPageToken',
      'books'),
  listStrings: new gax.PageDescriptor(
      'pageToken',
      'nextPageToken',
      'strings'),
  findRelatedBooks: new gax.PageDescriptor(
      'pageToken',
      'nextPageToken',
      'names')
};

var STREAM_DESCRIPTORS = {
  streamShelves: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
  streamBooks: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
  discussBook: new gax.StreamDescriptor(gax.StreamType.BIDI_STREAMING)
};

/**
 * The scopes needed to make gRPC calls to all of the methods defined in
 * this service.
 */
var ALL_SCOPES = [
  'https://www.googleapis.com/auth/cloud-platform',
  'https://www.googleapis.com/auth/library'
];

/**
 * This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of {@link Shelf}
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of {@link Book}
 *   resources, named `bookShelves/*/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * This will be created through a builder function which can be obtained by the module.
 * See the following example of how to initialize the module and how to access to the builder.
 * @see {@link libraryServiceClient}
 *
 * @example
 * var libraryV1 = require('@google-cloud/library').v1({
 *   // optional auth parameters.
 * });
 * var client = libraryV1.libraryServiceClient();
 *
 * @class
 */
function LibraryServiceClient(gaxGrpc, grpcClients, opts) {
  opts = opts || {};
  var servicePath = opts.servicePath || SERVICE_ADDRESS;
  var port = opts.port || DEFAULT_SERVICE_PORT;
  var sslCreds = opts.sslCreds || null;
  var clientConfig = opts.clientConfig || {};
  var appName = opts.appName || 'gax';
  var appVersion = opts.appVersion || gax.version;

  var googleApiClient = [
    appName + '/' + appVersion,
    CODE_GEN_NAME_VERSION,
    'gax/' + gax.version,
    'nodejs/' + process.version].join(' ');

  var bundleDescriptors = {
    publishSeries: new gax.BundleDescriptor(
      'books',
      [
        'edition',
        'shelf.name'
      ],
      'bookNames',
      gax.createByteLengthFunction(grpcClients.google.example.library.v1.Book))
  };

  var operationsClient = new gax.lro({
    auth: gaxGrpc.auth,
    grpc: gaxGrpc.grpc
  }).operationsClient({
    servicePath: servicePath,
    port: port,
    sslCreds: sslCreds,
    clientConfig: clientConfig,
    appName: appName,
    appVersion: appVersion
  });

  var longrunningDescriptors = {
    getBigBook: new gax.LongrunningDescriptor(
      operationsClient,
      grpcClients.google.example.library.v1.Book.decode,
      grpcClients.google.example.library.v1.GetBigBookMetadata.decode),
    getBigNothing: new gax.LongrunningDescriptor(
      operationsClient,
      grpcClients.google.protobuf.Empty.decode,
      grpcClients.google.example.library.v1.GetBigBookMetadata.decode)
  };

  var defaults = gaxGrpc.constructSettings(
      'google.example.library.v1.LibraryService',
      configData,
      clientConfig,
      {'x-goog-api-client': googleApiClient});

  var self = this;

  var libraryServiceStub = gaxGrpc.createStub(
      servicePath,
      port,
      grpcClients.google.example.library.v1.LibraryService,
      {sslCreds: sslCreds});
  var libraryServiceStubMethods = [
    'createShelf',
    'getShelf',
    'listShelves',
    'deleteShelf',
    'mergeShelves',
    'createBook',
    'publishSeries',
    'getBook',
    'listBooks',
    'deleteBook',
    'updateBook',
    'moveBook',
    'listStrings',
    'addComments',
    'getBookFromArchive',
    'getBookFromAnywhere',
    'updateBookIndex',
    'streamShelves',
    'streamBooks',
    'discussBook',
    'findRelatedBooks',
    'addTag',
    'getBigBook',
    'getBigNothing'
  ];
  libraryServiceStubMethods.forEach(function(methodName) {
    self['_' + methodName] = gax.createApiCall(
      libraryServiceStub.then(function(libraryServiceStub) {
        return function() {
          var args = Array.prototype.slice.call(arguments, 0);
          return libraryServiceStub[methodName].apply(libraryServiceStub, args);
        }
      }),
      defaults[methodName],
      PAGE_DESCRIPTORS[methodName] || bundleDescriptors[methodName] || STREAM_DESCRIPTORS[methodName] || longrunningDescriptors[methodName]);
  });

  var labelerStub = gaxGrpc.createStub(
      servicePath,
      port,
      grpcClients.google.tagger.v1.Labeler,
      {sslCreds: sslCreds});
  var labelerStubMethods = [
    'addLabel'
  ];
  labelerStubMethods.forEach(function(methodName) {
    self['_' + methodName] = gax.createApiCall(
      labelerStub.then(function(labelerStub) {
        return function() {
          var args = Array.prototype.slice.call(arguments, 0);
          return labelerStub[methodName].apply(labelerStub, args);
        }
      }),
      defaults[methodName],
      PAGE_DESCRIPTORS[methodName] || bundleDescriptors[methodName] || STREAM_DESCRIPTORS[methodName] || longrunningDescriptors[methodName]);
  });
}

// Path templates

var SHELF_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf_id}');

var BOOK_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf_id}/books/{book_id}');

var RETURN_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf}/books/{book}/returns/{return}');

/**
 * Returns a fully-qualified shelf resource name string.
 * @param {String} shelfId
 * @returns {String}
 */
LibraryServiceClient.prototype.shelfPath = function(shelfId) {
  return SHELF_PATH_TEMPLATE.render({
    shelf_id: shelfId
  });
};

/**
 * Parses the shelfName from a shelf resource.
 * @param {String} shelfName
 *   A fully-qualified path representing a shelf resources.
 * @returns {String} - A string representing the shelf_id.
 */
LibraryServiceClient.prototype.matchShelfIdFromShelfName = function(shelfName) {
  return SHELF_PATH_TEMPLATE.match(shelfName).shelf_id;
};

/**
 * Returns a fully-qualified book resource name string.
 * @param {String} shelfId
 * @param {String} bookId
 * @returns {String}
 */
LibraryServiceClient.prototype.bookPath = function(shelfId, bookId) {
  return BOOK_PATH_TEMPLATE.render({
    shelf_id: shelfId,
    book_id: bookId
  });
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the shelf_id.
 */
LibraryServiceClient.prototype.matchShelfIdFromBookName = function(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).shelf_id;
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the book_id.
 */
LibraryServiceClient.prototype.matchBookIdFromBookName = function(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).book_id;
};

/**
 * Returns a fully-qualified return resource name string.
 * @param {String} shelf
 * @param {String} book
 * @param {String} return
 * @returns {String}
 */
LibraryServiceClient.prototype.returnPath = function(shelf, book, return_) {
  return RETURN_PATH_TEMPLATE.render({
    shelf: shelf,
    book: book,
    return: return_
  });
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the shelf.
 */
LibraryServiceClient.prototype.matchShelfFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).shelf;
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the book.
 */
LibraryServiceClient.prototype.matchBookFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).book;
};

/**
 * Parses the returnName from a return resource.
 * @param {String} returnName
 *   A fully-qualified path representing a return resources.
 * @returns {String} - A string representing the return.
 */
LibraryServiceClient.prototype.matchReturnFromReturnName = function(returnName) {
  return RETURN_PATH_TEMPLATE.match(returnName).return;
};

// Service calls

/**
 * Creates a shelf, and returns the new Shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {Object} request.shelf
 *   The shelf to create.
 *
 *   This object should have the same structure as [Shelf]{@link Shelf}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link Shelf}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var shelf = {};
 * client.createShelf({shelf: shelf}).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.createShelf = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._createShelf(request, options, callback);
};

/**
 * Gets a shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf to retrieve.
 * @param {string} request.options
 *   To test 'options' parameter name conflict.
 * @param {Object=} request.message
 *   Field to verify that message-type query parameter gets flattened.
 *
 *   This object should have the same structure as [SomeMessage]{@link SomeMessage}
 * @param {Object=} request.stringBuilder
 *   This object should have the same structure as [StringBuilder]{@link StringBuilder}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link Shelf}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * var options = '';
 * var request = {
 *     name: formattedName,
 *     options: options
 * };
 * client.getShelf(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getShelf = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getShelf(request, options, callback);
};

/**
 * Lists shelves.
 *
 * @param {Object=} request
 *   The request object that will be sent.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is Array of [Shelf]{@link Shelf}.
 *
 *   When autoPaginate: false is specified through options, it contains the result
 *   in a single response. If the response indicates the next page exists, the third
 *   parameter is set to be used for the next request object. The fourth parameter keeps
 *   the raw response object of an object representing [ListShelvesResponse]{@link ListShelvesResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Shelf]{@link Shelf}.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Shelf]{@link Shelf} in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [ListShelvesResponse]{@link ListShelvesResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 *
 * // Iterate over all elements.
 * client.listShelves({}).then(function(responses) {
 *     var resources = responses[0];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i])
 *     }
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Or obtain the paged response.
 * var options = {autoPaginate: false};
 * function callback(responses) {
 *     // The actual resources in a response.
 *     var resources = responses[0];
 *     // The next request if the response shows there's more responses.
 *     var nextRequest = responses[1];
 *     // The actual response object, if necessary.
 *     // var rawResponse = responses[2];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i]);
 *     }
 *     if (nextRequest) {
 *         // Fetch the next page.
 *         return client.listShelves(nextRequest, options).then(callback);
 *     }
 * }
 * client.listShelves({}, options)
 *     .then(callback)
 *     .catch(function(err) {
 *         console.error(err);
 *     });
 */
LibraryServiceClient.prototype.listShelves = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  if (request === undefined) {
    request = {};
  }
  return this._listShelves(request, options, callback);
};

/**
 * Equivalent to {@link listShelves}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listShelves} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object=} request
 *   The request object that will be sent.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @return {Stream}
 *   An object stream which emits an object representing [Shelf]{@link Shelf} on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 *
 * client.listShelvesStream({}).on('data', function(element) {
 *     // doThingsWith(element)
 * }).on('error', function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.listShelvesStream = function(request, options) {
  if (options === undefined) {
    options = {};
  }
  if (request === undefined) {
    request = {};
  }
  return PAGE_DESCRIPTORS.listShelves.createStream(this._listShelves, request, options);
};

/**
 * Deletes a shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf to delete.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @return {Promise} - The promise which resolves when API call finishes.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * client.deleteShelf({name: formattedName}).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.deleteShelf = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._deleteShelf(request, options, callback);
};

/**
 * Merges two shelves by adding all books from the shelf named
 * `other_shelf_name` to shelf `name`, and deletes
 * `other_shelf_name`. Returns the updated shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf we're adding books to.
 * @param {string} request.otherShelfName
 *   The name of the shelf we're removing books from and deleting.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Shelf]{@link Shelf}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
 * var request = {
 *     name: formattedName,
 *     otherShelfName: formattedOtherShelfName
 * };
 * client.mergeShelves(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.mergeShelves = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._mergeShelves(request, options, callback);
};

/**
 * Creates a book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf in which the book is created.
 * @param {Object} request.book
 *   The book to create.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link Book}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * var book = {};
 * var request = {
 *     name: formattedName,
 *     book: book
 * };
 * client.createBook(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.createBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._createBook(request, options, callback);
};

/**
 * Creates a series of books.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {Object} request.shelf
 *   The shelf in which the series is created.
 *
 *   This object should have the same structure as [Shelf]{@link Shelf}
 * @param {Object[]} request.books
 *   The books to publish in the series.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {number=} request.edition
 *   The edition of the series
 * @param {boolean=} request.reviewCopy
 *   If the book is in a pre-publish state
 * @param {string=} request.seriesUuid
 *   Uniquely identifies the series to the publishing house.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [PublishSeriesResponse]{@link PublishSeriesResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [PublishSeriesResponse]{@link PublishSeriesResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var shelf = {};
 * var books = [];
 * var request = {
 *     shelf: shelf,
 *     books: books
 * };
 * client.publishSeries(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.publishSeries = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._publishSeries(request, options, callback);
};

/**
 * Gets a book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link Book}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * client.getBook({name: formattedName}).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getBook(request, options, callback);
};

/**
 * Lists books in a shelf.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf whose books we'd like to list.
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {string=} request.filter
 *   To test python built-in wrapping.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is Array of [Book]{@link Book}.
 *
 *   When autoPaginate: false is specified through options, it contains the result
 *   in a single response. If the response indicates the next page exists, the third
 *   parameter is set to be used for the next request object. The fourth parameter keeps
 *   the raw response object of an object representing [ListBooksResponse]{@link ListBooksResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Book]{@link Book}.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Book]{@link Book} in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [ListBooksResponse]{@link ListBooksResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * // Iterate over all elements.
 * client.listBooks({name: formattedName}).then(function(responses) {
 *     var resources = responses[0];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i])
 *     }
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Or obtain the paged response.
 * var options = {autoPaginate: false};
 * function callback(responses) {
 *     // The actual resources in a response.
 *     var resources = responses[0];
 *     // The next request if the response shows there's more responses.
 *     var nextRequest = responses[1];
 *     // The actual response object, if necessary.
 *     // var rawResponse = responses[2];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i]);
 *     }
 *     if (nextRequest) {
 *         // Fetch the next page.
 *         return client.listBooks(nextRequest, options).then(callback);
 *     }
 * }
 * client.listBooks({name: formattedName}, options)
 *     .then(callback)
 *     .catch(function(err) {
 *         console.error(err);
 *     });
 */
LibraryServiceClient.prototype.listBooks = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._listBooks(request, options, callback);
};

/**
 * Equivalent to {@link listBooks}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listBooks} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf whose books we'd like to list.
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {string=} request.filter
 *   To test python built-in wrapping.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @return {Stream}
 *   An object stream which emits an object representing [Book]{@link Book} on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.shelfPath("[SHELF_ID]");
 * client.listBooksStream({name: formattedName}).on('data', function(element) {
 *     // doThingsWith(element)
 * }).on('error', function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.listBooksStream = function(request, options) {
  if (options === undefined) {
    options = {};
  }

  return PAGE_DESCRIPTORS.listBooks.createStream(this._listBooks, request, options);
};

/**
 * Deletes a book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to delete.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @return {Promise} - The promise which resolves when API call finishes.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * client.deleteBook({name: formattedName}).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.deleteBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._deleteBook(request, options, callback);
};

/**
 * Updates a book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to update.
 * @param {Object} request.book
 *   The book to update with.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {Object=} request.updateMask
 *   A field mask to apply, rendered as an HTTP parameter.
 *
 *   This object should have the same structure as [google.protobuf.FieldMask]{@link external:"google.protobuf.FieldMask"}
 * @param {Object=} request.physicalMask
 *   To test Python import clash resolution.
 *
 *   This object should have the same structure as [FieldMask]{@link FieldMask}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link Book}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var book = {};
 * var request = {
 *     name: formattedName,
 *     book: book
 * };
 * client.updateBook(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.updateBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._updateBook(request, options, callback);
};

/**
 * Moves a book to another shelf, and returns the new book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to move.
 * @param {string} request.otherShelfName
 *   The name of the destination shelf.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Book]{@link Book}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
 * var request = {
 *     name: formattedName,
 *     otherShelfName: formattedOtherShelfName
 * };
 * client.moveBook(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.moveBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._moveBook(request, options, callback);
};

/**
 * Lists a primitive resource. To test go page streaming.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string=} request.name
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is Array of string.
 *
 *   When autoPaginate: false is specified through options, it contains the result
 *   in a single response. If the response indicates the next page exists, the third
 *   parameter is set to be used for the next request object. The fourth parameter keeps
 *   the raw response object of an object representing [ListStringsResponse]{@link ListStringsResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of string in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [ListStringsResponse]{@link ListStringsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 *
 * // Iterate over all elements.
 * client.listStrings({}).then(function(responses) {
 *     var resources = responses[0];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i])
 *     }
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Or obtain the paged response.
 * var options = {autoPaginate: false};
 * function callback(responses) {
 *     // The actual resources in a response.
 *     var resources = responses[0];
 *     // The next request if the response shows there's more responses.
 *     var nextRequest = responses[1];
 *     // The actual response object, if necessary.
 *     // var rawResponse = responses[2];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i]);
 *     }
 *     if (nextRequest) {
 *         // Fetch the next page.
 *         return client.listStrings(nextRequest, options).then(callback);
 *     }
 * }
 * client.listStrings({}, options)
 *     .then(callback)
 *     .catch(function(err) {
 *         console.error(err);
 *     });
 */
LibraryServiceClient.prototype.listStrings = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._listStrings(request, options, callback);
};

/**
 * Equivalent to {@link listStrings}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listStrings} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string=} request.name
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @return {Stream}
 *   An object stream which emits a string on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 *
 * client.listStringsStream({}).on('data', function(element) {
 *     // doThingsWith(element)
 * }).on('error', function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.listStringsStream = function(request, options) {
  if (options === undefined) {
    options = {};
  }

  return PAGE_DESCRIPTORS.listStrings.createStream(this._listStrings, request, options);
};

/**
 * Adds comments to a book
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 * @param {Object[]} request.comments
 *   This object should have the same structure as [Comment]{@link Comment}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @return {Promise} - The promise which resolves when API call finishes.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var comment = '';
 * var stage = libraryV1.Comment.Stage.UNSET;
 * var alignment = libraryV1.SomeMessage2.SomeMessage3.Alignment.CHAR;
 * var commentsElement = {
 *     comment : comment,
 *     stage : stage,
 *     alignment : alignment
 * };
 * var comments = [commentsElement];
 * var request = {
 *     name: formattedName,
 *     comments: comments
 * };
 * client.addComments(request).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.addComments = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._addComments(request, options, callback);
};

/**
 * Gets a book from an archive.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [BookFromArchive]{@link BookFromArchive}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BookFromArchive]{@link BookFromArchive}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
 * client.getBookFromArchive({name: formattedName}).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getBookFromArchive = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getBookFromArchive(request, options, callback);
};

/**
 * Gets a book from a shelf or archive.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {string} request.altBookName
 *   An alternate book name, used to test restricting flattened field to a
 *   single resource name type in a oneof.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [BookFromAnywhere]{@link BookFromAnywhere}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BookFromAnywhere]{@link BookFromAnywhere}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var request = {
 *     name: formattedName,
 *     altBookName: formattedAltBookName
 * };
 * client.getBookFromAnywhere(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getBookFromAnywhere = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getBookFromAnywhere(request, options, callback);
};

/**
 * Updates the index of a book.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to update.
 * @param {string} request.indexName
 *   The name of the index for the book
 * @param {Object.<string, string>} request.indexMap
 *   The index to update the book with
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @return {Promise} - The promise which resolves when API call finishes.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var indexName = 'default index';
 * var indexMapItem = '';
 * var indexMap = {'default_key' : indexMapItem,};
 * var request = {
 *     name: formattedName,
 *     indexName: indexName,
 *     indexMap: indexMap
 * };
 * client.updateBookIndex(request).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.updateBookIndex = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._updateBookIndex(request, options, callback);
};

/**
 * Test server streaming
 * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
 *
 * @param {Object=} request
 *   The request object that will be sent.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @returns {Stream}
 *   An object stream which emits [StreamShelvesResponse]{@link StreamShelvesResponse} on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 *
 * client.streamShelves({}).on('data', function(response) {
 *     // doThingsWith(response)
 * });
 */
LibraryServiceClient.prototype.streamShelves = function(request, options) {
  if (options === undefined) {
    options = {};
  }
  if (request === undefined) {
    request = {};
  }
  return this._streamShelves(request, options);
};

/**
 * Test server streaming, non-paged responses.
 * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the shelf whose books we'd like to list.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @returns {Stream}
 *   An object stream which emits [Book]{@link Book} on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var name = '';
 * client.streamBooks({name: name}).on('data', function(response) {
 *     // doThingsWith(response)
 * });
 */
LibraryServiceClient.prototype.streamBooks = function(request, options) {
  if (options === undefined) {
    options = {};
  }

  return this._streamBooks(request, options);
};

/**
 * Test bidi-streaming.
 * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
 *
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @returns {Stream}
 *   An object stream which is both readable and writable. It accepts objects
 *   representing [DiscussBookRequest]{@link DiscussBookRequest} for write() method, and
 *   will emit objects representing [Comment]{@link Comment} on 'data' event asynchronously.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var stream = client.discussBook().on('data', function(response) {
 *     // doThingsWith(response);
 * });
 * var name = '';
 * var request = {
 *     name : name
 * };
 * // Write request objects.
 * stream.write(request);
 */
LibraryServiceClient.prototype.discussBook = function(options) {
  if (options === undefined) {
    options = {};
  }

  return this._discussBook(options);
};

/**
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string[]} request.names
 * @param {string[]} request.shelves
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is Array of string.
 *
 *   When autoPaginate: false is specified through options, it contains the result
 *   in a single response. If the response indicates the next page exists, the third
 *   parameter is set to be used for the next request object. The fourth parameter keeps
 *   the raw response object of an object representing [FindRelatedBooksResponse]{@link FindRelatedBooksResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of string.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of string in a single response.
 *   The second element is the next request object if the response
 *   indicates the next page exists, or null. The third element is
 *   an object representing [FindRelatedBooksResponse]{@link FindRelatedBooksResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var namesElement = '';
 * var names = [namesElement];
 * var shelves = [];
 * var request = {
 *     names: names,
 *     shelves: shelves
 * };
 * // Iterate over all elements.
 * client.findRelatedBooks(request).then(function(responses) {
 *     var resources = responses[0];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i])
 *     }
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Or obtain the paged response.
 * var options = {autoPaginate: false};
 * function callback(responses) {
 *     // The actual resources in a response.
 *     var resources = responses[0];
 *     // The next request if the response shows there's more responses.
 *     var nextRequest = responses[1];
 *     // The actual response object, if necessary.
 *     // var rawResponse = responses[2];
 *     for (var i = 0; i < resources.length; ++i) {
 *         // doThingsWith(resources[i]);
 *     }
 *     if (nextRequest) {
 *         // Fetch the next page.
 *         return client.findRelatedBooks(nextRequest, options).then(callback);
 *     }
 * }
 * client.findRelatedBooks(request, options)
 *     .then(callback)
 *     .catch(function(err) {
 *         console.error(err);
 *     });
 */
LibraryServiceClient.prototype.findRelatedBooks = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._findRelatedBooks(request, options, callback);
};

/**
 * Equivalent to {@link findRelatedBooks}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link findRelatedBooks} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string[]} request.names
 * @param {string[]} request.shelves
 * @param {number=} request.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @return {Stream}
 *   An object stream which emits a string on 'data' event.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var namesElement = '';
 * var names = [namesElement];
 * var shelves = [];
 * var request = {
 *     names: names,
 *     shelves: shelves
 * };
 * client.findRelatedBooksStream(request).on('data', function(element) {
 *     // doThingsWith(element)
 * }).on('error', function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.findRelatedBooksStream = function(request, options) {
  if (options === undefined) {
    options = {};
  }

  return PAGE_DESCRIPTORS.findRelatedBooks.createStream(this._findRelatedBooks, request, options);
};

/**
 * Adds a tag to the book. This RPC is a mixin.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource which the tag is being added to.
 *   Resource is usually specified as a path, such as,
 *   projects/{project}/zones/{zone}/disks/{disk}.
 * @param {string} request.tag
 *   REQUIRED: The tag to add.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [AddTagResponse]{@link AddTagResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AddTagResponse]{@link AddTagResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var tag = '';
 * var request = {
 *     resource: formattedResource,
 *     tag: tag
 * };
 * client.addTag(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.addTag = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._addTag(request, options, callback);
};

/**
 * Adds a label to the entity.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource which the label is being added to.
 *   Resource is usually specified as a path, such as,
 *   projects/{project}/zones/{zone}/disks/{disk}.
 * @param {string} request.label
 *   REQUIRED: The label to add.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [AddLabelResponse]{@link AddLabelResponse}.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AddLabelResponse]{@link AddLabelResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 * var label = '';
 * var request = {
 *     resource: formattedResource,
 *     label: label
 * };
 * client.addLabel(request).then(function(responses) {
 *     var response = responses[0];
 *     // doThingsWith(response)
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.addLabel = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._addLabel(request, options, callback);
};

/**
 * Test long-running operations
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 *
 * // Handle the operation using the promise pattern.
 * client.getBigBook({name: formattedName}).then(function(responses) {
 *     var operation = responses[0];
 *     var initialApiResponse = responses[1];
 *
 *     // Operation#promise starts polling for the completion of the LRO.
 *     return operation.promise();
 * }).then(function(responses) {
 *     // The final result of the operation.
 *     var result = responses[0];
 *
 *     // The metadata value of the completed operation.
 *     var metadata = responses[1];
 *
 *     // The response of the api call returning the complete operation.
 *     var finalApiResponse = responses[2];
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Handle the operation using the event emitter pattern.
 * client.getBigBook({name: formattedName}).then(function(responses) {
 *     var operation = responses[0];
 *     var initialApiResponse = responses[1];
 *
 *     // Adding a listener for the "complete" event starts polling for the
 *     // completion of the operation.
 *     operation.on('complete', function(result, metadata, finalApiResponse) {
 *       // doSomethingWith(result);
 *     });
 *
 *     // Adding a listener for the "progress" event causes the callback to be
 *     // called on any change in metadata when the operation is polled.
 *     operation.on('progress', function(metadata, apiResponse) {
 *       // doSomethingWith(metadata)
 *     })
 *
 *     // Adding a listener for the "error" event handles any errors found during polling.
 *     operation.on('error', function(err) {
 *       // throw(err);
 *     })
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getBigBook = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getBigBook(request, options, callback);
};

/**
 * Test long-running operations with empty return type.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
 * @return {Promise} - The promise which resolves to an array.
 *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var client = libraryV1.libraryServiceClient();
 * var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
 *
 * // Handle the operation using the promise pattern.
 * client.getBigNothing({name: formattedName}).then(function(responses) {
 *     var operation = responses[0];
 *     var initialApiResponse = responses[1];
 *
 *     // Operation#promise starts polling for the completion of the LRO.
 *     return operation.promise();
 * }).then(function(responses) {
 *     // The final result of the operation.
 *     var result = responses[0];
 *
 *     // The metadata value of the completed operation.
 *     var metadata = responses[1];
 *
 *     // The response of the api call returning the complete operation.
 *     var finalApiResponse = responses[2];
 * }).catch(function(err) {
 *     console.error(err);
 * });
 *
 * // Handle the operation using the event emitter pattern.
 * client.getBigNothing({name: formattedName}).then(function(responses) {
 *     var operation = responses[0];
 *     var initialApiResponse = responses[1];
 *
 *     // Adding a listener for the "complete" event starts polling for the
 *     // completion of the operation.
 *     operation.on('complete', function(result, metadata, finalApiResponse) {
 *       // doSomethingWith(result);
 *     });
 *
 *     // Adding a listener for the "progress" event causes the callback to be
 *     // called on any change in metadata when the operation is polled.
 *     operation.on('progress', function(metadata, apiResponse) {
 *       // doSomethingWith(metadata)
 *     })
 *
 *     // Adding a listener for the "error" event handles any errors found during polling.
 *     operation.on('error', function(err) {
 *       // throw(err);
 *     })
 * }).catch(function(err) {
 *     console.error(err);
 * });
 */
LibraryServiceClient.prototype.getBigNothing = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }

  return this._getBigNothing(request, options, callback);
};

function LibraryServiceClientBuilder(gaxGrpc) {
  if (!(this instanceof LibraryServiceClientBuilder)) {
    return new LibraryServiceClientBuilder(gaxGrpc);
  }

  var libraryServiceClient = gaxGrpc.load([{
    root: require('google-proto-files')('..'),
    file: 'library.proto'
  }]);
  extend(this, libraryServiceClient.google.example.library.v1);

  var labelerClient = gaxGrpc.load([{
    root: require('google-proto-files')('..'),
    file: 'tagger.proto'
  }]);
  extend(this, labelerClient.google.tagger.v1);

  var grpcClients = merge(
    {},
    libraryServiceClient,
    labelerClient
  );

  /**
   * Build a new instance of {@link LibraryServiceClient}.
   *
   * @param {Object=} opts - The optional parameters.
   * @param {String=} opts.servicePath
   *   The domain name of the API remote host.
   * @param {number=} opts.port
   *   The port on which to connect to the remote host.
   * @param {grpc.ClientCredentials=} opts.sslCreds
   *   A ClientCredentials for use with an SSL-enabled channel.
   * @param {Object=} opts.clientConfig
   *   The customized config to build the call settings. See
   *   {@link gax.constructSettings} for the format.
   * @param {number=} opts.appName
   *   The codename of the calling service.
   * @param {String=} opts.appVersion
   *   The version of the calling service.
   */
  this.libraryServiceClient = function(opts) {
    return new LibraryServiceClient(gaxGrpc, grpcClients, opts);
  };
  extend(this.libraryServiceClient, LibraryServiceClient);
}
module.exports = LibraryServiceClientBuilder;
module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
module.exports.ALL_SCOPES = ALL_SCOPES;
