
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Account ID.
            long summaryAccountId = 0L;


            AccountActiveAdSummariesResource.GetRequest request = dfareportingService.AccountActiveAdSummaries.Get(profileId, summaryAccountId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountActiveAdSummary response = request.Execute();
            // Data.AccountActiveAdSummary response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Account permission group ID.
            long id = 0L;


            AccountPermissionGroupsResource.GetRequest request = dfareportingService.AccountPermissionGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountPermissionGroup response = request.Execute();
            // Data.AccountPermissionGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AccountPermissionGroupsResource.ListRequest request = dfareportingService.AccountPermissionGroups.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountPermissionGroupsListResponse response = request.Execute();
            // Data.AccountPermissionGroupsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Account permission ID.
            long id = 0L;


            AccountPermissionsResource.GetRequest request = dfareportingService.AccountPermissions.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountPermission response = request.Execute();
            // Data.AccountPermission response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AccountPermissionsResource.ListRequest request = dfareportingService.AccountPermissions.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountPermissionsListResponse response = request.Execute();
            // Data.AccountPermissionsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User profile ID.
            long id = 0L;


            AccountUserProfilesResource.GetRequest request = dfareportingService.AccountUserProfiles.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountUserProfile response = request.Execute();
            // Data.AccountUserProfile response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.AccountUserProfile requestBody = new Data.AccountUserProfile();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AccountUserProfilesResource.InsertRequest request = dfareportingService.AccountUserProfiles.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountUserProfile response = request.Execute();
            // Data.AccountUserProfile response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AccountUserProfilesResource.ListRequest request = dfareportingService.AccountUserProfiles.List(profileId);

            Data.AccountUserProfilesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.AccountUserProfiles == null)
                {
                    continue;
                }
                foreach (Data.AccountUserProfile accountUserProfile in response.AccountUserProfiles)
                {
                    // TODO: Change code below to process each `accountUserProfile` resource:
                    Console.WriteLine(accountUserProfile);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User profile ID.
            long id = 0L;


            Data.AccountUserProfile requestBody = new Data.AccountUserProfile();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AccountUserProfilesResource.PatchRequest request = dfareportingService.AccountUserProfiles.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountUserProfile response = request.Execute();
            // Data.AccountUserProfile response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.AccountUserProfile requestBody = new Data.AccountUserProfile();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AccountUserProfilesResource.UpdateRequest request = dfareportingService.AccountUserProfiles.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountUserProfile response = request.Execute();
            // Data.AccountUserProfile response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Account ID.
            long id = 0L;


            AccountsResource.GetRequest request = dfareportingService.Accounts.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AccountsResource.ListRequest request = dfareportingService.Accounts.List(profileId);

            Data.AccountsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Accounts == null)
                {
                    continue;
                }
                foreach (Data.Account account in response.Accounts)
                {
                    // TODO: Change code below to process each `account` resource:
                    Console.WriteLine(account);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Account ID.
            long id = 0L;


            Data.Account requestBody = new Data.Account();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AccountsResource.PatchRequest request = dfareportingService.Accounts.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Account requestBody = new Data.Account();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AccountsResource.UpdateRequest request = dfareportingService.Accounts.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Ad ID.
            long id = 0L;


            AdsResource.GetRequest request = dfareportingService.Ads.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Ad response = request.Execute();
            // Data.Ad response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Ad requestBody = new Data.Ad();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdsResource.InsertRequest request = dfareportingService.Ads.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Ad response = request.Execute();
            // Data.Ad response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AdsResource.ListRequest request = dfareportingService.Ads.List(profileId);

            Data.AdsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Ads == null)
                {
                    continue;
                }
                foreach (Data.Ad ad in response.Ads)
                {
                    // TODO: Change code below to process each `ad` resource:
                    Console.WriteLine(ad);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Ad ID.
            long id = 0L;


            Data.Ad requestBody = new Data.Ad();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AdsResource.PatchRequest request = dfareportingService.Ads.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Ad response = request.Execute();
            // Data.Ad response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Ad requestBody = new Data.Ad();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdsResource.UpdateRequest request = dfareportingService.Ads.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Ad response = request.Execute();
            // Data.Ad response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser group ID.
            long id = 0L;


            AdvertiserGroupsResource.DeleteRequest request = dfareportingService.AdvertiserGroups.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser group ID.
            long id = 0L;


            AdvertiserGroupsResource.GetRequest request = dfareportingService.AdvertiserGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AdvertiserGroup response = request.Execute();
            // Data.AdvertiserGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.AdvertiserGroup requestBody = new Data.AdvertiserGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdvertiserGroupsResource.InsertRequest request = dfareportingService.AdvertiserGroups.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AdvertiserGroup response = request.Execute();
            // Data.AdvertiserGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AdvertiserGroupsResource.ListRequest request = dfareportingService.AdvertiserGroups.List(profileId);

            Data.AdvertiserGroupsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.AdvertiserGroups == null)
                {
                    continue;
                }
                foreach (Data.AdvertiserGroup advertiserGroup in response.AdvertiserGroups)
                {
                    // TODO: Change code below to process each `advertiserGroup` resource:
                    Console.WriteLine(advertiserGroup);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser group ID.
            long id = 0L;


            Data.AdvertiserGroup requestBody = new Data.AdvertiserGroup();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AdvertiserGroupsResource.PatchRequest request = dfareportingService.AdvertiserGroups.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AdvertiserGroup response = request.Execute();
            // Data.AdvertiserGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.AdvertiserGroup requestBody = new Data.AdvertiserGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdvertiserGroupsResource.UpdateRequest request = dfareportingService.AdvertiserGroups.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AdvertiserGroup response = request.Execute();
            // Data.AdvertiserGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser ID.
            long id = 0L;


            AdvertisersResource.GetRequest request = dfareportingService.Advertisers.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Advertiser response = request.Execute();
            // Data.Advertiser response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Advertiser requestBody = new Data.Advertiser();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdvertisersResource.InsertRequest request = dfareportingService.Advertisers.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Advertiser response = request.Execute();
            // Data.Advertiser response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            AdvertisersResource.ListRequest request = dfareportingService.Advertisers.List(profileId);

            Data.AdvertisersListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Advertisers == null)
                {
                    continue;
                }
                foreach (Data.Advertiser advertiser in response.Advertisers)
                {
                    // TODO: Change code below to process each `advertiser` resource:
                    Console.WriteLine(advertiser);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser ID.
            long id = 0L;


            Data.Advertiser requestBody = new Data.Advertiser();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AdvertisersResource.PatchRequest request = dfareportingService.Advertisers.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Advertiser response = request.Execute();
            // Data.Advertiser response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Advertiser requestBody = new Data.Advertiser();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AdvertisersResource.UpdateRequest request = dfareportingService.Advertisers.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Advertiser response = request.Execute();
            // Data.Advertiser response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            BrowsersResource.ListRequest request = dfareportingService.Browsers.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BrowsersListResponse response = request.Execute();
            // Data.BrowsersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Campaign ID in this association.
            long campaignId = 0L;


            Data.CampaignCreativeAssociation requestBody = new Data.CampaignCreativeAssociation();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CampaignCreativeAssociationsResource.InsertRequest request = dfareportingService.CampaignCreativeAssociations.Insert(requestBody, profileId, campaignId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CampaignCreativeAssociation response = request.Execute();
            // Data.CampaignCreativeAssociation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Campaign ID in this association.
            long campaignId = 0L;


            CampaignCreativeAssociationsResource.ListRequest request = dfareportingService.CampaignCreativeAssociations.List(profileId, campaignId);

            Data.CampaignCreativeAssociationsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CampaignCreativeAssociations == null)
                {
                    continue;
                }
                foreach (Data.CampaignCreativeAssociation campaignCreativeAssociation in response.CampaignCreativeAssociations)
                {
                    // TODO: Change code below to process each `campaignCreativeAssociation` resource:
                    Console.WriteLine(campaignCreativeAssociation);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Campaign ID.
            long id = 0L;


            CampaignsResource.GetRequest request = dfareportingService.Campaigns.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Campaign response = request.Execute();
            // Data.Campaign response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Default landing page name for this new campaign. Must be less than 256 characters long.
            string defaultLandingPageName = "{MY-DEFAULT-LANDING-PAGE-NAME}";

            // Default landing page URL for this new campaign.
            string defaultLandingPageUrl = "{MY-DEFAULT-LANDING-PAGE-URL}";


            Data.Campaign requestBody = new Data.Campaign();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CampaignsResource.InsertRequest request = dfareportingService.Campaigns.Insert(requestBody, profileId, defaultLandingPageName, defaultLandingPageUrl);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Campaign response = request.Execute();
            // Data.Campaign response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CampaignsResource.ListRequest request = dfareportingService.Campaigns.List(profileId);

            Data.CampaignsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Campaigns == null)
                {
                    continue;
                }
                foreach (Data.Campaign campaign in response.Campaigns)
                {
                    // TODO: Change code below to process each `campaign` resource:
                    Console.WriteLine(campaign);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Campaign ID.
            long id = 0L;


            Data.Campaign requestBody = new Data.Campaign();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            CampaignsResource.PatchRequest request = dfareportingService.Campaigns.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Campaign response = request.Execute();
            // Data.Campaign response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Campaign requestBody = new Data.Campaign();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CampaignsResource.UpdateRequest request = dfareportingService.Campaigns.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Campaign response = request.Execute();
            // Data.Campaign response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Change log ID.
            long id = 0L;


            ChangeLogsResource.GetRequest request = dfareportingService.ChangeLogs.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ChangeLog response = request.Execute();
            // Data.ChangeLog response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            ChangeLogsResource.ListRequest request = dfareportingService.ChangeLogs.List(profileId);

            Data.ChangeLogsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ChangeLogs == null)
                {
                    continue;
                }
                foreach (Data.ChangeLog changeLog in response.ChangeLogs)
                {
                    // TODO: Change code below to process each `changeLog` resource:
                    Console.WriteLine(changeLog);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CitiesResource.ListRequest request = dfareportingService.Cities.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CitiesListResponse response = request.Execute();
            // Data.CitiesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Connection type ID.
            long id = 0L;


            ConnectionTypesResource.GetRequest request = dfareportingService.ConnectionTypes.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ConnectionType response = request.Execute();
            // Data.ConnectionType response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            ConnectionTypesResource.ListRequest request = dfareportingService.ConnectionTypes.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ConnectionTypesListResponse response = request.Execute();
            // Data.ConnectionTypesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Content category ID.
            long id = 0L;


            ContentCategoriesResource.DeleteRequest request = dfareportingService.ContentCategories.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Content category ID.
            long id = 0L;


            ContentCategoriesResource.GetRequest request = dfareportingService.ContentCategories.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ContentCategory response = request.Execute();
            // Data.ContentCategory response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.ContentCategory requestBody = new Data.ContentCategory();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ContentCategoriesResource.InsertRequest request = dfareportingService.ContentCategories.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ContentCategory response = request.Execute();
            // Data.ContentCategory response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            ContentCategoriesResource.ListRequest request = dfareportingService.ContentCategories.List(profileId);

            Data.ContentCategoriesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ContentCategories == null)
                {
                    continue;
                }
                foreach (Data.ContentCategory contentCategory in response.ContentCategories)
                {
                    // TODO: Change code below to process each `contentCategory` resource:
                    Console.WriteLine(contentCategory);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Content category ID.
            long id = 0L;


            Data.ContentCategory requestBody = new Data.ContentCategory();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            ContentCategoriesResource.PatchRequest request = dfareportingService.ContentCategories.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ContentCategory response = request.Execute();
            // Data.ContentCategory response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.ContentCategory requestBody = new Data.ContentCategory();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ContentCategoriesResource.UpdateRequest request = dfareportingService.ContentCategories.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ContentCategory response = request.Execute();
            // Data.ContentCategory response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Batchinsert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.ConversionsBatchInsertRequest requestBody = new Data.ConversionsBatchInsertRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ConversionsResource.BatchinsertRequest request = dfareportingService.Conversions.Batchinsert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ConversionsBatchInsertResponse response = request.Execute();
            // Data.ConversionsBatchInsertResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Batchinsert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/ddmconversions
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Country DART ID.
            long dartId = 0L;


            CountriesResource.GetRequest request = dfareportingService.Countries.Get(profileId, dartId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Country response = request.Execute();
            // Data.Country response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CountriesResource.ListRequest request = dfareportingService.Countries.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CountriesListResponse response = request.Execute();
            // Data.CountriesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Advertiser ID of this creative. This is a required field.
            long advertiserId = 0L;


            Data.CreativeAssetMetadata requestBody = new Data.CreativeAssetMetadata();
            // TODO: Assign values to desired properties of the `requestBody` object.


            // TODO: Add desired media content for upload. For more information, see:
            // https://developers.google.com/api-client-library/dotnet/guide/media_upload


            CreativeAssetsResource.InsertRequest request = dfareportingService.CreativeAssets.Insert(requestBody, profileId, advertiserId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeAssetMetadata response = request.Execute();
            // Data.CreativeAssetMetadata response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;

            // Creative Field Value ID
            long id = 0L;


            CreativeFieldValuesResource.DeleteRequest request = dfareportingService.CreativeFieldValues.Delete(profileId, creativeFieldId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;

            // Creative Field Value ID
            long id = 0L;


            CreativeFieldValuesResource.GetRequest request = dfareportingService.CreativeFieldValues.Get(profileId, creativeFieldId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeFieldValue response = request.Execute();
            // Data.CreativeFieldValue response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;


            Data.CreativeFieldValue requestBody = new Data.CreativeFieldValue();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeFieldValuesResource.InsertRequest request = dfareportingService.CreativeFieldValues.Insert(requestBody, profileId, creativeFieldId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeFieldValue response = request.Execute();
            // Data.CreativeFieldValue response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;


            CreativeFieldValuesResource.ListRequest request = dfareportingService.CreativeFieldValues.List(profileId, creativeFieldId);

            Data.CreativeFieldValuesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CreativeFieldValues == null)
                {
                    continue;
                }
                foreach (Data.CreativeFieldValue creativeFieldValue in response.CreativeFieldValues)
                {
                    // TODO: Change code below to process each `creativeFieldValue` resource:
                    Console.WriteLine(creativeFieldValue);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;

            // Creative Field Value ID
            long id = 0L;


            Data.CreativeFieldValue requestBody = new Data.CreativeFieldValue();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            CreativeFieldValuesResource.PatchRequest request = dfareportingService.CreativeFieldValues.Patch(requestBody, profileId, creativeFieldId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeFieldValue response = request.Execute();
            // Data.CreativeFieldValue response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative field ID for this creative field value.
            long creativeFieldId = 0L;


            Data.CreativeFieldValue requestBody = new Data.CreativeFieldValue();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeFieldValuesResource.UpdateRequest request = dfareportingService.CreativeFieldValues.Update(requestBody, profileId, creativeFieldId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeFieldValue response = request.Execute();
            // Data.CreativeFieldValue response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative Field ID
            long id = 0L;


            CreativeFieldsResource.DeleteRequest request = dfareportingService.CreativeFields.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative Field ID
            long id = 0L;


            CreativeFieldsResource.GetRequest request = dfareportingService.CreativeFields.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeField response = request.Execute();
            // Data.CreativeField response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.CreativeField requestBody = new Data.CreativeField();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeFieldsResource.InsertRequest request = dfareportingService.CreativeFields.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeField response = request.Execute();
            // Data.CreativeField response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CreativeFieldsResource.ListRequest request = dfareportingService.CreativeFields.List(profileId);

            Data.CreativeFieldsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CreativeFields == null)
                {
                    continue;
                }
                foreach (Data.CreativeField creativeField in response.CreativeFields)
                {
                    // TODO: Change code below to process each `creativeField` resource:
                    Console.WriteLine(creativeField);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative Field ID
            long id = 0L;


            Data.CreativeField requestBody = new Data.CreativeField();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            CreativeFieldsResource.PatchRequest request = dfareportingService.CreativeFields.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeField response = request.Execute();
            // Data.CreativeField response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.CreativeField requestBody = new Data.CreativeField();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeFieldsResource.UpdateRequest request = dfareportingService.CreativeFields.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeField response = request.Execute();
            // Data.CreativeField response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative group ID.
            long id = 0L;


            CreativeGroupsResource.GetRequest request = dfareportingService.CreativeGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeGroup response = request.Execute();
            // Data.CreativeGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.CreativeGroup requestBody = new Data.CreativeGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeGroupsResource.InsertRequest request = dfareportingService.CreativeGroups.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeGroup response = request.Execute();
            // Data.CreativeGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CreativeGroupsResource.ListRequest request = dfareportingService.CreativeGroups.List(profileId);

            Data.CreativeGroupsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CreativeGroups == null)
                {
                    continue;
                }
                foreach (Data.CreativeGroup creativeGroup in response.CreativeGroups)
                {
                    // TODO: Change code below to process each `creativeGroup` resource:
                    Console.WriteLine(creativeGroup);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative group ID.
            long id = 0L;


            Data.CreativeGroup requestBody = new Data.CreativeGroup();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            CreativeGroupsResource.PatchRequest request = dfareportingService.CreativeGroups.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeGroup response = request.Execute();
            // Data.CreativeGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.CreativeGroup requestBody = new Data.CreativeGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativeGroupsResource.UpdateRequest request = dfareportingService.CreativeGroups.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeGroup response = request.Execute();
            // Data.CreativeGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative ID.
            long id = 0L;


            CreativesResource.GetRequest request = dfareportingService.Creatives.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Creative requestBody = new Data.Creative();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativesResource.InsertRequest request = dfareportingService.Creatives.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            CreativesResource.ListRequest request = dfareportingService.Creatives.List(profileId);

            Data.CreativesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Creatives == null)
                {
                    continue;
                }
                foreach (Data.Creative creative in response.Creatives)
                {
                    // TODO: Change code below to process each `creative` resource:
                    Console.WriteLine(creative);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Creative ID.
            long id = 0L;


            Data.Creative requestBody = new Data.Creative();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            CreativesResource.PatchRequest request = dfareportingService.Creatives.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Creative requestBody = new Data.Creative();
            // TODO: Assign values to desired properties of the `requestBody` object.


            CreativesResource.UpdateRequest request = dfareportingService.Creatives.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Query` method:

            // The DFA user profile ID.
            long profileId = 0L;


            Data.DimensionValueRequest requestBody = new Data.DimensionValueRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DimensionValuesResource.QueryRequest request = dfareportingService.DimensionValues.Query(requestBody, profileId);

            Data.DimensionValueList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.DimensionValue dimensionValue in response.Items)
                {
                    // TODO: Change code below to process each `dimensionValue` resource:
                    Console.WriteLine(dimensionValue);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Query` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Directory site contact ID.
            long id = 0L;


            DirectorySiteContactsResource.GetRequest request = dfareportingService.DirectorySiteContacts.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DirectorySiteContact response = request.Execute();
            // Data.DirectorySiteContact response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            DirectorySiteContactsResource.ListRequest request = dfareportingService.DirectorySiteContacts.List(profileId);

            Data.DirectorySiteContactsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.DirectorySiteContacts == null)
                {
                    continue;
                }
                foreach (Data.DirectorySiteContact directorySiteContact in response.DirectorySiteContacts)
                {
                    // TODO: Change code below to process each `directorySiteContact` resource:
                    Console.WriteLine(directorySiteContact);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Directory site ID.
            long id = 0L;


            DirectorySitesResource.GetRequest request = dfareportingService.DirectorySites.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DirectorySite response = request.Execute();
            // Data.DirectorySite response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.DirectorySite requestBody = new Data.DirectorySite();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DirectorySitesResource.InsertRequest request = dfareportingService.DirectorySites.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DirectorySite response = request.Execute();
            // Data.DirectorySite response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            DirectorySitesResource.ListRequest request = dfareportingService.DirectorySites.List(profileId);

            Data.DirectorySitesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.DirectorySites == null)
                {
                    continue;
                }
                foreach (Data.DirectorySite directorySite in response.DirectorySites)
                {
                    // TODO: Change code below to process each `directorySite` resource:
                    Console.WriteLine(directorySite);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // ID of the object of this dynamic targeting key. This is a required field.
            long objectId = 0L;

            // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
            // and cannot contain commas. All characters are converted to lowercase.
            string name = "{MY-NAME}";

            // Type of the object of this dynamic targeting key. This is a required field.
            DynamicTargetingKeysResource.DeleteRequest.ObjectTypeEnum objectType = (DynamicTargetingKeysResource.DeleteRequest.ObjectTypeEnum) 0;


            DynamicTargetingKeysResource.DeleteRequest request = dfareportingService.DynamicTargetingKeys.Delete(profileId, objectId, name, objectType);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.DynamicTargetingKey requestBody = new Data.DynamicTargetingKey();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DynamicTargetingKeysResource.InsertRequest request = dfareportingService.DynamicTargetingKeys.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DynamicTargetingKey response = request.Execute();
            // Data.DynamicTargetingKey response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            DynamicTargetingKeysResource.ListRequest request = dfareportingService.DynamicTargetingKeys.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DynamicTargetingKeysListResponse response = request.Execute();
            // Data.DynamicTargetingKeysListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Event tag ID.
            long id = 0L;


            EventTagsResource.DeleteRequest request = dfareportingService.EventTags.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Event tag ID.
            long id = 0L;


            EventTagsResource.GetRequest request = dfareportingService.EventTags.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EventTag response = request.Execute();
            // Data.EventTag response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.EventTag requestBody = new Data.EventTag();
            // TODO: Assign values to desired properties of the `requestBody` object.


            EventTagsResource.InsertRequest request = dfareportingService.EventTags.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EventTag response = request.Execute();
            // Data.EventTag response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            EventTagsResource.ListRequest request = dfareportingService.EventTags.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EventTagsListResponse response = request.Execute();
            // Data.EventTagsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Event tag ID.
            long id = 0L;


            Data.EventTag requestBody = new Data.EventTag();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            EventTagsResource.PatchRequest request = dfareportingService.EventTags.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EventTag response = request.Execute();
            // Data.EventTag response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.EventTag requestBody = new Data.EventTag();
            // TODO: Assign values to desired properties of the `requestBody` object.


            EventTagsResource.UpdateRequest request = dfareportingService.EventTags.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EventTag response = request.Execute();
            // Data.EventTag response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The ID of the report.
            long reportId = 0L;

            // The ID of the report file.
            long fileId = 0L;


            FilesResource.GetRequest request = dfareportingService.Files.Get(reportId, fileId);

            // TODO: Download media content if desired. For more information, see:
            // https://developers.google.com/api-client-library/dotnet/guide/media_download


            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.File response = request.Execute();
            // Data.File response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The DFA profile ID.
            long profileId = 0L;


            FilesResource.ListRequest request = dfareportingService.Files.List(profileId);

            Data.FileList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.File file in response.Items)
                {
                    // TODO: Change code below to process each `file` resource:
                    Console.WriteLine(file);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight activity ID.
            long id = 0L;


            FloodlightActivitiesResource.DeleteRequest request = dfareportingService.FloodlightActivities.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Generatetag` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            FloodlightActivitiesResource.GeneratetagRequest request = dfareportingService.FloodlightActivities.Generatetag(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivitiesGenerateTagResponse response = request.Execute();
            // Data.FloodlightActivitiesGenerateTagResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Generatetag` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight activity ID.
            long id = 0L;


            FloodlightActivitiesResource.GetRequest request = dfareportingService.FloodlightActivities.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivity response = request.Execute();
            // Data.FloodlightActivity response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.FloodlightActivity requestBody = new Data.FloodlightActivity();
            // TODO: Assign values to desired properties of the `requestBody` object.


            FloodlightActivitiesResource.InsertRequest request = dfareportingService.FloodlightActivities.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivity response = request.Execute();
            // Data.FloodlightActivity response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            FloodlightActivitiesResource.ListRequest request = dfareportingService.FloodlightActivities.List(profileId);

            Data.FloodlightActivitiesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.FloodlightActivities == null)
                {
                    continue;
                }
                foreach (Data.FloodlightActivity floodlightActivity in response.FloodlightActivities)
                {
                    // TODO: Change code below to process each `floodlightActivity` resource:
                    Console.WriteLine(floodlightActivity);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight activity ID.
            long id = 0L;


            Data.FloodlightActivity requestBody = new Data.FloodlightActivity();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            FloodlightActivitiesResource.PatchRequest request = dfareportingService.FloodlightActivities.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivity response = request.Execute();
            // Data.FloodlightActivity response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.FloodlightActivity requestBody = new Data.FloodlightActivity();
            // TODO: Assign values to desired properties of the `requestBody` object.


            FloodlightActivitiesResource.UpdateRequest request = dfareportingService.FloodlightActivities.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivity response = request.Execute();
            // Data.FloodlightActivity response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight activity Group ID.
            long id = 0L;


            FloodlightActivityGroupsResource.GetRequest request = dfareportingService.FloodlightActivityGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivityGroup response = request.Execute();
            // Data.FloodlightActivityGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.FloodlightActivityGroup requestBody = new Data.FloodlightActivityGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            FloodlightActivityGroupsResource.InsertRequest request = dfareportingService.FloodlightActivityGroups.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivityGroup response = request.Execute();
            // Data.FloodlightActivityGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            FloodlightActivityGroupsResource.ListRequest request = dfareportingService.FloodlightActivityGroups.List(profileId);

            Data.FloodlightActivityGroupsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.FloodlightActivityGroups == null)
                {
                    continue;
                }
                foreach (Data.FloodlightActivityGroup floodlightActivityGroup in response.FloodlightActivityGroups)
                {
                    // TODO: Change code below to process each `floodlightActivityGroup` resource:
                    Console.WriteLine(floodlightActivityGroup);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight activity Group ID.
            long id = 0L;


            Data.FloodlightActivityGroup requestBody = new Data.FloodlightActivityGroup();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            FloodlightActivityGroupsResource.PatchRequest request = dfareportingService.FloodlightActivityGroups.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivityGroup response = request.Execute();
            // Data.FloodlightActivityGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.FloodlightActivityGroup requestBody = new Data.FloodlightActivityGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            FloodlightActivityGroupsResource.UpdateRequest request = dfareportingService.FloodlightActivityGroups.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightActivityGroup response = request.Execute();
            // Data.FloodlightActivityGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight configuration ID.
            long id = 0L;


            FloodlightConfigurationsResource.GetRequest request = dfareportingService.FloodlightConfigurations.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightConfiguration response = request.Execute();
            // Data.FloodlightConfiguration response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            FloodlightConfigurationsResource.ListRequest request = dfareportingService.FloodlightConfigurations.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightConfigurationsListResponse response = request.Execute();
            // Data.FloodlightConfigurationsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Floodlight configuration ID.
            long id = 0L;


            Data.FloodlightConfiguration requestBody = new Data.FloodlightConfiguration();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            FloodlightConfigurationsResource.PatchRequest request = dfareportingService.FloodlightConfigurations.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightConfiguration response = request.Execute();
            // Data.FloodlightConfiguration response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.FloodlightConfiguration requestBody = new Data.FloodlightConfiguration();
            // TODO: Assign values to desired properties of the `requestBody` object.


            FloodlightConfigurationsResource.UpdateRequest request = dfareportingService.FloodlightConfigurations.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FloodlightConfiguration response = request.Execute();
            // Data.FloodlightConfiguration response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for order documents.
            long projectId = 0L;

            // Inventory item ID.
            long id = 0L;


            InventoryItemsResource.GetRequest request = dfareportingService.InventoryItems.Get(profileId, projectId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.InventoryItem response = request.Execute();
            // Data.InventoryItem response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for order documents.
            long projectId = 0L;


            InventoryItemsResource.ListRequest request = dfareportingService.InventoryItems.List(profileId, projectId);

            Data.InventoryItemsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.InventoryItems == null)
                {
                    continue;
                }
                foreach (Data.InventoryItem inventoryItem in response.InventoryItems)
                {
                    // TODO: Change code below to process each `inventoryItem` resource:
                    Console.WriteLine(inventoryItem);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;

            // Landing page ID.
            long id = 0L;


            LandingPagesResource.DeleteRequest request = dfareportingService.LandingPages.Delete(profileId, campaignId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;

            // Landing page ID.
            long id = 0L;


            LandingPagesResource.GetRequest request = dfareportingService.LandingPages.Get(profileId, campaignId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LandingPage response = request.Execute();
            // Data.LandingPage response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;


            Data.LandingPage requestBody = new Data.LandingPage();
            // TODO: Assign values to desired properties of the `requestBody` object.


            LandingPagesResource.InsertRequest request = dfareportingService.LandingPages.Insert(requestBody, profileId, campaignId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LandingPage response = request.Execute();
            // Data.LandingPage response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;


            LandingPagesResource.ListRequest request = dfareportingService.LandingPages.List(profileId, campaignId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LandingPagesListResponse response = request.Execute();
            // Data.LandingPagesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;

            // Landing page ID.
            long id = 0L;


            Data.LandingPage requestBody = new Data.LandingPage();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            LandingPagesResource.PatchRequest request = dfareportingService.LandingPages.Patch(requestBody, profileId, campaignId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LandingPage response = request.Execute();
            // Data.LandingPage response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Landing page campaign ID.
            long campaignId = 0L;


            Data.LandingPage requestBody = new Data.LandingPage();
            // TODO: Assign values to desired properties of the `requestBody` object.


            LandingPagesResource.UpdateRequest request = dfareportingService.LandingPages.Update(requestBody, profileId, campaignId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LandingPage response = request.Execute();
            // Data.LandingPage response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            LanguagesResource.ListRequest request = dfareportingService.Languages.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LanguagesListResponse response = request.Execute();
            // Data.LanguagesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            MetrosResource.ListRequest request = dfareportingService.Metros.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.MetrosListResponse response = request.Execute();
            // Data.MetrosListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Mobile carrier ID.
            long id = 0L;


            MobileCarriersResource.GetRequest request = dfareportingService.MobileCarriers.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.MobileCarrier response = request.Execute();
            // Data.MobileCarrier response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            MobileCarriersResource.ListRequest request = dfareportingService.MobileCarriers.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.MobileCarriersListResponse response = request.Execute();
            // Data.MobileCarriersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Operating system version ID.
            long id = 0L;


            OperatingSystemVersionsResource.GetRequest request = dfareportingService.OperatingSystemVersions.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.OperatingSystemVersion response = request.Execute();
            // Data.OperatingSystemVersion response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            OperatingSystemVersionsResource.ListRequest request = dfareportingService.OperatingSystemVersions.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.OperatingSystemVersionsListResponse response = request.Execute();
            // Data.OperatingSystemVersionsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Operating system DART ID.
            long dartId = 0L;


            OperatingSystemsResource.GetRequest request = dfareportingService.OperatingSystems.Get(profileId, dartId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.OperatingSystem response = request.Execute();
            // Data.OperatingSystem response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            OperatingSystemsResource.ListRequest request = dfareportingService.OperatingSystems.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.OperatingSystemsListResponse response = request.Execute();
            // Data.OperatingSystemsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for order documents.
            long projectId = 0L;

            // Order document ID.
            long id = 0L;


            OrderDocumentsResource.GetRequest request = dfareportingService.OrderDocuments.Get(profileId, projectId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.OrderDocument response = request.Execute();
            // Data.OrderDocument response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for order documents.
            long projectId = 0L;


            OrderDocumentsResource.ListRequest request = dfareportingService.OrderDocuments.List(profileId, projectId);

            Data.OrderDocumentsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.OrderDocuments == null)
                {
                    continue;
                }
                foreach (Data.OrderDocument orderDocument in response.OrderDocuments)
                {
                    // TODO: Change code below to process each `orderDocument` resource:
                    Console.WriteLine(orderDocument);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for orders.
            long projectId = 0L;

            // Order ID.
            long id = 0L;


            OrdersResource.GetRequest request = dfareportingService.Orders.Get(profileId, projectId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Order response = request.Execute();
            // Data.Order response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID for orders.
            long projectId = 0L;


            OrdersResource.ListRequest request = dfareportingService.Orders.List(profileId, projectId);

            Data.OrdersListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Orders == null)
                {
                    continue;
                }
                foreach (Data.Order order in response.Orders)
                {
                    // TODO: Change code below to process each `order` resource:
                    Console.WriteLine(order);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement group ID.
            long id = 0L;


            PlacementGroupsResource.GetRequest request = dfareportingService.PlacementGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementGroup response = request.Execute();
            // Data.PlacementGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.PlacementGroup requestBody = new Data.PlacementGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementGroupsResource.InsertRequest request = dfareportingService.PlacementGroups.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementGroup response = request.Execute();
            // Data.PlacementGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PlacementGroupsResource.ListRequest request = dfareportingService.PlacementGroups.List(profileId);

            Data.PlacementGroupsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.PlacementGroups == null)
                {
                    continue;
                }
                foreach (Data.PlacementGroup placementGroup in response.PlacementGroups)
                {
                    // TODO: Change code below to process each `placementGroup` resource:
                    Console.WriteLine(placementGroup);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement group ID.
            long id = 0L;


            Data.PlacementGroup requestBody = new Data.PlacementGroup();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            PlacementGroupsResource.PatchRequest request = dfareportingService.PlacementGroups.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementGroup response = request.Execute();
            // Data.PlacementGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.PlacementGroup requestBody = new Data.PlacementGroup();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementGroupsResource.UpdateRequest request = dfareportingService.PlacementGroups.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementGroup response = request.Execute();
            // Data.PlacementGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement strategy ID.
            long id = 0L;


            PlacementStrategiesResource.DeleteRequest request = dfareportingService.PlacementStrategies.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement strategy ID.
            long id = 0L;


            PlacementStrategiesResource.GetRequest request = dfareportingService.PlacementStrategies.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementStrategy response = request.Execute();
            // Data.PlacementStrategy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.PlacementStrategy requestBody = new Data.PlacementStrategy();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementStrategiesResource.InsertRequest request = dfareportingService.PlacementStrategies.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementStrategy response = request.Execute();
            // Data.PlacementStrategy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PlacementStrategiesResource.ListRequest request = dfareportingService.PlacementStrategies.List(profileId);

            Data.PlacementStrategiesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.PlacementStrategies == null)
                {
                    continue;
                }
                foreach (Data.PlacementStrategy placementStrategy in response.PlacementStrategies)
                {
                    // TODO: Change code below to process each `placementStrategy` resource:
                    Console.WriteLine(placementStrategy);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement strategy ID.
            long id = 0L;


            Data.PlacementStrategy requestBody = new Data.PlacementStrategy();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            PlacementStrategiesResource.PatchRequest request = dfareportingService.PlacementStrategies.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementStrategy response = request.Execute();
            // Data.PlacementStrategy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.PlacementStrategy requestBody = new Data.PlacementStrategy();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementStrategiesResource.UpdateRequest request = dfareportingService.PlacementStrategies.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementStrategy response = request.Execute();
            // Data.PlacementStrategy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Generatetags` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PlacementsResource.GeneratetagsRequest request = dfareportingService.Placements.Generatetags(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlacementsGenerateTagsResponse response = request.Execute();
            // Data.PlacementsGenerateTagsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Generatetags` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement ID.
            long id = 0L;


            PlacementsResource.GetRequest request = dfareportingService.Placements.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Placement response = request.Execute();
            // Data.Placement response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Placement requestBody = new Data.Placement();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementsResource.InsertRequest request = dfareportingService.Placements.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Placement response = request.Execute();
            // Data.Placement response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PlacementsResource.ListRequest request = dfareportingService.Placements.List(profileId);

            Data.PlacementsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Placements == null)
                {
                    continue;
                }
                foreach (Data.Placement placement in response.Placements)
                {
                    // TODO: Change code below to process each `placement` resource:
                    Console.WriteLine(placement);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Placement ID.
            long id = 0L;


            Data.Placement requestBody = new Data.Placement();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            PlacementsResource.PatchRequest request = dfareportingService.Placements.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Placement response = request.Execute();
            // Data.Placement response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Placement requestBody = new Data.Placement();
            // TODO: Assign values to desired properties of the `requestBody` object.


            PlacementsResource.UpdateRequest request = dfareportingService.Placements.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Placement response = request.Execute();
            // Data.Placement response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Platform type ID.
            long id = 0L;


            PlatformTypesResource.GetRequest request = dfareportingService.PlatformTypes.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlatformType response = request.Execute();
            // Data.PlatformType response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PlatformTypesResource.ListRequest request = dfareportingService.PlatformTypes.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PlatformTypesListResponse response = request.Execute();
            // Data.PlatformTypesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Postal code ID.
            string code = "{MY-CODE}";


            PostalCodesResource.GetRequest request = dfareportingService.PostalCodes.Get(profileId, code);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PostalCode response = request.Execute();
            // Data.PostalCode response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            PostalCodesResource.ListRequest request = dfareportingService.PostalCodes.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PostalCodesListResponse response = request.Execute();
            // Data.PostalCodesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Project ID.
            long id = 0L;


            ProjectsResource.GetRequest request = dfareportingService.Projects.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Project response = request.Execute();
            // Data.Project response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            ProjectsResource.ListRequest request = dfareportingService.Projects.List(profileId);

            Data.ProjectsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Projects == null)
                {
                    continue;
                }
                foreach (Data.Project project in response.Projects)
                {
                    // TODO: Change code below to process each `project` resource:
                    Console.WriteLine(project);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            RegionsResource.ListRequest request = dfareportingService.Regions.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RegionsListResponse response = request.Execute();
            // Data.RegionsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Remarketing list ID.
            long remarketingListId = 0L;


            RemarketingListSharesResource.GetRequest request = dfareportingService.RemarketingListShares.Get(profileId, remarketingListId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingListShare response = request.Execute();
            // Data.RemarketingListShare response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Remarketing list ID.
            long remarketingListId = 0L;


            Data.RemarketingListShare requestBody = new Data.RemarketingListShare();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            RemarketingListSharesResource.PatchRequest request = dfareportingService.RemarketingListShares.Patch(requestBody, profileId, remarketingListId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingListShare response = request.Execute();
            // Data.RemarketingListShare response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.RemarketingListShare requestBody = new Data.RemarketingListShare();
            // TODO: Assign values to desired properties of the `requestBody` object.


            RemarketingListSharesResource.UpdateRequest request = dfareportingService.RemarketingListShares.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingListShare response = request.Execute();
            // Data.RemarketingListShare response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Remarketing list ID.
            long id = 0L;


            RemarketingListsResource.GetRequest request = dfareportingService.RemarketingLists.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingList response = request.Execute();
            // Data.RemarketingList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.RemarketingList requestBody = new Data.RemarketingList();
            // TODO: Assign values to desired properties of the `requestBody` object.


            RemarketingListsResource.InsertRequest request = dfareportingService.RemarketingLists.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingList response = request.Execute();
            // Data.RemarketingList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Select only remarketing lists owned by this advertiser.
            long advertiserId = 0L;


            RemarketingListsResource.ListRequest request = dfareportingService.RemarketingLists.List(profileId, advertiserId);

            Data.RemarketingListsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.RemarketingLists == null)
                {
                    continue;
                }
                foreach (Data.RemarketingList remarketingList in response.RemarketingLists)
                {
                    // TODO: Change code below to process each `remarketingList` resource:
                    Console.WriteLine(remarketingList);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Remarketing list ID.
            long id = 0L;


            Data.RemarketingList requestBody = new Data.RemarketingList();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            RemarketingListsResource.PatchRequest request = dfareportingService.RemarketingLists.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingList response = request.Execute();
            // Data.RemarketingList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.RemarketingList requestBody = new Data.RemarketingList();
            // TODO: Assign values to desired properties of the `requestBody` object.


            RemarketingListsResource.UpdateRequest request = dfareportingService.RemarketingLists.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RemarketingList response = request.Execute();
            // Data.RemarketingList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Query` method:

            // The DFA user profile ID.
            long profileId = 0L;


            Data.Report requestBody = new Data.Report();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ReportsResource.CompatibleFieldsResource.QueryRequest request = dfareportingService.Reports.CompatibleFields.Query(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CompatibleFields response = request.Execute();
            // Data.CompatibleFields response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Query` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The DFA user profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;


            ReportsResource.DeleteRequest request = dfareportingService.Reports.Delete(profileId, reportId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The DFA profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;

            // The ID of the report file.
            long fileId = 0L;


            ReportsResource.FilesResource.GetRequest request = dfareportingService.Reports.Files.Get(profileId, reportId, fileId);

            // TODO: Download media content if desired. For more information, see:
            // https://developers.google.com/api-client-library/dotnet/guide/media_download


            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.File response = request.Execute();
            // Data.File response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The DFA profile ID.
            long profileId = 0L;

            // The ID of the parent report.
            long reportId = 0L;


            ReportsResource.FilesResource.ListRequest request = dfareportingService.Reports.Files.List(profileId, reportId);

            Data.FileList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.File file in response.Items)
                {
                    // TODO: Change code below to process each `file` resource:
                    Console.WriteLine(file);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The DFA user profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;


            ReportsResource.GetRequest request = dfareportingService.Reports.Get(profileId, reportId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Report response = request.Execute();
            // Data.Report response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // The DFA user profile ID.
            long profileId = 0L;


            Data.Report requestBody = new Data.Report();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ReportsResource.InsertRequest request = dfareportingService.Reports.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Report response = request.Execute();
            // Data.Report response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The DFA user profile ID.
            long profileId = 0L;


            ReportsResource.ListRequest request = dfareportingService.Reports.List(profileId);

            Data.ReportList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Report report in response.Items)
                {
                    // TODO: Change code below to process each `report` resource:
                    Console.WriteLine(report);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // The DFA user profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;


            Data.Report requestBody = new Data.Report();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            ReportsResource.PatchRequest request = dfareportingService.Reports.Patch(requestBody, profileId, reportId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Report response = request.Execute();
            // Data.Report response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Run` method:

            // The DFA profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;


            ReportsResource.RunRequest request = dfareportingService.Reports.Run(profileId, reportId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.File response = request.Execute();
            // Data.File response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Run` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // The DFA user profile ID.
            long profileId = 0L;

            // The ID of the report.
            long reportId = 0L;


            Data.Report requestBody = new Data.Report();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ReportsResource.UpdateRequest request = dfareportingService.Reports.Update(requestBody, profileId, reportId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Report response = request.Execute();
            // Data.Report response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Site ID.
            long id = 0L;


            SitesResource.GetRequest request = dfareportingService.Sites.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Site response = request.Execute();
            // Data.Site response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Site requestBody = new Data.Site();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SitesResource.InsertRequest request = dfareportingService.Sites.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Site response = request.Execute();
            // Data.Site response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            SitesResource.ListRequest request = dfareportingService.Sites.List(profileId);

            Data.SitesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Sites == null)
                {
                    continue;
                }
                foreach (Data.Site site in response.Sites)
                {
                    // TODO: Change code below to process each `site` resource:
                    Console.WriteLine(site);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Site ID.
            long id = 0L;


            Data.Site requestBody = new Data.Site();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            SitesResource.PatchRequest request = dfareportingService.Sites.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Site response = request.Execute();
            // Data.Site response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Site requestBody = new Data.Site();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SitesResource.UpdateRequest request = dfareportingService.Sites.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Site response = request.Execute();
            // Data.Site response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Size ID.
            long id = 0L;


            SizesResource.GetRequest request = dfareportingService.Sizes.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Size response = request.Execute();
            // Data.Size response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Size requestBody = new Data.Size();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SizesResource.InsertRequest request = dfareportingService.Sizes.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Size response = request.Execute();
            // Data.Size response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            SizesResource.ListRequest request = dfareportingService.Sizes.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SizesListResponse response = request.Execute();
            // Data.SizesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Subaccount ID.
            long id = 0L;


            SubaccountsResource.GetRequest request = dfareportingService.Subaccounts.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subaccount response = request.Execute();
            // Data.Subaccount response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Subaccount requestBody = new Data.Subaccount();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SubaccountsResource.InsertRequest request = dfareportingService.Subaccounts.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subaccount response = request.Execute();
            // Data.Subaccount response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            SubaccountsResource.ListRequest request = dfareportingService.Subaccounts.List(profileId);

            Data.SubaccountsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Subaccounts == null)
                {
                    continue;
                }
                foreach (Data.Subaccount subaccount in response.Subaccounts)
                {
                    // TODO: Change code below to process each `subaccount` resource:
                    Console.WriteLine(subaccount);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Subaccount ID.
            long id = 0L;


            Data.Subaccount requestBody = new Data.Subaccount();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            SubaccountsResource.PatchRequest request = dfareportingService.Subaccounts.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subaccount response = request.Execute();
            // Data.Subaccount response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.Subaccount requestBody = new Data.Subaccount();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SubaccountsResource.UpdateRequest request = dfareportingService.Subaccounts.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subaccount response = request.Execute();
            // Data.Subaccount response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Remarketing list ID.
            long id = 0L;


            TargetableRemarketingListsResource.GetRequest request = dfareportingService.TargetableRemarketingLists.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TargetableRemarketingList response = request.Execute();
            // Data.TargetableRemarketingList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Select only targetable remarketing lists targetable by these advertisers.
            long advertiserId = 0L;


            TargetableRemarketingListsResource.ListRequest request = dfareportingService.TargetableRemarketingLists.List(profileId, advertiserId);

            Data.TargetableRemarketingListsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.TargetableRemarketingLists == null)
                {
                    continue;
                }
                foreach (Data.TargetableRemarketingList targetableRemarketingList in response.TargetableRemarketingLists)
                {
                    // TODO: Change code below to process each `targetableRemarketingList` resource:
                    Console.WriteLine(targetableRemarketingList);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Targeting template ID.
            long id = 0L;


            TargetingTemplatesResource.GetRequest request = dfareportingService.TargetingTemplates.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TargetingTemplate response = request.Execute();
            // Data.TargetingTemplate response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.TargetingTemplate requestBody = new Data.TargetingTemplate();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TargetingTemplatesResource.InsertRequest request = dfareportingService.TargetingTemplates.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TargetingTemplate response = request.Execute();
            // Data.TargetingTemplate response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            TargetingTemplatesResource.ListRequest request = dfareportingService.TargetingTemplates.List(profileId);

            Data.TargetingTemplatesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.TargetingTemplates == null)
                {
                    continue;
                }
                foreach (Data.TargetingTemplate targetingTemplate in response.TargetingTemplates)
                {
                    // TODO: Change code below to process each `targetingTemplate` resource:
                    Console.WriteLine(targetingTemplate);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // Targeting template ID.
            long id = 0L;


            Data.TargetingTemplate requestBody = new Data.TargetingTemplate();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            TargetingTemplatesResource.PatchRequest request = dfareportingService.TargetingTemplates.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TargetingTemplate response = request.Execute();
            // Data.TargetingTemplate response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.TargetingTemplate requestBody = new Data.TargetingTemplate();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TargetingTemplatesResource.UpdateRequest request = dfareportingService.TargetingTemplates.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TargetingTemplate response = request.Execute();
            // Data.TargetingTemplate response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The user profile ID.
            long profileId = 0L;


            UserProfilesResource.GetRequest request = dfareportingService.UserProfiles.Get(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserProfile response = request.Execute();
            // Data.UserProfile response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });

            UserProfilesResource.ListRequest request = dfareportingService.UserProfiles.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserProfileList response = request.Execute();
            // Data.UserProfileList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfareporting
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User role permission group ID.
            long id = 0L;


            UserRolePermissionGroupsResource.GetRequest request = dfareportingService.UserRolePermissionGroups.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRolePermissionGroup response = request.Execute();
            // Data.UserRolePermissionGroup response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            UserRolePermissionGroupsResource.ListRequest request = dfareportingService.UserRolePermissionGroups.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRolePermissionGroupsListResponse response = request.Execute();
            // Data.UserRolePermissionGroupsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User role permission ID.
            long id = 0L;


            UserRolePermissionsResource.GetRequest request = dfareportingService.UserRolePermissions.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRolePermission response = request.Execute();
            // Data.UserRolePermission response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            UserRolePermissionsResource.ListRequest request = dfareportingService.UserRolePermissions.List(profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRolePermissionsListResponse response = request.Execute();
            // Data.UserRolePermissionsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User role ID.
            long id = 0L;


            UserRolesResource.DeleteRequest request = dfareportingService.UserRoles.Delete(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Delete` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User role ID.
            long id = 0L;


            UserRolesResource.GetRequest request = dfareportingService.UserRoles.Get(profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRole response = request.Execute();
            // Data.UserRole response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Get` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.UserRole requestBody = new Data.UserRole();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UserRolesResource.InsertRequest request = dfareportingService.UserRoles.Insert(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRole response = request.Execute();
            // Data.UserRole response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Insert` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            UserRolesResource.ListRequest request = dfareportingService.UserRoles.List(profileId);

            Data.UserRolesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.UserRoles == null)
                {
                    continue;
                }
                foreach (Data.UserRole userRole in response.UserRoles)
                {
                    // TODO: Change code below to process each `userRole` resource:
                    Console.WriteLine(userRole);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `List` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // User profile ID associated with this request.
            long profileId = 0L;

            // User role ID.
            long id = 0L;


            Data.UserRole requestBody = new Data.UserRole();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            UserRolesResource.PatchRequest request = dfareportingService.UserRoles.Patch(requestBody, profileId, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRole response = request.Execute();
            // Data.UserRole response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Patch` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dfareporting.v2_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Dfareporting.v2_6.Data;


namespace DfareportingSample
{
    public class DfareportingServiceExample
    {
        public static void Main(string[] args)
        {
            UserCredential credential = GetCredential();

            DfareportingService dfareportingService = new DfareportingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-DfareportingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // User profile ID associated with this request.
            long profileId = 0L;


            Data.UserRole requestBody = new Data.UserRole();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UserRolesResource.UpdateRequest request = dfareportingService.UserRoles.Update(requestBody, profileId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UserRole response = request.Execute();
            // Data.UserRole response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static UserCredential GetCredential() {
            // TODO: Change placeholder below to get authentication credentials.
            // See: https://foo.com/bar
            //
            // To use the `Update` method, authorize using one of the following scopes:
            //   https://www.googleapis.com/auth/dfatrafficking
            return null;
        }
    }
}
