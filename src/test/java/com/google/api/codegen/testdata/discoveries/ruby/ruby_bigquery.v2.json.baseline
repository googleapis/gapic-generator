
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the dataset being deleted
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of dataset being deleted
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Perform the call
service.delete_dataset(project_id, dataset_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the requested dataset
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the requested dataset
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_dataset(project_id, dataset_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the new dataset
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
dataset_body = Google::Apis::BigqueryV2::Dataset.new

# Perform the call
response = service.insert_dataset(project_id, dataset_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the datasets to be listed
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Perform the call
datasets = service.fetch_all(items: :datasets) do |token|
  service.list_datasets(project_id, page_token: token)
end

datasets.each do |dataset_list._datasets|
  # TODO: Use dataset_list._datasets
  puts JSON.pretty_generate(dataset_list._datasets)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the dataset being updated
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the dataset being updated
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
dataset_body = Google::Apis::BigqueryV2::Dataset.new

# Perform the call
response = service.patch_dataset(project_id, dataset_id, dataset_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the dataset being updated
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the dataset being updated
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
dataset_body = Google::Apis::BigqueryV2::Dataset.new

# Perform the call
response = service.update_dataset(project_id, dataset_id, dataset_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# [Required] Project ID of the job to cancel
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# [Required] Job ID of the job to cancel
job_id = '{MY-JOB-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.cancel_job(project_id, job_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# [Required] Project ID of the requested job
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# [Required] Job ID of the requested job
job_id = '{MY-JOB-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_job(project_id, job_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# [Required] Project ID of the query job
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# [Required] Job ID of the query job
job_id = '{MY-JOB-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_job_query_results(project_id, job_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that will be billed for the job
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
job_body = Google::Apis::BigqueryV2::Job.new

# Perform the call
response = service.insert_job(project_id, job_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the jobs to list
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Perform the call
jobs = service.fetch_all(items: :jobs) do |token|
  service.list_jobs(project_id, page_token: token)
end

jobs.each do |job_list._jobs|
  # TODO: Use job_list._jobs
  puts JSON.pretty_generate(job_list._jobs)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project billed for the query
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
query_request_body = Google::Apis::BigqueryV2::QueryRequest.new

# Perform the call
response = service.query_job(project_id, query_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
projects = service.fetch_all(items: :projects) do |token|
  service.list_projects(, page_token: token)
end

projects.each do |project_list._projects|
  # TODO: Use project_list._projects
  puts JSON.pretty_generate(project_list._projects)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the destination table.
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the destination table.
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the destination table.
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
insert_all_table_data_request_body = Google::Apis::BigqueryV2::InsertAllTableDataRequest.new

# Perform the call
response = service.insert_all_table_data(project_id, dataset_id, table_id, insert_all_table_data_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the table to read
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the table to read
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the table to read
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.list_table_data(project_id, dataset_id, table_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the table to delete
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the table to delete
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the table to delete
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# Perform the call
service.delete_table(project_id, dataset_id, table_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the requested table
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the requested table
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the requested table
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_table(project_id, dataset_id, table_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the new table
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the new table
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
table_body = Google::Apis::BigqueryV2::Table.new

# Perform the call
response = service.insert_table(project_id, dataset_id, table_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the tables to list
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the tables to list
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Perform the call
tables = service.fetch_all(items: :tables) do |token|
  service.list_tables(project_id, dataset_id, page_token: token)
end

tables.each do |table_list._tables|
  # TODO: Use table_list._tables
  puts JSON.pretty_generate(table_list._tables)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the table to update
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the table to update
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the table to update
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
table_body = Google::Apis::BigqueryV2::Table.new

# Perform the call
response = service.patch_table(project_id, dataset_id, table_id, table_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the BigQuery API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/bigquery
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/bigquery_v2'
require 'json'

service = Google::Apis::BigqueryV2::BigqueryService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the table to update
project_id = '{MY-PROJECT-ID}' # TODO: Change placeholder value(s).

# Dataset ID of the table to update
dataset_id = '{MY-DATASET-ID}' # TODO: Change placeholder value(s).

# Table ID of the table to update
table_id = '{MY-TABLE-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
table_body = Google::Apis::BigqueryV2::Table.new

# Perform the call
response = service.update_table(project_id, dataset_id, table_id, table_body)

# TODO: Use response
puts JSON.pretty_generate(response)
