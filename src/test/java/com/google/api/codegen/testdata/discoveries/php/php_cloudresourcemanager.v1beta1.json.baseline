
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The id of the Organization resource to fetch.
$organizationId = '';


$response = $service->organizations->get($organizationId);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `getIamPolicy` method:

// * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
//   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
//   in this value is resource specific and is specified in the `getIamPolicy` documentation.
$resource = '';


$Google_Service_CloudResourceManager_GetIamPolicyRequestBody = new Google_Service_CloudResourceManager_GetIamPolicyRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_GetIamPolicyRequestBody` object.


$response = $service->organizations->getIamPolicy($resource, $Google_Service_CloudResourceManager_GetIamPolicyRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


$optParams = array();
do {
  $response = $service->organizations->listOrganizations($optParams);

  foreach ($response['organizations'] as $organization) {
    // TODO: Change code below to process each `organization` resource:
    echo '<pre>', var_export($organization, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `setIamPolicy` method:

// * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
//   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
//   in this value is resource specific and is specified in the `setIamPolicy` documentation.
$resource = '';


$Google_Service_CloudResourceManager_SetIamPolicyRequestBody = new Google_Service_CloudResourceManager_SetIamPolicyRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_SetIamPolicyRequestBody` object.


$response = $service->organizations->setIamPolicy($resource, $Google_Service_CloudResourceManager_SetIamPolicyRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `testIamPermissions` method:

// * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
//   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
//   path specified in this value is resource specific and is specified in the `testIamPermissions`
//   documentation.
$resource = '';


$Google_Service_CloudResourceManager_TestIamPermissionsRequestBody = new Google_Service_CloudResourceManager_TestIamPermissionsRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_TestIamPermissionsRequestBody` object.


$response = $service->organizations->testIamPermissions($resource, $Google_Service_CloudResourceManager_TestIamPermissionsRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * An immutable id for the Organization that is assigned on creation. This should be omitted when
//   creating a new Organization. This field is read-only.
$organizationId = '';


$Google_Service_CloudResourceManager_OrganizationBody = new Google_Service_CloudResourceManager_Organization($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_OrganizationBody` object.


$response = $service->organizations->update($organizationId, $Google_Service_CloudResourceManager_OrganizationBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


$Google_Service_CloudResourceManager_ProjectBody = new Google_Service_CloudResourceManager_Project($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_ProjectBody` object.


$response = $service->projects->create($Google_Service_CloudResourceManager_ProjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * The Project ID (for example, `foo-bar-123`). Required.
$projectId = '';


$service->projects->delete($projectId);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The Project ID (for example, `my-project-123`). Required.
$projectId = '';


$response = $service->projects->get($projectId);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `getIamPolicy` method:

// * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
//   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
//   in this value is resource specific and is specified in the `getIamPolicy` documentation.
$resource = '';


$Google_Service_CloudResourceManager_GetIamPolicyRequestBody = new Google_Service_CloudResourceManager_GetIamPolicyRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_GetIamPolicyRequestBody` object.


$response = $service->projects->getIamPolicy($resource, $Google_Service_CloudResourceManager_GetIamPolicyRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


$optParams = array();
do {
  $response = $service->projects->listProjects($optParams);

  foreach ($response['projects'] as $project) {
    // TODO: Change code below to process each `project` resource:
    echo '<pre>', var_export($project, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `setIamPolicy` method:

// * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
//   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
//   in this value is resource specific and is specified in the `setIamPolicy` documentation.
$resource = '';


$Google_Service_CloudResourceManager_SetIamPolicyRequestBody = new Google_Service_CloudResourceManager_SetIamPolicyRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_SetIamPolicyRequestBody` object.


$response = $service->projects->setIamPolicy($resource, $Google_Service_CloudResourceManager_SetIamPolicyRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `testIamPermissions` method:

// * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
//   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
//   path specified in this value is resource specific and is specified in the `testIamPermissions`
//   documentation.
$resource = '';


$Google_Service_CloudResourceManager_TestIamPermissionsRequestBody = new Google_Service_CloudResourceManager_TestIamPermissionsRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_TestIamPermissionsRequestBody` object.


$response = $service->projects->testIamPermissions($resource, $Google_Service_CloudResourceManager_TestIamPermissionsRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `undelete` method:

// * The project ID (for example, `foo-bar-123`). Required.
$projectId = '';


$Google_Service_CloudResourceManager_UndeleteProjectRequestBody = new Google_Service_CloudResourceManager_UndeleteProjectRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_UndeleteProjectRequestBody` object.


$service->projects->undelete($projectId, $Google_Service_CloudResourceManager_UndeleteProjectRequestBody);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudResourceManager service object for interacting with the API.
$service = new Google_Service_CloudResourceManager($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * The project ID (for example, `my-project-123`). Required.
$projectId = '';


$Google_Service_CloudResourceManager_ProjectBody = new Google_Service_CloudResourceManager_Project($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudResourceManager_ProjectBody` object.


$response = $service->projects->update($projectId, $Google_Service_CloudResourceManager_ProjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
