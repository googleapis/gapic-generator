============== file: lib/google/example/v1/decrementer_service_client.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/googleapis/googleapis/blob/master/multiple_services.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google
# engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

require "json"
require "pathname"

require "google/gax"

require "multiple_services_pb"

module Google
  module Example
    module V1
      # @!attribute [r] decrementer_service_stub
      #   @return [Google::Cloud::Example::V1::DecrementerService::Stub]
      class DecrementerServiceClient
        attr_reader :decrementer_service_stub

        # The default address of the service.
        SERVICE_ADDRESS = "no-path-templates.googleapis.com".freeze

        # The default port of the service.
        DEFAULT_SERVICE_PORT = 443

        DEFAULT_TIMEOUT = 30

        # The scopes needed to make gRPC calls to all of the methods defined in
        # this service.
        ALL_SCOPES = [
        ].freeze

        # @param service_path [String]
        #   The domain name of the API remote host.
        # @param port [Integer]
        #   The port on which to connect to the remote host.
        # @param credentials
        #   [Google::Gax::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
        #   Provides the means for authenticating requests made by the client. This parameter can
        #   be many types.
        #   A `Google::Gax::Credentials` uses a the properties of its represented keyfile for
        #   authenticating requests made by this client.
        #   A `String` will be treated as the path to the keyfile to be used for the construction of
        #   credentials for this client.
        #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
        #   credentials for this client.
        #   A `GRPC::Core::Channel` will be used to make calls through.
        #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
        #   should already be composed with a `GRPC::Core::CallCredentials` object.
        #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
        #   metadata for requests, generally, to give OAuth credentials.
        # @param scopes [Array<String>]
        #   The OAuth scopes for this service. This parameter is ignored if
        #   an updater_proc is supplied.
        # @param client_config[Hash]
        #   A Hash for call options for each method. See
        #   Google::Gax#construct_settings for the structure of
        #   this data. Falls back to the default config if not specified
        #   or the specified config is missing data points.
        # @param timeout [Numeric]
        #   The default timeout, in seconds, for calls made through this client.
        def initialize \
            service_path: SERVICE_ADDRESS,
            port: DEFAULT_SERVICE_PORT,
            channel: nil,
            chan_creds: nil,
            updater_proc: nil,
            credentials: nil,
            scopes: ALL_SCOPES,
            client_config: {},
            timeout: DEFAULT_TIMEOUT,
            app_name: nil,
            app_version: nil,
            lib_name: nil,
            lib_version: ""
          # These require statements are intentionally placed here to initialize
          # the gRPC module only when it's required.
          # See https://github.com/googleapis/toolkit/issues/446
          require "google/gax/grpc"
          require "multiple_services_services_pb"

          if channel || chan_creds || updater_proc
            warn "The `channel`, `chan_creds`, and `updater_proc` parameters will be removed " \
              "on 2017/09/08"
            credentials ||= channel
            credentials ||= chan_creds
            credentials ||= updater_proc
          end
          if app_name || app_version
            warn "`app_name` and `app_version` are no longer being used in the request headers."
          end

          if credentials.is_a?(String) || credentials.is_a?(Hash)
            updater_proc = Google::Example::V1::Credentials.new(credentials).updater_proc
          end
          if credentials.is_a?(GRPC::Core::Channel)
            channel = credentials
          end
          if credentials.is_a?(GRPC::Core::ChannelCredentials)
            chan_creds = credentials
          end
          if credentials.is_a?(Proc)
            updater_proc = credentials
          end
          if credentials.ia_a(Google::Gax::Credentials)
            updater_proc = credentials.updater_proc
          end

          google_api_client = "gl-ruby/#{RUBY_VERSION}"
          google_api_client << " #{lib_name}/#{lib_version}" if lib_name
          google_api_client << " gapic/0.6.8 gax/#{Google::Gax::VERSION}"
          google_api_client << " grpc/#{GRPC::VERSION}"
          google_api_client.freeze

          headers = { :"x-goog-api-client" => google_api_client }
          client_config_file = Pathname.new(__dir__).join(
            "decrementer_service_client_config.json"
          )
          defaults = client_config_file.open do |f|
            Google::Gax.construct_settings(
              "google.cloud.example.v1.DecrementerService",
              JSON.parse(f.read),
              client_config,
              Google::Gax::Grpc::STATUS_CODE_NAMES,
              timeout,
              errors: Google::Gax::Grpc::API_ERRORS,
              kwargs: headers
            )
          end
          @decrementer_service_stub = Google::Gax::Grpc.create_stub(
            service_path,
            port,
            chan_creds: chan_creds,
            channel: channel,
            updater_proc: updater_proc,
            scopes: scopes,
            &Google::Cloud::Example::V1::DecrementerService::Stub.method(:new)
          )

          @decrement = Google::Gax.create_api_call(
            @decrementer_service_stub.method(:decrement),
            defaults["decrement"]
          )
        end

        # Service calls

        # Decrement.
        #
        # @param options [Google::Gax::CallOptions]
        #   Overrides the default settings for this call, e.g, timeout,
        #   retries, etc.
        # @raise [Google::Gax::GaxError] if the RPC is aborted.
        # @example
        #   require "google/example/v1"
        #
        #   decrementer_service_client = Google::Example::V1::Decrementer.new
        #   decrementer_service_client.decrement

        def decrement options: nil
          req = Google::Cloud::Example::V1::DecrementRequest.new
          @decrement.call(req, options)
          nil
        end
      end
    end
  end
end

============== file: lib/google/example/v1/incrementer_service_client.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/googleapis/googleapis/blob/master/multiple_services.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google
# engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

require "json"
require "pathname"

require "google/gax"

require "multiple_services_pb"

module Google
  module Example
    module V1
      # @!attribute [r] incrementer_service_stub
      #   @return [Google::Cloud::Example::V1::IncrementerService::Stub]
      class IncrementerServiceClient
        attr_reader :incrementer_service_stub

        # The default address of the service.
        SERVICE_ADDRESS = "no-path-templates.googleapis.com".freeze

        # The default port of the service.
        DEFAULT_SERVICE_PORT = 443

        DEFAULT_TIMEOUT = 30

        # The scopes needed to make gRPC calls to all of the methods defined in
        # this service.
        ALL_SCOPES = [
        ].freeze

        # @param service_path [String]
        #   The domain name of the API remote host.
        # @param port [Integer]
        #   The port on which to connect to the remote host.
        # @param credentials
        #   [Google::Gax::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
        #   Provides the means for authenticating requests made by the client. This parameter can
        #   be many types.
        #   A `Google::Gax::Credentials` uses a the properties of its represented keyfile for
        #   authenticating requests made by this client.
        #   A `String` will be treated as the path to the keyfile to be used for the construction of
        #   credentials for this client.
        #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
        #   credentials for this client.
        #   A `GRPC::Core::Channel` will be used to make calls through.
        #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
        #   should already be composed with a `GRPC::Core::CallCredentials` object.
        #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
        #   metadata for requests, generally, to give OAuth credentials.
        # @param scopes [Array<String>]
        #   The OAuth scopes for this service. This parameter is ignored if
        #   an updater_proc is supplied.
        # @param client_config[Hash]
        #   A Hash for call options for each method. See
        #   Google::Gax#construct_settings for the structure of
        #   this data. Falls back to the default config if not specified
        #   or the specified config is missing data points.
        # @param timeout [Numeric]
        #   The default timeout, in seconds, for calls made through this client.
        def initialize \
            service_path: SERVICE_ADDRESS,
            port: DEFAULT_SERVICE_PORT,
            channel: nil,
            chan_creds: nil,
            updater_proc: nil,
            credentials: nil,
            scopes: ALL_SCOPES,
            client_config: {},
            timeout: DEFAULT_TIMEOUT,
            app_name: nil,
            app_version: nil,
            lib_name: nil,
            lib_version: ""
          # These require statements are intentionally placed here to initialize
          # the gRPC module only when it's required.
          # See https://github.com/googleapis/toolkit/issues/446
          require "google/gax/grpc"
          require "multiple_services_services_pb"

          if channel || chan_creds || updater_proc
            warn "The `channel`, `chan_creds`, and `updater_proc` parameters will be removed " \
              "on 2017/09/08"
            credentials ||= channel
            credentials ||= chan_creds
            credentials ||= updater_proc
          end
          if app_name || app_version
            warn "`app_name` and `app_version` are no longer being used in the request headers."
          end

          if credentials.is_a?(String) || credentials.is_a?(Hash)
            updater_proc = Google::Example::V1::Credentials.new(credentials).updater_proc
          end
          if credentials.is_a?(GRPC::Core::Channel)
            channel = credentials
          end
          if credentials.is_a?(GRPC::Core::ChannelCredentials)
            chan_creds = credentials
          end
          if credentials.is_a?(Proc)
            updater_proc = credentials
          end
          if credentials.ia_a(Google::Gax::Credentials)
            updater_proc = credentials.updater_proc
          end

          google_api_client = "gl-ruby/#{RUBY_VERSION}"
          google_api_client << " #{lib_name}/#{lib_version}" if lib_name
          google_api_client << " gapic/0.6.8 gax/#{Google::Gax::VERSION}"
          google_api_client << " grpc/#{GRPC::VERSION}"
          google_api_client.freeze

          headers = { :"x-goog-api-client" => google_api_client }
          client_config_file = Pathname.new(__dir__).join(
            "incrementer_service_client_config.json"
          )
          defaults = client_config_file.open do |f|
            Google::Gax.construct_settings(
              "google.cloud.example.v1.IncrementerService",
              JSON.parse(f.read),
              client_config,
              Google::Gax::Grpc::STATUS_CODE_NAMES,
              timeout,
              errors: Google::Gax::Grpc::API_ERRORS,
              kwargs: headers
            )
          end
          @incrementer_service_stub = Google::Gax::Grpc.create_stub(
            service_path,
            port,
            chan_creds: chan_creds,
            channel: channel,
            updater_proc: updater_proc,
            scopes: scopes,
            &Google::Cloud::Example::V1::IncrementerService::Stub.method(:new)
          )

          @increment = Google::Gax.create_api_call(
            @incrementer_service_stub.method(:increment),
            defaults["increment"]
          )
        end

        # Service calls

        # Increment.
        #
        # @param options [Google::Gax::CallOptions]
        #   Overrides the default settings for this call, e.g, timeout,
        #   retries, etc.
        # @raise [Google::Gax::GaxError] if the RPC is aborted.
        # @example
        #   require "google/example/v1"
        #
        #   incrementer_service_client = Google::Example::V1::Incrementer.new
        #   incrementer_service_client.increment

        def increment options: nil
          req = Google::Cloud::Example::V1::IncrementRequest.new
          @increment.call(req, options)
          nil
        end
      end
    end
  end
end

