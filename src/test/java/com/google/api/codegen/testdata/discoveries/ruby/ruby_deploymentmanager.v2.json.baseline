
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'cancel_deployment_preview' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''
deployments_cancel_preview_request_object = Google::Apis::DeploymentmanagerV2::DeploymentsCancelPreviewRequest.new


# Perform the call
response = service.cancel_deployment_preview(project, deployment, deployments_cancel_preview_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_deployment' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''


# Perform the call
response = service.delete_deployment(project, deployment)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_deployment' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''


# Perform the call
response = service.get_deployment(project, deployment)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_deployment' method:
# The project ID for this request.
project = ''
deployment_object = Google::Apis::DeploymentmanagerV2::Deployment.new


# Perform the call
response = service.insert_deployment(project, deployment_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_deployments' method:
# The project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :deployments) { |token|
  service.list_deployments(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_deployment' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''
deployment_object = Google::Apis::DeploymentmanagerV2::Deployment.new


# Perform the call
response = service.patch_deployment(project, deployment, deployment_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'stop_deployment' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''
deployments_stop_request_object = Google::Apis::DeploymentmanagerV2::DeploymentsStopRequest.new


# Perform the call
response = service.stop_deployment(project, deployment, deployments_stop_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_deployment' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''
deployment_object = Google::Apis::DeploymentmanagerV2::Deployment.new


# Perform the call
response = service.update_deployment(project, deployment, deployment_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_manifest' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''

# The name of the manifest for this request.
manifest = ''


# Perform the call
response = service.get_manifest(project, deployment, manifest)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_manifests' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''


# Perform the call
result_list = service.fetch_all(items: :manifests) { |token|
  service.list_manifests(project, deployment, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_operation' method:
# The project ID for this request.
project = ''

# The name of the operation for this request.
operation = ''


# Perform the call
response = service.get_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_operations' method:
# The project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :operations) { |token|
  service.list_operations(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_resource' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''

# The name of the resource for this request.
resource = ''


# Perform the call
response = service.get_resource(project, deployment, resource)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_resources' method:
# The project ID for this request.
project = ''

# The name of the deployment for this request.
deployment = ''


# Perform the call
result_list = service.fetch_all(items: :resources) { |token|
  service.list_resources(project, deployment, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Deployment Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/deploymentmanager
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/deploymentmanager_v2'

service = Google::Apis::DeploymentmanagerV2::DeploymentManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_types' method:
# The project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :types) { |token|
  service.list_types(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
