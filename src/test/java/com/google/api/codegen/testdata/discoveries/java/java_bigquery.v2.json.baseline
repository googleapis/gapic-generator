
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the dataset being deleted
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of dataset being deleted
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Delete request = service.datasets().delete(projectId, datasetId);
    request.execute();
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // Project ID of the dataset being deleted
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of dataset being deleted
    String datasetId = "{MY-DATASET-ID}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======

    Bigquery.Datasets.Delete request = bigqueryService.datasets().delete(projectId, datasetId);
    request.execute();
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.Get;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the requested dataset
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the requested dataset
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.datasets().get(projectId, datasetId);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Project ID of the requested dataset
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the requested dataset
    String datasetId = "{MY-DATASET-ID}";


    Bigquery.Datasets.Get request = bigqueryService.datasets().get(projectId, datasetId);
    Dataset response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.Insert;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Project ID of the new dataset
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.datasets().insert(projectId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // Project ID of the new dataset
    String projectId = "{MY-PROJECT-ID}";


    Dataset requestBody = new Dataset();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Datasets.Insert request = bigqueryService.datasets().insert(projectId, requestBody);
    Dataset response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.List;
import com.google.api.services.bigquery.model.DatasetList;
import com.google.api.services.bigquery.model.DatasetList.Datasets;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the datasets to be listed
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.datasets().list(projectId);
    DatasetList response;
    do {
      response = request.execute();
      if (response.getDatasets() == null) {
        continue;
      }
      for (Datasets item : response.getDatasets()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the datasets to be listed
    String projectId = "{MY-PROJECT-ID}";


    Bigquery.Datasets.List request = bigqueryService.datasets().list(projectId);
    DatasetList response;
    do {
      response = request.execute();
      if (response.getDatasets() == null)
        continue;

      for (Datasets datasets : response.getDatasets()) {
        // TODO: Change code below to process each `datasets` resource:
        System.out.println(datasets);
      }
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.Patch;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Project ID of the dataset being updated
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the dataset being updated
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Patch request = service.datasets().patch(projectId, datasetId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // Project ID of the dataset being updated
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the dataset being updated
    String datasetId = "{MY-DATASET-ID}";


    Dataset requestBody = new Dataset();
    // TODO: Assign values to desired fields of the `requestBody` object to be changed.


    Bigquery.Datasets.Patch request = bigqueryService.datasets().patch(projectId, datasetId, requestBody);
    Dataset response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Datasets.Update;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Project ID of the dataset being updated
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the dataset being updated
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Update request = service.datasets().update(projectId, datasetId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // Project ID of the dataset being updated
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the dataset being updated
    String datasetId = "{MY-DATASET-ID}";


    Dataset requestBody = new Dataset();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Datasets.Update request = bigqueryService.datasets().update(projectId, datasetId, requestBody);
    Dataset response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.Cancel;
import com.google.api.services.bigquery.model.JobCancelResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Project ID of the job to cancel
    String projectId = ""; // TODO: Update field(s).

    // [Required] Job ID of the job to cancel
    String jobId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Cancel request = service.jobs().cancel(projectId, jobId);
    JobCancelResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `cancel` method:

    // [Required] Project ID of the job to cancel
    String projectId = "{MY-PROJECT-ID}";

    // [Required] Job ID of the job to cancel
    String jobId = "{MY-JOB-ID}";


    Bigquery.Jobs.Cancel request = bigqueryService.jobs().cancel(projectId, jobId);
    JobCancelResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.Get;
import com.google.api.services.bigquery.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Project ID of the requested job
    String projectId = ""; // TODO: Update field(s).

    // [Required] Job ID of the requested job
    String jobId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.jobs().get(projectId, jobId);
    Job response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // [Required] Project ID of the requested job
    String projectId = "{MY-PROJECT-ID}";

    // [Required] Job ID of the requested job
    String jobId = "{MY-JOB-ID}";


    Bigquery.Jobs.Get request = bigqueryService.jobs().get(projectId, jobId);
    Job response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.GetQueryResults;
import com.google.api.services.bigquery.model.GetQueryResultsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Project ID of the query job
    String projectId = ""; // TODO: Update field(s).

    // [Required] Job ID of the query job
    String jobId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    GetQueryResults request = service.jobs().getQueryResults(projectId, jobId);
    GetQueryResultsResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `getQueryResults` method:

    // [Required] Project ID of the query job
    String projectId = "{MY-PROJECT-ID}";

    // [Required] Job ID of the query job
    String jobId = "{MY-JOB-ID}";


    Bigquery.Jobs.GetQueryResults request = bigqueryService.jobs().getQueryResults(projectId, jobId);
    GetQueryResultsResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.Insert;
import com.google.api.services.bigquery.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Job requestBody = new Job();

    // Project ID of the project that will be billed for the job
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.jobs().insert(projectId, requestBody);
    Job response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // Project ID of the project that will be billed for the job
    String projectId = "{MY-PROJECT-ID}";


    Job requestBody = new Job();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Jobs.Insert request = bigqueryService.jobs().insert(projectId, requestBody);
    Job response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.List;
import com.google.api.services.bigquery.model.JobList;
import com.google.api.services.bigquery.model.JobList.Jobs;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the jobs to list
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.jobs().list(projectId);
    JobList response;
    do {
      response = request.execute();
      if (response.getJobs() == null) {
        continue;
      }
      for (Jobs item : response.getJobs()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the jobs to list
    String projectId = "{MY-PROJECT-ID}";


    Bigquery.Jobs.List request = bigqueryService.jobs().list(projectId);
    JobList response;
    do {
      response = request.execute();
      if (response.getJobs() == null)
        continue;

      for (Jobs jobs : response.getJobs()) {
        // TODO: Change code below to process each `jobs` resource:
        System.out.println(jobs);
      }
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Jobs.Query;
import com.google.api.services.bigquery.model.QueryRequest;
import com.google.api.services.bigquery.model.QueryResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    QueryRequest requestBody = new QueryRequest();

    // Project ID of the project billed for the query
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Query request = service.jobs().query(projectId, requestBody);
    QueryResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `query` method:

    // Project ID of the project billed for the query
    String projectId = "{MY-PROJECT-ID}";


    QueryRequest requestBody = new QueryRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Jobs.Query request = bigqueryService.jobs().query(projectId, requestBody);
    QueryResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Projects.List;
import com.google.api.services.bigquery.model.ProjectList;
import com.google.api.services.bigquery.model.ProjectList.Projects;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    Bigquery service = createService();
    List request = service.projects().list();
    ProjectList response;
    do {
      response = request.execute();
      if (response.getProjects() == null) {
        continue;
      }
      for (Projects item : response.getProjects()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    Bigquery.Projects.List request = bigqueryService.projects().list();
    ProjectList response;
    do {
      response = request.execute();
      if (response.getProjects() == null)
        continue;

      for (Projects projects : response.getProjects()) {
        // TODO: Change code below to process each `projects` resource:
        System.out.println(projects);
      }
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tabledata.InsertAll;
import com.google.api.services.bigquery.model.TableDataInsertAllRequest;
import com.google.api.services.bigquery.model.TableDataInsertAllResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    TableDataInsertAllRequest requestBody = new TableDataInsertAllRequest();

    // Project ID of the destination table.
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the destination table.
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the destination table.
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    InsertAll request = service.tabledata().insertAll(projectId, datasetId, tableId, requestBody);
    TableDataInsertAllResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insertAll` method:

    // Project ID of the destination table.
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the destination table.
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the destination table.
    String tableId = "{MY-TABLE-ID}";


    TableDataInsertAllRequest requestBody = new TableDataInsertAllRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Tabledata.InsertAll request = bigqueryService.tabledata().insertAll(projectId, datasetId, tableId, requestBody);
    TableDataInsertAllResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tabledata.List;
import com.google.api.services.bigquery.model.TableDataList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the table to read
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the table to read
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to read
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.tabledata().list(projectId, datasetId, tableId);
    TableDataList response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the table to read
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the table to read
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the table to read
    String tableId = "{MY-TABLE-ID}";


    Bigquery.Tabledata.List request = bigqueryService.tabledata().list(projectId, datasetId, tableId);
    TableDataList response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the table to delete
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the table to delete
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to delete
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Delete request = service.tables().delete(projectId, datasetId, tableId);
    request.execute();
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // Project ID of the table to delete
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the table to delete
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the table to delete
    String tableId = "{MY-TABLE-ID}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======

    Bigquery.Tables.Delete request = bigqueryService.tables().delete(projectId, datasetId, tableId);
    request.execute();
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.Get;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the requested table
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the requested table
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the requested table
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.tables().get(projectId, datasetId, tableId);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Project ID of the requested table
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the requested table
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the requested table
    String tableId = "{MY-TABLE-ID}";


    Bigquery.Tables.Get request = bigqueryService.tables().get(projectId, datasetId, tableId);
    Table response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.Insert;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Project ID of the new table
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the new table
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.tables().insert(projectId, datasetId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // Project ID of the new table
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the new table
    String datasetId = "{MY-DATASET-ID}";


    Table requestBody = new Table();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Tables.Insert request = bigqueryService.tables().insert(projectId, datasetId, requestBody);
    Table response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.List;
import com.google.api.services.bigquery.model.TableList;
import com.google.api.services.bigquery.model.TableList.Tables;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the tables to list
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the tables to list
    String datasetId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.tables().list(projectId, datasetId);
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the tables to list
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the tables to list
    String datasetId = "{MY-DATASET-ID}";


    Bigquery.Tables.List request = bigqueryService.tables().list(projectId, datasetId);
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    TableList response;
    do {
      response = request.execute();
      if (response.getTables() == null) {
        continue;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
=======

      for (Tables tables : response.getTables()) {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
        // TODO: Add code here to process each 'tables' resource
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
      }
      for (Tables item : response.getTables()) {
        System.out.println(item);
=======
        // TODO: Change code below to process each `tables` resource:
        System.out.println(tables);
>>>>>>> Update discovery sample gen across languages.
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.Patch;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Project ID of the table to update
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the table to update
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to update
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Patch request = service.tables().patch(projectId, datasetId, tableId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // Project ID of the table to update
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the table to update
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the table to update
    String tableId = "{MY-TABLE-ID}";


    Table requestBody = new Table();
    // TODO: Assign values to desired fields of the `requestBody` object to be changed.


    Bigquery.Tables.Patch request = bigqueryService.tables().patch(projectId, datasetId, tableId, requestBody);
    Table response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.Bigquery.Tables.Update;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Project ID of the table to update
    String projectId = ""; // TODO: Update field(s).

    // Dataset ID of the table to update
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to update
    String tableId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Update request = service.tables().update(projectId, datasetId, tableId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new BigqueryExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Bigquery bigqueryService = new Bigquery.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // Project ID of the table to update
    String projectId = "{MY-PROJECT-ID}";

    // Dataset ID of the table to update
    String datasetId = "{MY-DATASET-ID}";

    // Table ID of the table to update
    String tableId = "{MY-TABLE-ID}";


    Table requestBody = new Table();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Bigquery.Tables.Update request = bigqueryService.tables().update(projectId, datasetId, tableId, requestBody);
    Table response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
