
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of dataset being deleted
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the dataset being deleted
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Delete request = service.datasets().delete(datasetId, projectId);
    request.execute();
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.Get;
import com.google.api.services.bigquery.v2.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of the requested dataset
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the requested dataset
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.datasets().get(datasetId, projectId);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.Insert;
import com.google.api.services.bigquery.v2.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Project ID of the new dataset
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.datasets().insert(projectId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.List;
import com.google.api.services.bigquery.v2.model.DatasetList;
import com.google.api.services.bigquery.v2.model.DatasetList.Datasets;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the datasets to be listed
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.datasets().list(projectId);
    DatasetList response;
    do {
      response = request.execute();
      if (response.getDatasets() == null) {
        continue;
      }
      for (Datasets item : response.getDatasets()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.Patch;
import com.google.api.services.bigquery.v2.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Dataset ID of the dataset being updated
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the dataset being updated
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Patch request = service.datasets().patch(datasetId, projectId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Datasets.Update;
import com.google.api.services.bigquery.v2.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Dataset requestBody = new Dataset();

    // Dataset ID of the dataset being updated
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the dataset being updated
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Update request = service.datasets().update(datasetId, projectId, requestBody);
    Dataset response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.Cancel;
import com.google.api.services.bigquery.v2.model.JobCancelResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Job ID of the job to cancel
    String jobId = ""; // TODO: Update field(s).

    // [Required] Project ID of the job to cancel
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Cancel request = service.jobs().cancel(jobId, projectId);
    JobCancelResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.Get;
import com.google.api.services.bigquery.v2.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Job ID of the requested job
    String jobId = ""; // TODO: Update field(s).

    // [Required] Project ID of the requested job
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.jobs().get(jobId, projectId);
    Job response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.GetQueryResults;
import com.google.api.services.bigquery.v2.model.GetQueryResultsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // [Required] Job ID of the query job
    String jobId = ""; // TODO: Update field(s).

    // [Required] Project ID of the query job
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    GetQueryResults request = service.jobs().getQueryResults(jobId, projectId);
    GetQueryResultsResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.Insert;
import com.google.api.services.bigquery.v2.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Job requestBody = new Job();

    // Project ID of the project that will be billed for the job
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.jobs().insert(projectId, requestBody);
    Job response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.List;
import com.google.api.services.bigquery.v2.model.JobList;
import com.google.api.services.bigquery.v2.model.JobList.Jobs;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the jobs to list
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.jobs().list(projectId);
    JobList response;
    do {
      response = request.execute();
      if (response.getJobs() == null) {
        continue;
      }
      for (Jobs item : response.getJobs()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Jobs.Query;
import com.google.api.services.bigquery.v2.model.QueryRequest;
import com.google.api.services.bigquery.v2.model.QueryResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    QueryRequest requestBody = new QueryRequest();

    // Project ID of the project billed for the query
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Query request = service.jobs().query(projectId, requestBody);
    QueryResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Projects.List;
import com.google.api.services.bigquery.v2.model.ProjectList;
import com.google.api.services.bigquery.v2.model.ProjectList.Projects;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    Bigquery service = createService();
    List request = service.projects().list();
    ProjectList response;
    do {
      response = request.execute();
      if (response.getProjects() == null) {
        continue;
      }
      for (Projects item : response.getProjects()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tabledata.InsertAll;
import com.google.api.services.bigquery.v2.model.TableDataInsertAllRequest;
import com.google.api.services.bigquery.v2.model.TableDataInsertAllResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    TableDataInsertAllRequest requestBody = new TableDataInsertAllRequest();

    // Dataset ID of the destination table.
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the destination table.
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the destination table.
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    InsertAll request = service.tabledata().insertAll(datasetId, tableId, projectId, requestBody);
    TableDataInsertAllResponse response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tabledata.List;
import com.google.api.services.bigquery.v2.model.TableDataList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of the table to read
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to read
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the table to read
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.tabledata().list(datasetId, tableId, projectId);
    TableDataList response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of the table to delete
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to delete
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the table to delete
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Delete request = service.tables().delete(datasetId, tableId, projectId);
    request.execute();
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.Get;
import com.google.api.services.bigquery.v2.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of the requested table
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the requested table
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the requested table
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Get request = service.tables().get(datasetId, tableId, projectId);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.Insert;
import com.google.api.services.bigquery.v2.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Dataset ID of the new table
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the new table
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Insert request = service.tables().insert(datasetId, projectId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.List;
import com.google.api.services.bigquery.v2.model.TableList;
import com.google.api.services.bigquery.v2.model.TableList.Tables;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // Dataset ID of the tables to list
    String datasetId = ""; // TODO: Update field(s).

    // Project ID of the tables to list
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    List request = service.tables().list(datasetId, projectId);
    TableList response;
    do {
      response = request.execute();
      if (response.getTables() == null) {
        continue;
      }
      for (Tables item : response.getTables()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.Patch;
import com.google.api.services.bigquery.v2.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Dataset ID of the table to update
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to update
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the table to update
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Patch request = service.tables().patch(datasetId, tableId, projectId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.v2.Bigquery;
import com.google.api.services.bigquery.v2.Bigquery.Tables.Update;
import com.google.api.services.bigquery.v2.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Table requestBody = new Table();

    // Dataset ID of the table to update
    String datasetId = ""; // TODO: Update field(s).

    // Table ID of the table to update
    String tableId = ""; // TODO: Update field(s).

    // Project ID of the table to update
    String projectId = ""; // TODO: Update field(s).

    Bigquery service = createService();
    Update request = service.tables().update(datasetId, tableId, projectId, requestBody);
    Table response = request.execute();
    System.out.println(response);
  }

  public Bigquery createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
