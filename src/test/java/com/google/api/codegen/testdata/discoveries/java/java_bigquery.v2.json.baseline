
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the dataset being deleted
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of dataset being deleted
    String datasetId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.Delete request = bigqueryService.datasets().delete(projectId, datasetId);

    request.execute();
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the requested dataset
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the requested dataset
    String datasetId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.Get request = bigqueryService.datasets().get(projectId, datasetId);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the new dataset
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Dataset requestBody = new Dataset();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.Insert request = bigqueryService.datasets().insert(projectId, requestBody);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.DatasetList;
import com.google.api.services.bigquery.model.DatasetList.Datasets;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the datasets to be listed
    String projectId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.List request = bigqueryService.datasets().list(projectId);

    DatasetList response;
    do {
      response = request.execute();
      if (response.getDatasets() == null) {
        continue;
      }
      for (Datasets datasets : response.getDatasets()) {
        // TODO: Change code below to process each `datasets` resource:
        System.out.println(datasets);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the dataset being updated
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the dataset being updated
    String datasetId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Dataset requestBody = new Dataset();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.Patch request = bigqueryService.datasets().patch(projectId, datasetId, requestBody);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Dataset;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the dataset being updated
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the dataset being updated
    String datasetId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    Dataset requestBody = new Dataset();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Datasets.Update request = bigqueryService.datasets().update(projectId, datasetId, requestBody);

    Dataset response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.JobCancelResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // [Required] Project ID of the job to cancel
    String projectId = "";  // TODO: Update placeholder value.

    // [Required] Job ID of the job to cancel
    String jobId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.Cancel request = bigqueryService.jobs().cancel(projectId, jobId);

    JobCancelResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // [Required] Project ID of the requested job
    String projectId = "";  // TODO: Update placeholder value.

    // [Required] Job ID of the requested job
    String jobId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.Get request = bigqueryService.jobs().get(projectId, jobId);

    Job response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.ErrorProto;
import com.google.api.services.bigquery.model.GetQueryResultsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // [Required] Project ID of the query job
    String projectId = "";  // TODO: Update placeholder value.

    // [Required] Job ID of the query job
    String jobId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.GetQueryResults request = bigqueryService.jobs().getQueryResults(projectId, jobId);

    GetQueryResultsResponse response;
    do {
      response = request.execute();
      if (response.getErrors() == null) {
        continue;
      }
      for (ErrorProto errorProto : response.getErrors()) {
        // TODO: Change code below to process each `errorProto` resource:
        System.out.println(errorProto);
      }
      request.setPageToken(response.getPageToken());
    } while (response.getPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Job;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the project that will be billed for the job
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Job requestBody = new Job();

    // TODO: Add desired media content for upload. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.Insert request = bigqueryService.jobs().insert(projectId, requestBody);

    Job response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.JobList;
import com.google.api.services.bigquery.model.JobList.Jobs;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the jobs to list
    String projectId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.List request = bigqueryService.jobs().list(projectId);

    JobList response;
    do {
      response = request.execute();
      if (response.getJobs() == null) {
        continue;
      }
      for (Jobs jobs : response.getJobs()) {
        // TODO: Change code below to process each `jobs` resource:
        System.out.println(jobs);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.QueryRequest;
import com.google.api.services.bigquery.model.QueryResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the project billed for the query
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    QueryRequest requestBody = new QueryRequest();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Jobs.Query request = bigqueryService.jobs().query(projectId, requestBody);

    QueryResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.ProjectList;
import com.google.api.services.bigquery.model.ProjectList.Projects;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Projects.List request = bigqueryService.projects().list();

    ProjectList response;
    do {
      response = request.execute();
      if (response.getProjects() == null) {
        continue;
      }
      for (Projects projects : response.getProjects()) {
        // TODO: Change code below to process each `projects` resource:
        System.out.println(projects);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.TableDataInsertAllRequest;
import com.google.api.services.bigquery.model.TableDataInsertAllResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the destination table.
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the destination table.
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the destination table.
    String tableId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TableDataInsertAllRequest requestBody = new TableDataInsertAllRequest();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tabledata.InsertAll request = bigqueryService.tabledata().insertAll(projectId, datasetId, tableId, requestBody);

    TableDataInsertAllResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.TableDataList;
import com.google.api.services.bigquery.model.TableRow;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the table to read
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the table to read
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the table to read
    String tableId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tabledata.List request = bigqueryService.tabledata().list(projectId, datasetId, tableId);

    TableDataList response;
    do {
      response = request.execute();
      if (response.getRows() == null) {
        continue;
      }
      for (TableRow tableRow : response.getRows()) {
        // TODO: Change code below to process each `tableRow` resource:
        System.out.println(tableRow);
      }
      request.setPageToken(response.getPageToken());
    } while (response.getPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the table to delete
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the table to delete
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the table to delete
    String tableId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.Delete request = bigqueryService.tables().delete(projectId, datasetId, tableId);

    request.execute();
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the requested table
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the requested table
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the requested table
    String tableId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.Get request = bigqueryService.tables().get(projectId, datasetId, tableId);

    Table response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the new table
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the new table
    String datasetId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Table requestBody = new Table();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.Insert request = bigqueryService.tables().insert(projectId, datasetId, requestBody);

    Table response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.TableList;
import com.google.api.services.bigquery.model.TableList.Tables;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the tables to list
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the tables to list
    String datasetId = "";  // TODO: Update placeholder value.

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.List request = bigqueryService.tables().list(projectId, datasetId);

    TableList response;
    do {
      response = request.execute();
      if (response.getTables() == null) {
        continue;
      }
      for (Tables tables : response.getTables()) {
        // TODO: Change code below to process each `tables` resource:
        System.out.println(tables);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the table to update
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the table to update
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the table to update
    String tableId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Table requestBody = new Table();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.Patch request = bigqueryService.tables().patch(projectId, datasetId, tableId, requestBody);

    Table response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the BigQuery API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/bigquery
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/bigquery/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.bigquery.Bigquery;
import com.google.api.services.bigquery.model.Table;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class BigqueryExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID of the table to update
    String projectId = "";  // TODO: Update placeholder value.

    // Dataset ID of the table to update
    String datasetId = "";  // TODO: Update placeholder value.

    // Table ID of the table to update
    String tableId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    Table requestBody = new Table();

    Bigquery bigqueryService = createBigqueryService();
    Bigquery.Tables.Update request = bigqueryService.tables().update(projectId, datasetId, tableId, requestBody);

    Table response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Bigquery createBigqueryService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Bigquery.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-BigquerySample/0.1")
        .build();
  }
}
