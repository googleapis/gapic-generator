
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

list_log_entries_request_object = Google::Apis::LoggingV2beta1::ListLogEntriesRequest.new


# Perform the call
result_list = service.fetch_all(items: :entries) { |token|
  service.list_entry_log_entries(list_log_entries_request_object, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

write_log_entries_request_object = Google::Apis::LoggingV2beta1::WriteLogEntriesRequest.new


# Perform the call
response = service.write_entry_log_entries(write_log_entries_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



# Perform the call
result_list = service.fetch_all(items: :resourceDescriptors) { |token|
  service.list_monitored_resource_descriptors(, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_log' method:
# Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
log_name = 'projects/{MY-PROJECT}/logs/{MY-LOG}'


# Perform the call
service.delete_log(log_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_project_metric' method:
# The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
# The new metric must be provided in the request.
project_name = 'projects/{MY-PROJECT}'
log_metric_object = Google::Apis::LoggingV2beta1::LogMetric.new


# Perform the call
response = service.create_project_metric(project_name, log_metric_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_project_metric' method:
# The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'


# Perform the call
service.delete_project_metric(metric_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_metric' method:
# The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'


# Perform the call
response = service.get_project_metric(metric_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_project_metrics' method:
# Required. The resource name of the project containing the metrics. Example:
# `"projects/my-project-id"`.
project_name = 'projects/{MY-PROJECT}'


# Perform the call
result_list = service.fetch_all(items: :metrics) { |token|
  service.list_project_metrics(project_name, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_project_metric' method:
# The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
# The updated metric must be provided in the request and have the same identifier that is specified in
# `metricName`. If the metric does not exist, it is created.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'
log_metric_object = Google::Apis::LoggingV2beta1::LogMetric.new


# Perform the call
response = service.update_project_metric(metric_name, log_metric_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_project_sink' method:
# The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
# The new sink must be provided in the request.
project_name = 'projects/{MY-PROJECT}'
log_sink_object = Google::Apis::LoggingV2beta1::LogSink.new


# Perform the call
response = service.create_project_sink(project_name, log_sink_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_project_sink' method:
# The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'


# Perform the call
service.delete_project_sink(sink_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_sink' method:
# The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'


# Perform the call
response = service.get_project_sink(sink_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_project_sinks' method:
# Required. The resource name of the project containing the sinks. Example:
# `"projects/my-logging-project"`, `"projects/01234567890"`.
project_name = 'projects/{MY-PROJECT}'


# Perform the call
result_list = service.fetch_all(items: :sinks) { |token|
  service.list_project_sinks(project_name, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/logging_v2beta1'

service = Google::Apis::LoggingV2beta1::LoggingService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_project_sink' method:
# The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
# updated sink must be provided in the request and have the same name that is specified in `sinkName`.
# If the sink does not exist, it is created.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'
log_sink_object = Google::Apis::LoggingV2beta1::LogSink.new


# Perform the call
response = service.update_project_sink(sink_name, log_sink_object)
