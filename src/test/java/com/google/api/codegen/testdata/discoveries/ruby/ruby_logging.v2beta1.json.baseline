
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Assign values to the desired members.
list_log_entries_request_body = Google::Apis::LoggingV2beta1::ListLogEntriesRequest.new

# Perform the call
entries = service.fetch_all(items: :entries) do |token|
  service.list_entry_log_entries(list_log_entries_request_body, page_token: token)
end

entries.each do |log_entry|
  # TODO: Use log_entry
  puts JSON.pretty_generate(log_entry)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Assign values to the desired members.
write_log_entries_request_body = Google::Apis::LoggingV2beta1::WriteLogEntriesRequest.new

# Perform the call
response = service.write_entry_log_entries(write_log_entries_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
resourceDescriptors = service.fetch_all(items: :resourceDescriptors) do |token|
  service.list_monitored_resource_descriptors(, page_token: token)
end

resourceDescriptors.each do |monitored_resource_descriptor|
  # TODO: Use monitored_resource_descriptor
  puts JSON.pretty_generate(monitored_resource_descriptor)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
log_name = 'projects/{MY-PROJECT}/logs/{MY-LOG}'  # TODO: Update placeholder value(s).

# Perform the call
service.delete_log(log_name)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
# The new metric must be provided in the request.
project_name = 'projects/{MY-PROJECT}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
log_metric_body = Google::Apis::LoggingV2beta1::LogMetric.new

# Perform the call
response = service.create_project_metric(project_name, log_metric_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'  # TODO: Update placeholder value(s).

# Perform the call
service.delete_project_metric(metric_name)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_project_metric(metric_name)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Required. The resource name of the project containing the metrics. Example:
# `"projects/my-project-id"`.
project_name = 'projects/{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Perform the call
metrics = service.fetch_all(items: :metrics) do |token|
  service.list_project_metrics(project_name, page_token: token)
end

metrics.each do |log_metric|
  # TODO: Use log_metric
  puts JSON.pretty_generate(log_metric)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
# The updated metric must be provided in the request and have the same identifier that is specified in
# `metricName`. If the metric does not exist, it is created.
metric_name = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
log_metric_body = Google::Apis::LoggingV2beta1::LogMetric.new

# Perform the call
response = service.update_project_metric(metric_name, log_metric_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
# The new sink must be provided in the request.
project_name = 'projects/{MY-PROJECT}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
log_sink_body = Google::Apis::LoggingV2beta1::LogSink.new

# Perform the call
response = service.create_project_sink(project_name, log_sink_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'  # TODO: Update placeholder value(s).

# Perform the call
service.delete_project_sink(sink_name)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_project_sink(sink_name)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Required. The resource name of the project containing the sinks. Example:
# `"projects/my-logging-project"`, `"projects/01234567890"`.
project_name = 'projects/{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Perform the call
sinks = service.fetch_all(items: :sinks) do |token|
  service.list_project_sinks(project_name, page_token: token)
end

sinks.each do |log_sink|
  # TODO: Use log_sink
  puts JSON.pretty_generate(log_sink)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Logging API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/logging
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/logging_v2beta1'
require 'json'

service = Google::Apis::LoggingV2beta1::LoggingService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
# updated sink must be provided in the request and have the same name that is specified in `sinkName`.
# If the sink does not exist, it is created.
sink_name = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
log_sink_body = Google::Apis::LoggingV2beta1::LogSink.new

# Perform the call
response = service.update_project_sink(sink_name, log_sink_body)

# TODO: Use response
puts JSON.pretty_generate(response)
