
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name of the log to delete:
// "projects/[PROJECT_ID]/logs/[LOG_ID]"
// "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
// [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
// "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
// information about log names, see LogEntry.
$logName = 'my-log-name';  // TODO: Update placeholder value.

$service->billingAccounts_logs->delete($logName);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name that owns the logs:
// "projects/[PROJECT_ID]"
// "organizations/[ORGANIZATION_ID]"
$parent = 'my-parent';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->billingAccounts_logs->listBillingAccountsLogs($parent, $optParams);

  foreach ($response['logNames'] as $item) {
    // TODO: Change code below to process each `item` resource:
    echo '<pre>', var_export($item, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Logging_ListLogEntriesRequest();

do {
  $response = $service->entries->listEntries($requestBody);

  foreach ($response['entries'] as $logEntry) {
    // TODO: Change code below to process each `logEntry` resource:
    echo '<pre>', var_export($logEntry, true), '</pre>', "\n";
  }

  $requestBody->setPageToken($response->getNextPageToken());
} while ($requestBody->getPageToken());
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Logging_WriteLogEntriesRequest();

$response = $service->entries->write($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

$optParams = [];

do {
  $response = $service->monitoredResourceDescriptors->listMonitoredResourceDescriptors($optParams);

  foreach ($response['resourceDescriptors'] as $monitoredResourceDescriptor) {
    // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
    echo '<pre>', var_export($monitoredResourceDescriptor, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name of the log to delete:
// "projects/[PROJECT_ID]/logs/[LOG_ID]"
// "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
// [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
// "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
// information about log names, see LogEntry.
$logName = 'my-log-name';  // TODO: Update placeholder value.

$service->organizations_logs->delete($logName);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name that owns the logs:
// "projects/[PROJECT_ID]"
// "organizations/[ORGANIZATION_ID]"
$parent = 'my-parent';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->organizations_logs->listOrganizationsLogs($parent, $optParams);

  foreach ($response['logNames'] as $item) {
    // TODO: Change code below to process each `item` resource:
    echo '<pre>', var_export($item, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name of the log to delete:
// "projects/[PROJECT_ID]/logs/[LOG_ID]"
// "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
// [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
// "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
// information about log names, see LogEntry.
$logName = 'my-log-name';  // TODO: Update placeholder value.

$service->projects_logs->delete($logName);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource name that owns the logs:
// "projects/[PROJECT_ID]"
// "organizations/[ORGANIZATION_ID]"
$parent = 'my-parent';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->projects_logs->listProjectsLogs($parent, $optParams);

  foreach ($response['logNames'] as $item) {
    // TODO: Change code below to process each `item` resource:
    echo '<pre>', var_export($item, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// The resource name of the project in which to create the metric:
// "projects/[PROJECT_ID]"
// The new metric must be provided in the request.
$parent = 'my-parent';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Logging_LogMetric();

$response = $service->projects_metrics->create($parent, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// The resource name of the metric to delete:
// "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
$metricName = 'my-metric-name';  // TODO: Update placeholder value.

$service->projects_metrics->delete($metricName);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// The resource name of the desired metric:
// "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
$metricName = 'my-metric-name';  // TODO: Update placeholder value.

$response = $service->projects_metrics->get($metricName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The name of the project containing the metrics:
// "projects/[PROJECT_ID]"
$parent = 'my-parent';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->projects_metrics->listProjectsMetrics($parent, $optParams);

  foreach ($response['metrics'] as $logMetric) {
    // TODO: Change code below to process each `logMetric` resource:
    echo '<pre>', var_export($logMetric, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// The resource name of the metric to update:
// "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
// The updated metric must be provided in the request and it's name field must be the same as
// [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
$metricName = 'my-metric-name';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Logging_LogMetric();

$response = $service->projects_metrics->update($metricName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The resource in which to create the sink:
// "projects/[PROJECT_ID]"
// "organizations/[ORGANIZATION_ID]"
// Examples: "projects/my-logging-project", "organizations/123456789".
$parent = 'my-parent';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Logging_LogSink();

$response = $service->projects_sinks->create($parent, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The full resource name of the sink to delete, including the parent resource and the sink
// identifier:
// "projects/[PROJECT_ID]/sinks/[SINK_ID]"
// "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
// It is an error if the sink does not exist. Example: "projects/my-project-id/sinks/my-sink-id". It
// is an error if the sink does not exist.
$sinkName = 'my-sink-name';  // TODO: Update placeholder value.

$service->projects_sinks->delete($sinkName);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The parent resource name of the sink:
// "projects/[PROJECT_ID]/sinks/[SINK_ID]"
// "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
// Example: "projects/my-project-id/sinks/my-sink-id".
$sinkName = 'my-sink-name';  // TODO: Update placeholder value.

$response = $service->projects_sinks->get($sinkName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The parent resource whose sinks are to be listed. Examples:
// "projects/my-logging-project", "organizations/123456789".
$parent = 'my-parent';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->projects_sinks->listProjectsSinks($parent, $optParams);

  foreach ($response['sinks'] as $logSink) {
    // TODO: Change code below to process each `logSink` resource:
    echo '<pre>', var_export($logSink, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Stackdriver Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-LoggingSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Logging($client);

// Required. The full resource name of the sink to update, including the parent resource and the sink
// identifier:
// "projects/[PROJECT_ID]/sinks/[SINK_ID]"
// "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
// Example: "projects/my-project-id/sinks/my-sink-id".
$sinkName = 'my-sink-name';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Logging_LogSink();

$response = $service->projects_sinks->update($sinkName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
