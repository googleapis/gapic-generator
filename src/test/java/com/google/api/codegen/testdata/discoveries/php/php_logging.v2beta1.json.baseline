
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


$Google_Service_Logging_ListLogEntriesRequestBody = new Google_Service_Logging_ListLogEntriesRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_ListLogEntriesRequestBody` object.


$optParams = array();
do {
  $response = $service->entries->listEntries($Google_Service_Logging_ListLogEntriesRequestBody, $optParams);

  foreach ($response['entries'] as $log_entry) {
    // TODO: Change code below to process each `log_entry` resource:
    echo '<pre>', var_export($log_entry, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


$Google_Service_Logging_WriteLogEntriesRequestBody = new Google_Service_Logging_WriteLogEntriesRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_WriteLogEntriesRequestBody` object.


$response = $service->entries->write($Google_Service_Logging_WriteLogEntriesRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


$optParams = array();
do {
  $response = $service->monitoredResourceDescriptors->listMonitoredResourceDescriptors($optParams);

  foreach ($response['resourceDescriptors'] as $monitored_resource_descriptor) {
    // TODO: Change code below to process each `monitored_resource_descriptor` resource:
    echo '<pre>', var_export($monitored_resource_descriptor, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
$logName = 'projects/{MY-PROJECT}/logs/{MY-LOG}';


$service->projects_logs->delete($logName);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `create` method:

// * The resource name of the project in which to create the metric. Example:
//   `"projects/my-project-id"`. The new metric must be provided in the request.
$projectName = 'projects/{MY-PROJECT}';


$Google_Service_Logging_LogMetricBody = new Google_Service_Logging_LogMetric($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_LogMetricBody` object.


$response = $service->projects_metrics->create($projectName, $Google_Service_Logging_LogMetricBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * The resource name of the metric to delete. Example:
//   `"projects/my-project-id/metrics/my-metric-id"`.
$metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}';


$service->projects_metrics->delete($metricName);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
$metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}';


$response = $service->projects_metrics->get($metricName);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsMetrics` method:

// * Required. The resource name of the project containing the metrics. Example:
//   `"projects/my-project-id"`.
$projectName = 'projects/{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->projects_metrics->listProjectsMetrics($projectName, $optParams);

  foreach ($response['metrics'] as $log_metric) {
    // TODO: Change code below to process each `log_metric` resource:
    echo '<pre>', var_export($log_metric, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * The resource name of the metric to update. Example:
//   `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must be provided in the
//   request and have the same identifier that is specified in `metricName`. If the metric does not
//   exist, it is created.
$metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}';


$Google_Service_Logging_LogMetricBody = new Google_Service_Logging_LogMetric($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_LogMetricBody` object.


$response = $service->projects_metrics->update($metricName, $Google_Service_Logging_LogMetricBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `create` method:

// * The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
//   The new sink must be provided in the request.
$projectName = 'projects/{MY-PROJECT}';


$Google_Service_Logging_LogSinkBody = new Google_Service_Logging_LogSink($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_LogSinkBody` object.


$response = $service->projects_sinks->create($projectName, $Google_Service_Logging_LogSinkBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
$sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}';


$service->projects_sinks->delete($sinkName);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
$sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}';


$response = $service->projects_sinks->get($sinkName);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsSinks` method:

// * Required. The resource name of the project containing the sinks. Example:
//   `"projects/my-logging-project"`, `"projects/01234567890"`.
$projectName = 'projects/{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->projects_sinks->listProjectsSinks($projectName, $optParams);

  foreach ($response['sinks'] as $log_sink) {
    // TODO: Change code below to process each `log_sink` resource:
    echo '<pre>', var_export($log_sink, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Logging service object for interacting with the API.
$service = new Google_Service_Logging($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
//   updated sink must be provided in the request and have the same name that is specified in
//   `sinkName`. If the sink does not exist, it is created.
$sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}';


$Google_Service_Logging_LogSinkBody = new Google_Service_Logging_LogSink($client);
// TODO: Assign values to desired properties of the `$Google_Service_Logging_LogSinkBody` object.


$response = $service->projects_sinks->update($sinkName, $Google_Service_Logging_LogSinkBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
