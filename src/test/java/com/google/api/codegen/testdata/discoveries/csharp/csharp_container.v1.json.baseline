
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Create` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";


            Data.CreateClusterRequest requestBody = new Data.CreateClusterRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.ZonesResource.ClustersResource.CreateRequest request = containerService.Projects.Zones.Clusters.Create(requestBody, projectId, zone);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster to delete.
            string clusterId = "{MY-CLUSTER-ID}";


            ProjectsResource.ZonesResource.ClustersResource.DeleteRequest request = containerService.Projects.Zones.Clusters.Delete(projectId, zone, clusterId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster to retrieve.
            string clusterId = "{MY-CLUSTER-ID}";


            ProjectsResource.ZonesResource.ClustersResource.GetRequest request = containerService.Projects.Zones.Clusters.Get(projectId, zone, clusterId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Cluster response = request.Execute();
            // Data.Cluster response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides, or "-" for all zones.
            string zone = "{MY-ZONE}";


            ProjectsResource.ZonesResource.ClustersResource.ListRequest request = containerService.Projects.Zones.Clusters.List(projectId, zone);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ListClustersResponse response = request.Execute();
            // Data.ListClustersResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Create` method:

            // The Google Developers Console [project ID or project number]
            // (https://developers.google.com/console/help/new/#projectnumber).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster.
            string clusterId = "{MY-CLUSTER-ID}";


            Data.CreateNodePoolRequest requestBody = new Data.CreateNodePoolRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.ZonesResource.ClustersResource.NodePoolsResource.CreateRequest request = containerService.Projects.Zones.Clusters.NodePools.Create(requestBody, projectId, zone, clusterId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The Google Developers Console [project ID or project number]
            // (https://developers.google.com/console/help/new/#projectnumber).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster.
            string clusterId = "{MY-CLUSTER-ID}";

            // The name of the node pool to delete.
            string nodePoolId = "{MY-NODE-POOL-ID}";


            ProjectsResource.ZonesResource.ClustersResource.NodePoolsResource.DeleteRequest request = containerService.Projects.Zones.Clusters.NodePools.Delete(projectId, zone, clusterId, nodePoolId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The Google Developers Console [project ID or project number]
            // (https://developers.google.com/console/help/new/#projectnumber).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster.
            string clusterId = "{MY-CLUSTER-ID}";

            // The name of the node pool.
            string nodePoolId = "{MY-NODE-POOL-ID}";


            ProjectsResource.ZonesResource.ClustersResource.NodePoolsResource.GetRequest request = containerService.Projects.Zones.Clusters.NodePools.Get(projectId, zone, clusterId, nodePoolId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.NodePool response = request.Execute();
            // Data.NodePool response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The Google Developers Console [project ID or project number]
            // (https://developers.google.com/console/help/new/#projectnumber).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster.
            string clusterId = "{MY-CLUSTER-ID}";


            ProjectsResource.ZonesResource.ClustersResource.NodePoolsResource.ListRequest request = containerService.Projects.Zones.Clusters.NodePools.List(projectId, zone, clusterId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ListNodePoolsResponse response = request.Execute();
            // Data.ListNodePoolsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The name of the cluster to upgrade.
            string clusterId = "{MY-CLUSTER-ID}";


            Data.UpdateClusterRequest requestBody = new Data.UpdateClusterRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.ZonesResource.ClustersResource.UpdateRequest request = containerService.Projects.Zones.Clusters.Update(requestBody, projectId, zone, clusterId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `GetServerconfig` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
            // for.
            string zone = "{MY-ZONE}";


            ProjectsResource.ZonesResource.GetServerconfigRequest request = containerService.Projects.Zones.GetServerconfig(projectId, zone);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ServerConfig response = request.Execute();
            // Data.ServerConfig response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
            // resides.
            string zone = "{MY-ZONE}";

            // The server-assigned `name` of the operation.
            string operationId = "{MY-OPERATION-ID}";


            ProjectsResource.ZonesResource.OperationsResource.GetRequest request = containerService.Projects.Zones.Operations.Get(projectId, zone, operationId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Container.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Container.v1.Data;


namespace ContainerSample
{
    public class ContainerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ContainerService containerService = new ContainerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The Google Developers Console [project ID or project number]
            // (https://support.google.com/cloud/answer/6158840).
            string projectId = "{MY-PROJECT-ID}";

            // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
            // for, or `-` for all zones.
            string zone = "{MY-ZONE}";


            ProjectsResource.ZonesResource.OperationsResource.ListRequest request = containerService.Projects.Zones.Operations.List(projectId, zone);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ListOperationsResponse response = request.Execute();
            // Data.ListOperationsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
