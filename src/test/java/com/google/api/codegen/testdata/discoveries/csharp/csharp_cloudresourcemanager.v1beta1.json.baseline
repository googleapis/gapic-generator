
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The id of the Organization resource to fetch.
            string organizationId = "";

            OrganizationsResource.GetRequest request = cloudresourcemanagerService.Organizations.Get(organizationId);
            Data.Organization response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Organization response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetIamPolicy() method:
            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.GetIamPolicyRequest content = new Data.GetIamPolicyRequest();

            OrganizationsResource.GetIamPolicyRequest request = cloudresourcemanagerService.Organizations.GetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            OrganizationsResource.ListRequest request = cloudresourcemanagerService.Organizations.List();
            Data.ListOrganizationsResponse response;
            do
            {
                response = request.Execute();
                if (response.Organizations == null)
                {
                    continue;
                }
                foreach (Data.Organization item in response.Organizations)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListOrganizationsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetIamPolicy() method:
            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.SetIamPolicyRequest content = new Data.SetIamPolicyRequest();

            OrganizationsResource.SetIamPolicyRequest request = cloudresourcemanagerService.Organizations.SetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the TestIamPermissions() method:
            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TestIamPermissionsRequest content = new Data.TestIamPermissionsRequest();

            OrganizationsResource.TestIamPermissionsRequest request = cloudresourcemanagerService.Organizations.TestIamPermissions(content, resource);
            Data.TestIamPermissionsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:
            // An immutable id for the Organization that is assigned on creation. This should be omitted when
            // creating a new Organization. This field is read-only.
            string organizationId = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Organization content = new Data.Organization();

            OrganizationsResource.UpdateRequest request = cloudresourcemanagerService.Organizations.Update(content, organizationId);
            Data.Organization response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Organization response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:

            // TODO Add code to assign values to properties of 'content'.
            Data.Project content = new Data.Project();

            ProjectsResource.CreateRequest request = cloudresourcemanagerService.Projects.Create(content);
            Data.Project response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Project response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // The Project ID (for example, `foo-bar-123`). Required.
            string projectId = "";

            ProjectsResource.DeleteRequest request = cloudresourcemanagerService.Projects.Delete(projectId);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The Project ID (for example, `my-project-123`). Required.
            string projectId = "";

            ProjectsResource.GetRequest request = cloudresourcemanagerService.Projects.Get(projectId);
            Data.Project response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Project response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetIamPolicy() method:
            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.GetIamPolicyRequest content = new Data.GetIamPolicyRequest();

            ProjectsResource.GetIamPolicyRequest request = cloudresourcemanagerService.Projects.GetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            ProjectsResource.ListRequest request = cloudresourcemanagerService.Projects.List();
            Data.ListProjectsResponse response;
            do
            {
                response = request.Execute();
                if (response.Projects == null)
                {
                    continue;
                }
                foreach (Data.Project item in response.Projects)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListProjectsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetIamPolicy() method:
            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.SetIamPolicyRequest content = new Data.SetIamPolicyRequest();

            ProjectsResource.SetIamPolicyRequest request = cloudresourcemanagerService.Projects.SetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the TestIamPermissions() method:
            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TestIamPermissionsRequest content = new Data.TestIamPermissionsRequest();

            ProjectsResource.TestIamPermissionsRequest request = cloudresourcemanagerService.Projects.TestIamPermissions(content, resource);
            Data.TestIamPermissionsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Undelete() method:
            // The project ID (for example, `foo-bar-123`). Required.
            string projectId = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UndeleteProjectRequest content = new Data.UndeleteProjectRequest();

            ProjectsResource.UndeleteRequest request = cloudresourcemanagerService.Projects.Undelete(content, projectId);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Cloudresourcemanager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Cloudresourcemanager.v1beta1.Data;

namespace CloudresourcemanagerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudresourcemanagerService cloudresourcemanagerService = new CloudresourcemanagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:
            // The project ID (for example, `my-project-123`). Required.
            string projectId = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Project content = new Data.Project();

            ProjectsResource.UpdateRequest request = cloudresourcemanagerService.Projects.Update(content, projectId);
            Data.Project response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Project response = await request.ExecuteAsync();
        }
    }
}
