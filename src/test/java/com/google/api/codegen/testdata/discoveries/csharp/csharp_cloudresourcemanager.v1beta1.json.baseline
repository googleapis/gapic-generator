
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The resource name of the Organization to fetch. Its format is "organizations/[organization_id]". For
            // example, "organizations/1234".
            string name = "organizations/{MY-ORGANIZATION}";


            OrganizationsResource.GetRequest request = cloudResourceManagerService.Organizations.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Organization response = request.Execute();
            // Data.Organization response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `GetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "organizations/{MY-ORGANIZATION}";


            Data.GetIamPolicyRequest requestBody = new Data.GetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            OrganizationsResource.GetIamPolicyRequest request = cloudResourceManagerService.Organizations.GetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            OrganizationsResource.ListRequest request = cloudResourceManagerService.Organizations.List();

            Data.ListOrganizationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Organizations == null)
                {
                    continue;
                }
                foreach (Data.Organization organization in response.Organizations)
                {
                    // TODO: Change code below to process each `organization` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(organization));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `SetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "organizations/{MY-ORGANIZATION}";


            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            OrganizationsResource.SetIamPolicyRequest request = cloudResourceManagerService.Organizations.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `TestIamPermissions` method:

            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "organizations/{MY-ORGANIZATION}";


            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            OrganizationsResource.TestIamPermissionsRequest request = cloudResourceManagerService.Organizations.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // Output Only. The resource name of the organization. This is the organization's relative path in the
            // API. Its format is "organizations/[organization_id]". For example, "organizations/1234".
            string name = "organizations/{MY-ORGANIZATION}";


            Data.Organization requestBody = new Data.Organization();
            // TODO: Assign values to desired properties of the `requestBody` object.


            OrganizationsResource.UpdateRequest request = cloudResourceManagerService.Organizations.Update(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Organization response = request.Execute();
            // Data.Organization response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            Data.Project requestBody = new Data.Project();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.CreateRequest request = cloudResourceManagerService.Projects.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Project response = request.Execute();
            // Data.Project response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // The Project ID (for example, `foo-bar-123`). Required.
            string projectId = "{MY-PROJECT-ID}";


            ProjectsResource.DeleteRequest request = cloudResourceManagerService.Projects.Delete(projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The Project ID (for example, `my-project-123`). Required.
            string projectId = "{MY-PROJECT-ID}";


            ProjectsResource.GetRequest request = cloudResourceManagerService.Projects.Get(projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Project response = request.Execute();
            // Data.Project response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `GetAncestry` method:

            // The Project ID (for example, `my-project-123`). Required.
            string projectId = "{MY-PROJECT-ID}";


            Data.GetAncestryRequest requestBody = new Data.GetAncestryRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.GetAncestryRequest request = cloudResourceManagerService.Projects.GetAncestry(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetAncestryResponse response = request.Execute();
            // Data.GetAncestryResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `GetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "{MY-RESOURCE}";


            Data.GetIamPolicyRequest requestBody = new Data.GetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.GetIamPolicyRequest request = cloudResourceManagerService.Projects.GetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            ProjectsResource.ListRequest request = cloudResourceManagerService.Projects.List();

            Data.ListProjectsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Projects == null)
                {
                    continue;
                }
                foreach (Data.Project project in response.Projects)
                {
                    // TODO: Change code below to process each `project` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(project));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `SetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "{MY-RESOURCE}";


            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SetIamPolicyRequest request = cloudResourceManagerService.Projects.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `TestIamPermissions` method:

            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "{MY-RESOURCE}";


            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.TestIamPermissionsRequest request = cloudResourceManagerService.Projects.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Undelete` method:

            // The project ID (for example, `foo-bar-123`). Required.
            string projectId = "{MY-PROJECT-ID}";


            Data.UndeleteProjectRequest requestBody = new Data.UndeleteProjectRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.UndeleteRequest request = cloudResourceManagerService.Projects.Undelete(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudResourceManager.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudResourceManager.v1beta1.Data;


namespace CloudResourceManagerSample
{
    public class CloudResourceManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudResourceManagerService cloudResourceManagerService = new CloudResourceManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // The project ID (for example, `my-project-123`). Required.
            string projectId = "{MY-PROJECT-ID}";


            Data.Project requestBody = new Data.Project();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.UpdateRequest request = cloudResourceManagerService.Projects.Update(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Project response = request.Execute();
            // Data.Project response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
