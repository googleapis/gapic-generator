
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Acknowledge` method:

            // The subscription whose message is being acknowledged.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.AcknowledgeRequest requestBody = new Data.AcknowledgeRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.AcknowledgeRequest request = pubsubService.Projects.Subscriptions.Acknowledge(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Create` method:

            // The name of the subscription. It must have the format
            // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
            // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
            // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
            // length, and it must not start with `"goog"`.
            string name = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.Subscription requestBody = new Data.Subscription();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.CreateRequest request = pubsubService.Projects.Subscriptions.Create(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subscription response = request.Execute();
            // Data.Subscription response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // The subscription to delete.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            ProjectsResource.SubscriptionsResource.DeleteRequest request = pubsubService.Projects.Subscriptions.Delete(subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The name of the subscription to get.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            ProjectsResource.SubscriptionsResource.GetRequest request = pubsubService.Projects.Subscriptions.Get(subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subscription response = request.Execute();
            // Data.Subscription response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `GetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            ProjectsResource.SubscriptionsResource.GetIamPolicyRequest request = pubsubService.Projects.Subscriptions.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The name of the cloud project that subscriptions belong to.
            string project = "projects/{MY-PROJECT}";


            ProjectsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Subscriptions.List(project);

            Data.ListSubscriptionsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (Data.Subscription subscription in response.Subscriptions)
                {
                    // TODO: Change code below to process each `subscription` resource:
                    Console.WriteLine(subscription);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `ModifyAckDeadline` method:

            // The name of the subscription.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.ModifyAckDeadlineRequest requestBody = new Data.ModifyAckDeadlineRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.ModifyAckDeadlineRequest request = pubsubService.Projects.Subscriptions.ModifyAckDeadline(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `ModifyPushConfig` method:

            // The name of the subscription.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.ModifyPushConfigRequest requestBody = new Data.ModifyPushConfigRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.ModifyPushConfigRequest request = pubsubService.Projects.Subscriptions.ModifyPushConfig(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Pull` method:

            // The subscription from which messages should be pulled.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.PullRequest requestBody = new Data.PullRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.PullRequest request = pubsubService.Projects.Subscriptions.Pull(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PullResponse response = request.Execute();
            // Data.PullResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `SetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.SetIamPolicyRequest request = pubsubService.Projects.Subscriptions.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `TestIamPermissions` method:

            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";


            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SubscriptionsResource.TestIamPermissionsRequest request = pubsubService.Projects.Subscriptions.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Create` method:

            // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
            // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
            // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
            // between 3 and 255 characters in length, and it must not start with `"goog"`.
            string name = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            Data.Topic requestBody = new Data.Topic();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.TopicsResource.CreateRequest request = pubsubService.Projects.Topics.Create(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Topic response = request.Execute();
            // Data.Topic response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // Name of the topic to delete.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            ProjectsResource.TopicsResource.DeleteRequest request = pubsubService.Projects.Topics.Delete(topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The name of the topic to get.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            ProjectsResource.TopicsResource.GetRequest request = pubsubService.Projects.Topics.Get(topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Topic response = request.Execute();
            // Data.Topic response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `GetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `getIamPolicy` documentation.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            ProjectsResource.TopicsResource.GetIamPolicyRequest request = pubsubService.Projects.Topics.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The name of the cloud project that topics belong to.
            string project = "projects/{MY-PROJECT}";


            ProjectsResource.TopicsResource.ListRequest request = pubsubService.Projects.Topics.List(project);

            Data.ListTopicsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Topics == null)
                {
                    continue;
                }
                foreach (Data.Topic topic in response.Topics)
                {
                    // TODO: Change code below to process each `topic` resource:
                    Console.WriteLine(topic);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Publish` method:

            // The messages in the request will be published on this topic.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            Data.PublishRequest requestBody = new Data.PublishRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.TopicsResource.PublishRequest request = pubsubService.Projects.Topics.Publish(requestBody, topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PublishResponse response = request.Execute();
            // Data.PublishResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `SetIamPolicy` method:

            // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
            // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
            // this value is resource specific and is specified in the `setIamPolicy` documentation.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.TopicsResource.SetIamPolicyRequest request = pubsubService.Projects.Topics.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The name of the topic that subscriptions are attached to.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            ProjectsResource.TopicsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Topics.Subscriptions.List(topic);

            Data.ListTopicSubscriptionsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (string string_ in response.Subscriptions)
                {
                    // TODO: Change code below to process each `string_` resource:
                    Console.WriteLine(string_);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;


namespace PubsubSample
{
    public class PubsubServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `TestIamPermissions` method:

            // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
            // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
            // specified in this value is resource specific and is specified in the `testIamPermissions`
            // documentation.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";


            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.TopicsResource.TestIamPermissionsRequest request = pubsubService.Projects.Topics.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
