
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            ProjectsResource.SnapshotsResource.GetIamPolicyRequest request = pubsubService.Projects.Snapshots.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.SnapshotsResource.SetIamPolicyRequest request = pubsubService.Projects.Snapshots.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.SnapshotsResource.TestIamPermissionsRequest request = pubsubService.Projects.Snapshots.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The subscription whose message is being acknowledged.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.AcknowledgeRequest requestBody = new Data.AcknowledgeRequest();

            ProjectsResource.SubscriptionsResource.AcknowledgeRequest request = pubsubService.Projects.Subscriptions.Acknowledge(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the subscription. It must have the format
            // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
            // start with a letter, and contain only letters (`[A-Za-z]`), numbers
            // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
            // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
            // in length, and it must not start with `"goog"`.
            string name = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Subscription requestBody = new Data.Subscription();

            ProjectsResource.SubscriptionsResource.CreateRequest request = pubsubService.Projects.Subscriptions.Create(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subscription response = request.Execute();
            // Data.Subscription response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The subscription to delete.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            ProjectsResource.SubscriptionsResource.DeleteRequest request = pubsubService.Projects.Subscriptions.Delete(subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the subscription to get.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            ProjectsResource.SubscriptionsResource.GetRequest request = pubsubService.Projects.Subscriptions.Get(subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Subscription response = request.Execute();
            // Data.Subscription response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            ProjectsResource.SubscriptionsResource.GetIamPolicyRequest request = pubsubService.Projects.Subscriptions.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the cloud project that subscriptions belong to.
            // Format is `projects/{project}`.
            string project = "";  // TODO: Update placeholder value.

            ProjectsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Subscriptions.List(project);

            Data.ListSubscriptionsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (Data.Subscription subscription in response.Subscriptions)
                {
                    // TODO: Change code below to process each `subscription` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(subscription));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the subscription.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ModifyAckDeadlineRequest requestBody = new Data.ModifyAckDeadlineRequest();

            ProjectsResource.SubscriptionsResource.ModifyAckDeadlineRequest request = pubsubService.Projects.Subscriptions.ModifyAckDeadline(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the subscription.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ModifyPushConfigRequest requestBody = new Data.ModifyPushConfigRequest();

            ProjectsResource.SubscriptionsResource.ModifyPushConfigRequest request = pubsubService.Projects.Subscriptions.ModifyPushConfig(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The subscription from which messages should be pulled.
            // Format is `projects/{project}/subscriptions/{sub}`.
            string subscription = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.PullRequest requestBody = new Data.PullRequest();

            ProjectsResource.SubscriptionsResource.PullRequest request = pubsubService.Projects.Subscriptions.Pull(requestBody, subscription);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PullResponse response = request.Execute();
            // Data.PullResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.SubscriptionsResource.SetIamPolicyRequest request = pubsubService.Projects.Subscriptions.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.SubscriptionsResource.TestIamPermissionsRequest request = pubsubService.Projects.Subscriptions.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the topic. It must have the format
            // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
            // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
            // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
            // signs (`%`). It must be between 3 and 255 characters in length, and it
            // must not start with `"goog"`.
            string name = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Topic requestBody = new Data.Topic();

            ProjectsResource.TopicsResource.CreateRequest request = pubsubService.Projects.Topics.Create(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Topic response = request.Execute();
            // Data.Topic response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // Name of the topic to delete.
            // Format is `projects/{project}/topics/{topic}`.
            string topic = "";  // TODO: Update placeholder value.

            ProjectsResource.TopicsResource.DeleteRequest request = pubsubService.Projects.Topics.Delete(topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the topic to get.
            // Format is `projects/{project}/topics/{topic}`.
            string topic = "";  // TODO: Update placeholder value.

            ProjectsResource.TopicsResource.GetRequest request = pubsubService.Projects.Topics.Get(topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Topic response = request.Execute();
            // Data.Topic response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            ProjectsResource.TopicsResource.GetIamPolicyRequest request = pubsubService.Projects.Topics.GetIamPolicy(resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the cloud project that topics belong to.
            // Format is `projects/{project}`.
            string project = "";  // TODO: Update placeholder value.

            ProjectsResource.TopicsResource.ListRequest request = pubsubService.Projects.Topics.List(project);

            Data.ListTopicsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Topics == null)
                {
                    continue;
                }
                foreach (Data.Topic topic in response.Topics)
                {
                    // TODO: Change code below to process each `topic` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(topic));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The messages in the request will be published on this topic.
            // Format is `projects/{project}/topics/{topic}`.
            string topic = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.PublishRequest requestBody = new Data.PublishRequest();

            ProjectsResource.TopicsResource.PublishRequest request = pubsubService.Projects.Topics.Publish(requestBody, topic);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PublishResponse response = request.Execute();
            // Data.PublishResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy is being specified.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            ProjectsResource.TopicsResource.SetIamPolicyRequest request = pubsubService.Projects.Topics.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // The name of the topic that subscriptions are attached to.
            // Format is `projects/{project}/topics/{topic}`.
            string topic = "";  // TODO: Update placeholder value.

            ProjectsResource.TopicsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Topics.Subscriptions.List(topic);

            Data.ListTopicSubscriptionsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (string item in response.Subscriptions)
                {
                    // TODO: Change code below to process each `item` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(item));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class PubsubExample
    {
        public static void Main(string[] args)
        {
            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-PubsubSample/0.1",
            });

            // REQUIRED: The resource for which the policy detail is being requested.
            // `resource` is usually specified as a path. For example, a Project
            // resource is specified as `projects/{project}`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            ProjectsResource.TopicsResource.TestIamPermissionsRequest request = pubsubService.Projects.Topics.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
