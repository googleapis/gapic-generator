
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Acknowledge() method:
            // The subscription whose message is being acknowledged.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.AcknowledgeRequest content = new Data.AcknowledgeRequest();

            ProjectsResource.SubscriptionsResource.AcknowledgeRequest request = pubsubService.Projects.Subscriptions.Acknowledge(content, subscription);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:
            // The name of the subscription. It must have the format
            // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
            // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
            // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
            // length, and it must not start with `"goog"`.
            string name = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.Subscription content = new Data.Subscription();

            ProjectsResource.SubscriptionsResource.CreateRequest request = pubsubService.Projects.Subscriptions.Create(content, name);
            Data.Subscription response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Subscription response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // The subscription to delete.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            ProjectsResource.SubscriptionsResource.DeleteRequest request = pubsubService.Projects.Subscriptions.Delete(subscription);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The name of the subscription to get.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            ProjectsResource.SubscriptionsResource.GetRequest request = pubsubService.Projects.Subscriptions.Get(subscription);
            Data.Subscription response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Subscription response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetIamPolicy() method:
            // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
            // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
            // this value is resource specific and is specified in the documentation for the respective
            // GetIamPolicy rpc.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            ProjectsResource.SubscriptionsResource.GetIamPolicyRequest request = pubsubService.Projects.Subscriptions.GetIamPolicy(resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The name of the cloud project that subscriptions belong to.
            string project = "projects/{MY-PROJECT}";

            ProjectsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Subscriptions.List(project);
            Data.ListSubscriptionsResponse response;
            do
            {
                response = request.Execute();
                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (Data.Subscription item in response.Subscriptions)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListSubscriptionsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the ModifyAckDeadline() method:
            // The name of the subscription.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.ModifyAckDeadlineRequest content = new Data.ModifyAckDeadlineRequest();

            ProjectsResource.SubscriptionsResource.ModifyAckDeadlineRequest request = pubsubService.Projects.Subscriptions.ModifyAckDeadline(content, subscription);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the ModifyPushConfig() method:
            // The name of the subscription.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.ModifyPushConfigRequest content = new Data.ModifyPushConfigRequest();

            ProjectsResource.SubscriptionsResource.ModifyPushConfigRequest request = pubsubService.Projects.Subscriptions.ModifyPushConfig(content, subscription);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Pull() method:
            // The subscription from which messages should be pulled.
            string subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.PullRequest content = new Data.PullRequest();

            ProjectsResource.SubscriptionsResource.PullRequest request = pubsubService.Projects.Subscriptions.Pull(content, subscription);
            Data.PullResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.PullResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetIamPolicy() method:
            // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
            // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
            // this value is resource specific and is specified in the documentation for the respective
            // SetIamPolicy rpc.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.SetIamPolicyRequest content = new Data.SetIamPolicyRequest();

            ProjectsResource.SubscriptionsResource.SetIamPolicyRequest request = pubsubService.Projects.Subscriptions.SetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the TestIamPermissions() method:
            // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
            // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
            // specified in this value is resource specific and is specified in the documentation for the
            // respective TestIamPermissions rpc.
            string resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}";

            // TODO Add code to assign values to properties of 'content'.
            Data.TestIamPermissionsRequest content = new Data.TestIamPermissionsRequest();

            ProjectsResource.SubscriptionsResource.TestIamPermissionsRequest request = pubsubService.Projects.Subscriptions.TestIamPermissions(content, resource);
            Data.TestIamPermissionsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:
            // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
            // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
            // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
            // between 3 and 255 characters in length, and it must not start with `"goog"`.
            string name = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            // TODO Add code to assign values to properties of 'content'.
            Data.Topic content = new Data.Topic();

            ProjectsResource.TopicsResource.CreateRequest request = pubsubService.Projects.Topics.Create(content, name);
            Data.Topic response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Topic response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // Name of the topic to delete.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            ProjectsResource.TopicsResource.DeleteRequest request = pubsubService.Projects.Topics.Delete(topic);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The name of the topic to get.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            ProjectsResource.TopicsResource.GetRequest request = pubsubService.Projects.Topics.Get(topic);
            Data.Topic response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Topic response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetIamPolicy() method:
            // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
            // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
            // this value is resource specific and is specified in the documentation for the respective
            // GetIamPolicy rpc.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            ProjectsResource.TopicsResource.GetIamPolicyRequest request = pubsubService.Projects.Topics.GetIamPolicy(resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The name of the cloud project that topics belong to.
            string project = "projects/{MY-PROJECT}";

            ProjectsResource.TopicsResource.ListRequest request = pubsubService.Projects.Topics.List(project);
            Data.ListTopicsResponse response;
            do
            {
                response = request.Execute();
                if (response.Topics == null)
                {
                    continue;
                }
                foreach (Data.Topic item in response.Topics)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListTopicsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Publish() method:
            // The messages in the request will be published on this topic.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            // TODO Add code to assign values to properties of 'content'.
            Data.PublishRequest content = new Data.PublishRequest();

            ProjectsResource.TopicsResource.PublishRequest request = pubsubService.Projects.Topics.Publish(content, topic);
            Data.PublishResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.PublishResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetIamPolicy() method:
            // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
            // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
            // this value is resource specific and is specified in the documentation for the respective
            // SetIamPolicy rpc.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            // TODO Add code to assign values to properties of 'content'.
            Data.SetIamPolicyRequest content = new Data.SetIamPolicyRequest();

            ProjectsResource.TopicsResource.SetIamPolicyRequest request = pubsubService.Projects.Topics.SetIamPolicy(content, resource);
            Data.Policy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Policy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The name of the topic that subscriptions are attached to.
            string topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            ProjectsResource.TopicsResource.SubscriptionsResource.ListRequest request = pubsubService.Projects.Topics.Subscriptions.List(topic);
            Data.ListTopicSubscriptionsResponse response;
            do
            {
                response = request.Execute();
                if (response.Subscriptions == null)
                {
                    continue;
                }
                foreach (string item in response.Subscriptions)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListTopicSubscriptionsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Pubsub.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Pubsub.v1.Data;

namespace PubsubSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PubsubService pubsubService = new PubsubService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the TestIamPermissions() method:
            // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
            // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
            // specified in this value is resource specific and is specified in the documentation for the
            // respective TestIamPermissions rpc.
            string resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}";

            // TODO Add code to assign values to properties of 'content'.
            Data.TestIamPermissionsRequest content = new Data.TestIamPermissionsRequest();

            ProjectsResource.TopicsResource.TestIamPermissionsRequest request = pubsubService.Projects.Topics.TestIamPermissions(content, resource);
            Data.TestIamPermissionsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();
        }
    }
}
