
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

addresses = service.addresses()
request = addresses.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, addresses_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, addresses_scoped_list) entry

    request = addresses.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the address resource to delete.
address = ''

request = service.addresses().delete(project=project, region=region, address=address)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the address resource to return.
address = ''

request = service.addresses().get(project=project, region=region, address=address)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

address_body = {
# TODO: Add desired entries of the 'address_body' dict
}

request = service.addresses().insert(project=project, region=region, body=address_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

addresses = service.addresses()
request = addresses.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for address in response['items']:
        # TODO: Add code here to process each 'address' resource

    request = addresses.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

autoscalers = service.autoscalers()
request = autoscalers.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, autoscalers_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, autoscalers_scoped_list) entry

    request = autoscalers.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to delete.
autoscaler = ''

request = service.autoscalers().delete(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to return.
autoscaler = ''

request = service.autoscalers().get(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict
}

request = service.autoscalers().insert(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

autoscalers = service.autoscalers()
request = autoscalers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for autoscaler in response['items']:
        # TODO: Add code here to process each 'autoscaler' resource

    request = autoscalers.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the autoscaler to update.
autoscaler = ''

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict to be changed
}

request = service.autoscalers().patch(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict
}

request = service.autoscalers().update(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to delete.
backendService = ''

request = service.backendServices().delete(project=project, backendService=backendService)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to return.
backendService = ''

request = service.backendServices().get(project=project, backendService=backendService)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getHealth' method:


project = ''

# * Name of the BackendService resource to which the queried instance belongs.
backendService = ''

resource_group_reference_body = {
# TODO: Add desired entries of the 'resource_group_reference_body' dict
}

request = service.backendServices().getHealth(project=project, backendService=backendService, body=resource_group_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

backend_service_body = {
# TODO: Add desired entries of the 'backend_service_body' dict
}

request = service.backendServices().insert(project=project, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

backendServices = service.backendServices()
request = backendServices.list(project=project)
while request is not None:
    response = request.execute()

    for backend_service in response['items']:
        # TODO: Add code here to process each 'backend_service' resource

    request = backendServices.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to update.
backendService = ''

backend_service_body = {
# TODO: Add desired entries of the 'backend_service_body' dict to be changed
}

request = service.backendServices().patch(project=project, backendService=backendService, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the BackendService resource to update.
backendService = ''

backend_service_body = {
# TODO: Add desired entries of the 'backend_service_body' dict
}

request = service.backendServices().update(project=project, backendService=backendService, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

diskTypes = service.diskTypes()
request = diskTypes.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, disk_types_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, disk_types_scoped_list) entry

    request = diskTypes.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the disk type to return.
diskType = ''

request = service.diskTypes().get(project=project, zone=zone, diskType=diskType)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

diskTypes = service.diskTypes()
request = diskTypes.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for disk_type in response['items']:
        # TODO: Add code here to process each 'disk_type' resource

    request = diskTypes.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

disks = service.disks()
request = disks.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, disks_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, disks_scoped_list) entry

    request = disks.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'createSnapshot' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to snapshot.
disk = ''

snapshot_body = {
# TODO: Add desired entries of the 'snapshot_body' dict
}

request = service.disks().createSnapshot(project=project, zone=zone, disk=disk, body=snapshot_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to delete.
disk = ''

request = service.disks().delete(project=project, zone=zone, disk=disk)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the persistent disk to return.
disk = ''

request = service.disks().get(project=project, zone=zone, disk=disk)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

disk_body = {
# TODO: Add desired entries of the 'disk_body' dict
}

request = service.disks().insert(project=project, zone=zone, body=disk_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

disks = service.disks()
request = disks.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for disk in response['items']:
        # TODO: Add code here to process each 'disk' resource

    request = disks.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to delete.
firewall = ''

request = service.firewalls().delete(project=project, firewall=firewall)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to return.
firewall = ''

request = service.firewalls().get(project=project, firewall=firewall)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

firewall_body = {
# TODO: Add desired entries of the 'firewall_body' dict
}

request = service.firewalls().insert(project=project, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

firewalls = service.firewalls()
request = firewalls.list(project=project)
while request is not None:
    response = request.execute()

    for firewall in response['items']:
        # TODO: Add code here to process each 'firewall' resource

    request = firewalls.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to update.
firewall = ''

firewall_body = {
# TODO: Add desired entries of the 'firewall_body' dict to be changed
}

request = service.firewalls().patch(project=project, firewall=firewall, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the firewall rule to update.
firewall = ''

firewall_body = {
# TODO: Add desired entries of the 'firewall_body' dict
}

request = service.firewalls().update(project=project, firewall=firewall, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

forwardingRules = service.forwardingRules()
request = forwardingRules.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, forwarding_rules_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, forwarding_rules_scoped_list) entry

    request = forwardingRules.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource to delete.
forwardingRule = ''

request = service.forwardingRules().delete(project=project, region=region, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource to return.
forwardingRule = ''

request = service.forwardingRules().get(project=project, region=region, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

forwarding_rule_body = {
# TODO: Add desired entries of the 'forwarding_rule_body' dict
}

request = service.forwardingRules().insert(project=project, region=region, body=forwarding_rule_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

forwardingRules = service.forwardingRules()
request = forwardingRules.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for forwarding_rule in response['items']:
        # TODO: Add code here to process each 'forwarding_rule' resource

    request = forwardingRules.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setTarget' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the ForwardingRule resource in which target is to be set.
forwardingRule = ''

target_reference_body = {
# TODO: Add desired entries of the 'target_reference_body' dict
}

request = service.forwardingRules().setTarget(project=project, region=region, forwardingRule=forwardingRule, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the address resource to delete.
address = ''

request = service.globalAddresses().delete(project=project, address=address)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the address resource to return.
address = ''

request = service.globalAddresses().get(project=project, address=address)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

address_body = {
# TODO: Add desired entries of the 'address_body' dict
}

request = service.globalAddresses().insert(project=project, body=address_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

globalAddresses = service.globalAddresses()
request = globalAddresses.list(project=project)
while request is not None:
    response = request.execute()

    for address in response['items']:
        # TODO: Add code here to process each 'address' resource

    request = globalAddresses.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource to delete.
forwardingRule = ''

request = service.globalForwardingRules().delete(project=project, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource to return.
forwardingRule = ''

request = service.globalForwardingRules().get(project=project, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

forwarding_rule_body = {
# TODO: Add desired entries of the 'forwarding_rule_body' dict
}

request = service.globalForwardingRules().insert(project=project, body=forwarding_rule_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

globalForwardingRules = service.globalForwardingRules()
request = globalForwardingRules.list(project=project)
while request is not None:
    response = request.execute()

    for forwarding_rule in response['items']:
        # TODO: Add code here to process each 'forwarding_rule' resource

    request = globalForwardingRules.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setTarget' method:

# * Project ID for this request.
project = ''

# * Name of the ForwardingRule resource in which target is to be set.
forwardingRule = ''

target_reference_body = {
# TODO: Add desired entries of the 'target_reference_body' dict
}

request = service.globalForwardingRules().setTarget(project=project, forwardingRule=forwardingRule, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

globalOperations = service.globalOperations()
request = globalOperations.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, operations_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, operations_scoped_list) entry

    request = globalOperations.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the Operations resource to delete.
operation = ''

request = service.globalOperations().delete(project=project, operation=operation)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the Operations resource to return.
operation = ''

request = service.globalOperations().get(project=project, operation=operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

globalOperations = service.globalOperations()
request = globalOperations.list(project=project)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = globalOperations.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to delete.
httpHealthCheck = ''

request = service.httpHealthChecks().delete(project=project, httpHealthCheck=httpHealthCheck)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to return.
httpHealthCheck = ''

request = service.httpHealthChecks().get(project=project, httpHealthCheck=httpHealthCheck)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

http_health_check_body = {
# TODO: Add desired entries of the 'http_health_check_body' dict
}

request = service.httpHealthChecks().insert(project=project, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

httpHealthChecks = service.httpHealthChecks()
request = httpHealthChecks.list(project=project)
while request is not None:
    response = request.execute()

    for http_health_check in response['items']:
        # TODO: Add code here to process each 'http_health_check' resource

    request = httpHealthChecks.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to update.
httpHealthCheck = ''

http_health_check_body = {
# TODO: Add desired entries of the 'http_health_check_body' dict to be changed
}

request = service.httpHealthChecks().patch(project=project, httpHealthCheck=httpHealthCheck, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the HttpHealthCheck resource to update.
httpHealthCheck = ''

http_health_check_body = {
# TODO: Add desired entries of the 'http_health_check_body' dict
}

request = service.httpHealthChecks().update(project=project, httpHealthCheck=httpHealthCheck, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to delete.
httpsHealthCheck = ''

request = service.httpsHealthChecks().delete(project=project, httpsHealthCheck=httpsHealthCheck)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to return.
httpsHealthCheck = ''

request = service.httpsHealthChecks().get(project=project, httpsHealthCheck=httpsHealthCheck)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

https_health_check_body = {
# TODO: Add desired entries of the 'https_health_check_body' dict
}

request = service.httpsHealthChecks().insert(project=project, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

httpsHealthChecks = service.httpsHealthChecks()
request = httpsHealthChecks.list(project=project)
while request is not None:
    response = request.execute()

    for https_health_check in response['items']:
        # TODO: Add code here to process each 'https_health_check' resource

    request = httpsHealthChecks.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to update.
httpsHealthCheck = ''

https_health_check_body = {
# TODO: Add desired entries of the 'https_health_check_body' dict to be changed
}

request = service.httpsHealthChecks().patch(project=project, httpsHealthCheck=httpsHealthCheck, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the HttpsHealthCheck resource to update.
httpsHealthCheck = ''

https_health_check_body = {
# TODO: Add desired entries of the 'https_health_check_body' dict
}

request = service.httpsHealthChecks().update(project=project, httpsHealthCheck=httpsHealthCheck, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the image resource to delete.
image = ''

request = service.images().delete(project=project, image=image)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'deprecate' method:

# * Project ID for this request.
project = ''

# * Image name.
image = ''

deprecation_status_body = {
# TODO: Add desired entries of the 'deprecation_status_body' dict
}

request = service.images().deprecate(project=project, image=image, body=deprecation_status_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the image resource to return.
image = ''

request = service.images().get(project=project, image=image)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

image_body = {
# TODO: Add desired entries of the 'image_body' dict
}

request = service.images().insert(project=project, body=image_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

images = service.images()
request = images.list(project=project)
while request is not None:
    response = request.execute()

    for image in response['items']:
        # TODO: Add code here to process each 'image' resource

    request = images.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'abandonInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

instance_group_managers_abandon_instances_request_body = {
# TODO: Add desired entries of the 'instance_group_managers_abandon_instances_request_body' dict
}

request = service.instanceGroupManagers().abandonInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_abandon_instances_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

instanceGroupManagers = service.instanceGroupManagers()
request = instanceGroupManagers.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instance_group_managers_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, instance_group_managers_scoped_list) entry

    request = instanceGroupManagers.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group to delete.
instanceGroupManager = ''

request = service.instanceGroupManagers().delete(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'deleteInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

instance_group_managers_delete_instances_request_body = {
# TODO: Add desired entries of the 'instance_group_managers_delete_instances_request_body' dict
}

request = service.instanceGroupManagers().deleteInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_delete_instances_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

request = service.instanceGroupManagers().get(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * The name of the zone where you want to create the managed instance group.
zone = ''

instance_group_manager_body = {
# TODO: Add desired entries of the 'instance_group_manager_body' dict
}

request = service.instanceGroupManagers().insert(project=project, zone=zone, body=instance_group_manager_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

instanceGroupManagers = service.instanceGroupManagers()
request = instanceGroupManagers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance_group_manager in response['items']:
        # TODO: Add code here to process each 'instance_group_manager' resource

    request = instanceGroupManagers.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'listManagedInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

request = service.instanceGroupManagers().listManagedInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'recreateInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

instance_group_managers_recreate_instances_request_body = {
# TODO: Add desired entries of the 'instance_group_managers_recreate_instances_request_body' dict
}

request = service.instanceGroupManagers().recreateInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_recreate_instances_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'resize' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

# * The number of running instances that the managed instance group should maintain at any given time.
#   The group automatically adds or removes instances to maintain the number of instances specified by
#   this parameter.
size = 0

request = service.instanceGroupManagers().resize(project=project, zone=zone, instanceGroupManager=instanceGroupManager, size=size)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setInstanceTemplate' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

instance_group_managers_set_instance_template_request_body = {
# TODO: Add desired entries of the 'instance_group_managers_set_instance_template_request_body' dict
}

request = service.instanceGroupManagers().setInstanceTemplate(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_set_instance_template_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setTargetPools' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the managed instance group is located.
zone = ''

# * The name of the managed instance group.
instanceGroupManager = ''

instance_group_managers_set_target_pools_request_body = {
# TODO: Add desired entries of the 'instance_group_managers_set_target_pools_request_body' dict
}

request = service.instanceGroupManagers().setTargetPools(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_set_target_pools_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where you are adding instances.
instanceGroup = ''

instance_groups_add_instances_request_body = {
# TODO: Add desired entries of the 'instance_groups_add_instances_request_body' dict
}

request = service.instanceGroups().addInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_add_instances_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

instanceGroups = service.instanceGroups()
request = instanceGroups.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instance_groups_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, instance_groups_scoped_list) entry

    request = instanceGroups.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group to delete.
instanceGroup = ''

request = service.instanceGroups().delete(project=project, zone=zone, instanceGroup=instanceGroup)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group.
instanceGroup = ''

request = service.instanceGroups().get(project=project, zone=zone, instanceGroup=instanceGroup)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * The name of the zone where you want to create the instance group.
zone = ''

instance_group_body = {
# TODO: Add desired entries of the 'instance_group_body' dict
}

request = service.instanceGroups().insert(project=project, zone=zone, body=instance_group_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

instanceGroups = service.instanceGroups()
request = instanceGroups.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance_group in response['items']:
        # TODO: Add code here to process each 'instance_group' resource

    request = instanceGroups.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'listInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group from which you want to generate a list of included instances.
instanceGroup = ''

instance_groups_list_instances_request_body = {
# TODO: Add desired entries of the 'instance_groups_list_instances_request_body' dict
}

instanceGroups = service.instanceGroups()
request = instanceGroups.listInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_list_instances_request_body)
while request is not None:
    response = request.execute()

    for instance_with_named_ports in response['items']:
        # TODO: Add code here to process each 'instance_with_named_ports' resource

    request = instanceGroups.listInstances_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeInstances' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where the specified instances will be removed.
instanceGroup = ''

instance_groups_remove_instances_request_body = {
# TODO: Add desired entries of the 'instance_groups_remove_instances_request_body' dict
}

request = service.instanceGroups().removeInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_remove_instances_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setNamedPorts' method:

# * Project ID for this request.
project = ''

# * The name of the zone where the instance group is located.
zone = ''

# * The name of the instance group where the named ports are updated.
instanceGroup = ''

instance_groups_set_named_ports_request_body = {
# TODO: Add desired entries of the 'instance_groups_set_named_ports_request_body' dict
}

request = service.instanceGroups().setNamedPorts(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_set_named_ports_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * The name of the instance template to delete.
instanceTemplate = ''

request = service.instanceTemplates().delete(project=project, instanceTemplate=instanceTemplate)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the instance template.
instanceTemplate = ''

request = service.instanceTemplates().get(project=project, instanceTemplate=instanceTemplate)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

instance_template_body = {
# TODO: Add desired entries of the 'instance_template_body' dict
}

request = service.instanceTemplates().insert(project=project, body=instance_template_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

instanceTemplates = service.instanceTemplates()
request = instanceTemplates.list(project=project)
while request is not None:
    response = request.execute()

    for instance_template in response['items']:
        # TODO: Add code here to process each 'instance_template' resource

    request = instanceTemplates.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addAccessConfig' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

# * The name of the network interface to add to this instance.
networkInterface = ''

access_config_body = {
# TODO: Add desired entries of the 'access_config_body' dict
}

request = service.instances().addAccessConfig(project=project, zone=zone, instance=instance, networkInterface=networkInterface, body=access_config_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

instances = service.instances()
request = instances.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instances_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, instances_scoped_list) entry

    request = instances.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'attachDisk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

attached_disk_body = {
# TODO: Add desired entries of the 'attached_disk_body' dict
}

request = service.instances().attachDisk(project=project, zone=zone, instance=instance, body=attached_disk_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to delete.
instance = ''

request = service.instances().delete(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'deleteAccessConfig' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name for this request.
instance = ''

# * The name of the access config to delete.
accessConfig = ''

# * The name of the network interface.
networkInterface = ''

request = service.instances().deleteAccessConfig(project=project, zone=zone, instance=instance, accessConfig=accessConfig, networkInterface=networkInterface)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'detachDisk' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Instance name.
instance = ''

# * Disk device name to detach.
deviceName = ''

request = service.instances().detachDisk(project=project, zone=zone, instance=instance, deviceName=deviceName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to return.
instance = ''

request = service.instances().get(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getSerialPortOutput' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

request = service.instances().getSerialPortOutput(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

instance_body = {
# TODO: Add desired entries of the 'instance_body' dict
}

request = service.instances().insert(project=project, zone=zone, body=instance_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

instances = service.instances()
request = instances.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance in response['items']:
        # TODO: Add code here to process each 'instance' resource

    request = instances.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'reset' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

request = service.instances().reset(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setDiskAutoDelete' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * The instance name.
instance = ''

# * Whether to auto-delete the disk when the instance is deleted.
autoDelete = False

# * The device name of the disk to modify.
deviceName = ''

request = service.instances().setDiskAutoDelete(project=project, zone=zone, instance=instance, autoDelete=autoDelete, deviceName=deviceName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setMachineType' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

instances_set_machine_type_request_body = {
# TODO: Add desired entries of the 'instances_set_machine_type_request_body' dict
}

request = service.instances().setMachineType(project=project, zone=zone, instance=instance, body=instances_set_machine_type_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setMetadata' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

metadata_body = {
# TODO: Add desired entries of the 'metadata_body' dict
}

request = service.instances().setMetadata(project=project, zone=zone, instance=instance, body=metadata_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setScheduling' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Instance name.
instance = ''

scheduling_body = {
# TODO: Add desired entries of the 'scheduling_body' dict
}

request = service.instances().setScheduling(project=project, zone=zone, instance=instance, body=scheduling_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setTags' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance scoping this request.
instance = ''

tags_body = {
# TODO: Add desired entries of the 'tags_body' dict
}

request = service.instances().setTags(project=project, zone=zone, instance=instance, body=tags_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'start' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to start.
instance = ''

request = service.instances().start(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'stop' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the instance resource to stop.
instance = ''

request = service.instances().stop(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the License resource to return.
license = ''

request = service.licenses().get(project=project, license=license)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

machineTypes = service.machineTypes()
request = machineTypes.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, machine_types_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, machine_types_scoped_list) entry

    request = machineTypes.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

# * Name of the machine type to return.
machineType = ''

request = service.machineTypes().get(project=project, zone=zone, machineType=machineType)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * The name of the zone for this request.
zone = ''

machineTypes = service.machineTypes()
request = machineTypes.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for machine_type in response['items']:
        # TODO: Add code here to process each 'machine_type' resource

    request = machineTypes.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the network to delete.
network = ''

request = service.networks().delete(project=project, network=network)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the network to return.
network = ''

request = service.networks().get(project=project, network=network)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

network_body = {
# TODO: Add desired entries of the 'network_body' dict
}

request = service.networks().insert(project=project, body=network_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

networks = service.networks()
request = networks.list(project=project)
while request is not None:
    response = request.execute()

    for network in response['items']:
        # TODO: Add code here to process each 'network' resource

    request = networks.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

request = service.projects().get(project=project)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'moveDisk' method:

# * Project ID for this request.
project = ''

disk_move_request_body = {
# TODO: Add desired entries of the 'disk_move_request_body' dict
}

request = service.projects().moveDisk(project=project, body=disk_move_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'moveInstance' method:

# * Project ID for this request.
project = ''

instance_move_request_body = {
# TODO: Add desired entries of the 'instance_move_request_body' dict
}

request = service.projects().moveInstance(project=project, body=instance_move_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setCommonInstanceMetadata' method:

# * Project ID for this request.
project = ''

metadata_body = {
# TODO: Add desired entries of the 'metadata_body' dict
}

request = service.projects().setCommonInstanceMetadata(project=project, body=metadata_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setUsageExportBucket' method:

# * Project ID for this request.
project = ''

usage_export_location_body = {
# TODO: Add desired entries of the 'usage_export_location_body' dict
}

request = service.projects().setUsageExportBucket(project=project, body=usage_export_location_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the Operations resource to delete.
operation = ''

request = service.regionOperations().delete(project=project, region=region, operation=operation)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the Operations resource to return.
operation = ''

request = service.regionOperations().get(project=project, region=region, operation=operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

regionOperations = service.regionOperations()
request = regionOperations.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = regionOperations.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region resource to return.
region = ''

request = service.regions().get(project=project, region=region)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

regions = service.regions()
request = regions.list(project=project)
while request is not None:
    response = request.execute()

    for region in response['items']:
        # TODO: Add code here to process each 'region' resource

    request = regions.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the Route resource to delete.
route = ''

request = service.routes().delete(project=project, route=route)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the Route resource to return.
route = ''

request = service.routes().get(project=project, route=route)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

route_body = {
# TODO: Add desired entries of the 'route_body' dict
}

request = service.routes().insert(project=project, body=route_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

routes = service.routes()
request = routes.list(project=project)
while request is not None:
    response = request.execute()

    for route in response['items']:
        # TODO: Add code here to process each 'route' resource

    request = routes.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the Snapshot resource to delete.
snapshot = ''

request = service.snapshots().delete(project=project, snapshot=snapshot)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the Snapshot resource to return.
snapshot = ''

request = service.snapshots().get(project=project, snapshot=snapshot)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

snapshots = service.snapshots()
request = snapshots.list(project=project)
while request is not None:
    response = request.execute()

    for snapshot in response['items']:
        # TODO: Add code here to process each 'snapshot' resource

    request = snapshots.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the SslCertificate resource to delete.
sslCertificate = ''

request = service.sslCertificates().delete(project=project, sslCertificate=sslCertificate)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the SslCertificate resource to return.
sslCertificate = ''

request = service.sslCertificates().get(project=project, sslCertificate=sslCertificate)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

ssl_certificate_body = {
# TODO: Add desired entries of the 'ssl_certificate_body' dict
}

request = service.sslCertificates().insert(project=project, body=ssl_certificate_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

sslCertificates = service.sslCertificates()
request = sslCertificates.list(project=project)
while request is not None:
    response = request.execute()

    for ssl_certificate in response['items']:
        # TODO: Add code here to process each 'ssl_certificate' resource

    request = sslCertificates.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

subnetworks = service.subnetworks()
request = subnetworks.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, subnetworks_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, subnetworks_scoped_list) entry

    request = subnetworks.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the Subnetwork resource to delete.
subnetwork = ''

request = service.subnetworks().delete(project=project, region=region, subnetwork=subnetwork)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the Subnetwork resource to return.
subnetwork = ''

request = service.subnetworks().get(project=project, region=region, subnetwork=subnetwork)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

subnetwork_body = {
# TODO: Add desired entries of the 'subnetwork_body' dict
}

request = service.subnetworks().insert(project=project, region=region, body=subnetwork_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

subnetworks = service.subnetworks()
request = subnetworks.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for subnetwork in response['items']:
        # TODO: Add code here to process each 'subnetwork' resource

    request = subnetworks.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy resource to delete.
targetHttpProxy = ''

request = service.targetHttpProxies().delete(project=project, targetHttpProxy=targetHttpProxy)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy resource to return.
targetHttpProxy = ''

request = service.targetHttpProxies().get(project=project, targetHttpProxy=targetHttpProxy)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

target_http_proxy_body = {
# TODO: Add desired entries of the 'target_http_proxy_body' dict
}

request = service.targetHttpProxies().insert(project=project, body=target_http_proxy_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

targetHttpProxies = service.targetHttpProxies()
request = targetHttpProxies.list(project=project)
while request is not None:
    response = request.execute()

    for target_http_proxy in response['items']:
        # TODO: Add code here to process each 'target_http_proxy' resource

    request = targetHttpProxies.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setUrlMap' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpProxy to set a URL map for.
targetHttpProxy = ''

url_map_reference_body = {
# TODO: Add desired entries of the 'url_map_reference_body' dict
}

request = service.targetHttpProxies().setUrlMap(project=project, targetHttpProxy=targetHttpProxy, body=url_map_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to delete.
targetHttpsProxy = ''

request = service.targetHttpsProxies().delete(project=project, targetHttpsProxy=targetHttpsProxy)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to return.
targetHttpsProxy = ''

request = service.targetHttpsProxies().get(project=project, targetHttpsProxy=targetHttpsProxy)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

target_https_proxy_body = {
# TODO: Add desired entries of the 'target_https_proxy_body' dict
}

request = service.targetHttpsProxies().insert(project=project, body=target_https_proxy_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

targetHttpsProxies = service.targetHttpsProxies()
request = targetHttpsProxies.list(project=project)
while request is not None:
    response = request.execute()

    for target_https_proxy in response['items']:
        # TODO: Add code here to process each 'target_https_proxy' resource

    request = targetHttpsProxies.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setSslCertificates' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
targetHttpsProxy = ''

target_https_proxies_set_ssl_certificates_request_body = {
# TODO: Add desired entries of the 'target_https_proxies_set_ssl_certificates_request_body' dict
}

request = service.targetHttpsProxies().setSslCertificates(project=project, targetHttpsProxy=targetHttpsProxy, body=target_https_proxies_set_ssl_certificates_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setUrlMap' method:

# * Project ID for this request.
project = ''

# * Name of the TargetHttpsProxy resource whose URL map is to be set.
targetHttpsProxy = ''

url_map_reference_body = {
# TODO: Add desired entries of the 'url_map_reference_body' dict
}

request = service.targetHttpsProxies().setUrlMap(project=project, targetHttpsProxy=targetHttpsProxy, body=url_map_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

targetInstances = service.targetInstances()
request = targetInstances.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_instances_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, target_instances_scoped_list) entry

    request = targetInstances.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

# * Name of the TargetInstance resource to delete.
targetInstance = ''

request = service.targetInstances().delete(project=project, zone=zone, targetInstance=targetInstance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

# * Name of the TargetInstance resource to return.
targetInstance = ''

request = service.targetInstances().get(project=project, zone=zone, targetInstance=targetInstance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

target_instance_body = {
# TODO: Add desired entries of the 'target_instance_body' dict
}

request = service.targetInstances().insert(project=project, zone=zone, body=target_instance_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the zone scoping this request.
zone = ''

targetInstances = service.targetInstances()
request = targetInstances.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for target_instance in response['items']:
        # TODO: Add code here to process each 'target_instance' resource

    request = targetInstances.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addHealthCheck' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the target pool to add a health check to.
targetPool = ''

target_pools_add_health_check_request_body = {
# TODO: Add desired entries of the 'target_pools_add_health_check_request_body' dict
}

request = service.targetPools().addHealthCheck(project=project, region=region, targetPool=targetPool, body=target_pools_add_health_check_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addInstance' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to add instances to.
targetPool = ''

target_pools_add_instance_request_body = {
# TODO: Add desired entries of the 'target_pools_add_instance_request_body' dict
}

request = service.targetPools().addInstance(project=project, region=region, targetPool=targetPool, body=target_pools_add_instance_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

targetPools = service.targetPools()
request = targetPools.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_pools_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, target_pools_scoped_list) entry

    request = targetPools.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to delete.
targetPool = ''

request = service.targetPools().delete(project=project, region=region, targetPool=targetPool)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to return.
targetPool = ''

request = service.targetPools().get(project=project, region=region, targetPool=targetPool)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getHealth' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to which the queried instance belongs.
targetPool = ''

instance_reference_body = {
# TODO: Add desired entries of the 'instance_reference_body' dict
}

request = service.targetPools().getHealth(project=project, region=region, targetPool=targetPool, body=instance_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

target_pool_body = {
# TODO: Add desired entries of the 'target_pool_body' dict
}

request = service.targetPools().insert(project=project, region=region, body=target_pool_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

targetPools = service.targetPools()
request = targetPools.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for target_pool in response['items']:
        # TODO: Add code here to process each 'target_pool' resource

    request = targetPools.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeHealthCheck' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target pool to remove health checks from.
targetPool = ''

target_pools_remove_health_check_request_body = {
# TODO: Add desired entries of the 'target_pools_remove_health_check_request_body' dict
}

request = service.targetPools().removeHealthCheck(project=project, region=region, targetPool=targetPool, body=target_pools_remove_health_check_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeInstance' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to remove instances from.
targetPool = ''

target_pools_remove_instance_request_body = {
# TODO: Add desired entries of the 'target_pools_remove_instance_request_body' dict
}

request = service.targetPools().removeInstance(project=project, region=region, targetPool=targetPool, body=target_pools_remove_instance_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setBackup' method:

# * Project ID for this request.
project = ''

# * Name of the region scoping this request.
region = ''

# * Name of the TargetPool resource to set a backup pool for.
targetPool = ''

target_reference_body = {
# TODO: Add desired entries of the 'target_reference_body' dict
}

request = service.targetPools().setBackup(project=project, region=region, targetPool=targetPool, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

targetVpnGateways = service.targetVpnGateways()
request = targetVpnGateways.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_vpn_gateways_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, target_vpn_gateways_scoped_list) entry

    request = targetVpnGateways.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target VPN gateway to delete.
targetVpnGateway = ''

request = service.targetVpnGateways().delete(project=project, region=region, targetVpnGateway=targetVpnGateway)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the target VPN gateway to return.
targetVpnGateway = ''

request = service.targetVpnGateways().get(project=project, region=region, targetVpnGateway=targetVpnGateway)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

target_vpn_gateway_body = {
# TODO: Add desired entries of the 'target_vpn_gateway_body' dict
}

request = service.targetVpnGateways().insert(project=project, region=region, body=target_vpn_gateway_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

targetVpnGateways = service.targetVpnGateways()
request = targetVpnGateways.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for target_vpn_gateway in response['items']:
        # TODO: Add code here to process each 'target_vpn_gateway' resource

    request = targetVpnGateways.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to delete.
urlMap = ''

request = service.urlMaps().delete(project=project, urlMap=urlMap)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to return.
urlMap = ''

request = service.urlMaps().get(project=project, urlMap=urlMap)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

url_map_body = {
# TODO: Add desired entries of the 'url_map_body' dict
}

request = service.urlMaps().insert(project=project, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

urlMaps = service.urlMaps()
request = urlMaps.list(project=project)
while request is not None:
    response = request.execute()

    for url_map in response['items']:
        # TODO: Add code here to process each 'url_map' resource

    request = urlMaps.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to update.
urlMap = ''

url_map_body = {
# TODO: Add desired entries of the 'url_map_body' dict to be changed
}

request = service.urlMaps().patch(project=project, urlMap=urlMap, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to update.
urlMap = ''

url_map_body = {
# TODO: Add desired entries of the 'url_map_body' dict
}

request = service.urlMaps().update(project=project, urlMap=urlMap, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'validate' method:

# * Project ID for this request.
project = ''

# * Name of the UrlMap resource to be validated as.
urlMap = ''

url_maps_validate_request_body = {
# TODO: Add desired entries of the 'url_maps_validate_request_body' dict
}

request = service.urlMaps().validate(project=project, urlMap=urlMap, body=url_maps_validate_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:

# * Project ID for this request.
project = ''

vpnTunnels = service.vpnTunnels()
request = vpnTunnels.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, vpn_tunnels_scoped_list in response['items'].items():
        # TODO: Add code here to process each (name, vpn_tunnels_scoped_list) entry

    request = vpnTunnels.aggregatedList_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the VpnTunnel resource to delete.
vpnTunnel = ''

request = service.vpnTunnels().delete(project=project, region=region, vpnTunnel=vpnTunnel)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

# * Name of the VpnTunnel resource to return.
vpnTunnel = ''

request = service.vpnTunnels().get(project=project, region=region, vpnTunnel=vpnTunnel)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

vpn_tunnel_body = {
# TODO: Add desired entries of the 'vpn_tunnel_body' dict
}

request = service.vpnTunnels().insert(project=project, region=region, body=vpn_tunnel_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the region for this request.
region = ''

vpnTunnels = service.vpnTunnels()
request = vpnTunnels.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for vpn_tunnel in response['items']:
        # TODO: Add code here to process each 'vpn_tunnel' resource

    request = vpnTunnels.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the Operations resource to delete.
operation = ''

request = service.zoneOperations().delete(project=project, zone=zone, operation=operation)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the zone for this request.
zone = ''

# * Name of the Operations resource to return.
operation = ''

request = service.zoneOperations().get(project=project, zone=zone, operation=operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

# * Name of the zone for request.
zone = ''

zoneOperations = service.zoneOperations()
request = zoneOperations.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = zoneOperations.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = ''

# * Name of the zone resource to return.
zone = ''

request = service.zones().get(project=project, zone=zone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the compute service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = ''

zones = service.zones()
request = zones.list(project=project)
while request is not None:
    response = request.execute()

    for zone in response['items']:
        # TODO: Add code here to process each 'zone' resource

    request = zones.list_next(previous_request=request, previous_response=response)
