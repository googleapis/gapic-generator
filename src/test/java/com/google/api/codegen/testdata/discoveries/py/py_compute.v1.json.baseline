
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


addresses = service.addresses()
request = addresses.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, addresses_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, addresses_scoped_list) item:
        pprint((name, addresses_scoped_list))

    request = addresses.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the address resource to delete.
address = '{MY-ADDRESS}'


request = service.addresses().delete(project=project, region=region, address=address)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the address resource to return.
address = '{MY-ADDRESS}'


request = service.addresses().get(project=project, region=region, address=address)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


address_body = {
    # TODO: Add desired entries of the request body.
}


request = service.addresses().insert(project=project, region=region, body=address_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


addresses = service.addresses()
request = addresses.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for address in response['items']:
        # TODO: Change code below to process each `address` resource:
        pprint(address)

    request = addresses.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


autoscalers = service.autoscalers()
request = autoscalers.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, autoscalers_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, autoscalers_scoped_list) item:
        pprint((name, autoscalers_scoped_list))

    request = autoscalers.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to delete.
autoscaler = '{MY-AUTOSCALER}'


request = service.autoscalers().delete(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to return.
autoscaler = '{MY-AUTOSCALER}'


request = service.autoscalers().get(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


autoscaler_body = {
    # TODO: Add desired entries of the request body.
}


request = service.autoscalers().insert(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


autoscalers = service.autoscalers()
request = autoscalers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for autoscaler in response['items']:
        # TODO: Change code below to process each `autoscaler` resource:
        pprint(autoscaler)

    request = autoscalers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the autoscaler to update.
autoscaler = '{MY-AUTOSCALER}'


autoscaler_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.autoscalers().patch(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


autoscaler_body = {
    # TODO: Add desired entries of the request body.
}


request = service.autoscalers().update(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to delete.
backendService = '{MY-BACKEND-SERVICE}'


request = service.backendServices().delete(project=project, backendService=backendService)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to return.
backendService = '{MY-BACKEND-SERVICE}'


request = service.backendServices().get(project=project, backendService=backendService)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getHealth` method:

# project
project = '{MY-PROJECT}'

# Name of the BackendService resource to which the queried instance belongs.
backendService = '{MY-BACKEND-SERVICE}'


resource_group_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.backendServices().getHealth(project=project, backendService=backendService, body=resource_group_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


backend_service_body = {
    # TODO: Add desired entries of the request body.
}


request = service.backendServices().insert(project=project, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


backendServices = service.backendServices()
request = backendServices.list(project=project)
while request is not None:
    response = request.execute()

    for backend_service in response['items']:
        # TODO: Change code below to process each `backend_service` resource:
        pprint(backend_service)

    request = backendServices.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to update.
backendService = '{MY-BACKEND-SERVICE}'


backend_service_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.backendServices().patch(project=project, backendService=backendService, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the BackendService resource to update.
backendService = '{MY-BACKEND-SERVICE}'


backend_service_body = {
    # TODO: Add desired entries of the request body.
}


request = service.backendServices().update(project=project, backendService=backendService, body=backend_service_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


diskTypes = service.diskTypes()
request = diskTypes.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, disk_types_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, disk_types_scoped_list) item:
        pprint((name, disk_types_scoped_list))

    request = diskTypes.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the disk type to return.
diskType = '{MY-DISK-TYPE}'


request = service.diskTypes().get(project=project, zone=zone, diskType=diskType)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


diskTypes = service.diskTypes()
request = diskTypes.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for disk_type in response['items']:
        # TODO: Change code below to process each `disk_type` resource:
        pprint(disk_type)

    request = diskTypes.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


disks = service.disks()
request = disks.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, disks_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, disks_scoped_list) item:
        pprint((name, disks_scoped_list))

    request = disks.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `createSnapshot` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to snapshot.
disk = '{MY-DISK}'


snapshot_body = {
    # TODO: Add desired entries of the request body.
}


request = service.disks().createSnapshot(project=project, zone=zone, disk=disk, body=snapshot_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to delete.
disk = '{MY-DISK}'


request = service.disks().delete(project=project, zone=zone, disk=disk)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the persistent disk to return.
disk = '{MY-DISK}'


request = service.disks().get(project=project, zone=zone, disk=disk)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


disk_body = {
    # TODO: Add desired entries of the request body.
}


request = service.disks().insert(project=project, zone=zone, body=disk_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


disks = service.disks()
request = disks.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for disk in response['items']:
        # TODO: Change code below to process each `disk` resource:
        pprint(disk)

    request = disks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `resize` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The name of the persistent disk.
disk = '{MY-DISK}'


disks_resize_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.disks().resize(project=project, zone=zone, disk=disk, body=disks_resize_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to delete.
firewall = '{MY-FIREWALL}'


request = service.firewalls().delete(project=project, firewall=firewall)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to return.
firewall = '{MY-FIREWALL}'


request = service.firewalls().get(project=project, firewall=firewall)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


firewall_body = {
    # TODO: Add desired entries of the request body.
}


request = service.firewalls().insert(project=project, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


firewalls = service.firewalls()
request = firewalls.list(project=project)
while request is not None:
    response = request.execute()

    for firewall in response['items']:
        # TODO: Change code below to process each `firewall` resource:
        pprint(firewall)

    request = firewalls.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to update.
firewall = '{MY-FIREWALL}'


firewall_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.firewalls().patch(project=project, firewall=firewall, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the firewall rule to update.
firewall = '{MY-FIREWALL}'


firewall_body = {
    # TODO: Add desired entries of the request body.
}


request = service.firewalls().update(project=project, firewall=firewall, body=firewall_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


forwardingRules = service.forwardingRules()
request = forwardingRules.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, forwarding_rules_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, forwarding_rules_scoped_list) item:
        pprint((name, forwarding_rules_scoped_list))

    request = forwardingRules.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource to delete.
forwardingRule = '{MY-FORWARDING-RULE}'


request = service.forwardingRules().delete(project=project, region=region, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource to return.
forwardingRule = '{MY-FORWARDING-RULE}'


request = service.forwardingRules().get(project=project, region=region, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


forwarding_rule_body = {
    # TODO: Add desired entries of the request body.
}


request = service.forwardingRules().insert(project=project, region=region, body=forwarding_rule_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


forwardingRules = service.forwardingRules()
request = forwardingRules.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for forwarding_rule in response['items']:
        # TODO: Change code below to process each `forwarding_rule` resource:
        pprint(forwarding_rule)

    request = forwardingRules.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setTarget` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the ForwardingRule resource in which target is to be set.
forwardingRule = '{MY-FORWARDING-RULE}'


target_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.forwardingRules().setTarget(project=project, region=region, forwardingRule=forwardingRule, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the address resource to delete.
address = '{MY-ADDRESS}'


request = service.globalAddresses().delete(project=project, address=address)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the address resource to return.
address = '{MY-ADDRESS}'


request = service.globalAddresses().get(project=project, address=address)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


address_body = {
    # TODO: Add desired entries of the request body.
}


request = service.globalAddresses().insert(project=project, body=address_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


globalAddresses = service.globalAddresses()
request = globalAddresses.list(project=project)
while request is not None:
    response = request.execute()

    for address in response['items']:
        # TODO: Change code below to process each `address` resource:
        pprint(address)

    request = globalAddresses.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource to delete.
forwardingRule = '{MY-FORWARDING-RULE}'


request = service.globalForwardingRules().delete(project=project, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource to return.
forwardingRule = '{MY-FORWARDING-RULE}'


request = service.globalForwardingRules().get(project=project, forwardingRule=forwardingRule)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


forwarding_rule_body = {
    # TODO: Add desired entries of the request body.
}


request = service.globalForwardingRules().insert(project=project, body=forwarding_rule_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


globalForwardingRules = service.globalForwardingRules()
request = globalForwardingRules.list(project=project)
while request is not None:
    response = request.execute()

    for forwarding_rule in response['items']:
        # TODO: Change code below to process each `forwarding_rule` resource:
        pprint(forwarding_rule)

    request = globalForwardingRules.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setTarget` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the ForwardingRule resource in which target is to be set.
forwardingRule = '{MY-FORWARDING-RULE}'


target_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.globalForwardingRules().setTarget(project=project, forwardingRule=forwardingRule, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


globalOperations = service.globalOperations()
request = globalOperations.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, operations_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, operations_scoped_list) item:
        pprint((name, operations_scoped_list))

    request = globalOperations.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


request = service.globalOperations().delete(project=project, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


request = service.globalOperations().get(project=project, operation=operation)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


globalOperations = service.globalOperations()
request = globalOperations.list(project=project)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = globalOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to delete.
healthCheck = '{MY-HEALTH-CHECK}'


request = service.healthChecks().delete(project=project, healthCheck=healthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to return.
healthCheck = '{MY-HEALTH-CHECK}'


request = service.healthChecks().get(project=project, healthCheck=healthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.healthChecks().insert(project=project, body=health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


healthChecks = service.healthChecks()
request = healthChecks.list(project=project)
while request is not None:
    response = request.execute()

    for health_check in response['items']:
        # TODO: Change code below to process each `health_check` resource:
        pprint(health_check)

    request = healthChecks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to update.
healthCheck = '{MY-HEALTH-CHECK}'


health_check_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.healthChecks().patch(project=project, healthCheck=healthCheck, body=health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HealthCheck resource to update.
healthCheck = '{MY-HEALTH-CHECK}'


health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.healthChecks().update(project=project, healthCheck=healthCheck, body=health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to delete.
httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'


request = service.httpHealthChecks().delete(project=project, httpHealthCheck=httpHealthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to return.
httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'


request = service.httpHealthChecks().get(project=project, httpHealthCheck=httpHealthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


http_health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.httpHealthChecks().insert(project=project, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


httpHealthChecks = service.httpHealthChecks()
request = httpHealthChecks.list(project=project)
while request is not None:
    response = request.execute()

    for http_health_check in response['items']:
        # TODO: Change code below to process each `http_health_check` resource:
        pprint(http_health_check)

    request = httpHealthChecks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to update.
httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'


http_health_check_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.httpHealthChecks().patch(project=project, httpHealthCheck=httpHealthCheck, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpHealthCheck resource to update.
httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'


http_health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.httpHealthChecks().update(project=project, httpHealthCheck=httpHealthCheck, body=http_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to delete.
httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'


request = service.httpsHealthChecks().delete(project=project, httpsHealthCheck=httpsHealthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to return.
httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'


request = service.httpsHealthChecks().get(project=project, httpsHealthCheck=httpsHealthCheck)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


https_health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.httpsHealthChecks().insert(project=project, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


httpsHealthChecks = service.httpsHealthChecks()
request = httpsHealthChecks.list(project=project)
while request is not None:
    response = request.execute()

    for https_health_check in response['items']:
        # TODO: Change code below to process each `https_health_check` resource:
        pprint(https_health_check)

    request = httpsHealthChecks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to update.
httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'


https_health_check_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.httpsHealthChecks().patch(project=project, httpsHealthCheck=httpsHealthCheck, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the HttpsHealthCheck resource to update.
httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'


https_health_check_body = {
    # TODO: Add desired entries of the request body.
}


request = service.httpsHealthChecks().update(project=project, httpsHealthCheck=httpsHealthCheck, body=https_health_check_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image resource to delete.
image = '{MY-IMAGE}'


request = service.images().delete(project=project, image=image)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `deprecate` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Image name.
image = '{MY-IMAGE}'


deprecation_status_body = {
    # TODO: Add desired entries of the request body.
}


request = service.images().deprecate(project=project, image=image, body=deprecation_status_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image resource to return.
image = '{MY-IMAGE}'


request = service.images().get(project=project, image=image)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getFromFamily` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the image family to search for.
family = '{MY-FAMILY}'


request = service.images().getFromFamily(project=project, family=family)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


image_body = {
    # TODO: Add desired entries of the request body.
}


request = service.images().insert(project=project, body=image_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


images = service.images()
request = images.list(project=project)
while request is not None:
    response = request.execute()

    for image in response['items']:
        # TODO: Change code below to process each `image` resource:
        pprint(image)

    request = images.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `abandonInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


instance_group_managers_abandon_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().abandonInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_abandon_instances_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instanceGroupManagers = service.instanceGroupManagers()
request = instanceGroupManagers.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instance_group_managers_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, instance_group_managers_scoped_list) item:
        pprint((name, instance_group_managers_scoped_list))

    request = instanceGroupManagers.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group to delete.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


request = service.instanceGroupManagers().delete(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `deleteInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


instance_group_managers_delete_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().deleteInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_delete_instances_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


request = service.instanceGroupManagers().get(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where you want to create the managed instance group.
zone = '{MY-ZONE}'


instance_group_manager_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().insert(project=project, zone=zone, body=instance_group_manager_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'


instanceGroupManagers = service.instanceGroupManagers()
request = instanceGroupManagers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance_group_manager in response['items']:
        # TODO: Change code below to process each `instance_group_manager` resource:
        pprint(instance_group_manager)

    request = instanceGroupManagers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `listManagedInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


request = service.instanceGroupManagers().listManagedInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `recreateInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


instance_group_managers_recreate_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().recreateInstances(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_recreate_instances_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `resize` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'

# The number of running instances that the managed instance group should maintain at any given time.
# The group automatically adds or removes instances to maintain the number of instances specified by
# this parameter.
size = 0


request = service.instanceGroupManagers().resize(project=project, zone=zone, instanceGroupManager=instanceGroupManager, size=size)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setInstanceTemplate` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


instance_group_managers_set_instance_template_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().setInstanceTemplate(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_set_instance_template_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setTargetPools` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the managed instance group is located.
zone = '{MY-ZONE}'

# The name of the managed instance group.
instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'


instance_group_managers_set_target_pools_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroupManagers().setTargetPools(project=project, zone=zone, instanceGroupManager=instanceGroupManager, body=instance_group_managers_set_target_pools_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `addInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where you are adding instances.
instanceGroup = '{MY-INSTANCE-GROUP}'


instance_groups_add_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroups().addInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_add_instances_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instanceGroups = service.instanceGroups()
request = instanceGroups.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instance_groups_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, instance_groups_scoped_list) item:
        pprint((name, instance_groups_scoped_list))

    request = instanceGroups.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group to delete.
instanceGroup = '{MY-INSTANCE-GROUP}'


request = service.instanceGroups().delete(project=project, zone=zone, instanceGroup=instanceGroup)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group.
instanceGroup = '{MY-INSTANCE-GROUP}'


request = service.instanceGroups().get(project=project, zone=zone, instanceGroup=instanceGroup)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where you want to create the instance group.
zone = '{MY-ZONE}'


instance_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroups().insert(project=project, zone=zone, body=instance_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'


instanceGroups = service.instanceGroups()
request = instanceGroups.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance_group in response['items']:
        # TODO: Change code below to process each `instance_group` resource:
        pprint(instance_group)

    request = instanceGroups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `listInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group from which you want to generate a list of included instances.
instanceGroup = '{MY-INSTANCE-GROUP}'


instance_groups_list_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


instanceGroups = service.instanceGroups()
request = instanceGroups.listInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_list_instances_request_body)
while request is not None:
    response = request.execute()

    for instance_with_named_ports in response['items']:
        # TODO: Change code below to process each `instance_with_named_ports` resource:
        pprint(instance_with_named_ports)

    request = instanceGroups.listInstances_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `removeInstances` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where the specified instances will be removed.
instanceGroup = '{MY-INSTANCE-GROUP}'


instance_groups_remove_instances_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroups().removeInstances(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_remove_instances_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setNamedPorts` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone where the instance group is located.
zone = '{MY-ZONE}'

# The name of the instance group where the named ports are updated.
instanceGroup = '{MY-INSTANCE-GROUP}'


instance_groups_set_named_ports_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceGroups().setNamedPorts(project=project, zone=zone, instanceGroup=instanceGroup, body=instance_groups_set_named_ports_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the instance template to delete.
instanceTemplate = '{MY-INSTANCE-TEMPLATE}'


request = service.instanceTemplates().delete(project=project, instanceTemplate=instanceTemplate)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the instance template.
instanceTemplate = '{MY-INSTANCE-TEMPLATE}'


request = service.instanceTemplates().get(project=project, instanceTemplate=instanceTemplate)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instance_template_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instanceTemplates().insert(project=project, body=instance_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instanceTemplates = service.instanceTemplates()
request = instanceTemplates.list(project=project)
while request is not None:
    response = request.execute()

    for instance_template in response['items']:
        # TODO: Change code below to process each `instance_template` resource:
        pprint(instance_template)

    request = instanceTemplates.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `addAccessConfig` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'

# The name of the network interface to add to this instance.
networkInterface = '{MY-NETWORK-INTERFACE}'


access_config_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().addAccessConfig(project=project, zone=zone, instance=instance, networkInterface=networkInterface, body=access_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instances = service.instances()
request = instances.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, instances_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, instances_scoped_list) item:
        pprint((name, instances_scoped_list))

    request = instances.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `attachDisk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'


attached_disk_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().attachDisk(project=project, zone=zone, instance=instance, body=attached_disk_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to delete.
instance = '{MY-INSTANCE}'


request = service.instances().delete(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `deleteAccessConfig` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name for this request.
instance = '{MY-INSTANCE}'

# The name of the access config to delete.
accessConfig = '{MY-ACCESS-CONFIG}'

# The name of the network interface.
networkInterface = '{MY-NETWORK-INTERFACE}'


request = service.instances().deleteAccessConfig(project=project, zone=zone, instance=instance, accessConfig=accessConfig, networkInterface=networkInterface)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `detachDisk` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Instance name.
instance = '{MY-INSTANCE}'

# Disk device name to detach.
deviceName = '{MY-DEVICE-NAME}'


request = service.instances().detachDisk(project=project, zone=zone, instance=instance, deviceName=deviceName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to return.
instance = '{MY-INSTANCE}'


request = service.instances().get(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getSerialPortOutput` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


request = service.instances().getSerialPortOutput(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


instance_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().insert(project=project, zone=zone, body=instance_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


instances = service.instances()
request = instances.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for instance in response['items']:
        # TODO: Change code below to process each `instance` resource:
        pprint(instance)

    request = instances.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `reset` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


request = service.instances().reset(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setDiskAutoDelete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# The instance name.
instance = '{MY-INSTANCE}'

# Whether to auto-delete the disk when the instance is deleted.
autoDelete = False

# The device name of the disk to modify.
deviceName = '{MY-DEVICE-NAME}'


request = service.instances().setDiskAutoDelete(project=project, zone=zone, instance=instance, autoDelete=autoDelete, deviceName=deviceName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setMachineType` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


instances_set_machine_type_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().setMachineType(project=project, zone=zone, instance=instance, body=instances_set_machine_type_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setMetadata` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


metadata_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().setMetadata(project=project, zone=zone, instance=instance, body=metadata_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setScheduling` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Instance name.
instance = '{MY-INSTANCE}'


scheduling_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().setScheduling(project=project, zone=zone, instance=instance, body=scheduling_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setTags` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance scoping this request.
instance = '{MY-INSTANCE}'


tags_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().setTags(project=project, zone=zone, instance=instance, body=tags_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `start` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to start.
instance = '{MY-INSTANCE}'


request = service.instances().start(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `startWithEncryptionKey` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to start.
instance = '{MY-INSTANCE}'


instances_start_with_encryption_key_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.instances().startWithEncryptionKey(project=project, zone=zone, instance=instance, body=instances_start_with_encryption_key_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `stop` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the instance resource to stop.
instance = '{MY-INSTANCE}'


request = service.instances().stop(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the License resource to return.
license = '{MY-LICENSE}'


request = service.licenses().get(project=project, license=license)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


machineTypes = service.machineTypes()
request = machineTypes.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, machine_types_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, machine_types_scoped_list) item:
        pprint((name, machine_types_scoped_list))

    request = machineTypes.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the machine type to return.
machineType = '{MY-MACHINE-TYPE}'


request = service.machineTypes().get(project=project, zone=zone, machineType=machineType)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# The name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


machineTypes = service.machineTypes()
request = machineTypes.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for machine_type in response['items']:
        # TODO: Change code below to process each `machine_type` resource:
        pprint(machine_type)

    request = machineTypes.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the network to delete.
network = '{MY-NETWORK}'


request = service.networks().delete(project=project, network=network)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the network to return.
network = '{MY-NETWORK}'


request = service.networks().get(project=project, network=network)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


network_body = {
    # TODO: Add desired entries of the request body.
}


request = service.networks().insert(project=project, body=network_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


networks = service.networks()
request = networks.list(project=project)
while request is not None:
    response = request.execute()

    for network in response['items']:
        # TODO: Change code below to process each `network` resource:
        pprint(network)

    request = networks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'


request = service.projects().get(project=project)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `moveDisk` method:

# Project ID for this request.
project = '{MY-PROJECT}'


disk_move_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().moveDisk(project=project, body=disk_move_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `moveInstance` method:

# Project ID for this request.
project = '{MY-PROJECT}'


instance_move_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().moveInstance(project=project, body=instance_move_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `setCommonInstanceMetadata` method:

# Project ID for this request.
project = '{MY-PROJECT}'


metadata_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().setCommonInstanceMetadata(project=project, body=metadata_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `setUsageExportBucket` method:

# Project ID for this request.
project = '{MY-PROJECT}'


usage_export_location_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().setUsageExportBucket(project=project, body=usage_export_location_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


request = service.regionOperations().delete(project=project, region=region, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


request = service.regionOperations().get(project=project, region=region, operation=operation)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


regionOperations = service.regionOperations()
request = regionOperations.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = regionOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region resource to return.
region = '{MY-REGION}'


request = service.regions().get(project=project, region=region)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


regions = service.regions()
request = regions.list(project=project)
while request is not None:
    response = request.execute()

    for region in response['items']:
        # TODO: Change code below to process each `region` resource:
        pprint(region)

    request = regions.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


routers = service.routers()
request = routers.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, routers_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, routers_scoped_list) item:
        pprint((name, routers_scoped_list))

    request = routers.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to delete.
router = '{MY-ROUTER}'


request = service.routers().delete(project=project, region=region, router=router)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to return.
router = '{MY-ROUTER}'


request = service.routers().get(project=project, region=region, router=router)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getRouterStatus` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to query.
router = '{MY-ROUTER}'


request = service.routers().getRouterStatus(project=project, region=region, router=router)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


router_body = {
    # TODO: Add desired entries of the request body.
}


request = service.routers().insert(project=project, region=region, body=router_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


routers = service.routers()
request = routers.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for router in response['items']:
        # TODO: Change code below to process each `router` resource:
        pprint(router)

    request = routers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to update.
router = '{MY-ROUTER}'


router_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.routers().patch(project=project, region=region, router=router, body=router_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `preview` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to query.
router = '{MY-ROUTER}'


router_body = {
    # TODO: Add desired entries of the request body.
}


request = service.routers().preview(project=project, region=region, router=router, body=router_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the Router resource to update.
router = '{MY-ROUTER}'


router_body = {
    # TODO: Add desired entries of the request body.
}


request = service.routers().update(project=project, region=region, router=router, body=router_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Route resource to delete.
route = '{MY-ROUTE}'


request = service.routes().delete(project=project, route=route)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Route resource to return.
route = '{MY-ROUTE}'


request = service.routes().get(project=project, route=route)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


route_body = {
    # TODO: Add desired entries of the request body.
}


request = service.routes().insert(project=project, body=route_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


routes = service.routes()
request = routes.list(project=project)
while request is not None:
    response = request.execute()

    for route in response['items']:
        # TODO: Change code below to process each `route` resource:
        pprint(route)

    request = routes.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Snapshot resource to delete.
snapshot = '{MY-SNAPSHOT}'


request = service.snapshots().delete(project=project, snapshot=snapshot)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the Snapshot resource to return.
snapshot = '{MY-SNAPSHOT}'


request = service.snapshots().get(project=project, snapshot=snapshot)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


snapshots = service.snapshots()
request = snapshots.list(project=project)
while request is not None:
    response = request.execute()

    for snapshot in response['items']:
        # TODO: Change code below to process each `snapshot` resource:
        pprint(snapshot)

    request = snapshots.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the SslCertificate resource to delete.
sslCertificate = '{MY-SSL-CERTIFICATE}'


request = service.sslCertificates().delete(project=project, sslCertificate=sslCertificate)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the SslCertificate resource to return.
sslCertificate = '{MY-SSL-CERTIFICATE}'


request = service.sslCertificates().get(project=project, sslCertificate=sslCertificate)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


ssl_certificate_body = {
    # TODO: Add desired entries of the request body.
}


request = service.sslCertificates().insert(project=project, body=ssl_certificate_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


sslCertificates = service.sslCertificates()
request = sslCertificates.list(project=project)
while request is not None:
    response = request.execute()

    for ssl_certificate in response['items']:
        # TODO: Change code below to process each `ssl_certificate` resource:
        pprint(ssl_certificate)

    request = sslCertificates.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


subnetworks = service.subnetworks()
request = subnetworks.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, subnetworks_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, subnetworks_scoped_list) item:
        pprint((name, subnetworks_scoped_list))

    request = subnetworks.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the Subnetwork resource to delete.
subnetwork = '{MY-SUBNETWORK}'


request = service.subnetworks().delete(project=project, region=region, subnetwork=subnetwork)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the Subnetwork resource to return.
subnetwork = '{MY-SUBNETWORK}'


request = service.subnetworks().get(project=project, region=region, subnetwork=subnetwork)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


subnetwork_body = {
    # TODO: Add desired entries of the request body.
}


request = service.subnetworks().insert(project=project, region=region, body=subnetwork_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


subnetworks = service.subnetworks()
request = subnetworks.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for subnetwork in response['items']:
        # TODO: Change code below to process each `subnetwork` resource:
        pprint(subnetwork)

    request = subnetworks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy resource to delete.
targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'


request = service.targetHttpProxies().delete(project=project, targetHttpProxy=targetHttpProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy resource to return.
targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'


request = service.targetHttpProxies().get(project=project, targetHttpProxy=targetHttpProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


target_http_proxy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetHttpProxies().insert(project=project, body=target_http_proxy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetHttpProxies = service.targetHttpProxies()
request = targetHttpProxies.list(project=project)
while request is not None:
    response = request.execute()

    for target_http_proxy in response['items']:
        # TODO: Change code below to process each `target_http_proxy` resource:
        pprint(target_http_proxy)

    request = targetHttpProxies.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setUrlMap` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpProxy to set a URL map for.
targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'


url_map_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetHttpProxies().setUrlMap(project=project, targetHttpProxy=targetHttpProxy, body=url_map_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to delete.
targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'


request = service.targetHttpsProxies().delete(project=project, targetHttpsProxy=targetHttpsProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to return.
targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'


request = service.targetHttpsProxies().get(project=project, targetHttpsProxy=targetHttpsProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


target_https_proxy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetHttpsProxies().insert(project=project, body=target_https_proxy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetHttpsProxies = service.targetHttpsProxies()
request = targetHttpsProxies.list(project=project)
while request is not None:
    response = request.execute()

    for target_https_proxy in response['items']:
        # TODO: Change code below to process each `target_https_proxy` resource:
        pprint(target_https_proxy)

    request = targetHttpsProxies.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setSslCertificates` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'


target_https_proxies_set_ssl_certificates_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetHttpsProxies().setSslCertificates(project=project, targetHttpsProxy=targetHttpsProxy, body=target_https_proxies_set_ssl_certificates_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setUrlMap` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetHttpsProxy resource whose URL map is to be set.
targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'


url_map_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetHttpsProxies().setUrlMap(project=project, targetHttpsProxy=targetHttpsProxy, body=url_map_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetInstances = service.targetInstances()
request = targetInstances.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_instances_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, target_instances_scoped_list) item:
        pprint((name, target_instances_scoped_list))

    request = targetInstances.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the TargetInstance resource to delete.
targetInstance = '{MY-TARGET-INSTANCE}'


request = service.targetInstances().delete(project=project, zone=zone, targetInstance=targetInstance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the TargetInstance resource to return.
targetInstance = '{MY-TARGET-INSTANCE}'


request = service.targetInstances().get(project=project, zone=zone, targetInstance=targetInstance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


target_instance_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetInstances().insert(project=project, zone=zone, body=target_instance_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


targetInstances = service.targetInstances()
request = targetInstances.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for target_instance in response['items']:
        # TODO: Change code below to process each `target_instance` resource:
        pprint(target_instance)

    request = targetInstances.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `addHealthCheck` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the target pool to add a health check to.
targetPool = '{MY-TARGET-POOL}'


target_pools_add_health_check_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().addHealthCheck(project=project, region=region, targetPool=targetPool, body=target_pools_add_health_check_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `addInstance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to add instances to.
targetPool = '{MY-TARGET-POOL}'


target_pools_add_instance_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().addInstance(project=project, region=region, targetPool=targetPool, body=target_pools_add_instance_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetPools = service.targetPools()
request = targetPools.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_pools_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, target_pools_scoped_list) item:
        pprint((name, target_pools_scoped_list))

    request = targetPools.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to delete.
targetPool = '{MY-TARGET-POOL}'


request = service.targetPools().delete(project=project, region=region, targetPool=targetPool)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to return.
targetPool = '{MY-TARGET-POOL}'


request = service.targetPools().get(project=project, region=region, targetPool=targetPool)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getHealth` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to which the queried instance belongs.
targetPool = '{MY-TARGET-POOL}'


instance_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().getHealth(project=project, region=region, targetPool=targetPool, body=instance_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


target_pool_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().insert(project=project, region=region, body=target_pool_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'


targetPools = service.targetPools()
request = targetPools.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for target_pool in response['items']:
        # TODO: Change code below to process each `target_pool` resource:
        pprint(target_pool)

    request = targetPools.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `removeHealthCheck` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target pool to remove health checks from.
targetPool = '{MY-TARGET-POOL}'


target_pools_remove_health_check_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().removeHealthCheck(project=project, region=region, targetPool=targetPool, body=target_pools_remove_health_check_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `removeInstance` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to remove instances from.
targetPool = '{MY-TARGET-POOL}'


target_pools_remove_instance_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().removeInstance(project=project, region=region, targetPool=targetPool, body=target_pools_remove_instance_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setBackup` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region scoping this request.
region = '{MY-REGION}'

# Name of the TargetPool resource to set a backup pool for.
targetPool = '{MY-TARGET-POOL}'


target_reference_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetPools().setBackup(project=project, region=region, targetPool=targetPool, body=target_reference_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource to delete.
targetSslProxy = '{MY-TARGET-SSL-PROXY}'


request = service.targetSslProxies().delete(project=project, targetSslProxy=targetSslProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource to return.
targetSslProxy = '{MY-TARGET-SSL-PROXY}'


request = service.targetSslProxies().get(project=project, targetSslProxy=targetSslProxy)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


target_ssl_proxy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetSslProxies().insert(project=project, body=target_ssl_proxy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetSslProxies = service.targetSslProxies()
request = targetSslProxies.list(project=project)
while request is not None:
    response = request.execute()

    for target_ssl_proxy in response['items']:
        # TODO: Change code below to process each `target_ssl_proxy` resource:
        pprint(target_ssl_proxy)

    request = targetSslProxies.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setBackendService` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose BackendService resource is to be set.
targetSslProxy = '{MY-TARGET-SSL-PROXY}'


target_ssl_proxies_set_backend_service_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetSslProxies().setBackendService(project=project, targetSslProxy=targetSslProxy, body=target_ssl_proxies_set_backend_service_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setProxyHeader` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose ProxyHeader is to be set.
targetSslProxy = '{MY-TARGET-SSL-PROXY}'


target_ssl_proxies_set_proxy_header_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetSslProxies().setProxyHeader(project=project, targetSslProxy=targetSslProxy, body=target_ssl_proxies_set_proxy_header_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setSslCertificates` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
targetSslProxy = '{MY-TARGET-SSL-PROXY}'


target_ssl_proxies_set_ssl_certificates_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetSslProxies().setSslCertificates(project=project, targetSslProxy=targetSslProxy, body=target_ssl_proxies_set_ssl_certificates_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


targetVpnGateways = service.targetVpnGateways()
request = targetVpnGateways.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, target_vpn_gateways_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, target_vpn_gateways_scoped_list) item:
        pprint((name, target_vpn_gateways_scoped_list))

    request = targetVpnGateways.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target VPN gateway to delete.
targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}'


request = service.targetVpnGateways().delete(project=project, region=region, targetVpnGateway=targetVpnGateway)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the target VPN gateway to return.
targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}'


request = service.targetVpnGateways().get(project=project, region=region, targetVpnGateway=targetVpnGateway)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


target_vpn_gateway_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetVpnGateways().insert(project=project, region=region, body=target_vpn_gateway_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


targetVpnGateways = service.targetVpnGateways()
request = targetVpnGateways.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for target_vpn_gateway in response['items']:
        # TODO: Change code below to process each `target_vpn_gateway` resource:
        pprint(target_vpn_gateway)

    request = targetVpnGateways.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to delete.
urlMap = '{MY-URL-MAP}'


request = service.urlMaps().delete(project=project, urlMap=urlMap)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to return.
urlMap = '{MY-URL-MAP}'


request = service.urlMaps().get(project=project, urlMap=urlMap)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'


url_map_body = {
    # TODO: Add desired entries of the request body.
}


request = service.urlMaps().insert(project=project, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `invalidateCache` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap scoping this request.
urlMap = '{MY-URL-MAP}'


cache_invalidation_rule_body = {
    # TODO: Add desired entries of the request body.
}


request = service.urlMaps().invalidateCache(project=project, urlMap=urlMap, body=cache_invalidation_rule_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


urlMaps = service.urlMaps()
request = urlMaps.list(project=project)
while request is not None:
    response = request.execute()

    for url_map in response['items']:
        # TODO: Change code below to process each `url_map` resource:
        pprint(url_map)

    request = urlMaps.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to update.
urlMap = '{MY-URL-MAP}'


url_map_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.urlMaps().patch(project=project, urlMap=urlMap, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to update.
urlMap = '{MY-URL-MAP}'


url_map_body = {
    # TODO: Add desired entries of the request body.
}


request = service.urlMaps().update(project=project, urlMap=urlMap, body=url_map_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `validate` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the UrlMap resource to be validated as.
urlMap = '{MY-URL-MAP}'


url_maps_validate_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.urlMaps().validate(project=project, urlMap=urlMap, body=url_maps_validate_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

# Project ID for this request.
project = '{MY-PROJECT}'


vpnTunnels = service.vpnTunnels()
request = vpnTunnels.aggregatedList(project=project)
while request is not None:
    response = request.execute()

    for name, vpn_tunnels_scoped_list in response['items'].items():
        # TODO: Change code below to process each (name, vpn_tunnels_scoped_list) item:
        pprint((name, vpn_tunnels_scoped_list))

    request = vpnTunnels.aggregatedList_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the VpnTunnel resource to delete.
vpnTunnel = '{MY-VPN-TUNNEL}'


request = service.vpnTunnels().delete(project=project, region=region, vpnTunnel=vpnTunnel)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'

# Name of the VpnTunnel resource to return.
vpnTunnel = '{MY-VPN-TUNNEL}'


request = service.vpnTunnels().get(project=project, region=region, vpnTunnel=vpnTunnel)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


vpn_tunnel_body = {
    # TODO: Add desired entries of the request body.
}


request = service.vpnTunnels().insert(project=project, region=region, body=vpn_tunnel_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the region for this request.
region = '{MY-REGION}'


vpnTunnels = service.vpnTunnels()
request = vpnTunnels.list(project=project, region=region)
while request is not None:
    response = request.execute()

    for vpn_tunnel in response['items']:
        # TODO: Change code below to process each `vpn_tunnel` resource:
        pprint(vpn_tunnel)

    request = vpnTunnels.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the Operations resource to delete.
operation = '{MY-OPERATION}'


request = service.zoneOperations().delete(project=project, zone=zone, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for this request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'

# Name of the Operations resource to return.
operation = '{MY-OPERATION}'


request = service.zoneOperations().get(project=project, zone=zone, operation=operation)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone for request.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


zoneOperations = service.zoneOperations()
request = zoneOperations.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = zoneOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the zone resource to return.
zone = '{MY-ZONE}'  # ex: 'us-central1-f'


request = service.zones().get(project=project, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Compute Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/compute
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('compute', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Project ID for this request.
project = '{MY-PROJECT}'


zones = service.zones()
request = zones.list(project=project)
while request is not None:
    response = request.execute()

    for zone in response['items']:
        # TODO: Change code below to process each `zone` resource:
        pprint(zone)

    request = zones.list_next(previous_request=request, previous_response=response)
