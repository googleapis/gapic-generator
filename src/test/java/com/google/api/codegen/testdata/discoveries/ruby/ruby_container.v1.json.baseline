
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `create_cluster` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'


request_body = Google::Apis::ContainerV1::CreateClusterRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.create_cluster(project_id, zone, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_zone_cluster` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to delete.
cluster_id = '{MY-CLUSTER-ID}'


# Perform the call
response = service.delete_zone_cluster(project_id, zone, cluster_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_zone_cluster` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to retrieve.
cluster_id = '{MY-CLUSTER-ID}'


# Perform the call
response = service.get_zone_cluster(project_id, zone, cluster_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_zone_clusters` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides, or "-" for all zones.
zone = '{MY-ZONE}'


# Perform the call
response = service.list_zone_clusters(project_id, zone)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `create_node_pool` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
cluster_id = '{MY-CLUSTER-ID}'


request_body = Google::Apis::ContainerV1::CreateNodePoolRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.create_node_pool(project_id, zone, cluster_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_project_zone_cluster_node_pool` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
cluster_id = '{MY-CLUSTER-ID}'

# The name of the node pool to delete.
node_pool_id = '{MY-NODE-POOL-ID}'


# Perform the call
response = service.delete_project_zone_cluster_node_pool(project_id, zone, cluster_id, node_pool_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_project_zone_cluster_node_pool` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
cluster_id = '{MY-CLUSTER-ID}'

# The name of the node pool.
node_pool_id = '{MY-NODE-POOL-ID}'


# Perform the call
response = service.get_project_zone_cluster_node_pool(project_id, zone, cluster_id, node_pool_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_project_zone_cluster_node_pools` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
cluster_id = '{MY-CLUSTER-ID}'


# Perform the call
response = service.list_project_zone_cluster_node_pools(project_id, zone, cluster_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `update_cluster` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to upgrade.
cluster_id = '{MY-CLUSTER-ID}'


request_body = Google::Apis::ContainerV1::UpdateClusterRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_cluster(project_id, zone, cluster_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_project_zone_serverconfig` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for.
zone = '{MY-ZONE}'


# Perform the call
response = service.get_project_zone_serverconfig(project_id, zone)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `get_zone_operation` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The server-assigned `name` of the operation.
operation_id = '{MY-OPERATION-ID}'


# Perform the call
response = service.get_zone_operation(project_id, zone, operation_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/container_v1'
require 'json'

service = Google::Apis::ContainerV1::ContainerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_zone_operations` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for, or `-` for all zones.
zone = '{MY-ZONE}'


# Perform the call
response = service.list_zone_operations(project_id, zone)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
