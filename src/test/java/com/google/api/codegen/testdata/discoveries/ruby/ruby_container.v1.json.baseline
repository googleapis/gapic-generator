
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_cluster' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides.
zone = ''

create_cluster_request_object = Google::Apis::ContainerV1::CreateClusterRequest.new


# Perform the call
response = service.create_cluster(project_id, zone, create_cluster_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_zone_cluster' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides.
zone = ''

# * The name of the cluster to delete.
cluster_id = ''

# Perform the call
response = service.delete_zone_cluster(project_id, zone, cluster_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_zone_cluster' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides.
zone = ''

# * The name of the cluster to retrieve.
cluster_id = ''

# Perform the call
response = service.get_zone_cluster(project_id, zone, cluster_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_zone_clusters' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides, or "-" for all zones.
zone = ''

# Perform the call
response = service.list_zone_clusters(project_id, zone)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_cluster' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides.
zone = ''

# * The name of the cluster to upgrade.
cluster_id = ''

update_cluster_request_object = Google::Apis::ContainerV1::UpdateClusterRequest.new


# Perform the call
response = service.update_cluster(project_id, zone, cluster_id, update_cluster_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_zone_serverconfig' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
#   for, or "-" for all zones.
zone = ''

# Perform the call
response = service.get_project_zone_serverconfig(project_id, zone)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_zone_operation' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
#   resides.
zone = ''

# * The server-assigned `name` of the operation.
operation_id = ''

# Perform the call
response = service.get_zone_operation(project_id, zone, operation_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Container Engine API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/container
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/container_v1'

service = Google::Apis::ContainerV1::ContainerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_zone_operations' method:

# * The Google Developers Console [project ID or project number]
#   (https://developers.google.com/console/help/new/#projectnumber).
project_id = ''

# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
#   for, or "-" for all zones.
zone = ''

# Perform the call
response = service.list_zone_operations(project_id, zone)
