============== file: google/cloud/example/library_v1/gapic/library_service_client.py ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/library.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

"""Accesses the google.example.library.v1 LibraryService API."""

import collections
import json
import os
import pkg_resources
import platform

from google.gapic.longrunning import operations_client
from google.gax import api_callable
from google.gax import config
from google.gax import path_template
from google.gax.utils import oneof
import google.gax

from google.cloud.example.library_v1.gapic import enums
from google.cloud.example.library_v1.gapic import library_service_client_config
from google.cloud.example.library_v1.proto import field_mask_pb2 as proto_field_mask_pb2
from google.cloud.example.library_v1.proto import library_pb2
from google.cloud.example.library_v1.proto import tagger_pb2
from google.protobuf import empty_pb2
from google.protobuf import field_mask_pb2 as protobuf_field_mask_pb2


_PageDesc = google.gax.PageDescriptor


class LibraryServiceClient(object):
    """
    This API represents a simple digital library.  It lets you manage Shelf
    resources and Book resources in the library. It defines the following
    resource model:

    - The API has a collection of ``Shelf``
      resources, named ``bookShelves/*``

    - Each Shelf has a collection of ``Book``
      resources, named ``bookShelves/*/books/*``

    Check out `cloud docs! <https://cloud.google.com/library/example/link>`_.
    This is `not a cloud link <http://www.google.com>`_.

    Service comment may include special characters: <>&\"``'@.
    """

    SERVICE_ADDRESS = 'library-example.googleapis.com'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = 443
    """The default port of the service."""

    _PAGE_DESCRIPTORS = {
        'list_shelves': _PageDesc(
            'page_token',
            'next_page_token',
            'shelves'
        ),
        'list_books': _PageDesc(
            'page_token',
            'next_page_token',
            'books'
        ),
        'list_strings': _PageDesc(
            'page_token',
            'next_page_token',
            'strings'
        ),
        'find_related_books': _PageDesc(
            'page_token',
            'next_page_token',
            'names'
        )
    }

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service
    _ALL_SCOPES = (
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/library',
    )

    _SHELF_PATH_TEMPLATE = path_template.PathTemplate(
        'shelves/{shelf_id}')
    _BOOK_PATH_TEMPLATE = path_template.PathTemplate(
        'shelves/{shelf_id}/books/{book_id}')
    _RETURN_PATH_TEMPLATE = path_template.PathTemplate(
        'shelves/{shelf}/books/{book}/returns/{return}')

    @classmethod
    def shelf_path(cls, shelf_id):
        """Returns a fully-qualified shelf resource name string."""
        return cls._SHELF_PATH_TEMPLATE.render({
            'shelf_id': shelf_id,
        })

    @classmethod
    def book_path(cls, shelf_id, book_id):
        """Returns a fully-qualified book resource name string."""
        return cls._BOOK_PATH_TEMPLATE.render({
            'shelf_id': shelf_id,
            'book_id': book_id,
        })

    @classmethod
    def return_path(cls, shelf, book, return_):
        """Returns a fully-qualified return resource name string."""
        return cls._RETURN_PATH_TEMPLATE.render({
            'shelf': shelf,
            'book': book,
            'return': return_,
        })

    @classmethod
    def match_shelf_id_from_shelf_name(cls, shelf_name):
        """Parses the shelf_id from a shelf resource.

        Args:
            shelf_name (str): A fully-qualified path representing a shelf
                resource.

        Returns:
            A string representing the shelf_id.
        """
        return cls._SHELF_PATH_TEMPLATE.match(shelf_name).get('shelf_id')

    @classmethod
    def match_shelf_id_from_book_name(cls, book_name):
        """Parses the shelf_id from a book resource.

        Args:
            book_name (str): A fully-qualified path representing a book
                resource.

        Returns:
            A string representing the shelf_id.
        """
        return cls._BOOK_PATH_TEMPLATE.match(book_name).get('shelf_id')

    @classmethod
    def match_book_id_from_book_name(cls, book_name):
        """Parses the book_id from a book resource.

        Args:
            book_name (str): A fully-qualified path representing a book
                resource.

        Returns:
            A string representing the book_id.
        """
        return cls._BOOK_PATH_TEMPLATE.match(book_name).get('book_id')

    @classmethod
    def match_shelf_from_return_name(cls, return_name):
        """Parses the shelf from a return resource.

        Args:
            return_name (str): A fully-qualified path representing a return
                resource.

        Returns:
            A string representing the shelf.
        """
        return cls._RETURN_PATH_TEMPLATE.match(return_name).get('shelf')

    @classmethod
    def match_book_from_return_name(cls, return_name):
        """Parses the book from a return resource.

        Args:
            return_name (str): A fully-qualified path representing a return
                resource.

        Returns:
            A string representing the book.
        """
        return cls._RETURN_PATH_TEMPLATE.match(return_name).get('book')

    @classmethod
    def match_return_from_return_name(cls, return_name):
        """Parses the return from a return resource.

        Args:
            return_name (str): A fully-qualified path representing a return
                resource.

        Returns:
            A string representing the return.
        """
        return cls._RETURN_PATH_TEMPLATE.match(return_name).get('return')

    def __init__(self,
            channel=None,
            credentials=None,
            ssl_credentials=None,
            scopes=None,
            client_config=None,
            lib_name=None,
            lib_version='',
            metrics_headers=()):
        """Constructor.

        Args:
            channel (~grpc.Channel): A ``Channel`` instance through
                which to make calls.
            credentials (~google.auth.credentials.Credentials): The authorization
                credentials to attach to requests. These credentials identify this
                application to the service.
            ssl_credentials (~grpc.ChannelCredentials): A
                ``ChannelCredentials`` instance for use with an SSL-enabled
                channel.
            scopes (Sequence[str]): A list of OAuth2 scopes to attach to requests.
            client_config (dict):
                A dictionary for call options for each method. See
                :func:`google.gax.construct_settings` for the structure of
                this data. Falls back to the default config if not specified
                or the specified config is missing data points.
            lib_name (str): The API library software used for calling
                the service. (Unless you are writing an API client itself,
                leave this as default.)
            lib_version (str): The API library software version used
                for calling the service. (Unless you are writing an API client
                itself, leave this as default.)
            metrics_headers (dict): A dictionary of values for tracking
                client library metrics. Ultimately serializes to a string
                (e.g. 'foo/1.2.3 bar/3.14.1'). This argument should be
                considered private.
        """
        # Unless the calling application specifically requested
        # OAuth scopes, request everything.
        if scopes is None:
            scopes = self._ALL_SCOPES

        # Initialize an empty client config, if none is set.
        if client_config is None:
            client_config = {}

        # Initialize metrics_headers as an ordered dictionary
        # (cuts down on cardinality of the resulting string slightly).
        metrics_headers = collections.OrderedDict(metrics_headers)
        metrics_headers['gl-python'] = platform.python_version()

        # The library may or may not be set, depending on what is
        # calling this client. Newer client libraries set the library name
        # and version.
        if lib_name:
            metrics_headers[lib_name] = lib_version

        # Finally, track the GAPIC package version.
        metrics_headers['gapic'] = pkg_resources.get_distribution(
            'google-cloud-library',
        ).version

        # Load the configuration defaults.
        defaults = api_callable.construct_settings(
            'google.example.library.v1.LibraryService',
            library_service_client_config.config,
            client_config,
            config.STATUS_CODE_NAMES,
            metrics_headers=metrics_headers,
            page_descriptors=self._PAGE_DESCRIPTORS,
        )
        self.library_service_stub = config.create_stub(
            library_pb2.LibraryServiceStub,
            channel=channel,
            service_path=self.SERVICE_ADDRESS,
            service_port=self.DEFAULT_SERVICE_PORT,
            credentials=credentials,
            scopes=scopes,
            ssl_credentials=ssl_credentials)
        self.labeler_stub = config.create_stub(
            tagger_pb2.LabelerStub,
            channel=channel,
            service_path=self.SERVICE_ADDRESS,
            service_port=self.DEFAULT_SERVICE_PORT,
            credentials=credentials,
            scopes=scopes,
            ssl_credentials=ssl_credentials)

        self.operations_client = operations_client.OperationsClient(
            channel=channel,
            credentials=credentials,
            ssl_credentials=ssl_credentials,
            scopes=scopes,
            client_config=client_config,
            metrics_headers=metrics_headers,
        )

        self._create_shelf = api_callable.create_api_call(
            self.library_service_stub.CreateShelf,
            settings=defaults['create_shelf'])
        self._get_shelf = api_callable.create_api_call(
            self.library_service_stub.GetShelf,
            settings=defaults['get_shelf'])
        self._list_shelves = api_callable.create_api_call(
            self.library_service_stub.ListShelves,
            settings=defaults['list_shelves'])
        self._delete_shelf = api_callable.create_api_call(
            self.library_service_stub.DeleteShelf,
            settings=defaults['delete_shelf'])
        self._merge_shelves = api_callable.create_api_call(
            self.library_service_stub.MergeShelves,
            settings=defaults['merge_shelves'])
        self._create_book = api_callable.create_api_call(
            self.library_service_stub.CreateBook,
            settings=defaults['create_book'])
        self._publish_series = api_callable.create_api_call(
            self.library_service_stub.PublishSeries,
            settings=defaults['publish_series'])
        self._get_book = api_callable.create_api_call(
            self.library_service_stub.GetBook,
            settings=defaults['get_book'])
        self._list_books = api_callable.create_api_call(
            self.library_service_stub.ListBooks,
            settings=defaults['list_books'])
        self._delete_book = api_callable.create_api_call(
            self.library_service_stub.DeleteBook,
            settings=defaults['delete_book'])
        self._update_book = api_callable.create_api_call(
            self.library_service_stub.UpdateBook,
            settings=defaults['update_book'])
        self._move_book = api_callable.create_api_call(
            self.library_service_stub.MoveBook,
            settings=defaults['move_book'])
        self._list_strings = api_callable.create_api_call(
            self.library_service_stub.ListStrings,
            settings=defaults['list_strings'])
        self._add_comments = api_callable.create_api_call(
            self.library_service_stub.AddComments,
            settings=defaults['add_comments'])
        self._get_book_from_archive = api_callable.create_api_call(
            self.library_service_stub.GetBookFromArchive,
            settings=defaults['get_book_from_archive'])
        self._get_book_from_anywhere = api_callable.create_api_call(
            self.library_service_stub.GetBookFromAnywhere,
            settings=defaults['get_book_from_anywhere'])
        self._get_book_from_absolutely_anywhere = api_callable.create_api_call(
            self.library_service_stub.GetBookFromAbsolutelyAnywhere,
            settings=defaults['get_book_from_absolutely_anywhere'])
        self._update_book_index = api_callable.create_api_call(
            self.library_service_stub.UpdateBookIndex,
            settings=defaults['update_book_index'])
        self._stream_shelves = api_callable.create_api_call(
            self.library_service_stub.StreamShelves,
            settings=defaults['stream_shelves'])
        self._stream_books = api_callable.create_api_call(
            self.library_service_stub.StreamBooks,
            settings=defaults['stream_books'])
        self._discuss_book = api_callable.create_api_call(
            self.library_service_stub.DiscussBook,
            settings=defaults['discuss_book'])
        self._monolog_about_book = api_callable.create_api_call(
            self.library_service_stub.MonologAboutBook,
            settings=defaults['monolog_about_book'])
        self._find_related_books = api_callable.create_api_call(
            self.library_service_stub.FindRelatedBooks,
            settings=defaults['find_related_books'])
        self._add_tag = api_callable.create_api_call(
            self.library_service_stub.AddTag,
            settings=defaults['add_tag'])
        self._add_label = api_callable.create_api_call(
            self.labeler_stub.AddLabel,
            settings=defaults['add_label'])
        self._get_big_book = api_callable.create_api_call(
            self.library_service_stub.GetBigBook,
            settings=defaults['get_big_book'])
        self._get_big_nothing = api_callable.create_api_call(
            self.library_service_stub.GetBigNothing,
            settings=defaults['get_big_nothing'])
        self._test_optional_required_flattening_params = api_callable.create_api_call(
            self.library_service_stub.TestOptionalRequiredFlatteningParams,
            settings=defaults['test_optional_required_flattening_params'])

    # Service calls
    def create_shelf(
            self,
            shelf,
            options=None):
        """
        Creates a shelf, and returns the new Shelf.
        RPC method comment may include special characters: <>&\"``'@.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> shelf = {}
            >>>
            >>> response = client.create_shelf(shelf)

        Args:
            shelf (Union[dict, ~google.cloud.example.library_v1.types.Shelf]): The shelf to create.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Shelf`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Shelf` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.CreateShelfRequest(
            shelf=shelf)
        return self._create_shelf(request, options)

    def get_shelf(
            self,
            name,
            options_,
            message=None,
            string_builder=None,
            options=None):
        """
        Gets a shelf.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.shelf_path('[SHELF_ID]')
            >>> options_ = ''
            >>>
            >>> response = client.get_shelf(name, options_)

        Args:
            name (str): The name of the shelf to retrieve.
            options_ (str): To test 'options' parameter name conflict.
            message (Union[dict, ~google.cloud.example.library_v1.types.SomeMessage]): Field to verify that message-type query parameter gets flattened.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.SomeMessage`
            string_builder (Union[dict, ~google.cloud.example.library_v1.types.StringBuilder]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.StringBuilder`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Shelf` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetShelfRequest(
            name=name,
            options=options_,
            message=message,
            string_builder=string_builder)
        return self._get_shelf(request, options)

    def list_shelves(
            self,
            options=None):
        """
        Lists shelves.

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.gax import CallOptions, INITIAL_PAGE
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>>
            >>> # Iterate over all results
            >>> for element in client.list_shelves():
            ...     # process element
            ...     pass
            >>>
            >>> # Or iterate over results one page at a time
            >>> for page in client.list_shelves(options=CallOptions(page_token=INITIAL_PAGE)):
            ...     for element in page:
            ...         # process element
            ...         pass

        Args:
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.gax.PageIterator` instance. By default, this
            is an iterable of :class:`~google.cloud.example.library_v1.types.Shelf` instances.
            This object can also be configured to iterate over the pages
            of the response through the `options` parameter.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        request = library_pb2.ListShelvesRequest()
        return self._list_shelves(request, options)

    def delete_shelf(
            self,
            name,
            options=None):
        """
        Deletes a shelf.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.shelf_path('[SHELF_ID]')
            >>>
            >>> client.delete_shelf(name)

        Args:
            name (str): The name of the shelf to delete.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.DeleteShelfRequest(
            name=name)
        self._delete_shelf(request, options)

    def merge_shelves(
            self,
            name,
            other_shelf_name,
            options=None):
        """
        Merges two shelves by adding all books from the shelf named
        ``other_shelf_name`` to shelf ``name``, and deletes
        ``other_shelf_name``. Returns the updated shelf.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.shelf_path('[SHELF_ID]')
            >>> other_shelf_name = client.shelf_path('[SHELF_ID]')
            >>>
            >>> response = client.merge_shelves(name, other_shelf_name)

        Args:
            name (str): The name of the shelf we're adding books to.
            other_shelf_name (str): The name of the shelf we're removing books from and deleting.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Shelf` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.MergeShelvesRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        return self._merge_shelves(request, options)

    def create_book(
            self,
            name,
            book,
            options=None):
        """
        Creates a book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.shelf_path('[SHELF_ID]')
            >>> book = {}
            >>>
            >>> response = client.create_book(name, book)

        Args:
            name (str): The name of the shelf in which the book is created.
            book (Union[dict, ~google.cloud.example.library_v1.types.Book]): The book to create.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Book`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Book` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.CreateBookRequest(
            name=name,
            book=book)
        return self._create_book(request, options)

    def publish_series(
            self,
            shelf,
            books,
            series_uuid,
            edition=None,
            review_copy=None,
            options=None):
        """
        Creates a series of books.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> shelf = {}
            >>> books = []
            >>> series_string = 'foobar'
            >>> series_uuid = {'series_string': series_string}
            >>>
            >>> response = client.publish_series(shelf, books, series_uuid)

        Args:
            shelf (Union[dict, ~google.cloud.example.library_v1.types.Shelf]): The shelf in which the series is created.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Shelf`
            books (list[Union[dict, ~google.cloud.example.library_v1.types.Book]]): The books to publish in the series.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Book`
            series_uuid (Union[dict, ~google.cloud.example.library_v1.types.SeriesUuid]): Uniquely identifies the series to the publishing house.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.SeriesUuid`
            edition (int): The edition of the series
            review_copy (bool): If the book is in a pre-publish state
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.PublishSeriesResponse` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        # Sanity check: We have some fields which are mutually exclusive;
        # raise ValueError if more than one is sent.
        oneof.check_oneof(
            edition=edition,
            review_copy=review_copy,
        )

        request = library_pb2.PublishSeriesRequest(
            shelf=shelf,
            books=books,
            series_uuid=series_uuid,
            edition=edition,
            review_copy=review_copy)
        return self._publish_series(request, options)

    def get_book(
            self,
            name,
            options=None):
        """
        Gets a book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> response = client.get_book(name)

        Args:
            name (str): The name of the book to retrieve.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Book` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookRequest(
            name=name)
        return self._get_book(request, options)

    def list_books(
            self,
            name,
            page_size=None,
            filter_=None,
            options=None):
        """
        Lists books in a shelf.

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.gax import CallOptions, INITIAL_PAGE
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.shelf_path('[SHELF_ID]')
            >>>
            >>>
            >>> # Iterate over all results
            >>> for element in client.list_books(name):
            ...     # process element
            ...     pass
            >>>
            >>> # Or iterate over results one page at a time
            >>> for page in client.list_books(name, options=CallOptions(page_token=INITIAL_PAGE)):
            ...     for element in page:
            ...         # process element
            ...         pass

        Args:
            name (str): The name of the shelf whose books we'd like to list.
            page_size (int): The maximum number of resources contained in the
                underlying API response. If page streaming is performed per-
                resource, this parameter does not affect the return value. If page
                streaming is performed per-page, this determines the maximum number
                of resources in a page.
            filter_ (str): To test python built-in wrapping.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.gax.PageIterator` instance. By default, this
            is an iterable of :class:`~google.cloud.example.library_v1.types.Book` instances.
            This object can also be configured to iterate over the pages
            of the response through the `options` parameter.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.ListBooksRequest(
            name=name,
            page_size=page_size,
            filter=filter_)
        return self._list_books(request, options)

    def delete_book(
            self,
            name,
            options=None):
        """
        Deletes a book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> client.delete_book(name)

        Args:
            name (str): The name of the book to delete.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.DeleteBookRequest(
            name=name)
        self._delete_book(request, options)

    def update_book(
            self,
            name,
            book,
            update_mask=None,
            physical_mask=None,
            options=None):
        """
        Updates a book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> book = {}
            >>>
            >>> response = client.update_book(name, book)

        Args:
            name (str): The name of the book to update.
            book (Union[dict, ~google.cloud.example.library_v1.types.Book]): The book to update with.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Book`
            update_mask (Union[dict, ~google.cloud.example.library_v1.types.FieldMask]): A field mask to apply, rendered as an HTTP parameter.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.FieldMask`
            physical_mask (Union[dict, ~google.cloud.example.library_v1.types.FieldMask]): To test Python import clash resolution.
                If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.FieldMask`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Book` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.UpdateBookRequest(
            name=name,
            book=book,
            update_mask=update_mask,
            physical_mask=physical_mask)
        return self._update_book(request, options)

    def move_book(
            self,
            name,
            other_shelf_name,
            options=None):
        """
        Moves a book to another shelf, and returns the new book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> other_shelf_name = client.shelf_path('[SHELF_ID]')
            >>>
            >>> response = client.move_book(name, other_shelf_name)

        Args:
            name (str): The name of the book to move.
            other_shelf_name (str): The name of the destination shelf.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Book` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.MoveBookRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        return self._move_book(request, options)

    def list_strings(
            self,
            name=None,
            page_size=None,
            options=None):
        """
        Lists a primitive resource. To test go page streaming.

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.gax import CallOptions, INITIAL_PAGE
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>>
            >>> # Iterate over all results
            >>> for element in client.list_strings():
            ...     # process element
            ...     pass
            >>>
            >>> # Or iterate over results one page at a time
            >>> for page in client.list_strings(options=CallOptions(page_token=INITIAL_PAGE)):
            ...     for element in page:
            ...         # process element
            ...         pass

        Args:
            name (str)
            page_size (int): The maximum number of resources contained in the
                underlying API response. If page streaming is performed per-
                resource, this parameter does not affect the return value. If page
                streaming is performed per-page, this determines the maximum number
                of resources in a page.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.gax.PageIterator` instance. By default, this
            is an iterable of :class:`str` instances.
            This object can also be configured to iterate over the pages
            of the response through the `options` parameter.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.ListStringsRequest(
            name=name,
            page_size=page_size)
        return self._list_strings(request, options)

    def add_comments(
            self,
            name,
            comments,
            options=None):
        """
        Adds comments to a book

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.cloud.example.library_v1 import enums
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> comment = b''
            >>> stage = enums.Comment.Stage.UNSET
            >>> alignment = enums.SomeMessage2.SomeMessage3.Alignment.CHAR
            >>> comments_element = {'comment': comment, 'stage': stage, 'alignment': alignment}
            >>> comments = [comments_element]
            >>>
            >>> client.add_comments(name, comments)

        Args:
            name (str)
            comments (list[Union[dict, ~google.cloud.example.library_v1.types.Comment]]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.Comment`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.AddCommentsRequest(
            name=name,
            comments=comments)
        self._add_comments(request, options)

    def get_book_from_archive(
            self,
            name,
            options=None):
        """
        Gets a book from an archive.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.archived_book_path('[ARCHIVE_PATH]', '[BOOK_ID]')
            >>>
            >>> response = client.get_book_from_archive(name)

        Args:
            name (str): The name of the book to retrieve.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.BookFromArchive` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookFromArchiveRequest(
            name=name)
        return self._get_book_from_archive(request, options)

    def get_book_from_anywhere(
            self,
            name,
            alt_book_name,
            options=None):
        """
        Gets a book from a shelf or archive.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> alt_book_name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> response = client.get_book_from_anywhere(name, alt_book_name)

        Args:
            name (str): The name of the book to retrieve.
            alt_book_name (str): An alternate book name, used to test restricting flattened field to a
                single resource name type in a oneof.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.BookFromAnywhere` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookFromAnywhereRequest(
            name=name,
            alt_book_name=alt_book_name)
        return self._get_book_from_anywhere(request, options)

    def get_book_from_absolutely_anywhere(
            self,
            name,
            options=None):
        """
        Test proper OneOf-Any resource name mapping

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> response = client.get_book_from_absolutely_anywhere(name)

        Args:
            name (str): The name of the book to retrieve.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.BookFromAnywhere` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookFromAbsolutelyAnywhereRequest(
            name=name)
        return self._get_book_from_absolutely_anywhere(request, options)

    def update_book_index(
            self,
            name,
            index_name,
            index_map,
            options=None):
        """
        Updates the index of a book.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> index_name = 'default index'
            >>> index_map_item = ''
            >>> index_map = {'default_key': index_map_item}
            >>>
            >>> client.update_book_index(name, index_name, index_map)

        Args:
            name (str): The name of the book to update.
            index_name (str): The name of the index for the book
            index_map (dict[str -> str]): The index to update the book with
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.UpdateBookIndexRequest(
            name=name,
            index_name=index_name,
            index_map=index_map)
        self._update_book_index(request, options)

    def stream_shelves(
            self,
            options=None):
        """
        Test server streaming
        gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> for element in client.stream_shelves():
            ...     # process element
            ...     pass

        Args:
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            Iterable[~google.cloud.example.library_v1.types.StreamShelvesResponse].

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        request = library_pb2.StreamShelvesRequest()
        return self._stream_shelves(request, options)

    def stream_books(
            self,
            name,
            options=None):
        """
        Test server streaming, non-paged responses.
        gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = ''
            >>>
            >>> for element in client.stream_books(name):
            ...     # process element
            ...     pass

        Args:
            name (str): The name of the shelf whose books we'd like to list.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            Iterable[~google.cloud.example.library_v1.types.Book].

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.StreamBooksRequest(
            name=name)
        return self._stream_books(request, options)

    def discuss_book(
            self,
            requests,
            options=None):
        """
        Test bidi-streaming.
        gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.

        EXPERIMENTAL: This method interface might change in the future.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = ''
            >>> request = {'name': name}
            >>>
            >>> requests = [request]
            >>> for element in client.discuss_book(requests):
            ...     # process element
            ...     pass

        Args:
            requests (iterator[dict|google.cloud.example.library_v1.proto.library_pb2.DiscussBookRequest]): The input objects. If a dict is provided, it must be of the
                same form as the protobuf message :class:`~google.cloud.example.library_v1.types.DiscussBookRequest`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            Iterable[~google.cloud.example.library_v1.types.Comment].

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        return self._discuss_book(requests, options)

    def monolog_about_book(
            self,
            requests,
            options=None):
        """
        Test client streaming.
        gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.

        EXPERIMENTAL: This method interface might change in the future.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = ''
            >>> request = {'name': name}
            >>>
            >>> requests = [request]
            >>> response = client.monolog_about_book(requests)

        Args:
            requests (iterator[dict|google.cloud.example.library_v1.proto.library_pb2.DiscussBookRequest]): The input objects. If a dict is provided, it must be of the
                same form as the protobuf message :class:`~google.cloud.example.library_v1.types.DiscussBookRequest`
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.Comment` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        return self._monolog_about_book(requests, options)

    def find_related_books(
            self,
            names,
            shelves,
            page_size=None,
            options=None):
        """

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.gax import CallOptions, INITIAL_PAGE
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> names_element = ''
            >>> names = [names_element]
            >>> shelves = []
            >>>
            >>>
            >>> # Iterate over all results
            >>> for element in client.find_related_books(names, shelves):
            ...     # process element
            ...     pass
            >>>
            >>> # Or iterate over results one page at a time
            >>> for page in client.find_related_books(names, shelves, options=CallOptions(page_token=INITIAL_PAGE)):
            ...     for element in page:
            ...         # process element
            ...         pass

        Args:
            names (list[str])
            shelves (list[str])
            page_size (int): The maximum number of resources contained in the
                underlying API response. If page streaming is performed per-
                resource, this parameter does not affect the return value. If page
                streaming is performed per-page, this determines the maximum number
                of resources in a page.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.gax.PageIterator` instance. By default, this
            is an iterable of :class:`str` instances.
            This object can also be configured to iterate over the pages
            of the response through the `options` parameter.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.FindRelatedBooksRequest(
            names=names,
            shelves=shelves,
            page_size=page_size)
        return self._find_related_books(request, options)

    def add_tag(
            self,
            resource,
            tag,
            options=None):
        """
        Adds a tag to the book. This RPC is a mixin.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> resource = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> tag = ''
            >>>
            >>> response = client.add_tag(resource, tag)

        Args:
            resource (str): REQUIRED: The resource which the tag is being added to.
                Resource is usually specified as a path, such as,
                projects/{project}/zones/{zone}/disks/{disk}.
            tag (str): REQUIRED: The tag to add.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.AddTagResponse` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = tagger_pb2.AddTagRequest(
            resource=resource,
            tag=tag)
        return self._add_tag(request, options)

    def add_label(
            self,
            resource,
            label,
            options=None):
        """
        Adds a label to the entity.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> resource = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>> label = ''
            >>>
            >>> response = client.add_label(resource, label)

        Args:
            resource (str): REQUIRED: The resource which the label is being added to.
                Resource is usually specified as a path, such as,
                projects/{project}/zones/{zone}/disks/{disk}.
            label (str): REQUIRED: The label to add.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.AddLabelResponse` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = tagger_pb2.AddLabelRequest(
            resource=resource,
            label=label)
        return self._add_label(request, options)

    def get_big_book(
            self,
            name,
            options=None):
        """
        Test long-running operations

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> response = client.get_big_book(name)
            >>>
            >>> def callback(operation_future):
            ...     # Handle result.
            ...     result = operation_future.result()
            >>>
            >>> response.add_done_callback(callback)
            >>>
            >>> # Handle metadata.
            >>> metadata = response.metadata()

        Args:
            name (str): The name of the book to retrieve.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types._OperationFuture` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookRequest(
            name=name)
        return google.gax._OperationFuture(
            self._get_big_book(request, options),
            self.operations_client,
            library_pb2.Book,
            library_pb2.GetBigBookMetadata,
            options)

    def get_big_nothing(
            self,
            name,
            options=None):
        """
        Test long-running operations with empty return type.

        Example:
            >>> from google.cloud.example import library_v1
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> name = client.book_path('[SHELF_ID]', '[BOOK_ID]')
            >>>
            >>> response = client.get_big_nothing(name)
            >>>
            >>> def callback(operation_future):
            ...     # Handle result.
            ...     result = operation_future.result()
            >>>
            >>> response.add_done_callback(callback)
            >>>
            >>> # Handle metadata.
            >>> metadata = response.metadata()

        Args:
            name (str): The name of the book to retrieve.
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types._OperationFuture` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.GetBookRequest(
            name=name)
        return google.gax._OperationFuture(
            self._get_big_nothing(request, options),
            self.operations_client,
            empty_pb2.Empty,
            library_pb2.GetBigBookMetadata,
            options)

    def test_optional_required_flattening_params(
            self,
            required_singular_int32,
            required_singular_int64,
            required_singular_float,
            required_singular_double,
            required_singular_bool,
            required_singular_enum,
            required_singular_string,
            required_singular_bytes,
            required_singular_message,
            required_singular_resource_name,
            required_singular_resource_name_oneof,
            required_singular_fixed32,
            required_singular_fixed64,
            required_repeated_int32,
            required_repeated_int64,
            required_repeated_float,
            required_repeated_double,
            required_repeated_bool,
            required_repeated_enum,
            required_repeated_string,
            required_repeated_bytes,
            required_repeated_message,
            required_repeated_resource_name,
            required_repeated_resource_name_oneof,
            required_repeated_fixed32,
            required_repeated_fixed64,
            required_map,
            optional_singular_int32=None,
            optional_singular_int64=None,
            optional_singular_float=None,
            optional_singular_double=None,
            optional_singular_bool=None,
            optional_singular_enum=None,
            optional_singular_string=None,
            optional_singular_bytes=None,
            optional_singular_message=None,
            optional_singular_resource_name=None,
            optional_singular_resource_name_oneof=None,
            optional_singular_fixed32=None,
            optional_singular_fixed64=None,
            optional_repeated_int32=None,
            optional_repeated_int64=None,
            optional_repeated_float=None,
            optional_repeated_double=None,
            optional_repeated_bool=None,
            optional_repeated_enum=None,
            optional_repeated_string=None,
            optional_repeated_bytes=None,
            optional_repeated_message=None,
            optional_repeated_resource_name=None,
            optional_repeated_resource_name_oneof=None,
            optional_repeated_fixed32=None,
            optional_repeated_fixed64=None,
            optional_map=None,
            options=None):
        """
        Test optional flattening parameters of all types

        Example:
            >>> from google.cloud.example import library_v1
            >>> from google.cloud.example.library_v1 import enums
            >>>
            >>> client = library_v1.LibraryServiceClient()
            >>>
            >>> required_singular_int32 = 0
            >>> required_singular_int64 = 0
            >>> required_singular_float = 0.0
            >>> required_singular_double = 0.0
            >>> required_singular_bool = False
            >>> required_singular_enum = enums.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO
            >>> required_singular_string = ''
            >>> required_singular_bytes = b''
            >>> required_singular_message = {}
            >>> required_singular_resource_name = ''
            >>> required_singular_resource_name_oneof = ''
            >>> required_singular_fixed32 = 0
            >>> required_singular_fixed64 = 0
            >>> required_repeated_int32 = []
            >>> required_repeated_int64 = []
            >>> required_repeated_float = []
            >>> required_repeated_double = []
            >>> required_repeated_bool = []
            >>> required_repeated_enum = []
            >>> required_repeated_string = []
            >>> required_repeated_bytes = []
            >>> required_repeated_message = []
            >>> required_repeated_resource_name = []
            >>> required_repeated_resource_name_oneof = []
            >>> required_repeated_fixed32 = []
            >>> required_repeated_fixed64 = []
            >>> required_map = {}
            >>>
            >>> response = client.test_optional_required_flattening_params(required_singular_int32, required_singular_int64, required_singular_float, required_singular_double, required_singular_bool, required_singular_enum, required_singular_string, required_singular_bytes, required_singular_message, required_singular_resource_name, required_singular_resource_name_oneof, required_singular_fixed32, required_singular_fixed64, required_repeated_int32, required_repeated_int64, required_repeated_float, required_repeated_double, required_repeated_bool, required_repeated_enum, required_repeated_string, required_repeated_bytes, required_repeated_message, required_repeated_resource_name, required_repeated_resource_name_oneof, required_repeated_fixed32, required_repeated_fixed64, required_map)

        Args:
            required_singular_int32 (int)
            required_singular_int64 (long)
            required_singular_float (float)
            required_singular_double (float)
            required_singular_bool (bool)
            required_singular_enum (~google.cloud.example.library_v1.types.InnerEnum)
            required_singular_string (str)
            required_singular_bytes (bytes)
            required_singular_message (Union[dict, ~google.cloud.example.library_v1.types.InnerMessage]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.InnerMessage`
            required_singular_resource_name (str)
            required_singular_resource_name_oneof (str)
            required_singular_fixed32 (int)
            required_singular_fixed64 (long)
            required_repeated_int32 (list[int])
            required_repeated_int64 (list[long])
            required_repeated_float (list[float])
            required_repeated_double (list[float])
            required_repeated_bool (list[bool])
            required_repeated_enum (list[~google.cloud.example.library_v1.types.InnerEnum])
            required_repeated_string (list[str])
            required_repeated_bytes (list[bytes])
            required_repeated_message (list[Union[dict, ~google.cloud.example.library_v1.types.InnerMessage]]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.InnerMessage`
            required_repeated_resource_name (list[str])
            required_repeated_resource_name_oneof (list[str])
            required_repeated_fixed32 (list[int])
            required_repeated_fixed64 (list[long])
            required_map (dict[int -> str])
            optional_singular_int32 (int)
            optional_singular_int64 (long)
            optional_singular_float (float)
            optional_singular_double (float)
            optional_singular_bool (bool)
            optional_singular_enum (~google.cloud.example.library_v1.types.InnerEnum)
            optional_singular_string (str)
            optional_singular_bytes (bytes)
            optional_singular_message (Union[dict, ~google.cloud.example.library_v1.types.InnerMessage]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.InnerMessage`
            optional_singular_resource_name (str)
            optional_singular_resource_name_oneof (str)
            optional_singular_fixed32 (int)
            optional_singular_fixed64 (long)
            optional_repeated_int32 (list[int])
            optional_repeated_int64 (list[long])
            optional_repeated_float (list[float])
            optional_repeated_double (list[float])
            optional_repeated_bool (list[bool])
            optional_repeated_enum (list[~google.cloud.example.library_v1.types.InnerEnum])
            optional_repeated_string (list[str])
            optional_repeated_bytes (list[bytes])
            optional_repeated_message (list[Union[dict, ~google.cloud.example.library_v1.types.InnerMessage]]): If a dict is provided, it must be of the same form as the protobuf
                message :class:`~google.cloud.example.library_v1.types.InnerMessage`
            optional_repeated_resource_name (list[str])
            optional_repeated_resource_name_oneof (list[str])
            optional_repeated_fixed32 (list[int])
            optional_repeated_fixed64 (list[long])
            optional_map (dict[int -> str])
            options (~google.gax.CallOptions): Overrides the default
                settings for this call, e.g, timeout, retries etc.

        Returns:
            A :class:`~google.cloud.example.library_v1.types.TestOptionalRequiredFlatteningParamsResponse` instance.

        Raises:
            :exc:`google.gax.errors.GaxError` if the RPC is aborted.
            :exc:`ValueError` if the parameters are invalid.
        """
        request = library_pb2.TestOptionalRequiredFlatteningParamsRequest(
            required_singular_int32=required_singular_int32,
            required_singular_int64=required_singular_int64,
            required_singular_float=required_singular_float,
            required_singular_double=required_singular_double,
            required_singular_bool=required_singular_bool,
            required_singular_enum=required_singular_enum,
            required_singular_string=required_singular_string,
            required_singular_bytes=required_singular_bytes,
            required_singular_message=required_singular_message,
            required_singular_resource_name=required_singular_resource_name,
            required_singular_resource_name_oneof=required_singular_resource_name_oneof,
            required_singular_fixed32=required_singular_fixed32,
            required_singular_fixed64=required_singular_fixed64,
            required_repeated_int32=required_repeated_int32,
            required_repeated_int64=required_repeated_int64,
            required_repeated_float=required_repeated_float,
            required_repeated_double=required_repeated_double,
            required_repeated_bool=required_repeated_bool,
            required_repeated_enum=required_repeated_enum,
            required_repeated_string=required_repeated_string,
            required_repeated_bytes=required_repeated_bytes,
            required_repeated_message=required_repeated_message,
            required_repeated_resource_name=required_repeated_resource_name,
            required_repeated_resource_name_oneof=required_repeated_resource_name_oneof,
            required_repeated_fixed32=required_repeated_fixed32,
            required_repeated_fixed64=required_repeated_fixed64,
            required_map=required_map,
            optional_singular_int32=optional_singular_int32,
            optional_singular_int64=optional_singular_int64,
            optional_singular_float=optional_singular_float,
            optional_singular_double=optional_singular_double,
            optional_singular_bool=optional_singular_bool,
            optional_singular_enum=optional_singular_enum,
            optional_singular_string=optional_singular_string,
            optional_singular_bytes=optional_singular_bytes,
            optional_singular_message=optional_singular_message,
            optional_singular_resource_name=optional_singular_resource_name,
            optional_singular_resource_name_oneof=optional_singular_resource_name_oneof,
            optional_singular_fixed32=optional_singular_fixed32,
            optional_singular_fixed64=optional_singular_fixed64,
            optional_repeated_int32=optional_repeated_int32,
            optional_repeated_int64=optional_repeated_int64,
            optional_repeated_float=optional_repeated_float,
            optional_repeated_double=optional_repeated_double,
            optional_repeated_bool=optional_repeated_bool,
            optional_repeated_enum=optional_repeated_enum,
            optional_repeated_string=optional_repeated_string,
            optional_repeated_bytes=optional_repeated_bytes,
            optional_repeated_message=optional_repeated_message,
            optional_repeated_resource_name=optional_repeated_resource_name,
            optional_repeated_resource_name_oneof=optional_repeated_resource_name_oneof,
            optional_repeated_fixed32=optional_repeated_fixed32,
            optional_repeated_fixed64=optional_repeated_fixed64,
            optional_map=optional_map)
        return self._test_optional_required_flattening_params(request, options)

