
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project which owns the job.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  dataflow.projects.jobs.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project which owns the job.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // Identifies a single job.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  dataflow.projects.jobs.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // A project id.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // The job to get messages for.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  dataflow.projects.jobs.getMetrics(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project which owns the jobs.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  dataflow.projects.jobs.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var jobsPage = response['jobs'];
    if (!jobsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < jobsPage.length; i++) {
      // TODO: Use jobsPage
      console.log(JSON.stringify(jobsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dataflow.projects.jobs.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // A project id.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // The job to get messages about.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  dataflow.projects.jobs.messages.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var jobMessagesPage = response['jobMessages'];
    if (!jobMessagesPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < jobMessagesPage.length; i++) {
      // TODO: Use jobMessagesPage
      console.log(JSON.stringify(jobMessagesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dataflow.projects.jobs.messages.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project which owns the job.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // Identifies a single job.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  dataflow.projects.jobs.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Identifies the project this worker belongs to.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // Identifies the workflow job this worker belongs to.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  dataflow.projects.jobs.workItems.lease(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project which owns the WorkItem's job.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    // The job which the WorkItem is part of.
    jobId: "{MY-JOB-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  dataflow.projects.jobs.workItems.reportStatus(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var dataflow = google.dataflow('v1b3');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project to send the WorkerMessages to.
    projectId: "{MY-PROJECT-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  dataflow.projects.workerMessages(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
