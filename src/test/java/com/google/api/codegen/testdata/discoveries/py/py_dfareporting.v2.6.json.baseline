
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Account ID.
summaryAccountId = str(0L)


request = service.accountActiveAdSummaries().get(profileId=profileId, summaryAccountId=summaryAccountId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Account permission group ID.
id = str(0L)


request = service.accountPermissionGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.accountPermissionGroups().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Account permission ID.
id = str(0L)


request = service.accountPermissions().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.accountPermissions().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# User profile ID.
id = str(0L)


request = service.accountUserProfiles().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


account_user_profile_body = {
    # TODO: Add desired entries of the request body.
}


request = service.accountUserProfiles().insert(profileId=profileId, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


accountUserProfiles = service.accountUserProfiles()
request = accountUserProfiles.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for account_user_profile in response['accountUserProfiles']:
        # TODO: Change code below to process each `account_user_profile` resource:
        pprint(account_user_profile)

    request = accountUserProfiles.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# User profile ID.
id = str(0L)


account_user_profile_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.accountUserProfiles().patch(profileId=profileId, id=id, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


account_user_profile_body = {
    # TODO: Add desired entries of the request body.
}


request = service.accountUserProfiles().update(profileId=profileId, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Account ID.
id = str(0L)


request = service.accounts().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


accounts = service.accounts()
request = accounts.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for account in response['accounts']:
        # TODO: Change code below to process each `account` resource:
        pprint(account)

    request = accounts.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Account ID.
id = str(0L)


account_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.accounts().patch(profileId=profileId, id=id, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


account_body = {
    # TODO: Add desired entries of the request body.
}


request = service.accounts().update(profileId=profileId, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Ad ID.
id = str(0L)


request = service.ads().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


ad_body = {
    # TODO: Add desired entries of the request body.
}


request = service.ads().insert(profileId=profileId, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


ads = service.ads()
request = ads.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for ad in response['ads']:
        # TODO: Change code below to process each `ad` resource:
        pprint(ad)

    request = ads.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Ad ID.
id = str(0L)


ad_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.ads().patch(profileId=profileId, id=id, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


ad_body = {
    # TODO: Add desired entries of the request body.
}


request = service.ads().update(profileId=profileId, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser group ID.
id = str(0L)


request = service.advertiserGroups().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser group ID.
id = str(0L)


request = service.advertiserGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


advertiser_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.advertiserGroups().insert(profileId=profileId, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


advertiserGroups = service.advertiserGroups()
request = advertiserGroups.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for advertiser_group in response['advertiserGroups']:
        # TODO: Change code below to process each `advertiser_group` resource:
        pprint(advertiser_group)

    request = advertiserGroups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser group ID.
id = str(0L)


advertiser_group_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.advertiserGroups().patch(profileId=profileId, id=id, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


advertiser_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.advertiserGroups().update(profileId=profileId, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser ID.
id = str(0L)


request = service.advertisers().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


advertiser_body = {
    # TODO: Add desired entries of the request body.
}


request = service.advertisers().insert(profileId=profileId, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


advertisers = service.advertisers()
request = advertisers.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for advertiser in response['advertisers']:
        # TODO: Change code below to process each `advertiser` resource:
        pprint(advertiser)

    request = advertisers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser ID.
id = str(0L)


advertiser_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.advertisers().patch(profileId=profileId, id=id, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


advertiser_body = {
    # TODO: Add desired entries of the request body.
}


request = service.advertisers().update(profileId=profileId, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.browsers().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)

# Campaign ID in this association.
campaignId = str(0L)


campaign_creative_association_body = {
    # TODO: Add desired entries of the request body.
}


request = service.campaignCreativeAssociations().insert(profileId=profileId, campaignId=campaignId, body=campaign_creative_association_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Campaign ID in this association.
campaignId = str(0L)


campaignCreativeAssociations = service.campaignCreativeAssociations()
request = campaignCreativeAssociations.list(profileId=profileId, campaignId=campaignId)
while request is not None:
    response = request.execute()

    for campaign_creative_association in response['campaignCreativeAssociations']:
        # TODO: Change code below to process each `campaign_creative_association` resource:
        pprint(campaign_creative_association)

    request = campaignCreativeAssociations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Campaign ID.
id = str(0L)


request = service.campaigns().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)

# Default landing page name for this new campaign. Must be less than 256 characters long.
defaultLandingPageName = '{MY-DEFAULT-LANDING-PAGE-NAME}'

# Default landing page URL for this new campaign.
defaultLandingPageUrl = '{MY-DEFAULT-LANDING-PAGE-URL}'


campaign_body = {
    # TODO: Add desired entries of the request body.
}


request = service.campaigns().insert(profileId=profileId, defaultLandingPageName=defaultLandingPageName, defaultLandingPageUrl=defaultLandingPageUrl, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


campaigns = service.campaigns()
request = campaigns.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for campaign in response['campaigns']:
        # TODO: Change code below to process each `campaign` resource:
        pprint(campaign)

    request = campaigns.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Campaign ID.
id = str(0L)


campaign_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.campaigns().patch(profileId=profileId, id=id, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


campaign_body = {
    # TODO: Add desired entries of the request body.
}


request = service.campaigns().update(profileId=profileId, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Change log ID.
id = str(0L)


request = service.changeLogs().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


changeLogs = service.changeLogs()
request = changeLogs.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for change_log in response['changeLogs']:
        # TODO: Change code below to process each `change_log` resource:
        pprint(change_log)

    request = changeLogs.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.cities().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Connection type ID.
id = str(0L)


request = service.connectionTypes().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.connectionTypes().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Content category ID.
id = str(0L)


request = service.contentCategories().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Content category ID.
id = str(0L)


request = service.contentCategories().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


content_category_body = {
    # TODO: Add desired entries of the request body.
}


request = service.contentCategories().insert(profileId=profileId, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


contentCategories = service.contentCategories()
request = contentCategories.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for content_category in response['contentCategories']:
        # TODO: Change code below to process each `content_category` resource:
        pprint(content_category)

    request = contentCategories.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Content category ID.
id = str(0L)


content_category_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.contentCategories().patch(profileId=profileId, id=id, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


content_category_body = {
    # TODO: Add desired entries of the request body.
}


request = service.contentCategories().update(profileId=profileId, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `batchinsert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/ddmconversions
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `batchinsert` method:

# User profile ID associated with this request.
profileId = str(0L)


conversions_batch_insert_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.conversions().batchinsert(profileId=profileId, body=conversions_batch_insert_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Country DART ID.
dartId = str(0L)


request = service.countries().get(profileId=profileId, dartId=dartId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.countries().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)

# Advertiser ID of this creative. This is a required field.
advertiserId = str(0L)


creative_asset_metadata_body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Add desired media content for upload. For more information, see:
# https://developers.google.com/api-client-library/python/guide/media_upload


request = service.creativeAssets().insert(profileId=profileId, advertiserId=advertiserId, body=creative_asset_metadata_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)

# Creative Field Value ID
id = str(0L)


request = service.creativeFieldValues().delete(profileId=profileId, creativeFieldId=creativeFieldId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)

# Creative Field Value ID
id = str(0L)


request = service.creativeFieldValues().get(profileId=profileId, creativeFieldId=creativeFieldId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)


creative_field_value_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeFieldValues().insert(profileId=profileId, creativeFieldId=creativeFieldId, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)


creativeFieldValues = service.creativeFieldValues()
request = creativeFieldValues.list(profileId=profileId, creativeFieldId=creativeFieldId)
while request is not None:
    response = request.execute()

    for creative_field_value in response['creativeFieldValues']:
        # TODO: Change code below to process each `creative_field_value` resource:
        pprint(creative_field_value)

    request = creativeFieldValues.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)

# Creative Field Value ID
id = str(0L)


creative_field_value_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.creativeFieldValues().patch(profileId=profileId, creativeFieldId=creativeFieldId, id=id, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative field ID for this creative field value.
creativeFieldId = str(0L)


creative_field_value_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeFieldValues().update(profileId=profileId, creativeFieldId=creativeFieldId, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative Field ID
id = str(0L)


request = service.creativeFields().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative Field ID
id = str(0L)


request = service.creativeFields().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_field_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeFields().insert(profileId=profileId, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


creativeFields = service.creativeFields()
request = creativeFields.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for creative_field in response['creativeFields']:
        # TODO: Change code below to process each `creative_field` resource:
        pprint(creative_field)

    request = creativeFields.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative Field ID
id = str(0L)


creative_field_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.creativeFields().patch(profileId=profileId, id=id, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_field_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeFields().update(profileId=profileId, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative group ID.
id = str(0L)


request = service.creativeGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeGroups().insert(profileId=profileId, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


creativeGroups = service.creativeGroups()
request = creativeGroups.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for creative_group in response['creativeGroups']:
        # TODO: Change code below to process each `creative_group` resource:
        pprint(creative_group)

    request = creativeGroups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative group ID.
id = str(0L)


creative_group_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.creativeGroups().patch(profileId=profileId, id=id, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creativeGroups().update(profileId=profileId, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative ID.
id = str(0L)


request = service.creatives().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creatives().insert(profileId=profileId, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


creatives = service.creatives()
request = creatives.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for creative in response['creatives']:
        # TODO: Change code below to process each `creative` resource:
        pprint(creative)

    request = creatives.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Creative ID.
id = str(0L)


creative_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.creatives().patch(profileId=profileId, id=id, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


creative_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creatives().update(profileId=profileId, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `query` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `query` method:

# The DFA user profile ID.
profileId = str(0L)


dimension_value_request_body = {
    # TODO: Add desired entries of the request body.
}


dimensionValues = service.dimensionValues()
request = dimensionValues.query(profileId=profileId, body=dimension_value_request_body)
while request is not None:
    response = request.execute()

    for dimension_value in response['items']:
        # TODO: Change code below to process each `dimension_value` resource:
        pprint(dimension_value)

    request = dimensionValues.query_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Directory site contact ID.
id = str(0L)


request = service.directorySiteContacts().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


directorySiteContacts = service.directorySiteContacts()
request = directorySiteContacts.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for directory_site_contact in response['directorySiteContacts']:
        # TODO: Change code below to process each `directory_site_contact` resource:
        pprint(directory_site_contact)

    request = directorySiteContacts.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Directory site ID.
id = str(0L)


request = service.directorySites().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


directory_site_body = {
    # TODO: Add desired entries of the request body.
}


request = service.directorySites().insert(profileId=profileId, body=directory_site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


directorySites = service.directorySites()
request = directorySites.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for directory_site in response['directorySites']:
        # TODO: Change code below to process each `directory_site` resource:
        pprint(directory_site)

    request = directorySites.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# ID of the object of this dynamic targeting key. This is a required field.
objectId = str(0L)

# Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
# and cannot contain commas. All characters are converted to lowercase.
name = '{MY-NAME}'

# Type of the object of this dynamic targeting key. This is a required field.
objectType = '{MY-OBJECT-TYPE}'


request = service.dynamicTargetingKeys().delete(profileId=profileId, objectId=objectId, name=name, objectType=objectType)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


dynamic_targeting_key_body = {
    # TODO: Add desired entries of the request body.
}


request = service.dynamicTargetingKeys().insert(profileId=profileId, body=dynamic_targeting_key_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.dynamicTargetingKeys().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Event tag ID.
id = str(0L)


request = service.eventTags().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Event tag ID.
id = str(0L)


request = service.eventTags().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


event_tag_body = {
    # TODO: Add desired entries of the request body.
}


request = service.eventTags().insert(profileId=profileId, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.eventTags().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Event tag ID.
id = str(0L)


event_tag_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.eventTags().patch(profileId=profileId, id=id, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


event_tag_body = {
    # TODO: Add desired entries of the request body.
}


request = service.eventTags().update(profileId=profileId, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The ID of the report.
reportId = str(0L)

# The ID of the report file.
fileId = str(0L)


# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.files().get(reportId=reportId, fileId=fileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The DFA profile ID.
profileId = str(0L)


files = service.files()
request = files.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for file_ in response['items']:
        # TODO: Change code below to process each `file_` resource:
        pprint(file_)

    request = files.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight activity ID.
id = str(0L)


request = service.floodlightActivities().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `generatetag` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `generatetag` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.floodlightActivities().generatetag(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight activity ID.
id = str(0L)


request = service.floodlightActivities().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlight_activity_body = {
    # TODO: Add desired entries of the request body.
}


request = service.floodlightActivities().insert(profileId=profileId, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlightActivities = service.floodlightActivities()
request = floodlightActivities.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for floodlight_activity in response['floodlightActivities']:
        # TODO: Change code below to process each `floodlight_activity` resource:
        pprint(floodlight_activity)

    request = floodlightActivities.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight activity ID.
id = str(0L)


floodlight_activity_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.floodlightActivities().patch(profileId=profileId, id=id, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlight_activity_body = {
    # TODO: Add desired entries of the request body.
}


request = service.floodlightActivities().update(profileId=profileId, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight activity Group ID.
id = str(0L)


request = service.floodlightActivityGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlight_activity_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.floodlightActivityGroups().insert(profileId=profileId, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlightActivityGroups = service.floodlightActivityGroups()
request = floodlightActivityGroups.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for floodlight_activity_group in response['floodlightActivityGroups']:
        # TODO: Change code below to process each `floodlight_activity_group` resource:
        pprint(floodlight_activity_group)

    request = floodlightActivityGroups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight activity Group ID.
id = str(0L)


floodlight_activity_group_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.floodlightActivityGroups().patch(profileId=profileId, id=id, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlight_activity_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.floodlightActivityGroups().update(profileId=profileId, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight configuration ID.
id = str(0L)


request = service.floodlightConfigurations().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.floodlightConfigurations().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Floodlight configuration ID.
id = str(0L)


floodlight_configuration_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.floodlightConfigurations().patch(profileId=profileId, id=id, body=floodlight_configuration_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


floodlight_configuration_body = {
    # TODO: Add desired entries of the request body.
}


request = service.floodlightConfigurations().update(profileId=profileId, body=floodlight_configuration_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for order documents.
projectId = str(0L)

# Inventory item ID.
id = str(0L)


request = service.inventoryItems().get(profileId=profileId, projectId=projectId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for order documents.
projectId = str(0L)


inventoryItems = service.inventoryItems()
request = inventoryItems.list(profileId=profileId, projectId=projectId)
while request is not None:
    response = request.execute()

    for inventory_item in response['inventoryItems']:
        # TODO: Change code below to process each `inventory_item` resource:
        pprint(inventory_item)

    request = inventoryItems.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)

# Landing page ID.
id = str(0L)


request = service.landingPages().delete(profileId=profileId, campaignId=campaignId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)

# Landing page ID.
id = str(0L)


request = service.landingPages().get(profileId=profileId, campaignId=campaignId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)


landing_page_body = {
    # TODO: Add desired entries of the request body.
}


request = service.landingPages().insert(profileId=profileId, campaignId=campaignId, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)


request = service.landingPages().list(profileId=profileId, campaignId=campaignId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)

# Landing page ID.
id = str(0L)


landing_page_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.landingPages().patch(profileId=profileId, campaignId=campaignId, id=id, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)

# Landing page campaign ID.
campaignId = str(0L)


landing_page_body = {
    # TODO: Add desired entries of the request body.
}


request = service.landingPages().update(profileId=profileId, campaignId=campaignId, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.languages().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.metros().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Mobile carrier ID.
id = str(0L)


request = service.mobileCarriers().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.mobileCarriers().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Operating system version ID.
id = str(0L)


request = service.operatingSystemVersions().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.operatingSystemVersions().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Operating system DART ID.
dartId = str(0L)


request = service.operatingSystems().get(profileId=profileId, dartId=dartId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.operatingSystems().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for order documents.
projectId = str(0L)

# Order document ID.
id = str(0L)


request = service.orderDocuments().get(profileId=profileId, projectId=projectId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for order documents.
projectId = str(0L)


orderDocuments = service.orderDocuments()
request = orderDocuments.list(profileId=profileId, projectId=projectId)
while request is not None:
    response = request.execute()

    for order_document in response['orderDocuments']:
        # TODO: Change code below to process each `order_document` resource:
        pprint(order_document)

    request = orderDocuments.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for orders.
projectId = str(0L)

# Order ID.
id = str(0L)


request = service.orders().get(profileId=profileId, projectId=projectId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID for orders.
projectId = str(0L)


orders = service.orders()
request = orders.list(profileId=profileId, projectId=projectId)
while request is not None:
    response = request.execute()

    for order in response['orders']:
        # TODO: Change code below to process each `order` resource:
        pprint(order)

    request = orders.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement group ID.
id = str(0L)


request = service.placementGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placementGroups().insert(profileId=profileId, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


placementGroups = service.placementGroups()
request = placementGroups.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for placement_group in response['placementGroups']:
        # TODO: Change code below to process each `placement_group` resource:
        pprint(placement_group)

    request = placementGroups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement group ID.
id = str(0L)


placement_group_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.placementGroups().patch(profileId=profileId, id=id, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_group_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placementGroups().update(profileId=profileId, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement strategy ID.
id = str(0L)


request = service.placementStrategies().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement strategy ID.
id = str(0L)


request = service.placementStrategies().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_strategy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placementStrategies().insert(profileId=profileId, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


placementStrategies = service.placementStrategies()
request = placementStrategies.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for placement_strategy in response['placementStrategies']:
        # TODO: Change code below to process each `placement_strategy` resource:
        pprint(placement_strategy)

    request = placementStrategies.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement strategy ID.
id = str(0L)


placement_strategy_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.placementStrategies().patch(profileId=profileId, id=id, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_strategy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placementStrategies().update(profileId=profileId, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `generatetags` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `generatetags` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.placements().generatetags(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement ID.
id = str(0L)


request = service.placements().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placements().insert(profileId=profileId, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


placements = service.placements()
request = placements.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for placement in response['placements']:
        # TODO: Change code below to process each `placement` resource:
        pprint(placement)

    request = placements.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Placement ID.
id = str(0L)


placement_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.placements().patch(profileId=profileId, id=id, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


placement_body = {
    # TODO: Add desired entries of the request body.
}


request = service.placements().update(profileId=profileId, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Platform type ID.
id = str(0L)


request = service.platformTypes().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.platformTypes().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Postal code ID.
code = '{MY-CODE}'


request = service.postalCodes().get(profileId=profileId, code=code)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.postalCodes().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Project ID.
id = str(0L)


request = service.projects().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


projects = service.projects()
request = projects.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for project in response['projects']:
        # TODO: Change code below to process each `project` resource:
        pprint(project)

    request = projects.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.regions().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Remarketing list ID.
remarketingListId = str(0L)


request = service.remarketingListShares().get(profileId=profileId, remarketingListId=remarketingListId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Remarketing list ID.
remarketingListId = str(0L)


remarketing_list_share_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.remarketingListShares().patch(profileId=profileId, remarketingListId=remarketingListId, body=remarketing_list_share_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


remarketing_list_share_body = {
    # TODO: Add desired entries of the request body.
}


request = service.remarketingListShares().update(profileId=profileId, body=remarketing_list_share_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Remarketing list ID.
id = str(0L)


request = service.remarketingLists().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


remarketing_list_body = {
    # TODO: Add desired entries of the request body.
}


request = service.remarketingLists().insert(profileId=profileId, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Select only remarketing lists owned by this advertiser.
advertiserId = str(0L)


remarketingLists = service.remarketingLists()
request = remarketingLists.list(profileId=profileId, advertiserId=advertiserId)
while request is not None:
    response = request.execute()

    for remarketing_list in response['remarketingLists']:
        # TODO: Change code below to process each `remarketing_list` resource:
        pprint(remarketing_list)

    request = remarketingLists.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Remarketing list ID.
id = str(0L)


remarketing_list_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.remarketingLists().patch(profileId=profileId, id=id, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


remarketing_list_body = {
    # TODO: Add desired entries of the request body.
}


request = service.remarketingLists().update(profileId=profileId, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `query` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `query` method:

# The DFA user profile ID.
profileId = str(0L)


report_body = {
    # TODO: Add desired entries of the request body.
}


request = service.reports().compatibleFields().query(profileId=profileId, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The DFA user profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)


request = service.reports().delete(profileId=profileId, reportId=reportId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The DFA profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)

# The ID of the report file.
fileId = str(0L)


# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.reports().files().get(profileId=profileId, reportId=reportId, fileId=fileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The DFA profile ID.
profileId = str(0L)

# The ID of the parent report.
reportId = str(0L)


files = service.reports().files()
request = files.list(profileId=profileId, reportId=reportId)
while request is not None:
    response = request.execute()

    for file_ in response['items']:
        # TODO: Change code below to process each `file_` resource:
        pprint(file_)

    request = files.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The DFA user profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)


request = service.reports().get(profileId=profileId, reportId=reportId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# The DFA user profile ID.
profileId = str(0L)


report_body = {
    # TODO: Add desired entries of the request body.
}


request = service.reports().insert(profileId=profileId, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The DFA user profile ID.
profileId = str(0L)


reports = service.reports()
request = reports.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for report in response['items']:
        # TODO: Change code below to process each `report` resource:
        pprint(report)

    request = reports.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The DFA user profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)


report_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.reports().patch(profileId=profileId, reportId=reportId, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `run` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `run` method:

# The DFA profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)


request = service.reports().run(profileId=profileId, reportId=reportId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The DFA user profile ID.
profileId = str(0L)

# The ID of the report.
reportId = str(0L)


report_body = {
    # TODO: Add desired entries of the request body.
}


request = service.reports().update(profileId=profileId, reportId=reportId, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Site ID.
id = str(0L)


request = service.sites().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


site_body = {
    # TODO: Add desired entries of the request body.
}


request = service.sites().insert(profileId=profileId, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


sites = service.sites()
request = sites.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for site in response['sites']:
        # TODO: Change code below to process each `site` resource:
        pprint(site)

    request = sites.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Site ID.
id = str(0L)


site_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.sites().patch(profileId=profileId, id=id, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


site_body = {
    # TODO: Add desired entries of the request body.
}


request = service.sites().update(profileId=profileId, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Size ID.
id = str(0L)


request = service.sizes().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


size_body = {
    # TODO: Add desired entries of the request body.
}


request = service.sizes().insert(profileId=profileId, body=size_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.sizes().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Subaccount ID.
id = str(0L)


request = service.subaccounts().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


subaccount_body = {
    # TODO: Add desired entries of the request body.
}


request = service.subaccounts().insert(profileId=profileId, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


subaccounts = service.subaccounts()
request = subaccounts.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for subaccount in response['subaccounts']:
        # TODO: Change code below to process each `subaccount` resource:
        pprint(subaccount)

    request = subaccounts.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Subaccount ID.
id = str(0L)


subaccount_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.subaccounts().patch(profileId=profileId, id=id, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


subaccount_body = {
    # TODO: Add desired entries of the request body.
}


request = service.subaccounts().update(profileId=profileId, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Remarketing list ID.
id = str(0L)


request = service.targetableRemarketingLists().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)

# Select only targetable remarketing lists targetable by these advertisers.
advertiserId = str(0L)


targetableRemarketingLists = service.targetableRemarketingLists()
request = targetableRemarketingLists.list(profileId=profileId, advertiserId=advertiserId)
while request is not None:
    response = request.execute()

    for targetable_remarketing_list in response['targetableRemarketingLists']:
        # TODO: Change code below to process each `targetable_remarketing_list` resource:
        pprint(targetable_remarketing_list)

    request = targetableRemarketingLists.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# Targeting template ID.
id = str(0L)


request = service.targetingTemplates().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


targeting_template_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetingTemplates().insert(profileId=profileId, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


targetingTemplates = service.targetingTemplates()
request = targetingTemplates.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for targeting_template in response['targetingTemplates']:
        # TODO: Change code below to process each `targeting_template` resource:
        pprint(targeting_template)

    request = targetingTemplates.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# Targeting template ID.
id = str(0L)


targeting_template_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.targetingTemplates().patch(profileId=profileId, id=id, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


targeting_template_body = {
    # TODO: Add desired entries of the request body.
}


request = service.targetingTemplates().update(profileId=profileId, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `get` method:

# The user profile ID.
profileId = str(0L)


request = service.userProfiles().get(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfareporting
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


request = service.userProfiles().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# User role permission group ID.
id = str(0L)


request = service.userRolePermissionGroups().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.userRolePermissionGroups().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# User role permission ID.
id = str(0L)


request = service.userRolePermissions().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


request = service.userRolePermissions().list(profileId=profileId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# User profile ID associated with this request.
profileId = str(0L)

# User role ID.
id = str(0L)


request = service.userRoles().delete(profileId=profileId, id=id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# User profile ID associated with this request.
profileId = str(0L)

# User role ID.
id = str(0L)


request = service.userRoles().get(profileId=profileId, id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# User profile ID associated with this request.
profileId = str(0L)


user_role_body = {
    # TODO: Add desired entries of the request body.
}


request = service.userRoles().insert(profileId=profileId, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# User profile ID associated with this request.
profileId = str(0L)


userRoles = service.userRoles()
request = userRoles.list(profileId=profileId)
while request is not None:
    response = request.execute()

    for user_role in response['userRoles']:
        # TODO: Change code below to process each `user_role` resource:
        pprint(user_role)

    request = userRoles.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# User profile ID associated with this request.
profileId = str(0L)

# User role ID.
id = str(0L)


user_role_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.userRoles().patch(profileId=profileId, id=id, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/dfatrafficking
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# User profile ID associated with this request.
profileId = str(0L)


user_role_body = {
    # TODO: Add desired entries of the request body.
}


request = service.userRoles().update(profileId=profileId, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
