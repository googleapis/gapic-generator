
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Account ID.
summary_account_id = str(0L)  # TODO: Update placeholder value.

request = service.accountActiveAdSummaries().get(profileId=profile_id, summaryAccountId=summary_account_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Account permission group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.accountPermissionGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.accountPermissionGroups().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Account permission ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.accountPermissions().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.accountPermissions().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User profile ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.accountUserProfiles().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

account_user_profile_body = {
    # TODO: Add desired entries to the request body.
}

request = service.accountUserProfiles().insert(profileId=profile_id, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.accountUserProfiles().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for account_user_profile in response['accountUserProfiles']:
        # TODO: Change code below to process each `account_user_profile` resource:
        pprint(account_user_profile)

    request = service.accountUserProfiles().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User profile ID.
id_ = str(0L)  # TODO: Update placeholder value.

account_user_profile_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.accountUserProfiles().patch(profileId=profile_id, id=id_, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

account_user_profile_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.accountUserProfiles().update(profileId=profile_id, body=account_user_profile_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Account ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.accounts().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.accounts().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for account in response['accounts']:
        # TODO: Change code below to process each `account` resource:
        pprint(account)

    request = service.accounts().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Account ID.
id_ = str(0L)  # TODO: Update placeholder value.

account_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.accounts().patch(profileId=profile_id, id=id_, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

account_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.accounts().update(profileId=profile_id, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Ad ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.ads().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

ad_body = {
    # TODO: Add desired entries to the request body.
}

request = service.ads().insert(profileId=profile_id, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.ads().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for ad in response['ads']:
        # TODO: Change code below to process each `ad` resource:
        pprint(ad)

    request = service.ads().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Ad ID.
id_ = str(0L)  # TODO: Update placeholder value.

ad_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.ads().patch(profileId=profile_id, id=id_, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

ad_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.ads().update(profileId=profile_id, body=ad_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.advertiserGroups().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.advertiserGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

advertiser_group_body = {
    # TODO: Add desired entries to the request body.
}

request = service.advertiserGroups().insert(profileId=profile_id, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.advertiserGroups().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for advertiser_group in response['advertiserGroups']:
        # TODO: Change code below to process each `advertiser_group` resource:
        pprint(advertiser_group)

    request = service.advertiserGroups().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser group ID.
id_ = str(0L)  # TODO: Update placeholder value.

advertiser_group_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.advertiserGroups().patch(profileId=profile_id, id=id_, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

advertiser_group_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.advertiserGroups().update(profileId=profile_id, body=advertiser_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.advertisers().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

advertiser_body = {
    # TODO: Add desired entries to the request body.
}

request = service.advertisers().insert(profileId=profile_id, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.advertisers().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for advertiser in response['advertisers']:
        # TODO: Change code below to process each `advertiser` resource:
        pprint(advertiser)

    request = service.advertisers().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser ID.
id_ = str(0L)  # TODO: Update placeholder value.

advertiser_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.advertisers().patch(profileId=profile_id, id=id_, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

advertiser_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.advertisers().update(profileId=profile_id, body=advertiser_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.browsers().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Campaign ID in this association.
campaign_id = str(0L)  # TODO: Update placeholder value.

campaign_creative_association_body = {
    # TODO: Add desired entries to the request body.
}

request = service.campaignCreativeAssociations().insert(profileId=profile_id, campaignId=campaign_id, body=campaign_creative_association_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Campaign ID in this association.
campaign_id = str(0L)  # TODO: Update placeholder value.

request = service.campaignCreativeAssociations().list(profileId=profile_id, campaignId=campaign_id)
while request is not None:
    response = request.execute()

    for campaign_creative_association in response['campaignCreativeAssociations']:
        # TODO: Change code below to process each `campaign_creative_association` resource:
        pprint(campaign_creative_association)

    request = service.campaignCreativeAssociations().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Campaign ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.campaigns().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Default landing page name for this new campaign. Must be less than 256 characters long.
default_landing_page_name = ''  # TODO: Update placeholder value.

# Default landing page URL for this new campaign.
default_landing_page_url = ''  # TODO: Update placeholder value.

campaign_body = {
    # TODO: Add desired entries to the request body.
}

request = service.campaigns().insert(profileId=profile_id, defaultLandingPageName=default_landing_page_name, defaultLandingPageUrl=default_landing_page_url, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.campaigns().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for campaign in response['campaigns']:
        # TODO: Change code below to process each `campaign` resource:
        pprint(campaign)

    request = service.campaigns().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Campaign ID.
id_ = str(0L)  # TODO: Update placeholder value.

campaign_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.campaigns().patch(profileId=profile_id, id=id_, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

campaign_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.campaigns().update(profileId=profile_id, body=campaign_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Change log ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.changeLogs().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.changeLogs().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for change_log in response['changeLogs']:
        # TODO: Change code below to process each `change_log` resource:
        pprint(change_log)

    request = service.changeLogs().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.cities().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Connection type ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.connectionTypes().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.connectionTypes().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Content category ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.contentCategories().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Content category ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.contentCategories().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

content_category_body = {
    # TODO: Add desired entries to the request body.
}

request = service.contentCategories().insert(profileId=profile_id, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.contentCategories().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for content_category in response['contentCategories']:
        # TODO: Change code below to process each `content_category` resource:
        pprint(content_category)

    request = service.contentCategories().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Content category ID.
id_ = str(0L)  # TODO: Update placeholder value.

content_category_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.contentCategories().patch(profileId=profile_id, id=id_, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

content_category_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.contentCategories().update(profileId=profile_id, body=content_category_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/ddmconversions'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

conversions_batch_insert_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.conversions().batchinsert(profileId=profile_id, body=conversions_batch_insert_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Country DART ID.
dart_id = str(0L)  # TODO: Update placeholder value.

request = service.countries().get(profileId=profile_id, dartId=dart_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.countries().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Advertiser ID of this creative. This is a required field.
advertiser_id = str(0L)  # TODO: Update placeholder value.

creative_asset_metadata_body = {
    # TODO: Add desired entries to the request body.
}

# TODO: Add desired media content for upload. For more information, see
# https://developers.google.com/api-client-library/python/guide/media_upload

request = service.creativeAssets().insert(profileId=profile_id, advertiserId=advertiser_id, body=creative_asset_metadata_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

# Creative Field Value ID
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creativeFieldValues().delete(profileId=profile_id, creativeFieldId=creative_field_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

# Creative Field Value ID
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creativeFieldValues().get(profileId=profile_id, creativeFieldId=creative_field_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

creative_field_value_body = {
    # TODO: Add desired entries to the request body.
}

request = service.creativeFieldValues().insert(profileId=profile_id, creativeFieldId=creative_field_id, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

request = service.creativeFieldValues().list(profileId=profile_id, creativeFieldId=creative_field_id)
while request is not None:
    response = request.execute()

    for creative_field_value in response['creativeFieldValues']:
        # TODO: Change code below to process each `creative_field_value` resource:
        pprint(creative_field_value)

    request = service.creativeFieldValues().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

# Creative Field Value ID
id_ = str(0L)  # TODO: Update placeholder value.

creative_field_value_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.creativeFieldValues().patch(profileId=profile_id, creativeFieldId=creative_field_id, id=id_, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative field ID for this creative field value.
creative_field_id = str(0L)  # TODO: Update placeholder value.

creative_field_value_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.creativeFieldValues().update(profileId=profile_id, creativeFieldId=creative_field_id, body=creative_field_value_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative Field ID
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creativeFields().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative Field ID
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creativeFields().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_field_body = {
    # TODO: Add desired entries to the request body.
}

request = service.creativeFields().insert(profileId=profile_id, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.creativeFields().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for creative_field in response['creativeFields']:
        # TODO: Change code below to process each `creative_field` resource:
        pprint(creative_field)

    request = service.creativeFields().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative Field ID
id_ = str(0L)  # TODO: Update placeholder value.

creative_field_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.creativeFields().patch(profileId=profile_id, id=id_, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_field_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.creativeFields().update(profileId=profile_id, body=creative_field_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creativeGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_group_body = {
    # TODO: Add desired entries to the request body.
}

request = service.creativeGroups().insert(profileId=profile_id, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.creativeGroups().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for creative_group in response['creativeGroups']:
        # TODO: Change code below to process each `creative_group` resource:
        pprint(creative_group)

    request = service.creativeGroups().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative group ID.
id_ = str(0L)  # TODO: Update placeholder value.

creative_group_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.creativeGroups().patch(profileId=profile_id, id=id_, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_group_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.creativeGroups().update(profileId=profile_id, body=creative_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.creatives().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_body = {
    # TODO: Add desired entries to the request body.
}

request = service.creatives().insert(profileId=profile_id, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.creatives().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for creative in response['creatives']:
        # TODO: Change code below to process each `creative` resource:
        pprint(creative)

    request = service.creatives().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Creative ID.
id_ = str(0L)  # TODO: Update placeholder value.

creative_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.creatives().patch(profileId=profile_id, id=id_, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

creative_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.creatives().update(profileId=profile_id, body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

dimension_value_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.dimensionValues().query(profileId=profile_id, body=dimension_value_request_body)
while request is not None:
    response = request.execute()

    for dimension_value in response['items']:
        # TODO: Change code below to process each `dimension_value` resource:
        pprint(dimension_value)

    request = service.dimensionValues().query_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Directory site contact ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.directorySiteContacts().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.directorySiteContacts().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for directory_site_contact in response['directorySiteContacts']:
        # TODO: Change code below to process each `directory_site_contact` resource:
        pprint(directory_site_contact)

    request = service.directorySiteContacts().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Directory site ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.directorySites().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

directory_site_body = {
    # TODO: Add desired entries to the request body.
}

request = service.directorySites().insert(profileId=profile_id, body=directory_site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.directorySites().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for directory_site in response['directorySites']:
        # TODO: Change code below to process each `directory_site` resource:
        pprint(directory_site)

    request = service.directorySites().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# ID of the object of this dynamic targeting key. This is a required field.
object_id = str(0L)  # TODO: Update placeholder value.

# Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
# and cannot contain commas. All characters are converted to lowercase.
name = ''  # TODO: Update placeholder value.

# Type of the object of this dynamic targeting key. This is a required field.
object_type = ''  # TODO: Update placeholder value.

request = service.dynamicTargetingKeys().delete(profileId=profile_id, objectId=object_id, name=name, objectType=object_type)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

dynamic_targeting_key_body = {
    # TODO: Add desired entries to the request body.
}

request = service.dynamicTargetingKeys().insert(profileId=profile_id, body=dynamic_targeting_key_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.dynamicTargetingKeys().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Event tag ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.eventTags().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Event tag ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.eventTags().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

event_tag_body = {
    # TODO: Add desired entries to the request body.
}

request = service.eventTags().insert(profileId=profile_id, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.eventTags().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Event tag ID.
id_ = str(0L)  # TODO: Update placeholder value.

event_tag_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.eventTags().patch(profileId=profile_id, id=id_, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

event_tag_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.eventTags().update(profileId=profile_id, body=event_tag_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report file.
file_id = str(0L)  # TODO: Update placeholder value.

# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.files().get(reportId=report_id, fileId=file_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.files().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for file2 in response['items']:
        # TODO: Change code below to process each `file2` resource:
        pprint(file2)

    request = service.files().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight activity ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivities().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivities().generatetag(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight activity ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivities().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

floodlight_activity_body = {
    # TODO: Add desired entries to the request body.
}

request = service.floodlightActivities().insert(profileId=profile_id, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivities().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for floodlight_activity in response['floodlightActivities']:
        # TODO: Change code below to process each `floodlight_activity` resource:
        pprint(floodlight_activity)

    request = service.floodlightActivities().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight activity ID.
id_ = str(0L)  # TODO: Update placeholder value.

floodlight_activity_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.floodlightActivities().patch(profileId=profile_id, id=id_, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

floodlight_activity_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.floodlightActivities().update(profileId=profile_id, body=floodlight_activity_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight activity Group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivityGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

floodlight_activity_group_body = {
    # TODO: Add desired entries to the request body.
}

request = service.floodlightActivityGroups().insert(profileId=profile_id, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.floodlightActivityGroups().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for floodlight_activity_group in response['floodlightActivityGroups']:
        # TODO: Change code below to process each `floodlight_activity_group` resource:
        pprint(floodlight_activity_group)

    request = service.floodlightActivityGroups().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight activity Group ID.
id_ = str(0L)  # TODO: Update placeholder value.

floodlight_activity_group_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.floodlightActivityGroups().patch(profileId=profile_id, id=id_, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

floodlight_activity_group_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.floodlightActivityGroups().update(profileId=profile_id, body=floodlight_activity_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight configuration ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.floodlightConfigurations().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.floodlightConfigurations().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Floodlight configuration ID.
id_ = str(0L)  # TODO: Update placeholder value.

floodlight_configuration_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.floodlightConfigurations().patch(profileId=profile_id, id=id_, body=floodlight_configuration_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

floodlight_configuration_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.floodlightConfigurations().update(profileId=profile_id, body=floodlight_configuration_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for order documents.
project_id = str(0L)  # TODO: Update placeholder value.

# Inventory item ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.inventoryItems().get(profileId=profile_id, projectId=project_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for order documents.
project_id = str(0L)  # TODO: Update placeholder value.

request = service.inventoryItems().list(profileId=profile_id, projectId=project_id)
while request is not None:
    response = request.execute()

    for inventory_item in response['inventoryItems']:
        # TODO: Change code below to process each `inventory_item` resource:
        pprint(inventory_item)

    request = service.inventoryItems().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

# Landing page ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.landingPages().delete(profileId=profile_id, campaignId=campaign_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

# Landing page ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.landingPages().get(profileId=profile_id, campaignId=campaign_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

landing_page_body = {
    # TODO: Add desired entries to the request body.
}

request = service.landingPages().insert(profileId=profile_id, campaignId=campaign_id, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

request = service.landingPages().list(profileId=profile_id, campaignId=campaign_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

# Landing page ID.
id_ = str(0L)  # TODO: Update placeholder value.

landing_page_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.landingPages().patch(profileId=profile_id, campaignId=campaign_id, id=id_, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Landing page campaign ID.
campaign_id = str(0L)  # TODO: Update placeholder value.

landing_page_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.landingPages().update(profileId=profile_id, campaignId=campaign_id, body=landing_page_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.languages().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.metros().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Mobile carrier ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.mobileCarriers().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.mobileCarriers().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Operating system version ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.operatingSystemVersions().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.operatingSystemVersions().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Operating system DART ID.
dart_id = str(0L)  # TODO: Update placeholder value.

request = service.operatingSystems().get(profileId=profile_id, dartId=dart_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.operatingSystems().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for order documents.
project_id = str(0L)  # TODO: Update placeholder value.

# Order document ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.orderDocuments().get(profileId=profile_id, projectId=project_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for order documents.
project_id = str(0L)  # TODO: Update placeholder value.

request = service.orderDocuments().list(profileId=profile_id, projectId=project_id)
while request is not None:
    response = request.execute()

    for order_document in response['orderDocuments']:
        # TODO: Change code below to process each `order_document` resource:
        pprint(order_document)

    request = service.orderDocuments().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for orders.
project_id = str(0L)  # TODO: Update placeholder value.

# Order ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.orders().get(profileId=profile_id, projectId=project_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID for orders.
project_id = str(0L)  # TODO: Update placeholder value.

request = service.orders().list(profileId=profile_id, projectId=project_id)
while request is not None:
    response = request.execute()

    for order in response['orders']:
        # TODO: Change code below to process each `order` resource:
        pprint(order)

    request = service.orders().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.placementGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_group_body = {
    # TODO: Add desired entries to the request body.
}

request = service.placementGroups().insert(profileId=profile_id, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.placementGroups().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for placement_group in response['placementGroups']:
        # TODO: Change code below to process each `placement_group` resource:
        pprint(placement_group)

    request = service.placementGroups().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement group ID.
id_ = str(0L)  # TODO: Update placeholder value.

placement_group_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.placementGroups().patch(profileId=profile_id, id=id_, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_group_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.placementGroups().update(profileId=profile_id, body=placement_group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement strategy ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.placementStrategies().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement strategy ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.placementStrategies().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_strategy_body = {
    # TODO: Add desired entries to the request body.
}

request = service.placementStrategies().insert(profileId=profile_id, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.placementStrategies().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for placement_strategy in response['placementStrategies']:
        # TODO: Change code below to process each `placement_strategy` resource:
        pprint(placement_strategy)

    request = service.placementStrategies().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement strategy ID.
id_ = str(0L)  # TODO: Update placeholder value.

placement_strategy_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.placementStrategies().patch(profileId=profile_id, id=id_, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_strategy_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.placementStrategies().update(profileId=profile_id, body=placement_strategy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.placements().generatetags(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.placements().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_body = {
    # TODO: Add desired entries to the request body.
}

request = service.placements().insert(profileId=profile_id, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.placements().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for placement in response['placements']:
        # TODO: Change code below to process each `placement` resource:
        pprint(placement)

    request = service.placements().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Placement ID.
id_ = str(0L)  # TODO: Update placeholder value.

placement_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.placements().patch(profileId=profile_id, id=id_, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

placement_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.placements().update(profileId=profile_id, body=placement_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Platform type ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.platformTypes().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.platformTypes().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Postal code ID.
code = ''  # TODO: Update placeholder value.

request = service.postalCodes().get(profileId=profile_id, code=code)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.postalCodes().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Project ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.projects().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.projects().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for project in response['projects']:
        # TODO: Change code below to process each `project` resource:
        pprint(project)

    request = service.projects().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.regions().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Remarketing list ID.
remarketing_list_id = str(0L)  # TODO: Update placeholder value.

request = service.remarketingListShares().get(profileId=profile_id, remarketingListId=remarketing_list_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Remarketing list ID.
remarketing_list_id = str(0L)  # TODO: Update placeholder value.

remarketing_list_share_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.remarketingListShares().patch(profileId=profile_id, remarketingListId=remarketing_list_id, body=remarketing_list_share_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

remarketing_list_share_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.remarketingListShares().update(profileId=profile_id, body=remarketing_list_share_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Remarketing list ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.remarketingLists().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

remarketing_list_body = {
    # TODO: Add desired entries to the request body.
}

request = service.remarketingLists().insert(profileId=profile_id, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Select only remarketing lists owned by this advertiser.
advertiser_id = str(0L)  # TODO: Update placeholder value.

request = service.remarketingLists().list(profileId=profile_id, advertiserId=advertiser_id)
while request is not None:
    response = request.execute()

    for remarketing_list in response['remarketingLists']:
        # TODO: Change code below to process each `remarketing_list` resource:
        pprint(remarketing_list)

    request = service.remarketingLists().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Remarketing list ID.
id_ = str(0L)  # TODO: Update placeholder value.

remarketing_list_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.remarketingLists().patch(profileId=profile_id, id=id_, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

remarketing_list_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.remarketingLists().update(profileId=profile_id, body=remarketing_list_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

report_body = {
    # TODO: Add desired entries to the request body.
}

request = service.reports().compatibleFields().query(profileId=profile_id, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

request = service.reports().delete(profileId=profile_id, reportId=report_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report file.
file_id = str(0L)  # TODO: Update placeholder value.

# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.reports().files().get(profileId=profile_id, reportId=report_id, fileId=file_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the parent report.
report_id = str(0L)  # TODO: Update placeholder value.

request = service.reports().files().list(profileId=profile_id, reportId=report_id)
while request is not None:
    response = request.execute()

    for file2 in response['items']:
        # TODO: Change code below to process each `file2` resource:
        pprint(file2)

    request = service.reports().files().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

request = service.reports().get(profileId=profile_id, reportId=report_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

report_body = {
    # TODO: Add desired entries to the request body.
}

request = service.reports().insert(profileId=profile_id, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.reports().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for report in response['items']:
        # TODO: Change code below to process each `report` resource:
        pprint(report)

    request = service.reports().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

report_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.reports().patch(profileId=profile_id, reportId=report_id, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

request = service.reports().run(profileId=profile_id, reportId=report_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfareporting'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The DFA user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

# The ID of the report.
report_id = str(0L)  # TODO: Update placeholder value.

report_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.reports().update(profileId=profile_id, reportId=report_id, body=report_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Site ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.sites().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

site_body = {
    # TODO: Add desired entries to the request body.
}

request = service.sites().insert(profileId=profile_id, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.sites().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for site in response['sites']:
        # TODO: Change code below to process each `site` resource:
        pprint(site)

    request = service.sites().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Site ID.
id_ = str(0L)  # TODO: Update placeholder value.

site_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.sites().patch(profileId=profile_id, id=id_, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

site_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.sites().update(profileId=profile_id, body=site_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Size ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.sizes().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

size_body = {
    # TODO: Add desired entries to the request body.
}

request = service.sizes().insert(profileId=profile_id, body=size_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.sizes().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Subaccount ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.subaccounts().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

subaccount_body = {
    # TODO: Add desired entries to the request body.
}

request = service.subaccounts().insert(profileId=profile_id, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.subaccounts().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for subaccount in response['subaccounts']:
        # TODO: Change code below to process each `subaccount` resource:
        pprint(subaccount)

    request = service.subaccounts().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Subaccount ID.
id_ = str(0L)  # TODO: Update placeholder value.

subaccount_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.subaccounts().patch(profileId=profile_id, id=id_, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

subaccount_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.subaccounts().update(profileId=profile_id, body=subaccount_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Remarketing list ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.targetableRemarketingLists().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Select only targetable remarketing lists targetable by these advertisers.
advertiser_id = str(0L)  # TODO: Update placeholder value.

request = service.targetableRemarketingLists().list(profileId=profile_id, advertiserId=advertiser_id)
while request is not None:
    response = request.execute()

    for targetable_remarketing_list in response['targetableRemarketingLists']:
        # TODO: Change code below to process each `targetable_remarketing_list` resource:
        pprint(targetable_remarketing_list)

    request = service.targetableRemarketingLists().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Targeting template ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.targetingTemplates().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

targeting_template_body = {
    # TODO: Add desired entries to the request body.
}

request = service.targetingTemplates().insert(profileId=profile_id, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.targetingTemplates().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for targeting_template in response['targetingTemplates']:
        # TODO: Change code below to process each `targeting_template` resource:
        pprint(targeting_template)

    request = service.targetingTemplates().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# Targeting template ID.
id_ = str(0L)  # TODO: Update placeholder value.

targeting_template_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.targetingTemplates().patch(profileId=profile_id, id=id_, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

targeting_template_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.targetingTemplates().update(profileId=profile_id, body=targeting_template_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#     'https://www.googleapis.com/auth/dfareporting'
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# The user profile ID.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.userProfiles().get(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#     'https://www.googleapis.com/auth/dfareporting'
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

request = service.userProfiles().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User role permission group ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.userRolePermissionGroups().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.userRolePermissionGroups().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User role permission ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.userRolePermissions().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.userRolePermissions().list(profileId=profile_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User role ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.userRoles().delete(profileId=profile_id, id=id_)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User role ID.
id_ = str(0L)  # TODO: Update placeholder value.

request = service.userRoles().get(profileId=profile_id, id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

user_role_body = {
    # TODO: Add desired entries to the request body.
}

request = service.userRoles().insert(profileId=profile_id, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

request = service.userRoles().list(profileId=profile_id)
while request is not None:
    response = request.execute()

    for user_role in response['userRoles']:
        # TODO: Change code below to process each `user_role` resource:
        pprint(user_role)

    request = service.userRoles().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

# User role ID.
id_ = str(0L)  # TODO: Update placeholder value.

user_role_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.userRoles().patch(profileId=profile_id, id=id_, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the DCM/DFA Reporting And Trafficking API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dfareporting
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/dfatrafficking'
credentials = None

service = discovery.build('dfareporting', 'v2.6', credentials=credentials)

# User profile ID associated with this request.
profile_id = str(0L)  # TODO: Update placeholder value.

user_role_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.userRoles().update(profileId=profile_id, body=user_role_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
