
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Account ID.
  summaryAccountId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountActiveAdSummaries.Get(profileId, summaryAccountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Account permission group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountPermissionGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountPermissionGroups.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Account permission ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountPermissions.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountPermissions.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User profile ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AccountUserProfiles.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AccountUserProfile{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.AccountUserProfiles.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.AccountUserProfiles.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.AccountUserProfilesListResponse) error {
    for _, accountUserProfile := range page.AccountUserProfiles {
      // TODO: Change code below to process each `accountUserProfile` resource:
      fmt.Printf("%#v\n", accountUserProfile)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User profile ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AccountUserProfile{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.AccountUserProfiles.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AccountUserProfile{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.AccountUserProfiles.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Account ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Accounts.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Accounts.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.AccountsListResponse) error {
    for _, account := range page.Accounts {
      // TODO: Change code below to process each `account` resource:
      fmt.Printf("%#v\n", account)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Account ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Account{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Accounts.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Account{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Accounts.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Ad ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Ads.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Ad{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Ads.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Ads.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.AdsListResponse) error {
    for _, ad := range page.Ads {
      // TODO: Change code below to process each `ad` resource:
      fmt.Printf("%#v\n", ad)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Ad ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Ad{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Ads.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Ad{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Ads.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser group ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.AdvertiserGroups.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.AdvertiserGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AdvertiserGroup{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.AdvertiserGroups.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.AdvertiserGroups.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.AdvertiserGroupsListResponse) error {
    for _, advertiserGroup := range page.AdvertiserGroups {
      // TODO: Change code below to process each `advertiserGroup` resource:
      fmt.Printf("%#v\n", advertiserGroup)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser group ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AdvertiserGroup{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.AdvertiserGroups.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.AdvertiserGroup{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.AdvertiserGroups.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Advertisers.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Advertiser{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Advertisers.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Advertisers.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.AdvertisersListResponse) error {
    for _, advertiser := range page.Advertisers {
      // TODO: Change code below to process each `advertiser` resource:
      fmt.Printf("%#v\n", advertiser)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Advertiser{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Advertisers.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Advertiser{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Advertisers.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Browsers.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Campaign ID in this association.
  campaignId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CampaignCreativeAssociation{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.CampaignCreativeAssociations.Insert(profileId, campaignId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Campaign ID in this association.
  campaignId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.CampaignCreativeAssociations.List(profileId, campaignId)
  if err := req.Pages(ctx, func(page *dfareporting.CampaignCreativeAssociationsListResponse) error {
    for _, campaignCreativeAssociation := range page.CampaignCreativeAssociations {
      // TODO: Change code below to process each `campaignCreativeAssociation` resource:
      fmt.Printf("%#v\n", campaignCreativeAssociation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Campaign ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Campaigns.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Default landing page name for this new campaign. Must be less than 256 characters long.
  defaultLandingPageName := ""  // TODO: Update placeholder value.

  // Default landing page URL for this new campaign.
  defaultLandingPageUrl := ""  // TODO: Update placeholder value.

  rb := &dfareporting.Campaign{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Campaigns.Insert(profileId, defaultLandingPageName, defaultLandingPageUrl, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Campaigns.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.CampaignsListResponse) error {
    for _, campaign := range page.Campaigns {
      // TODO: Change code below to process each `campaign` resource:
      fmt.Printf("%#v\n", campaign)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Campaign ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Campaign{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Campaigns.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Campaign{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Campaigns.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Change log ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.ChangeLogs.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.ChangeLogs.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.ChangeLogsListResponse) error {
    for _, changeLog := range page.ChangeLogs {
      // TODO: Change code below to process each `changeLog` resource:
      fmt.Printf("%#v\n", changeLog)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Cities.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Connection type ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.ConnectionTypes.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.ConnectionTypes.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Content category ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.ContentCategories.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Content category ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.ContentCategories.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.ContentCategory{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.ContentCategories.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.ContentCategories.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.ContentCategoriesListResponse) error {
    for _, contentCategory := range page.ContentCategories {
      // TODO: Change code below to process each `contentCategory` resource:
      fmt.Printf("%#v\n", contentCategory)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Content category ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.ContentCategory{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.ContentCategories.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.ContentCategory{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.ContentCategories.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.ConversionsBatchInsertRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Conversions.Batchinsert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DdmconversionsScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Country DART ID.
  dartId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Countries.Get(profileId, dartId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Countries.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Advertiser ID of this creative. This is a required field.
  advertiserId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeAssetMetadata{
    // TODO: Add desired fields of the request body.
  }

  // TODO: Add desired media content for upload. For more information, see
  // https://godoc.org/google.golang.org/api/dfareporting/v2.6

  resp, err := dfareportingService.CreativeAssets.Insert(profileId, advertiserId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  // Creative Field Value ID
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.CreativeFieldValues.Delete(profileId, creativeFieldId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  // Creative Field Value ID
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.CreativeFieldValues.Get(profileId, creativeFieldId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeFieldValue{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.CreativeFieldValues.Insert(profileId, creativeFieldId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.CreativeFieldValues.List(profileId, creativeFieldId)
  if err := req.Pages(ctx, func(page *dfareporting.CreativeFieldValuesListResponse) error {
    for _, creativeFieldValue := range page.CreativeFieldValues {
      // TODO: Change code below to process each `creativeFieldValue` resource:
      fmt.Printf("%#v\n", creativeFieldValue)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  // Creative Field Value ID
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeFieldValue{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.CreativeFieldValues.Patch(profileId, creativeFieldId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative field ID for this creative field value.
  creativeFieldId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeFieldValue{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.CreativeFieldValues.Update(profileId, creativeFieldId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative Field ID
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.CreativeFields.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative Field ID
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.CreativeFields.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeField{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.CreativeFields.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.CreativeFields.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.CreativeFieldsListResponse) error {
    for _, creativeField := range page.CreativeFields {
      // TODO: Change code below to process each `creativeField` resource:
      fmt.Printf("%#v\n", creativeField)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative Field ID
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeField{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.CreativeFields.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeField{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.CreativeFields.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.CreativeGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeGroup{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.CreativeGroups.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.CreativeGroups.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.CreativeGroupsListResponse) error {
    for _, creativeGroup := range page.CreativeGroups {
      // TODO: Change code below to process each `creativeGroup` resource:
      fmt.Printf("%#v\n", creativeGroup)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative group ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeGroup{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.CreativeGroups.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.CreativeGroup{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.CreativeGroups.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Creatives.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Creative{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Creatives.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Creatives.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.CreativesListResponse) error {
    for _, creative := range page.Creatives {
      // TODO: Change code below to process each `creative` resource:
      fmt.Printf("%#v\n", creative)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Creative ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Creative{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Creatives.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Creative{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Creatives.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.DimensionValueRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.DimensionValues.Query(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Directory site contact ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.DirectorySiteContacts.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.DirectorySiteContacts.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.DirectorySiteContactsListResponse) error {
    for _, directorySiteContact := range page.DirectorySiteContacts {
      // TODO: Change code below to process each `directorySiteContact` resource:
      fmt.Printf("%#v\n", directorySiteContact)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Directory site ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.DirectorySites.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.DirectorySite{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.DirectorySites.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.DirectorySites.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.DirectorySitesListResponse) error {
    for _, directorySite := range page.DirectorySites {
      // TODO: Change code below to process each `directorySite` resource:
      fmt.Printf("%#v\n", directorySite)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // ID of the object of this dynamic targeting key. This is a required field.
  objectId := int64(0)  // TODO: Update placeholder value.

  // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
  // and cannot contain commas. All characters are converted to lowercase.
  name := ""  // TODO: Update placeholder value.

  // Type of the object of this dynamic targeting key. This is a required field.
  objectType := ""  // TODO: Update placeholder value.

  if err := dfareportingService.DynamicTargetingKeys.Delete(profileId, objectId, name, objectType).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.DynamicTargetingKey{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.DynamicTargetingKeys.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.DynamicTargetingKeys.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Event tag ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.EventTags.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Event tag ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.EventTags.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.EventTag{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.EventTags.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.EventTags.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Event tag ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.EventTag{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.EventTags.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.EventTag{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.EventTags.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report file.
  fileId := int64(0)  // TODO: Update placeholder value.

  // TODO: Use `Download` in place of `Do` below to download media content. For more information, see
  // https://godoc.org/google.golang.org/api/dfareporting/v2.6#FilesGetCall.Download
  resp, err := dfareportingService.Files.Get(reportId, fileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Files.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.FileList) error {
    for _, file := range page.Items {
      // TODO: Change code below to process each `file` resource:
      fmt.Printf("%#v\n", file)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight activity ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.FloodlightActivities.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.FloodlightActivities.Generatetag(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight activity ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.FloodlightActivities.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivity{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.FloodlightActivities.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.FloodlightActivities.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.FloodlightActivitiesListResponse) error {
    for _, floodlightActivity := range page.FloodlightActivities {
      // TODO: Change code below to process each `floodlightActivity` resource:
      fmt.Printf("%#v\n", floodlightActivity)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight activity ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivity{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.FloodlightActivities.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivity{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.FloodlightActivities.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight activity Group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.FloodlightActivityGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivityGroup{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.FloodlightActivityGroups.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.FloodlightActivityGroups.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.FloodlightActivityGroupsListResponse) error {
    for _, floodlightActivityGroup := range page.FloodlightActivityGroups {
      // TODO: Change code below to process each `floodlightActivityGroup` resource:
      fmt.Printf("%#v\n", floodlightActivityGroup)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight activity Group ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivityGroup{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.FloodlightActivityGroups.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightActivityGroup{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.FloodlightActivityGroups.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight configuration ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.FloodlightConfigurations.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.FloodlightConfigurations.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Floodlight configuration ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightConfiguration{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.FloodlightConfigurations.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.FloodlightConfiguration{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.FloodlightConfigurations.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for order documents.
  projectId := int64(0)  // TODO: Update placeholder value.

  // Inventory item ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.InventoryItems.Get(profileId, projectId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for order documents.
  projectId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.InventoryItems.List(profileId, projectId)
  if err := req.Pages(ctx, func(page *dfareporting.InventoryItemsListResponse) error {
    for _, inventoryItem := range page.InventoryItems {
      // TODO: Change code below to process each `inventoryItem` resource:
      fmt.Printf("%#v\n", inventoryItem)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  // Landing page ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.LandingPages.Delete(profileId, campaignId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  // Landing page ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.LandingPages.Get(profileId, campaignId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.LandingPage{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.LandingPages.Insert(profileId, campaignId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.LandingPages.List(profileId, campaignId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  // Landing page ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.LandingPage{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.LandingPages.Patch(profileId, campaignId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Landing page campaign ID.
  campaignId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.LandingPage{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.LandingPages.Update(profileId, campaignId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Languages.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Metros.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Mobile carrier ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.MobileCarriers.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.MobileCarriers.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Operating system version ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.OperatingSystemVersions.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.OperatingSystemVersions.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Operating system DART ID.
  dartId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.OperatingSystems.Get(profileId, dartId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.OperatingSystems.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for order documents.
  projectId := int64(0)  // TODO: Update placeholder value.

  // Order document ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.OrderDocuments.Get(profileId, projectId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for order documents.
  projectId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.OrderDocuments.List(profileId, projectId)
  if err := req.Pages(ctx, func(page *dfareporting.OrderDocumentsListResponse) error {
    for _, orderDocument := range page.OrderDocuments {
      // TODO: Change code below to process each `orderDocument` resource:
      fmt.Printf("%#v\n", orderDocument)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for orders.
  projectId := int64(0)  // TODO: Update placeholder value.

  // Order ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Orders.Get(profileId, projectId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID for orders.
  projectId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Orders.List(profileId, projectId)
  if err := req.Pages(ctx, func(page *dfareporting.OrdersListResponse) error {
    for _, order := range page.Orders {
      // TODO: Change code below to process each `order` resource:
      fmt.Printf("%#v\n", order)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.PlacementGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementGroup{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.PlacementGroups.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.PlacementGroups.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.PlacementGroupsListResponse) error {
    for _, placementGroup := range page.PlacementGroups {
      // TODO: Change code below to process each `placementGroup` resource:
      fmt.Printf("%#v\n", placementGroup)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement group ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementGroup{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.PlacementGroups.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementGroup{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.PlacementGroups.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement strategy ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.PlacementStrategies.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement strategy ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.PlacementStrategies.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementStrategy{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.PlacementStrategies.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.PlacementStrategies.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.PlacementStrategiesListResponse) error {
    for _, placementStrategy := range page.PlacementStrategies {
      // TODO: Change code below to process each `placementStrategy` resource:
      fmt.Printf("%#v\n", placementStrategy)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement strategy ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementStrategy{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.PlacementStrategies.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.PlacementStrategy{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.PlacementStrategies.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Placements.Generatetags(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Placements.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Placement{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Placements.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Placements.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.PlacementsListResponse) error {
    for _, placement := range page.Placements {
      // TODO: Change code below to process each `placement` resource:
      fmt.Printf("%#v\n", placement)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Placement ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Placement{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Placements.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Placement{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Placements.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Platform type ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.PlatformTypes.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.PlatformTypes.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Postal code ID.
  code := ""  // TODO: Update placeholder value.

  resp, err := dfareportingService.PostalCodes.Get(profileId, code).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.PostalCodes.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Project ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Projects.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Projects.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.ProjectsListResponse) error {
    for _, project := range page.Projects {
      // TODO: Change code below to process each `project` resource:
      fmt.Printf("%#v\n", project)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Regions.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Remarketing list ID.
  remarketingListId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.RemarketingListShares.Get(profileId, remarketingListId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Remarketing list ID.
  remarketingListId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.RemarketingListShare{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.RemarketingListShares.Patch(profileId, remarketingListId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.RemarketingListShare{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.RemarketingListShares.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Remarketing list ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.RemarketingLists.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.RemarketingList{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.RemarketingLists.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Select only remarketing lists owned by this advertiser.
  advertiserId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.RemarketingLists.List(profileId, advertiserId)
  if err := req.Pages(ctx, func(page *dfareporting.RemarketingListsListResponse) error {
    for _, remarketingList := range page.RemarketingLists {
      // TODO: Change code below to process each `remarketingList` resource:
      fmt.Printf("%#v\n", remarketingList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Remarketing list ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.RemarketingList{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.RemarketingLists.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.RemarketingList{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.RemarketingLists.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Report{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Reports.CompatibleFields.Query(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.Reports.Delete(profileId, reportId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report file.
  fileId := int64(0)  // TODO: Update placeholder value.

  // TODO: Use `Download` in place of `Do` below to download media content. For more information, see
  // https://godoc.org/google.golang.org/api/dfareporting/v2.6#ReportsFilesGetCall.Download
  resp, err := dfareportingService.Reports.Files.Get(profileId, reportId, fileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the parent report.
  reportId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Reports.Files.List(profileId, reportId)
  if err := req.Pages(ctx, func(page *dfareporting.FileList) error {
    for _, file := range page.Items {
      // TODO: Change code below to process each `file` resource:
      fmt.Printf("%#v\n", file)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Reports.Get(profileId, reportId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Report{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Reports.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Reports.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.ReportList) error {
    for _, report := range page.Items {
      // TODO: Change code below to process each `report` resource:
      fmt.Printf("%#v\n", report)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Report{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Reports.Patch(profileId, reportId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Reports.Run(profileId, reportId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The DFA user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  // The ID of the report.
  reportId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Report{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Reports.Update(profileId, reportId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfareportingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Site ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Sites.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Site{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Sites.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Sites.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.SitesListResponse) error {
    for _, site := range page.Sites {
      // TODO: Change code below to process each `site` resource:
      fmt.Printf("%#v\n", site)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Site ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Site{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Sites.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Site{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Sites.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Size ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Sizes.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Size{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Sizes.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Sizes.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Subaccount ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.Subaccounts.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Subaccount{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.Subaccounts.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.Subaccounts.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.SubaccountsListResponse) error {
    for _, subaccount := range page.Subaccounts {
      // TODO: Change code below to process each `subaccount` resource:
      fmt.Printf("%#v\n", subaccount)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Subaccount ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Subaccount{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.Subaccounts.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.Subaccount{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.Subaccounts.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Remarketing list ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.TargetableRemarketingLists.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Select only targetable remarketing lists targetable by these advertisers.
  advertiserId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.TargetableRemarketingLists.List(profileId, advertiserId)
  if err := req.Pages(ctx, func(page *dfareporting.TargetableRemarketingListsListResponse) error {
    for _, targetableRemarketingList := range page.TargetableRemarketingLists {
      // TODO: Change code below to process each `targetableRemarketingList` resource:
      fmt.Printf("%#v\n", targetableRemarketingList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Targeting template ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.TargetingTemplates.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.TargetingTemplate{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.TargetingTemplates.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.TargetingTemplates.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.TargetingTemplatesListResponse) error {
    for _, targetingTemplate := range page.TargetingTemplates {
      // TODO: Change code below to process each `targetingTemplate` resource:
      fmt.Printf("%#v\n", targetingTemplate)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // Targeting template ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.TargetingTemplate{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.TargetingTemplates.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.TargetingTemplate{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.TargetingTemplates.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The user profile ID.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserProfiles.Get(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scopes:
  //     dfareporting.DfareportingScope
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := dfareportingService.UserProfiles.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scopes:
  //     dfareporting.DfareportingScope
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User role permission group ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserRolePermissionGroups.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserRolePermissionGroups.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User role permission ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserRolePermissions.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserRolePermissions.List(profileId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User role ID.
  id := int64(0)  // TODO: Update placeholder value.

  if err := dfareportingService.UserRoles.Delete(profileId, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User role ID.
  id := int64(0)  // TODO: Update placeholder value.

  resp, err := dfareportingService.UserRoles.Get(profileId, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.UserRole{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dfareportingService.UserRoles.Insert(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  req := dfareportingService.UserRoles.List(profileId)
  if err := req.Pages(ctx, func(page *dfareporting.UserRolesListResponse) error {
    for _, userRole := range page.UserRoles {
      // TODO: Change code below to process each `userRole` resource:
      fmt.Printf("%#v\n", userRole)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  // User role ID.
  id := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.UserRole{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := dfareportingService.UserRoles.Patch(profileId, id, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"
  "google.golang.org/api/dfareporting/v2.6"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  dfareportingService, err := dfareporting.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // User profile ID associated with this request.
  profileId := int64(0)  // TODO: Update placeholder value.

  rb := &dfareporting.UserRole{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := dfareportingService.UserRoles.Update(profileId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx context.Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //     dfareporting.DfatraffickingScope
  return nil, errors.New("not implemented")
}
