
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Input;
import com.google.api.services.prediction.model.Output;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `predict` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The name of a hosted model.
    String hostedModelName = "{MY-HOSTED-MODEL-NAME}";


    Input requestBody = new Input();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Prediction.Hostedmodels.Predict request = predictionService.hostedmodels().predict(project, hostedModelName, requestBody);
    Output response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Analyze;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `analyze` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The unique name for the predictive model.
    String id = "{MY-ID}";


    Prediction.Trainedmodels.Analyze request = predictionService.trainedmodels().analyze(project, id);
    Analyze response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The unique name for the predictive model.
    String id = "{MY-ID}";


    Prediction.Trainedmodels.Delete request = predictionService.trainedmodels().delete(project, id);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Insert2;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The unique name for the predictive model.
    String id = "{MY-ID}";


    Prediction.Trainedmodels.Get request = predictionService.trainedmodels().get(project, id);
    Insert2 response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Insert;
import com.google.api.services.prediction.model.Insert2;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";


    Insert requestBody = new Insert();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Prediction.Trainedmodels.Insert request = predictionService.trainedmodels().insert(project, requestBody);
    Insert2 response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Insert2;
import com.google.api.services.prediction.model.List;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";


    Prediction.Trainedmodels.List request = predictionService.trainedmodels().list(project);
    List response;
    do {
      response = request.execute();
      if (response.getItems() == null)
        continue;

      for (Insert2 insert2 : response.getItems()) {
        // TODO: Change code below to process each `insert2` resource:
        System.out.println(insert2);
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Input;
import com.google.api.services.prediction.model.Output;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `predict` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The unique name for the predictive model.
    String id = "{MY-ID}";


    Input requestBody = new Input();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Prediction.Trainedmodels.Predict request = predictionService.trainedmodels().predict(project, id, requestBody);
    Output response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/prediction/v1.6/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.prediction.Prediction;
import com.google.api.services.prediction.model.Insert2;
import com.google.api.services.prediction.model.Update;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class PredictionExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Prediction predictionService = new Prediction.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // The project associated with the model.
    String project = "{MY-PROJECT}";

    // The unique name for the predictive model.
    String id = "{MY-ID}";


    Update requestBody = new Update();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Prediction.Trainedmodels.Update request = predictionService.trainedmodels().update(project, id, requestBody);
    Insert2 response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
