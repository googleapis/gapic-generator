
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Account ID.
$summaryAccountId = '0';


$response = $service->accountActiveAdSummaries->get($profileId, $summaryAccountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Account permission group ID.
$id = '0';


$response = $service->accountPermissionGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAccountPermissionGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->accountPermissionGroups->listAccountPermissionGroups($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAccountPermissionGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Account permission ID.
$id = '0';


$response = $service->accountPermissions->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAccountPermissions` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->accountPermissions->listAccountPermissions($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAccountPermissions` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// User profile ID.
$id = '0';


$response = $service->accountUserProfiles->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_AccountUserProfile();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->accountUserProfiles->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAccountUserProfiles` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->accountUserProfiles->listAccountUserProfiles($profileId, $optParams);

  foreach ($response['accountUserProfiles'] as $account_user_profile) {
    // TODO: Change code below to process each `account_user_profile` resource:
    echo '<pre>', var_export($account_user_profile, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAccountUserProfiles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// User profile ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_AccountUserProfile();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->accountUserProfiles->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_AccountUserProfile();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->accountUserProfiles->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Account ID.
$id = '0';


$response = $service->accounts->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAccounts` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->accounts->listAccounts($profileId, $optParams);

  foreach ($response['accounts'] as $account) {
    // TODO: Change code below to process each `account` resource:
    echo '<pre>', var_export($account, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAccounts` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Account ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Account();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->accounts->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Account();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->accounts->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Ad ID.
$id = '0';


$response = $service->ads->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Ad();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->ads->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAds` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->ads->listAds($profileId, $optParams);

  foreach ($response['ads'] as $ad) {
    // TODO: Change code below to process each `ad` resource:
    echo '<pre>', var_export($ad, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAds` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Ad ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Ad();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->ads->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Ad();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->ads->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser group ID.
$id = '0';


$service->advertiserGroups->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser group ID.
$id = '0';


$response = $service->advertiserGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_AdvertiserGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->advertiserGroups->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAdvertiserGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->advertiserGroups->listAdvertiserGroups($profileId, $optParams);

  foreach ($response['advertiserGroups'] as $advertiser_group) {
    // TODO: Change code below to process each `advertiser_group` resource:
    echo '<pre>', var_export($advertiser_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAdvertiserGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser group ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_AdvertiserGroup();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->advertiserGroups->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_AdvertiserGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->advertiserGroups->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser ID.
$id = '0';


$response = $service->advertisers->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Advertiser();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->advertisers->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listAdvertisers` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->advertisers->listAdvertisers($profileId, $optParams);

  foreach ($response['advertisers'] as $advertiser) {
    // TODO: Change code below to process each `advertiser` resource:
    echo '<pre>', var_export($advertiser, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAdvertisers` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Advertiser();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->advertisers->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Advertiser();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->advertisers->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listBrowsers` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->browsers->listBrowsers($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listBrowsers` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';

// Campaign ID in this association.
$campaignId = '0';


$requestBody = new Google_Service_Dfareporting_CampaignCreativeAssociation();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->campaignCreativeAssociations->insert($profileId, $campaignId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listCampaignCreativeAssociations` method:

// User profile ID associated with this request.
$profileId = '0';

// Campaign ID in this association.
$campaignId = '0';


$optParams = array();
do {
  $response = $service->campaignCreativeAssociations->listCampaignCreativeAssociations($profileId, $campaignId, $optParams);

  foreach ($response['campaignCreativeAssociations'] as $campaign_creative_association) {
    // TODO: Change code below to process each `campaign_creative_association` resource:
    echo '<pre>', var_export($campaign_creative_association, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCampaignCreativeAssociations` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Campaign ID.
$id = '0';


$response = $service->campaigns->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';

// Default landing page name for this new campaign. Must be less than 256 characters long.
$defaultLandingPageName = '{MY-DEFAULT-LANDING-PAGE-NAME}';

// Default landing page URL for this new campaign.
$defaultLandingPageUrl = '{MY-DEFAULT-LANDING-PAGE-URL}';


$requestBody = new Google_Service_Dfareporting_Campaign();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->campaigns->insert($profileId, $defaultLandingPageName, $defaultLandingPageUrl, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCampaigns` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->campaigns->listCampaigns($profileId, $optParams);

  foreach ($response['campaigns'] as $campaign) {
    // TODO: Change code below to process each `campaign` resource:
    echo '<pre>', var_export($campaign, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCampaigns` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Campaign ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Campaign();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->campaigns->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Campaign();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->campaigns->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Change log ID.
$id = '0';


$response = $service->changeLogs->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listChangeLogs` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->changeLogs->listChangeLogs($profileId, $optParams);

  foreach ($response['changeLogs'] as $change_log) {
    // TODO: Change code below to process each `change_log` resource:
    echo '<pre>', var_export($change_log, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listChangeLogs` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCities` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->cities->listCities($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCities` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Connection type ID.
$id = '0';


$response = $service->connectionTypes->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listConnectionTypes` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->connectionTypes->listConnectionTypes($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listConnectionTypes` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Content category ID.
$id = '0';


$service->contentCategories->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Content category ID.
$id = '0';


$response = $service->contentCategories->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_ContentCategory();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->contentCategories->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listContentCategories` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->contentCategories->listContentCategories($profileId, $optParams);

  foreach ($response['contentCategories'] as $content_category) {
    // TODO: Change code below to process each `content_category` resource:
    echo '<pre>', var_export($content_category, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listContentCategories` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Content category ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_ContentCategory();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->contentCategories->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_ContentCategory();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->contentCategories->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `batchinsert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_ConversionsBatchInsertRequest();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->conversions->batchinsert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `batchinsert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/ddmconversions
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Country DART ID.
$dartId = '0';


$response = $service->countries->get($profileId, $dartId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCountries` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->countries->listCountries($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCountries` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';

// Advertiser ID of this creative. This is a required field.
$advertiserId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeAssetMetadata();
// TODO: Assign values to desired properties of the `requestBody` object.


// TODO: Add desired media content for upload. For more information, see:
// https://developers.google.com/api-client-library/php/guide/media_upload


$response = $service->creativeAssets->insert($profileId, $advertiserId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';

// Creative Field Value ID
$id = '0';


$service->creativeFieldValues->delete($profileId, $creativeFieldId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';

// Creative Field Value ID
$id = '0';


$response = $service->creativeFieldValues->get($profileId, $creativeFieldId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeFieldValue();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeFieldValues->insert($profileId, $creativeFieldId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listCreativeFieldValues` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';


$optParams = array();
do {
  $response = $service->creativeFieldValues->listCreativeFieldValues($profileId, $creativeFieldId, $optParams);

  foreach ($response['creativeFieldValues'] as $creative_field_value) {
    // TODO: Change code below to process each `creative_field_value` resource:
    echo '<pre>', var_export($creative_field_value, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCreativeFieldValues` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';

// Creative Field Value ID
$id = '0';


$requestBody = new Google_Service_Dfareporting_CreativeFieldValue();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->creativeFieldValues->patch($profileId, $creativeFieldId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative field ID for this creative field value.
$creativeFieldId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeFieldValue();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeFieldValues->update($profileId, $creativeFieldId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative Field ID
$id = '0';


$service->creativeFields->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative Field ID
$id = '0';


$response = $service->creativeFields->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeField();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeFields->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCreativeFields` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->creativeFields->listCreativeFields($profileId, $optParams);

  foreach ($response['creativeFields'] as $creative_field) {
    // TODO: Change code below to process each `creative_field` resource:
    echo '<pre>', var_export($creative_field, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCreativeFields` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative Field ID
$id = '0';


$requestBody = new Google_Service_Dfareporting_CreativeField();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->creativeFields->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeField();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeFields->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative group ID.
$id = '0';


$response = $service->creativeGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeGroups->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCreativeGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->creativeGroups->listCreativeGroups($profileId, $optParams);

  foreach ($response['creativeGroups'] as $creative_group) {
    // TODO: Change code below to process each `creative_group` resource:
    echo '<pre>', var_export($creative_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCreativeGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative group ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_CreativeGroup();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->creativeGroups->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_CreativeGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creativeGroups->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative ID.
$id = '0';


$response = $service->creatives->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Creative();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creatives->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listCreatives` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->creatives->listCreatives($profileId, $optParams);

  foreach ($response['creatives'] as $creative) {
    // TODO: Change code below to process each `creative` resource:
    echo '<pre>', var_export($creative, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCreatives` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Creative ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Creative();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->creatives->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Creative();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creatives->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `query` method:

// The DFA user profile ID.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_DimensionValueRequest();
// TODO: Assign values to desired properties of the `requestBody` object.


$optParams = array();
do {
  $response = $service->dimensionValues->query($profileId, $requestBody, $optParams);

  foreach ($response['items'] as $dimension_value) {
    // TODO: Change code below to process each `dimension_value` resource:
    echo '<pre>', var_export($dimension_value, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `query` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Directory site contact ID.
$id = '0';


$response = $service->directorySiteContacts->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listDirectorySiteContacts` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->directorySiteContacts->listDirectorySiteContacts($profileId, $optParams);

  foreach ($response['directorySiteContacts'] as $directory_site_contact) {
    // TODO: Change code below to process each `directory_site_contact` resource:
    echo '<pre>', var_export($directory_site_contact, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listDirectorySiteContacts` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Directory site ID.
$id = '0';


$response = $service->directorySites->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_DirectorySite();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->directorySites->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listDirectorySites` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->directorySites->listDirectorySites($profileId, $optParams);

  foreach ($response['directorySites'] as $directory_site) {
    // TODO: Change code below to process each `directory_site` resource:
    echo '<pre>', var_export($directory_site, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listDirectorySites` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// ID of the object of this dynamic targeting key. This is a required field.
$objectId = '0';

// Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
// and cannot contain commas. All characters are converted to lowercase.
$name = '{MY-NAME}';

// Type of the object of this dynamic targeting key. This is a required field.
$objectType = '{MY-OBJECT-TYPE}';


$service->dynamicTargetingKeys->delete($profileId, $objectId, $name, $objectType);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_DynamicTargetingKey();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->dynamicTargetingKeys->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listDynamicTargetingKeys` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->dynamicTargetingKeys->listDynamicTargetingKeys($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listDynamicTargetingKeys` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Event tag ID.
$id = '0';


$service->eventTags->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Event tag ID.
$id = '0';


$response = $service->eventTags->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_EventTag();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->eventTags->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listEventTags` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->eventTags->listEventTags($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listEventTags` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Event tag ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_EventTag();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->eventTags->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_EventTag();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->eventTags->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The ID of the report.
$reportId = '0';

// The ID of the report file.
$fileId = '0';


$optParams = array();

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->files->get($reportId, $fileId, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listFiles` method:

// The DFA profile ID.
$profileId = '0';


$optParams = array();
do {
  $response = $service->files->listFiles($profileId, $optParams);

  foreach ($response['items'] as $file) {
    // TODO: Change code below to process each `file` resource:
    echo '<pre>', var_export($file, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listFiles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight activity ID.
$id = '0';


$service->floodlightActivities->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `generatetag` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->floodlightActivities->generatetag($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `generatetag` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight activity ID.
$id = '0';


$response = $service->floodlightActivities->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivity();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->floodlightActivities->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listFloodlightActivities` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->floodlightActivities->listFloodlightActivities($profileId, $optParams);

  foreach ($response['floodlightActivities'] as $floodlight_activity) {
    // TODO: Change code below to process each `floodlight_activity` resource:
    echo '<pre>', var_export($floodlight_activity, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listFloodlightActivities` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight activity ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivity();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->floodlightActivities->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivity();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->floodlightActivities->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight activity Group ID.
$id = '0';


$response = $service->floodlightActivityGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivityGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->floodlightActivityGroups->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listFloodlightActivityGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->floodlightActivityGroups->listFloodlightActivityGroups($profileId, $optParams);

  foreach ($response['floodlightActivityGroups'] as $floodlight_activity_group) {
    // TODO: Change code below to process each `floodlight_activity_group` resource:
    echo '<pre>', var_export($floodlight_activity_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listFloodlightActivityGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight activity Group ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivityGroup();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->floodlightActivityGroups->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightActivityGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->floodlightActivityGroups->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight configuration ID.
$id = '0';


$response = $service->floodlightConfigurations->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listFloodlightConfigurations` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->floodlightConfigurations->listFloodlightConfigurations($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listFloodlightConfigurations` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Floodlight configuration ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightConfiguration();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->floodlightConfigurations->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_FloodlightConfiguration();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->floodlightConfigurations->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for order documents.
$projectId = '0';

// Inventory item ID.
$id = '0';


$response = $service->inventoryItems->get($profileId, $projectId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listInventoryItems` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for order documents.
$projectId = '0';


$optParams = array();
do {
  $response = $service->inventoryItems->listInventoryItems($profileId, $projectId, $optParams);

  foreach ($response['inventoryItems'] as $inventory_item) {
    // TODO: Change code below to process each `inventory_item` resource:
    echo '<pre>', var_export($inventory_item, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listInventoryItems` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';

// Landing page ID.
$id = '0';


$service->landingPages->delete($profileId, $campaignId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';

// Landing page ID.
$id = '0';


$response = $service->landingPages->get($profileId, $campaignId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';


$requestBody = new Google_Service_Dfareporting_LandingPage();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->landingPages->insert($profileId, $campaignId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listLandingPages` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';


$response = $service->landingPages->listLandingPages($profileId, $campaignId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listLandingPages` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';

// Landing page ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_LandingPage();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->landingPages->patch($profileId, $campaignId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// User profile ID associated with this request.
$profileId = '0';

// Landing page campaign ID.
$campaignId = '0';


$requestBody = new Google_Service_Dfareporting_LandingPage();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->landingPages->update($profileId, $campaignId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listLanguages` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->languages->listLanguages($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listLanguages` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listMetros` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->metros->listMetros($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listMetros` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Mobile carrier ID.
$id = '0';


$response = $service->mobileCarriers->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listMobileCarriers` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->mobileCarriers->listMobileCarriers($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listMobileCarriers` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Operating system version ID.
$id = '0';


$response = $service->operatingSystemVersions->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listOperatingSystemVersions` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->operatingSystemVersions->listOperatingSystemVersions($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listOperatingSystemVersions` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Operating system DART ID.
$dartId = '0';


$response = $service->operatingSystems->get($profileId, $dartId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listOperatingSystems` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->operatingSystems->listOperatingSystems($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listOperatingSystems` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for order documents.
$projectId = '0';

// Order document ID.
$id = '0';


$response = $service->orderDocuments->get($profileId, $projectId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listOrderDocuments` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for order documents.
$projectId = '0';


$optParams = array();
do {
  $response = $service->orderDocuments->listOrderDocuments($profileId, $projectId, $optParams);

  foreach ($response['orderDocuments'] as $order_document) {
    // TODO: Change code below to process each `order_document` resource:
    echo '<pre>', var_export($order_document, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listOrderDocuments` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for orders.
$projectId = '0';

// Order ID.
$id = '0';


$response = $service->orders->get($profileId, $projectId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listOrders` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID for orders.
$projectId = '0';


$optParams = array();
do {
  $response = $service->orders->listOrders($profileId, $projectId, $optParams);

  foreach ($response['orders'] as $order) {
    // TODO: Change code below to process each `order` resource:
    echo '<pre>', var_export($order, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listOrders` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement group ID.
$id = '0';


$response = $service->placementGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_PlacementGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placementGroups->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listPlacementGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->placementGroups->listPlacementGroups($profileId, $optParams);

  foreach ($response['placementGroups'] as $placement_group) {
    // TODO: Change code below to process each `placement_group` resource:
    echo '<pre>', var_export($placement_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPlacementGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement group ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_PlacementGroup();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->placementGroups->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_PlacementGroup();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placementGroups->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement strategy ID.
$id = '0';


$service->placementStrategies->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement strategy ID.
$id = '0';


$response = $service->placementStrategies->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_PlacementStrategy();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placementStrategies->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listPlacementStrategies` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->placementStrategies->listPlacementStrategies($profileId, $optParams);

  foreach ($response['placementStrategies'] as $placement_strategy) {
    // TODO: Change code below to process each `placement_strategy` resource:
    echo '<pre>', var_export($placement_strategy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPlacementStrategies` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement strategy ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_PlacementStrategy();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->placementStrategies->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_PlacementStrategy();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placementStrategies->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `generatetags` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->placements->generatetags($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `generatetags` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement ID.
$id = '0';


$response = $service->placements->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Placement();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placements->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listPlacements` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->placements->listPlacements($profileId, $optParams);

  foreach ($response['placements'] as $placement) {
    // TODO: Change code below to process each `placement` resource:
    echo '<pre>', var_export($placement, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPlacements` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Placement ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Placement();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->placements->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Placement();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->placements->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Platform type ID.
$id = '0';


$response = $service->platformTypes->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listPlatformTypes` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->platformTypes->listPlatformTypes($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPlatformTypes` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Postal code ID.
$code = '{MY-CODE}';


$response = $service->postalCodes->get($profileId, $code);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listPostalCodes` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->postalCodes->listPostalCodes($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPostalCodes` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Project ID.
$id = '0';


$response = $service->projects->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listProjects` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->projects->listProjects($profileId, $optParams);

  foreach ($response['projects'] as $project) {
    // TODO: Change code below to process each `project` resource:
    echo '<pre>', var_export($project, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listProjects` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listRegions` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->regions->listRegions($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listRegions` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Remarketing list ID.
$remarketingListId = '0';


$response = $service->remarketingListShares->get($profileId, $remarketingListId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Remarketing list ID.
$remarketingListId = '0';


$requestBody = new Google_Service_Dfareporting_RemarketingListShare();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->remarketingListShares->patch($profileId, $remarketingListId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_RemarketingListShare();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->remarketingListShares->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Remarketing list ID.
$id = '0';


$response = $service->remarketingLists->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_RemarketingList();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->remarketingLists->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listRemarketingLists` method:

// User profile ID associated with this request.
$profileId = '0';

// Select only remarketing lists owned by this advertiser.
$advertiserId = '0';


$optParams = array();
do {
  $response = $service->remarketingLists->listRemarketingLists($profileId, $advertiserId, $optParams);

  foreach ($response['remarketingLists'] as $remarketing_list) {
    // TODO: Change code below to process each `remarketing_list` resource:
    echo '<pre>', var_export($remarketing_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listRemarketingLists` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Remarketing list ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_RemarketingList();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->remarketingLists->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_RemarketingList();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->remarketingLists->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `query` method:

// The DFA user profile ID.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Report();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->reports_compatibleFields->query($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `query` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// The DFA user profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';


$service->reports->delete($profileId, $reportId);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The DFA profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';

// The ID of the report file.
$fileId = '0';


$optParams = array();

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->reports_files->get($profileId, $reportId, $fileId, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listReportsFiles` method:

// The DFA profile ID.
$profileId = '0';

// The ID of the parent report.
$reportId = '0';


$optParams = array();
do {
  $response = $service->reports_files->listReportsFiles($profileId, $reportId, $optParams);

  foreach ($response['items'] as $file) {
    // TODO: Change code below to process each `file` resource:
    echo '<pre>', var_export($file, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listReportsFiles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The DFA user profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';


$response = $service->reports->get($profileId, $reportId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// The DFA user profile ID.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Report();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->reports->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listReports` method:

// The DFA user profile ID.
$profileId = '0';


$optParams = array();
do {
  $response = $service->reports->listReports($profileId, $optParams);

  foreach ($response['items'] as $report) {
    // TODO: Change code below to process each `report` resource:
    echo '<pre>', var_export($report, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listReports` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// The DFA user profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';


$requestBody = new Google_Service_Dfareporting_Report();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->reports->patch($profileId, $reportId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `run` method:

// The DFA profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';


$response = $service->reports->run($profileId, $reportId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `run` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// The DFA user profile ID.
$profileId = '0';

// The ID of the report.
$reportId = '0';


$requestBody = new Google_Service_Dfareporting_Report();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->reports->update($profileId, $reportId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Site ID.
$id = '0';


$response = $service->sites->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Site();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->sites->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listSites` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->sites->listSites($profileId, $optParams);

  foreach ($response['sites'] as $site) {
    // TODO: Change code below to process each `site` resource:
    echo '<pre>', var_export($site, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listSites` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Site ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Site();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->sites->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Site();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->sites->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Size ID.
$id = '0';


$response = $service->sizes->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Size();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->sizes->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listSizes` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->sizes->listSizes($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listSizes` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Subaccount ID.
$id = '0';


$response = $service->subaccounts->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Subaccount();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->subaccounts->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listSubaccounts` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->subaccounts->listSubaccounts($profileId, $optParams);

  foreach ($response['subaccounts'] as $subaccount) {
    // TODO: Change code below to process each `subaccount` resource:
    echo '<pre>', var_export($subaccount, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listSubaccounts` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Subaccount ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_Subaccount();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->subaccounts->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_Subaccount();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->subaccounts->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Remarketing list ID.
$id = '0';


$response = $service->targetableRemarketingLists->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `listTargetableRemarketingLists` method:

// User profile ID associated with this request.
$profileId = '0';

// Select only targetable remarketing lists targetable by these advertisers.
$advertiserId = '0';


$optParams = array();
do {
  $response = $service->targetableRemarketingLists->listTargetableRemarketingLists($profileId, $advertiserId, $optParams);

  foreach ($response['targetableRemarketingLists'] as $targetable_remarketing_list) {
    // TODO: Change code below to process each `targetable_remarketing_list` resource:
    echo '<pre>', var_export($targetable_remarketing_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listTargetableRemarketingLists` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// Targeting template ID.
$id = '0';


$response = $service->targetingTemplates->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_TargetingTemplate();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetingTemplates->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listTargetingTemplates` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->targetingTemplates->listTargetingTemplates($profileId, $optParams);

  foreach ($response['targetingTemplates'] as $targeting_template) {
    // TODO: Change code below to process each `targeting_template` resource:
    echo '<pre>', var_export($targeting_template, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listTargetingTemplates` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// Targeting template ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_TargetingTemplate();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->targetingTemplates->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_TargetingTemplate();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetingTemplates->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The user profile ID.
$profileId = '0';


$response = $service->userProfiles->get($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


$response = $service->userProfiles->listUserProfiles();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listUserProfiles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfareporting
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// User role permission group ID.
$id = '0';


$response = $service->userRolePermissionGroups->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listUserRolePermissionGroups` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->userRolePermissionGroups->listUserRolePermissionGroups($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listUserRolePermissionGroups` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// User role permission ID.
$id = '0';


$response = $service->userRolePermissions->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listUserRolePermissions` method:

// User profile ID associated with this request.
$profileId = '0';


$response = $service->userRolePermissions->listUserRolePermissions($profileId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listUserRolePermissions` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// User profile ID associated with this request.
$profileId = '0';

// User role ID.
$id = '0';


$service->userRoles->delete($profileId, $id);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// User profile ID associated with this request.
$profileId = '0';

// User role ID.
$id = '0';


$response = $service->userRoles->get($profileId, $id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_UserRole();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->userRoles->insert($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `listUserRoles` method:

// User profile ID associated with this request.
$profileId = '0';


$optParams = array();
do {
  $response = $service->userRoles->listUserRoles($profileId, $optParams);

  foreach ($response['userRoles'] as $user_role) {
    // TODO: Change code below to process each `user_role` resource:
    echo '<pre>', var_export($user_role, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listUserRoles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// User profile ID associated with this request.
$profileId = '0';

// User role ID.
$id = '0';


$requestBody = new Google_Service_Dfareporting_UserRole();
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->userRoles->patch($profileId, $id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Dfareporting($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// User profile ID associated with this request.
$profileId = '0';


$requestBody = new Google_Service_Dfareporting_UserRole();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->userRoles->update($profileId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/dfatrafficking
  return null;
}
?>
