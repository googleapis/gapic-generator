
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the application to get. For example: "apps/myapp".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. The name of the operation resource.
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    operationsId: "{MY-OPERATIONS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.operations.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. The name of the operation collection.
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.operations.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var operationsPage = response['operations'];
    if (!operationsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < operationsPage.length; i++) {
      // TODO: Use operationsPage
      console.log(JSON.stringify(operationsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      appengine.apps.operations.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var servicesPage = response['services'];
    if (!servicesPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < servicesPage.length; i++) {
      // TODO: Use servicesPage
      console.log(JSON.stringify(servicesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      appengine.apps.services.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties to be changed.
    },

    auth: authClient
  };

  appengine.apps.services.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  appengine.apps.services.versions.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    versionsId: "{MY-VERSIONS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.versions.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    versionsId: "{MY-VERSIONS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.versions.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    versionsId: "{MY-VERSIONS-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.versions.instances.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var instancesPage = response['instances'];
    if (!instancesPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < instancesPage.length; i++) {
      // TODO: Use instancesPage
      console.log(JSON.stringify(instancesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      appengine.apps.services.versions.instances.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  appengine.apps.services.versions.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var versionsPage = response['versions'];
    if (!versionsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < versionsPage.length; i++) {
      // TODO: Use versionsPage
      console.log(JSON.stringify(versionsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      appengine.apps.services.versions.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var appengine = google.appengine('v1beta5');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Part of `name`. Name of the resource to update. For example:
    // "apps/myapp/services/default/versions/1".
    appsId: "{MY-APPS-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    servicesId: "{MY-SERVICES-ID}", // TODO: Update placeholder value(s).

    // Part of `name`. See documentation of `appsId`.
    versionsId: "{MY-VERSIONS-ID}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties to be changed.
    },

    auth: authClient
  };

  appengine.apps.services.versions.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
