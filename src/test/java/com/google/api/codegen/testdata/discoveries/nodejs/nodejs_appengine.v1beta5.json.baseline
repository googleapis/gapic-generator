
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // Part of `name`. Name of the application to get. For example: "apps/myapp".
    appsId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // Part of `name`. The name of the operation resource.
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    operationsId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.operations.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Part of `name`. The name of the operation collection.
    appsId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        appengine.apps.operations.list(request, recur);
      }
    }
  };

  appengine.apps.operations.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.services.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.services.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Part of `name`. Name of the resource requested. For example: "apps/myapp".
    appsId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        appengine.apps.services.list(request, recur);
      }
    }
  };

  appengine.apps.services.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  appengine.apps.services.patch(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  appengine.apps.services.versions.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Part of `name`. See documentation of `appsId`.
    versionsId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.services.versions.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Part of `name`. See documentation of `appsId`.
    versionsId: "",
    // Auth client
    auth: authClient
  };

  appengine.apps.services.versions.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Part of `name`. See documentation of `appsId`.
    versionsId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        appengine.apps.services.versions.instances.list(request, recur);
      }
    }
  };

  appengine.apps.services.versions.instances.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        appengine.apps.services.versions.list(request, recur);
      }
    }
  };

  appengine.apps.services.versions.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var appengine = google.appengine('v1beta5');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

    // Part of `name`. Name of the resource to update. For example:
    // "apps/myapp/services/default/versions/1".
    appsId: "",
    // Part of `name`. See documentation of `appsId`.
    servicesId: "",
    // Part of `name`. See documentation of `appsId`.
    versionsId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  appengine.apps.services.versions.patch(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
