
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:

# * The project id. The value can be the numeric project ID or string-based project name.
project = ''

metric_descriptor_body = {
# TODO: Add desired entries of the 'metric_descriptor_body' dict
}

request = service.metricDescriptors().create(project=project, body=metric_descriptor_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * The project ID to which the metric belongs.
project = ''

# * Name of the metric.
metric = ''

request = service.metricDescriptors().delete(project=project, metric=metric)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The project id. The value can be the numeric project ID or string-based project name.
project = ''

metricDescriptors = service.metricDescriptors()
request = metricDescriptors.list(project=project)
while request is not None:
    response = request.execute()

    for metric_descriptor in response['metrics']:
        # TODO: Add code here to process each 'metric_descriptor' resource

    request = metricDescriptors.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The project ID to which this time series belongs. The value can be the numeric project ID or
#   string-based project name.
project = ''

# * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
#   compute.googleapis.com/instance/disk/read_ops_count.
metric = ''

# * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''

timeseries = service.timeseries()
request = timeseries.list(project=project, metric=metric, youngest=youngest)
while request is not None:
    response = request.execute()

    for timeseries in response['timeseries']:
        # TODO: Add code here to process each 'timeseries' resource

    request = timeseries.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'write' method:

# * The project ID. The value can be the numeric project ID or string-based project name.
project = ''

write_timeseries_request_body = {
# TODO: Add desired entries of the 'write_timeseries_request_body' dict
}

request = service.timeseries().write(project=project, body=write_timeseries_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The project ID to which this time series belongs. The value can be the numeric project ID or
#   string-based project name.
project = ''

# * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
#   compute.googleapis.com/instance/disk/read_ops_count.
metric = ''

# * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''

timeseriesDescriptors = service.timeseriesDescriptors()
request = timeseriesDescriptors.list(project=project, metric=metric, youngest=youngest)
while request is not None:
    response = request.execute()

    for timeseries_descriptor in response['timeseries']:
        # TODO: Add code here to process each 'timeseries_descriptor' resource

    request = timeseriesDescriptors.list_next(previous_request=request, previous_response=response)
