
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project id. The value can be the numeric project ID or string-based project name.
project = 'my-project'  # TODO: Update placeholder value.

metric_descriptor_body = {
    # TODO: Add desired entries to the request body.
}

request = service.metricDescriptors().create(project=project, body=metric_descriptor_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project ID to which the metric belongs.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the metric.
metric = 'my-metric'  # TODO: Update placeholder value.

request = service.metricDescriptors().delete(project=project, metric=metric)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project id. The value can be the numeric project ID or string-based project name.
project = 'my-project'  # TODO: Update placeholder value.

list_metric_descriptors_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.metricDescriptors().list(project=project, body=list_metric_descriptors_request_body)
while request is not None:
    response = request.execute()

    for metric_descriptor in response['metrics']:
        # TODO: Change code below to process each `metric_descriptor` resource:
        pprint(metric_descriptor)

    request = service.metricDescriptors().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project ID to which this time series belongs. The value can be the numeric project ID or
# string-based project name.
project = 'my-project'  # TODO: Update placeholder value.

# Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
# compute.googleapis.com/instance/disk/read_ops_count.
metric = 'my-metric'  # TODO: Update placeholder value.

# End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''  # TODO: Update placeholder value.

list_timeseries_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.timeseries().list(project=project, metric=metric, youngest=youngest, body=list_timeseries_request_body)
while request is not None:
    response = request.execute()

    for timeseries in response['timeseries']:
        # TODO: Change code below to process each `timeseries` resource:
        pprint(timeseries)

    request = service.timeseries().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project ID. The value can be the numeric project ID or string-based project name.
project = 'my-project'  # TODO: Update placeholder value.

write_timeseries_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.timeseries().write(project=project, body=write_timeseries_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Monitoring API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudmonitoring
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudmonitoring', 'v2beta2', credentials=credentials)

# The project ID to which this time series belongs. The value can be the numeric project ID or
# string-based project name.
project = 'my-project'  # TODO: Update placeholder value.

# Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
# compute.googleapis.com/instance/disk/read_ops_count.
metric = 'my-metric'  # TODO: Update placeholder value.

# End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''  # TODO: Update placeholder value.

list_timeseries_descriptors_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.timeseriesDescriptors().list(project=project, metric=metric, youngest=youngest, body=list_timeseries_descriptors_request_body)
while request is not None:
    response = request.execute()

    for timeseries_descriptor in response['timeseries']:
        # TODO: Change code below to process each `timeseries_descriptor` resource:
        pprint(timeseries_descriptor)

    request = service.timeseriesDescriptors().list_next(previous_request=request, previous_response=response)
