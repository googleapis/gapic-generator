
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'cancelPreview' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    requestBody = &deploymentmanager.DeploymentsCancelPreviewRequest{}
  )

  response, err := client.Deployments.CancelPreview(project, deployment, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""
  )

  response, err := client.Deployments.Delete(project, deployment).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""
  )

  response, err := client.Deployments.Get(project, deployment).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // The project ID for this request.
    project = ""

    requestBody = &deploymentmanager.Deployment{}
  )

  response, err := client.Deployments.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID for this request.
    project = ""
  )

  fn := func(page *deploymentmanager.DeploymentsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Deployments {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Deployments.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    requestBody = &deploymentmanager.Deployment{}
  )

  response, err := client.Deployments.Patch(project, deployment, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'stop' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    requestBody = &deploymentmanager.DeploymentsStopRequest{}
  )

  response, err := client.Deployments.Stop(project, deployment, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    requestBody = &deploymentmanager.Deployment{}
  )

  response, err := client.Deployments.Update(project, deployment, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    // The name of the manifest for this request.
    manifest = ""
  )

  response, err := client.Manifests.Get(project, deployment, manifest).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""
  )

  fn := func(page *deploymentmanager.ManifestsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Manifests {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Manifests.List(project, deployment).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the operation for this request.
    operation = ""
  )

  response, err := client.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID for this request.
    project = ""
  )

  fn := func(page *deploymentmanager.OperationsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Operations {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Operations.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""

    // The name of the resource for this request.
    resource = ""
  )

  response, err := client.Resources.Get(project, deployment, resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID for this request.
    project = ""

    // The name of the deployment for this request.
    deployment = ""
  )

  fn := func(page *deploymentmanager.ResourcesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Resources {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Resources.List(project, deployment).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/deploymentmanager/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID for this request.
    project = ""
  )

  fn := func(page *deploymentmanager.TypesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Types {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Types.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
