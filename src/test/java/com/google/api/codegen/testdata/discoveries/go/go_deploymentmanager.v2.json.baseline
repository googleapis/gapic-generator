
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  deploymentsCancelPreviewRequest := &deploymentmanager.DeploymentsCancelPreviewRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Deployments.CancelPreview(project, deployment, &deploymentsCancelPreviewRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  resp, err := s.Deployments.Delete(project, deployment).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  resp, err := s.Deployments.Get(project, deployment).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  deployment := &deploymentmanager.Deployment{
    // TODO: Add the desired fields.
  }

  resp, err := s.Deployments.Insert(project, &deployment).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Deployments.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.DeploymentsListResponse) error {
    for _, deployment := range page.Deployments {
      // TODO: Use deployment
      fmt.Printf("%#v\n", deployment)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  deployment := &deploymentmanager.Deployment{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Deployments.Patch(project, deployment, &deployment).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  deploymentsStopRequest := &deploymentmanager.DeploymentsStopRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Deployments.Stop(project, deployment, &deploymentsStopRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  deployment := &deploymentmanager.Deployment{
    // TODO: Add the desired fields.
  }

  resp, err := s.Deployments.Update(project, deployment, &deployment).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  // The name of the manifest for this request.
  manifest := "{MY-MANIFEST}" // TODO: Update placeholder value(s).

  resp, err := s.Manifests.Get(project, deployment, manifest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  call := s.Manifests.List(project, deployment)
  if err := call.Pages(ctx, func(page *deploymentmanager.ManifestsListResponse) error {
    for _, manifest := range page.Manifests {
      // TODO: Use manifest
      fmt.Printf("%#v\n", manifest)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the operation for this request.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Operations.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.OperationsListResponse) error {
    for _, operation := range page.Operations {
      // TODO: Use operation
      fmt.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  // The name of the resource for this request.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  resp, err := s.Resources.Get(project, deployment, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the deployment for this request.
  deployment := "{MY-DEPLOYMENT}" // TODO: Update placeholder value(s).

  call := s.Resources.List(project, deployment)
  if err := call.Pages(ctx, func(page *deploymentmanager.ResourcesListResponse) error {
    for _, resource := range page.Resources {
      // TODO: Use resource
      fmt.Printf("%#v\n", resource)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := deploymentmanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Types.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.TypesListResponse) error {
    for _, type := range page.Types {
      // TODO: Use type
      fmt.Printf("%#v\n", type)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
