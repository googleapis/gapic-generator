
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.CancelPreview(project, deployment, &deploymentmanager.DeploymentsCancelPreviewRequest{
                                                  // TODO: Fill required fields.
                                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Delete(project, deployment).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Get(project, deployment).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Insert(project, &deploymentmanager.Deployment{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.Deployments.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.DeploymentsListResponse) error {
    for _, v := range page.Deployments {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Patch(project, deployment, &deploymentmanager.Deployment{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Stop(project, deployment, &deploymentmanager.DeploymentsStopRequest{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  resp, err := client.Deployments.Update(project, deployment, &deploymentmanager.Deployment{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  // The name of the manifest for this request.
  manifest := "" // TODO: Update placeholder value.

  resp, err := client.Manifests.Get(project, deployment, manifest).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.


  call := client.Manifests.List(project, deployment)
  if err := call.Pages(ctx, func(page *deploymentmanager.ManifestsListResponse) error {
    for _, v := range page.Manifests {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the operation for this request.
  operation := "" // TODO: Update placeholder value.

  resp, err := client.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.Operations.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.OperationsListResponse) error {
    for _, v := range page.Operations {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.

  // The name of the resource for this request.
  resource := "" // TODO: Update placeholder value.

  resp, err := client.Resources.Get(project, deployment, resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the deployment for this request.
  deployment := "" // TODO: Update placeholder value.


  call := client.Resources.List(project, deployment)
  if err := call.Pages(ctx, func(page *deploymentmanager.ResourcesListResponse) error {
    for _, v := range page.Resources {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/deploymentmanager/v2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/deploymentmanager/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, deploymentmanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := deploymentmanager.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := client.Types.List(project)
  if err := call.Pages(ctx, func(page *deploymentmanager.TypesListResponse) error {
    for _, v := range page.Types {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
