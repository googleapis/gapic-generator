
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.CreateClusterRequest;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreateClusterRequest requestBody = new CreateClusterRequest();

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.Create request = containerService.projects().zones().clusters().create(projectId, zone, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster to delete.
    String clusterId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.Delete request = containerService.projects().zones().clusters().delete(projectId, zone, clusterId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Cluster;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster to retrieve.
    String clusterId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.Get request = containerService.projects().zones().clusters().get(projectId, zone, clusterId);

    Cluster response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ListClustersResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    String zone = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.List request = containerService.projects().zones().clusters().list(projectId, zone);

    ListClustersResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.CreateNodePoolRequest;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster.
    String clusterId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreateNodePoolRequest requestBody = new CreateNodePoolRequest();

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.NodePools.Create request = containerService.projects().zones().clusters().nodePools().create(projectId, zone, clusterId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster.
    String clusterId = "";  // TODO: Update placeholder value.

    // The name of the node pool to delete.
    String nodePoolId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.NodePools.Delete request = containerService.projects().zones().clusters().nodePools().delete(projectId, zone, clusterId, nodePoolId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.NodePool;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster.
    String clusterId = "";  // TODO: Update placeholder value.

    // The name of the node pool.
    String nodePoolId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.NodePools.Get request = containerService.projects().zones().clusters().nodePools().get(projectId, zone, clusterId, nodePoolId);

    NodePool response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ListNodePoolsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster.
    String clusterId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.NodePools.List request = containerService.projects().zones().clusters().nodePools().list(projectId, zone, clusterId);

    ListNodePoolsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import com.google.api.services.container.model.UpdateClusterRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the cluster to upgrade.
    String clusterId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    UpdateClusterRequest requestBody = new UpdateClusterRequest();

    Container containerService = createContainerService();
    Container.Projects.Zones.Clusters.Update request = containerService.projects().zones().clusters().update(projectId, zone, clusterId, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ServerConfig;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for.
    String zone = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.GetServerconfig request = containerService.projects().zones().getServerconfig(projectId, zone);

    ServerConfig response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "";  // TODO: Update placeholder value.

    // The server-assigned `name` of the operation.
    String operationId = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Operations.Get request = containerService.projects().zones().operations().get(projectId, zone, operationId);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ListOperationsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "";  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or `-` for all zones.
    String zone = "";  // TODO: Update placeholder value.

    Container containerService = createContainerService();
    Container.Projects.Zones.Operations.List request = containerService.projects().zones().operations().list(projectId, zone);

    ListOperationsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Container createContainerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ContainerSample/0.1")
        .build();
  }
}
