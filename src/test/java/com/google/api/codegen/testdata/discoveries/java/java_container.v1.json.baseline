
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Create;
import com.google.api.services.container.model.CreateClusterRequest;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    CreateClusterRequest requestBody = new CreateClusterRequest();

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    Create request = service.projects().zones().clusters().create(projectId, zone, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Delete;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to delete.
    String clusterId = ""; // TODO: Update field(s).

    Container service = createService();
    Delete request = service.projects().zones().clusters().delete(projectId, zone, clusterId);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Get;
import com.google.api.services.container.model.Cluster;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to retrieve.
    String clusterId = ""; // TODO: Update field(s).

    Container service = createService();
    Get request = service.projects().zones().clusters().get(projectId, zone, clusterId);
    Cluster response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.List;
import com.google.api.services.container.model.ListClustersResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    List request = service.projects().zones().clusters().list(projectId, zone);
    ListClustersResponse response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Update;
import com.google.api.services.container.model.Operation;
import com.google.api.services.container.model.UpdateClusterRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    UpdateClusterRequest requestBody = new UpdateClusterRequest();

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to upgrade.
    String clusterId = ""; // TODO: Update field(s).

    Container service = createService();
    Update request = service.projects().zones().clusters().update(projectId, zone, clusterId, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.GetServerconfig;
import com.google.api.services.container.model.ServerConfig;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    GetServerconfig request = service.projects().zones().getServerconfig(projectId, zone);
    ServerConfig response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Operations.Get;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The server-assigned `name` of the operation.
    String operationId = ""; // TODO: Update field(s).

    Container service = createService();
    Get request = service.projects().zones().operations().get(projectId, zone, operationId);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Operations.List;
import com.google.api.services.container.model.ListOperationsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    List request = service.projects().zones().operations().list(projectId, zone);
    ListOperationsResponse response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
