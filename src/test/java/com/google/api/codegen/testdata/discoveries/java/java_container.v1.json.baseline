
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Create;
import com.google.api.services.container.model.CreateClusterRequest;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    CreateClusterRequest requestBody = new CreateClusterRequest();

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    Create request = service.projects().zones().clusters().create(projectId, zone, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `create` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";


    CreateClusterRequest requestBody = new CreateClusterRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Container.Projects.Zones.Clusters.Create request = containerService.projects().zones().clusters().create(projectId, zone, requestBody);
    Operation response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Delete;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to delete.
    String clusterId = ""; // TODO: Update field(s).
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster to delete.
    String clusterId = "{MY-CLUSTER-ID}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    Container service = createService();
    Delete request = service.projects().zones().clusters().delete(projectId, zone, clusterId);
=======

    Container.Projects.Zones.Clusters.Delete request = containerService.projects().zones().clusters().delete(projectId, zone, clusterId);
>>>>>>> Update discovery sample gen across languages.
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.Get;
import com.google.api.services.container.model.Cluster;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to retrieve.
    String clusterId = ""; // TODO: Update field(s).
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster to retrieve.
    String clusterId = "{MY-CLUSTER-ID}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    Container service = createService();
    Get request = service.projects().zones().clusters().get(projectId, zone, clusterId);
=======

    Container.Projects.Zones.Clusters.Get request = containerService.projects().zones().clusters().get(projectId, zone, clusterId);
>>>>>>> Update discovery sample gen across languages.
    Cluster response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Clusters.List;
import com.google.api.services.container.model.ListClustersResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    List request = service.projects().zones().clusters().list(projectId, zone);
    ListClustersResponse response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    String zone = "{MY-ZONE}";


    Container.Projects.Zones.Clusters.List request = containerService.projects().zones().clusters().list(projectId, zone);
    ListClustersResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
import com.google.api.services.container.Container.Projects.Zones.Clusters.Update;
=======
import com.google.api.services.container.model.CreateNodePoolRequest;
>>>>>>> Update discovery sample gen across languages.
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    UpdateClusterRequest requestBody = new UpdateClusterRequest();

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The name of the cluster to upgrade.
    String clusterId = ""; // TODO: Update field(s).

    Container service = createService();
    Update request = service.projects().zones().clusters().update(projectId, zone, clusterId, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `create` method:

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster.
    String clusterId = "{MY-CLUSTER-ID}";


    CreateNodePoolRequest requestBody = new CreateNodePoolRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Container.Projects.Zones.Clusters.NodePools.Create request = containerService.projects().zones().clusters().nodePools().create(projectId, zone, clusterId, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class ContainerExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster.
    String clusterId = "{MY-CLUSTER-ID}";

    // The name of the node pool to delete.
    String nodePoolId = "{MY-NODE-POOL-ID}";


    Container.Projects.Zones.Clusters.NodePools.Delete request = containerService.projects().zones().clusters().nodePools().delete(projectId, zone, clusterId, nodePoolId);
    Operation response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
import com.google.api.services.container.Container.Projects.Zones.GetServerconfig;
import com.google.api.services.container.model.ServerConfig;
=======
import com.google.api.services.container.model.NodePool;
>>>>>>> Update discovery sample gen across languages.
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster.
    String clusterId = "{MY-CLUSTER-ID}";

    // The name of the node pool.
    String nodePoolId = "{MY-NODE-POOL-ID}";


    Container.Projects.Zones.Clusters.NodePools.Get request = containerService.projects().zones().clusters().nodePools().get(projectId, zone, clusterId, nodePoolId);
    NodePool response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ListNodePoolsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    GetServerconfig request = service.projects().zones().getServerconfig(projectId, zone);
    ServerConfig response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster.
    String clusterId = "{MY-CLUSTER-ID}";


    Container.Projects.Zones.Clusters.NodePools.List request = containerService.projects().zones().clusters().nodePools().list(projectId, zone, clusterId);
    ListNodePoolsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.Operation;
import com.google.api.services.container.model.UpdateClusterRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class ContainerExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
>>>>>>> Update discovery sample gen across languages.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
=======
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The name of the cluster to upgrade.
    String clusterId = "{MY-CLUSTER-ID}";


    UpdateClusterRequest requestBody = new UpdateClusterRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Container.Projects.Zones.Clusters.Update request = containerService.projects().zones().clusters().update(projectId, zone, clusterId, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.model.ServerConfig;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class ContainerExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `getServerconfig` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for.
    String zone = "{MY-ZONE}";


    Container.Projects.Zones.GetServerconfig request = containerService.projects().zones().getServerconfig(projectId, zone);
    ServerConfig response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Operations.Get;
import com.google.api.services.container.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = ""; // TODO: Update field(s).

    // The server-assigned `name` of the operation.
    String operationId = ""; // TODO: Update field(s).
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    String zone = "{MY-ZONE}";

    // The server-assigned `name` of the operation.
    String operationId = "{MY-OPERATION-ID}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    Container service = createService();
    Get request = service.projects().zones().operations().get(projectId, zone, operationId);
=======

    Container.Projects.Zones.Operations.Get request = containerService.projects().zones().operations().get(projectId, zone, operationId);
>>>>>>> Update discovery sample gen across languages.
    Operation response = request.execute();
    System.out.println(response);
  }

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/container/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.container.Container;
import com.google.api.services.container.Container.Projects.Zones.Operations.List;
import com.google.api.services.container.model.ListOperationsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ContainerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    String projectId = ""; // TODO: Update field(s).

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    String zone = ""; // TODO: Update field(s).

    Container service = createService();
    List request = service.projects().zones().operations().list(projectId, zone);
    ListOperationsResponse response = request.execute();
    System.out.println(response);
  }

  public Container createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

=======
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
>>>>>>> Update discovery sample gen across languages.
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Container.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new ContainerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
=======

>>>>>>> Update discovery sample gen across languages.
    Container containerService = new Container.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    String projectId = "{MY-PROJECT-ID}";

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or `-` for all zones.
    String zone = "{MY-ZONE}";


    Container.Projects.Zones.Operations.List request = containerService.projects().zones().operations().list(projectId, zone);
    ListOperationsResponse response = request.execute();

<<<<<<< 0cfad80210389130a265883bdb0e5c6c534b80d6
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
=======
    // TODO: Change code below to process the `response` object:
    System.out.println(response);
>>>>>>> Update discovery sample gen across languages.
  }
}
