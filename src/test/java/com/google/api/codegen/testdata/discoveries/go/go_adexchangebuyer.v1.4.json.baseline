
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The account id
  id := int64(0)

  resp, err := adexchangebuyerService.Accounts.Get(id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  resp, err := adexchangebuyerService.Accounts.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` call:

  // The account id
  id := int64(0)

  rb := adexchangebuyer.Account{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := adexchangebuyerService.Accounts.Patch(id, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Patch` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` call:

  // The account id
  id := int64(0)

  rb := adexchangebuyer.Account{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Accounts.Update(id, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Update` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The account id.
  accountId := int64(0)

  resp, err := adexchangebuyerService.BillingInfo.Get(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  resp, err := adexchangebuyerService.BillingInfo.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The account id to get the budget information for.
  accountId := int64(0)

  // The billing id to get the budget information for.
  billingId := int64(0)

  resp, err := adexchangebuyerService.Budget.Get(accountId, billingId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` call:

  // The account id associated with the budget being updated.
  accountId := int64(0)

  // The billing id associated with the budget being updated.
  billingId := int64(0)

  rb := adexchangebuyer.Budget{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := adexchangebuyerService.Budget.Patch(accountId, billingId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Patch` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` call:

  // The account id associated with the budget being updated.
  accountId := int64(0)

  // The billing id associated with the budget being updated.
  billingId := int64(0)

  rb := adexchangebuyer.Budget{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Budget.Update(accountId, billingId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Update` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AddDeal` call:

  // The id for the account that will serve this creative.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  // The id of the deal id to associate with this creative.
  dealId := int64(0)

  if err := adexchangebuyerService.Creatives.AddDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `AddDeal` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The id for the account that will serve this creative.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  resp, err := adexchangebuyerService.Creatives.Get(accountId, buyerCreativeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := adexchangebuyer.Creative{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Creatives.Insert(&rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Insert` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  req := adexchangebuyerService.Creatives.List()
  if err := req.Pages(ctx, func(page *adexchangebuyer.CreativesList) error {
    for _, creative := range page.Items {
      // TODO: Change code below to process each `creative` resource:
      fmt.Printf("%#v\n", creative)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `RemoveDeal` call:

  // The id for the account that will serve this creative.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  // The id of the deal id to disassociate with this creative.
  dealId := int64(0)

  if err := adexchangebuyerService.Creatives.RemoveDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `RemoveDeal` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` call:

  // The proposalId to delete deals from.
  proposalId := "{MY-PROPOSAL-ID}"

  rb := adexchangebuyer.DeleteOrderDealsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Marketplacedeals.Delete(proposalId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Delete` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` call:

  // proposalId for which deals need to be added.
  proposalId := "{MY-PROPOSAL-ID}"

  rb := adexchangebuyer.AddOrderDealsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Marketplacedeals.Insert(proposalId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Insert` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` call:

  // The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
  // the URL.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := adexchangebuyerService.Marketplacedeals.List(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` call:

  // The proposalId to edit deals on.
  proposalId := "{MY-PROPOSAL-ID}"

  rb := adexchangebuyer.EditAllOrderDealsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Marketplacedeals.Update(proposalId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Update` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` call:

  // The proposalId to add notes for.
  proposalId := "{MY-PROPOSAL-ID}"

  rb := adexchangebuyer.AddOrderNotesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Marketplacenotes.Insert(proposalId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Insert` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` call:

  // The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
  // the URL.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := adexchangebuyerService.Marketplacenotes.List(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Updateproposal` call:

  // The private auction id to be updated.
  privateAuctionId := "{MY-PRIVATE-AUCTION-ID}"

  rb := adexchangebuyer.UpdatePrivateAuctionProposalRequest{
    // TODO: Add desired fields of the request body.
  }

  if err := adexchangebuyerService.Marketplaceprivateauction.Updateproposal(privateAuctionId, &rb).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Updateproposal` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` call:

  // The account id to get the reports.
  accountId := int64(0)

  // The end time of the report in ISO 8601 timestamp format using UTC.
  endDateTime := "{MY-END-DATE-TIME}"

  // The start time of the report in ISO 8601 timestamp format using UTC.
  startDateTime := "{MY-START-DATE-TIME}"

  resp, err := adexchangebuyerService.PerformanceReport.List(accountId, endDateTime, startDateTime).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` call:

  // The account id to delete the pretargeting config for.
  accountId := int64(0)

  // The specific id of the configuration to delete.
  configId := int64(0)

  if err := adexchangebuyerService.PretargetingConfig.Delete(accountId, configId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Delete` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The account id to get the pretargeting config for.
  accountId := int64(0)

  // The specific id of the configuration to retrieve.
  configId := int64(0)

  resp, err := adexchangebuyerService.PretargetingConfig.Get(accountId, configId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` call:

  // The account id to insert the pretargeting config for.
  accountId := int64(0)

  rb := adexchangebuyer.PretargetingConfig{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.PretargetingConfig.Insert(accountId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Insert` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` call:

  // The account id to get the pretargeting configs for.
  accountId := int64(0)

  resp, err := adexchangebuyerService.PretargetingConfig.List(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` call:

  // The account id to update the pretargeting config for.
  accountId := int64(0)

  // The specific id of the configuration to update.
  configId := int64(0)

  rb := adexchangebuyer.PretargetingConfig{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := adexchangebuyerService.PretargetingConfig.Patch(accountId, configId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Patch` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` call:

  // The account id to update the pretargeting config for.
  accountId := int64(0)

  // The specific id of the configuration to update.
  configId := int64(0)

  rb := adexchangebuyer.PretargetingConfig{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.PretargetingConfig.Update(accountId, configId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Update` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // The id for the product to get the head revision for.
  productId := "{MY-PRODUCT-ID}"

  resp, err := adexchangebuyerService.Products.Get(productId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  resp, err := adexchangebuyerService.Products.Search().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Search` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` call:

  // Id of the proposal to retrieve.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := adexchangebuyerService.Proposals.Get(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Get` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := adexchangebuyer.CreateOrdersRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Proposals.Insert(&rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Insert` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` call:

  // The proposal id to update.
  proposalId := "{MY-PROPOSAL-ID}"

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  revisionNumber := int64(0)

  // The proposed action to take on the proposal. This field is required and it must be set when updating
  // a proposal.
  updateAction := "{MY-UPDATE-ACTION}"

  rb := adexchangebuyer.Proposal{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := adexchangebuyerService.Proposals.Patch(proposalId, revisionNumber, updateAction, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Patch` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }


  resp, err := adexchangebuyerService.Proposals.Search().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Search` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Setupcomplete` call:

  // The proposal id for which the setup is complete
  proposalId := "{MY-PROPOSAL-ID}"

  if err := adexchangebuyerService.Proposals.Setupcomplete(proposalId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Setupcomplete` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` call:

  // The proposal id to update.
  proposalId := "{MY-PROPOSAL-ID}"

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  revisionNumber := int64(0)

  // The proposed action to take on the proposal. This field is required and it must be set when updating
  // a proposal.
  updateAction := "{MY-UPDATE-ACTION}"

  rb := adexchangebuyer.Proposal{
    // TODO: Add desired fields of the request body.
  }

  resp, err := adexchangebuyerService.Proposals.Update(proposalId, revisionNumber, updateAction, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `Update` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "errors"
  "fmt"
  "log"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  c, err := getClient(ctx)
  if err != nil {
    log.Fatal(err)
  }

  adexchangebuyerService, err := adexchangebuyer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` call:

  // The accountId of the publisher to get profiles for.
  accountId := int64(0)

  resp, err := adexchangebuyerService.Pubprofiles.List(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `List` method, authorize using one of the following scopes:
  //   AdexchangeBuyer
  return nil, errors.New("Not implemented")
}
