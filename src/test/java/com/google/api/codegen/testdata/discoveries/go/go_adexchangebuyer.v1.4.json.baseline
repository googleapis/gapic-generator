
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id
  // TODO: Update placeholder value.
  id := int64(0)

  resp, err := c.Accounts.Get(id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Accounts.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id
  // TODO: Update placeholder value.
  id := int64(0)

  resp, err := c.Accounts.Patch(id, &adexchangebuyer.Account{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id
  // TODO: Update placeholder value.
  id := int64(0)

  resp, err := c.Accounts.Update(id, &adexchangebuyer.Account{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id.
  // TODO: Update placeholder value.
  accountId := int64(0)

  resp, err := c.BillingInfo.Get(accountId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.BillingInfo.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to get the budget information for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The billing id to get the budget information for.
  // TODO: Update placeholder value.
  billingId := int64(0)

  resp, err := c.Budget.Get(accountId, billingId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id associated with the budget being updated.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The billing id associated with the budget being updated.
  // TODO: Update placeholder value.
  billingId := int64(0)

  resp, err := c.Budget.Patch(accountId, billingId, &adexchangebuyer.Budget{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id associated with the budget being updated.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The billing id associated with the budget being updated.
  // TODO: Update placeholder value.
  billingId := int64(0)

  resp, err := c.Budget.Update(accountId, billingId, &adexchangebuyer.Budget{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The id for the account that will serve this creative.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  // TODO: Update placeholder value.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  // The id of the deal id to associate with this creative.
  // TODO: Update placeholder value.
  dealId := int64(0)

  if err := c.Creatives.AddDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The id for the account that will serve this creative.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  // TODO: Update placeholder value.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  resp, err := c.Creatives.Get(accountId, buyerCreativeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Creatives.Insert(&adexchangebuyer.Creative{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.Creatives.List()
  if err := call.Pages(ctx, func(page *adexchangebuyer.CreativesList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The id for the account that will serve this creative.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The buyer-specific id for this creative.
  // TODO: Update placeholder value.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}"

  // The id of the deal id to disassociate with this creative.
  // TODO: Update placeholder value.
  dealId := int64(0)

  if err := c.Creatives.RemoveDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposalId to delete deals from.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacedeals.Delete(proposalId, &adexchangebuyer.DeleteOrderDealsRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // proposalId for which deals need to be added.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacedeals.Insert(proposalId, &adexchangebuyer.AddOrderDealsRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposalId to get deals for. To search across proposals specify order_id = '-' as part of the
  // URL.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacedeals.List(proposalId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposalId to edit deals on.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacedeals.Update(proposalId, &adexchangebuyer.EditAllOrderDealsRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposalId to add notes for.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacenotes.Insert(proposalId, &adexchangebuyer.AddOrderNotesRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposalId to get notes for.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Marketplacenotes.List(proposalId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The private auction id to be updated.
  // TODO: Update placeholder value.
  privateAuctionId := "{MY-PRIVATE-AUCTION-ID}"

  call := c.Marketplaceprivateauction.Updateproposal(privateAuctionId, &adexchangebuyer.UpdatePrivateAuctionProposalRequest{
                                                       // TODO: Fill required fields.
                                                     }).Context(ctx)
  if err := call.Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to get the reports.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The end time of the report in ISO 8601 timestamp format using UTC.
  // TODO: Update placeholder value.
  endDateTime := "{MY-END-DATE-TIME}"

  // The start time of the report in ISO 8601 timestamp format using UTC.
  // TODO: Update placeholder value.
  startDateTime := "{MY-START-DATE-TIME}"

  resp, err := c.PerformanceReport.List(accountId, endDateTime, startDateTime).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to delete the pretargeting config for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The specific id of the configuration to delete.
  // TODO: Update placeholder value.
  configId := int64(0)

  if err := c.PretargetingConfig.Delete(accountId, configId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to get the pretargeting config for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The specific id of the configuration to retrieve.
  // TODO: Update placeholder value.
  configId := int64(0)

  resp, err := c.PretargetingConfig.Get(accountId, configId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to insert the pretargeting config for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  resp, err := c.PretargetingConfig.Insert(accountId, &adexchangebuyer.PretargetingConfig{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to get the pretargeting configs for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  resp, err := c.PretargetingConfig.List(accountId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to update the pretargeting config for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The specific id of the configuration to update.
  // TODO: Update placeholder value.
  configId := int64(0)

  resp, err := c.PretargetingConfig.Patch(accountId, configId, &adexchangebuyer.PretargetingConfig{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The account id to update the pretargeting config for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  // The specific id of the configuration to update.
  // TODO: Update placeholder value.
  configId := int64(0)

  resp, err := c.PretargetingConfig.Update(accountId, configId, &adexchangebuyer.PretargetingConfig{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The id for the product to get the head revision for.
  // TODO: Update placeholder value.
  productId := "{MY-PRODUCT-ID}"

  resp, err := c.Products.Get(productId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Products.Search().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Id of the proposal to retrieve.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  resp, err := c.Proposals.Get(proposalId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Proposals.Insert(&adexchangebuyer.CreateOrdersRequest{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposal id to update.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  // TODO: Update placeholder value.
  revisionNumber := int64(0)

  // The proposed action to take on the proposal.
  // TODO: Update placeholder value.
  updateAction := "{MY-UPDATE-ACTION}"

  resp, err := c.Proposals.Patch(proposalId, revisionNumber, updateAction, &adexchangebuyer.Proposal{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Proposals.Search().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposal id for which the setup is complete
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  if err := c.Proposals.Setupcomplete(proposalId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The proposal id to update.
  // TODO: Update placeholder value.
  proposalId := "{MY-PROPOSAL-ID}"

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  // TODO: Update placeholder value.
  revisionNumber := int64(0)

  // The proposed action to take on the proposal.
  // TODO: Update placeholder value.
  updateAction := "{MY-UPDATE-ACTION}"

  resp, err := c.Proposals.Update(proposalId, revisionNumber, updateAction, &adexchangebuyer.Proposal{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := adexchangebuyer.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The accountId of the publisher to get profiles for.
  // TODO: Update placeholder value.
  accountId := int64(0)

  resp, err := c.Pubprofiles.List(accountId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
