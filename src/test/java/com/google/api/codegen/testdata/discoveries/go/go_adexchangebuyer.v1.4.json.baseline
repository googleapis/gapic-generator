
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id
  id := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.Accounts.Get(id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := s.Accounts.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id
  id := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Account{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Accounts.Patch(id, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id
  id := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Account{
    // TODO: Add the desired fields.
  }

  resp, err := s.Accounts.Update(id, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id.
  accountId := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.BillingInfo.Get(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := s.BillingInfo.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to get the budget information for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The billing id to get the budget information for.
  billingId := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.Budget.Get(accountId, billingId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id associated with the budget being updated.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The billing id associated with the budget being updated.
  billingId := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Budget{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Budget.Patch(accountId, billingId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id associated with the budget being updated.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The billing id associated with the budget being updated.
  billingId := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Budget{
    // TODO: Add the desired fields.
  }

  resp, err := s.Budget.Update(accountId, billingId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The id for the account that will serve this creative.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}" // TODO: Update placeholder value(s).

  // The id of the deal id to associate with this creative.
  dealId := int64(0) // TODO: Update placeholder value(s).

  if err := s.Creatives.AddDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The id for the account that will serve this creative.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Creatives.Get(accountId, buyerCreativeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resource := &adexchangebuyer.Creative{
    // TODO: Add the desired fields.
  }

  resp, err := s.Creatives.Insert(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  call := s.Creatives.List()
  if err := call.Pages(ctx, func(page *adexchangebuyer.CreativesList) error {
    for _, creative := range page.Items {
      // TODO: Use creative
      log.Printf("%#v\n", creative)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The id for the account that will serve this creative.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The buyer-specific id for this creative.
  buyerCreativeId := "{MY-BUYER-CREATIVE-ID}" // TODO: Update placeholder value(s).

  // The id of the deal id to disassociate with this creative.
  dealId := int64(0) // TODO: Update placeholder value(s).

  if err := s.Creatives.RemoveDeal(accountId, buyerCreativeId, dealId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposalId to delete deals from.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.DeleteOrderDealsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Marketplacedeals.Delete(proposalId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // proposalId for which deals need to be added.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.AddOrderDealsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Marketplacedeals.Insert(proposalId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposalId to get deals for. To search across proposals specify order_id = '-' as part of the
  // URL.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Marketplacedeals.List(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposalId to edit deals on.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.EditAllOrderDealsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Marketplacedeals.Update(proposalId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposalId to add notes for.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.AddOrderNotesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Marketplacenotes.Insert(proposalId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposalId to get notes for.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Marketplacenotes.List(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The private auction id to be updated.
  privateAuctionId := "{MY-PRIVATE-AUCTION-ID}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.UpdatePrivateAuctionProposalRequest{
    // TODO: Add the desired fields.
  }

  if err := s.Marketplaceprivateauction.Updateproposal(privateAuctionId, resource).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to get the reports.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The end time of the report in ISO 8601 timestamp format using UTC.
  endDateTime := "{MY-END-DATE-TIME}" // TODO: Update placeholder value(s).

  // The start time of the report in ISO 8601 timestamp format using UTC.
  startDateTime := "{MY-START-DATE-TIME}" // TODO: Update placeholder value(s).

  resp, err := s.PerformanceReport.List(accountId, endDateTime, startDateTime).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to delete the pretargeting config for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The specific id of the configuration to delete.
  configId := int64(0) // TODO: Update placeholder value(s).

  if err := s.PretargetingConfig.Delete(accountId, configId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to get the pretargeting config for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The specific id of the configuration to retrieve.
  configId := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.PretargetingConfig.Get(accountId, configId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to insert the pretargeting config for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.PretargetingConfig{
    // TODO: Add the desired fields.
  }

  resp, err := s.PretargetingConfig.Insert(accountId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to get the pretargeting configs for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.PretargetingConfig.List(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to update the pretargeting config for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The specific id of the configuration to update.
  configId := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.PretargetingConfig{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.PretargetingConfig.Patch(accountId, configId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The account id to update the pretargeting config for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  // The specific id of the configuration to update.
  configId := int64(0) // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.PretargetingConfig{
    // TODO: Add the desired fields.
  }

  resp, err := s.PretargetingConfig.Update(accountId, configId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The id for the product to get the head revision for.
  productId := "{MY-PRODUCT-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Products.Get(productId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := s.Products.Search().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Id of the proposal to retrieve.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Proposals.Get(proposalId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resource := &adexchangebuyer.CreateOrdersRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Proposals.Insert(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposal id to update.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  revisionNumber := int64(0) // TODO: Update placeholder value(s).

  // The proposed action to take on the proposal.
  updateAction := "{MY-UPDATE-ACTION}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Proposal{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Proposals.Patch(proposalId, revisionNumber, updateAction, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := s.Proposals.Search().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposal id for which the setup is complete
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  if err := s.Proposals.Setupcomplete(proposalId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The proposal id to update.
  proposalId := "{MY-PROPOSAL-ID}" // TODO: Update placeholder value(s).

  // The last known revision number to update. If the head revision in the marketplace database has since
  // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
  // and retry the update at that revision.
  revisionNumber := int64(0) // TODO: Update placeholder value(s).

  // The proposed action to take on the proposal.
  updateAction := "{MY-UPDATE-ACTION}" // TODO: Update placeholder value(s).

  resource := &adexchangebuyer.Proposal{
    // TODO: Add the desired fields.
  }

  resp, err := s.Proposals.Update(proposalId, revisionNumber, updateAction, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/adexchangebuyer/v1.4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, adexchangebuyer.AdexchangeBuyerScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := adexchangebuyer.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The accountId of the publisher to get profiles for.
  accountId := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.Pubprofiles.List(accountId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
