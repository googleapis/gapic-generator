
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete.  Example:
  // `"projects/my-project/logs/syslog"`.
  logName := "billingAccounts/{MY-BILLINGACCOUNT}/logs/{MY-LOG}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.BillingAccounts.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := logging.ListLogEntriesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Entries.List(&rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := logging.WriteLogEntriesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Entries.Write(&rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }


  req := loggingService.MonitoredResourceDescriptors.List()
  if err := req.Pages(ctx, func(page *logging.ListMonitoredResourceDescriptorsResponse) error {
    for _, monitoredResourceDescriptor := range page.ResourceDescriptors {
      // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
      fmt.Printf("%#v\n", monitoredResourceDescriptor)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete.  Example:
  // `"projects/my-project/logs/syslog"`.
  logName := "organizations/{MY-ORGANIZATION}/logs/{MY-LOG}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Organizations.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete.  Example:
  // `"projects/my-project/logs/syslog"`.
  logName := "projects/{MY-PROJECT}/logs/{MY-LOG}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Projects.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project in which to create the metric.
  // Example: `"projects/my-project-id"`.
  // The new metric must be provided in the request.
  parent := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := logging.LogMetric{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Metrics.Create(parent, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to delete.
  // Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Projects.Metrics.Delete(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the desired metric.
  // Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Projects.Metrics.Get(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name containing the metrics.
  // Example: `"projects/my-project-id"`.
  parent := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := loggingService.Projects.Metrics.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListLogMetricsResponse) error {
    for _, logMetric := range page.Metrics {
      // TODO: Change code below to process each `logMetric` resource:
      fmt.Printf("%#v\n", logMetric)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to update.
  // Example: `"projects/my-project-id/metrics/my-metric-id"`.
  // The updated metric must be provided in the request and have the
  // same identifier that is specified in `metricName`.
  // If the metric does not exist, it is created.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"
  // TODO: Change placeholder value above.

  rb := logging.LogMetric{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Metrics.Update(metricName, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource in which to create the sink.
  // Example: `"projects/my-project-id"`.
  // The new sink must be provided in the request.
  parent := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := logging.LogSink{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Sinks.Create(parent, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the sink to delete, including the parent
  // resource and the sink identifier.  Example:
  // `"projects/my-project-id/sinks/my-sink-id"`.  It is an error if the sink
  // does not exist.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Projects.Sinks.Delete(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the sink to return.
  // Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"
  // TODO: Change placeholder value above.

  resp, err := loggingService.Projects.Sinks.Get(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The cloud resource containing the sinks.
  // Example: `"projects/my-logging-project"`.
  parent := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := loggingService.Projects.Sinks.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListSinksResponse) error {
    for _, logSink := range page.Sinks {
      // TODO: Change code below to process each `logSink` resource:
      fmt.Printf("%#v\n", logSink)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the sink to update, including the parent
  // resource and the sink identifier.  If the sink does not exist, this method
  // creates the sink.  Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"
  // TODO: Change placeholder value above.

  rb := logging.LogSink{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Sinks.Update(sinkName, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
