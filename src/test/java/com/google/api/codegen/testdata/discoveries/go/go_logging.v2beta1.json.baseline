
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  listLogEntriesRequest := &logging.ListLogEntriesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Entries.List(listLogEntriesRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  writeLogEntriesRequest := &logging.WriteLogEntriesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Entries.Write(writeLogEntriesRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  call := s.MonitoredResourceDescriptors.List()
  if err := call.Pages(ctx, func(page *logging.ListMonitoredResourceDescriptorsResponse) error {
    for _, monitoredResourceDescriptor := range page.ResourceDescriptors {
      // TODO: Use monitoredResourceDescriptor
      fmt.Printf("%#v\n", monitoredResourceDescriptor)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
  logName := "projects/{MY-PROJECT}/logs/{MY-LOG}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
  // The new metric must be provided in the request.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  logMetric := &logging.LogMetric{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Metrics.Create(projectName, &logMetric).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Metrics.Delete(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Metrics.Get(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the project containing the metrics. Example:
  // `"projects/my-project-id"`.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Projects.Metrics.List(projectName)
  if err := call.Pages(ctx, func(page *logging.ListLogMetricsResponse) error {
    for _, logMetric := range page.Metrics {
      // TODO: Use logMetric
      fmt.Printf("%#v\n", logMetric)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  // The updated metric must be provided in the request and have the same identifier that is specified in
  // `metricName`. If the metric does not exist, it is created.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value(s).

  logMetric := &logging.LogMetric{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Metrics.Update(metricName, &logMetric).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
  // The new sink must be provided in the request.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  logSink := &logging.LogSink{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Sinks.Create(projectName, &logSink).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Sinks.Delete(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Sinks.Get(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the project containing the sinks. Example:
  // `"projects/my-logging-project"`, `"projects/01234567890"`.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Projects.Sinks.List(projectName)
  if err := call.Pages(ctx, func(page *logging.ListSinksResponse) error {
    for _, logSink := range page.Sinks {
      // TODO: Use logSink
      fmt.Printf("%#v\n", logSink)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := logging.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
  // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
  // If the sink does not exist, it is created.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value(s).

  logSink := &logging.LogSink{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Sinks.Update(sinkName, &logSink).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
