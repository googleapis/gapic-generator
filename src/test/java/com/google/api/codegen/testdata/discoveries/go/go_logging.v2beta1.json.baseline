
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete:
  // "projects/[PROJECT_ID]/logs/[LOG_ID]"
  // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
  // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
  // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
  // information about log names, see LogEntry.
  logName := "billingAccounts/my-billing-account/logs/my-log"  // TODO: Update placeholder value.

  resp, err := loggingService.BillingAccounts.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name that owns the logs:
  // "projects/[PROJECT_ID]"
  // "organizations/[ORGANIZATION_ID]"
  parent := "billingAccounts/my-billing-account"  // TODO: Update placeholder value.

  req := loggingService.BillingAccounts.Logs.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListLogsResponse) error {
    for _, item := range page.LogNames {
      // TODO: Change code below to process each `item` resource:
      fmt.Printf("%#v\n", item)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  rb := &logging.ListLogEntriesRequest{
    // TODO: Add desired fields of the request body.
  }

  req := loggingService.Entries.List(rb)
  if err := req.Pages(ctx, func(page *logging.ListLogEntriesResponse) error {
    for _, logEntry := range page.Entries {
      // TODO: Change code below to process each `logEntry` resource:
      fmt.Printf("%#v\n", logEntry)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  rb := &logging.WriteLogEntriesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Entries.Write(rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  req := loggingService.MonitoredResourceDescriptors.List()
  if err := req.Pages(ctx, func(page *logging.ListMonitoredResourceDescriptorsResponse) error {
    for _, monitoredResourceDescriptor := range page.ResourceDescriptors {
      // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
      fmt.Printf("%#v\n", monitoredResourceDescriptor)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete:
  // "projects/[PROJECT_ID]/logs/[LOG_ID]"
  // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
  // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
  // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
  // information about log names, see LogEntry.
  logName := "organizations/my-organization/logs/my-log"  // TODO: Update placeholder value.

  resp, err := loggingService.Organizations.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name that owns the logs:
  // "projects/[PROJECT_ID]"
  // "organizations/[ORGANIZATION_ID]"
  parent := "organizations/my-organization"  // TODO: Update placeholder value.

  req := loggingService.Organizations.Logs.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListLogsResponse) error {
    for _, item := range page.LogNames {
      // TODO: Change code below to process each `item` resource:
      fmt.Printf("%#v\n", item)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name of the log to delete:
  // "projects/[PROJECT_ID]/logs/[LOG_ID]"
  // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
  // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
  // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
  // information about log names, see LogEntry.
  logName := "projects/my-project/logs/my-log"  // TODO: Update placeholder value.

  resp, err := loggingService.Projects.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource name that owns the logs:
  // "projects/[PROJECT_ID]"
  // "organizations/[ORGANIZATION_ID]"
  parent := "projects/my-project"  // TODO: Update placeholder value.

  req := loggingService.Projects.Logs.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListLogsResponse) error {
    for _, item := range page.LogNames {
      // TODO: Change code below to process each `item` resource:
      fmt.Printf("%#v\n", item)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project in which to create the metric:
  // "projects/[PROJECT_ID]"
  // The new metric must be provided in the request.
  parent := "projects/my-project"  // TODO: Update placeholder value.

  rb := &logging.LogMetric{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Metrics.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to delete:
  // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
  metricName := "projects/my-project/metrics/my-metric"  // TODO: Update placeholder value.

  resp, err := loggingService.Projects.Metrics.Delete(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the desired metric:
  // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
  metricName := "projects/my-project/metrics/my-metric"  // TODO: Update placeholder value.

  resp, err := loggingService.Projects.Metrics.Get(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The name of the project containing the metrics:
  // "projects/[PROJECT_ID]"
  parent := "projects/my-project"  // TODO: Update placeholder value.

  req := loggingService.Projects.Metrics.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListLogMetricsResponse) error {
    for _, logMetric := range page.Metrics {
      // TODO: Change code below to process each `logMetric` resource:
      fmt.Printf("%#v\n", logMetric)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the metric to update:
  // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
  // The updated metric must be provided in the request and it's name field must be the same as
  // [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
  metricName := "projects/my-project/metrics/my-metric"  // TODO: Update placeholder value.

  rb := &logging.LogMetric{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := loggingService.Projects.Metrics.Update(metricName, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The resource in which to create the sink:
  // "projects/[PROJECT_ID]"
  // "organizations/[ORGANIZATION_ID]"
  // Examples: "projects/my-logging-project", "organizations/123456789".
  parent := "projects/my-project"  // TODO: Update placeholder value.

  rb := &logging.LogSink{
    // TODO: Add desired fields of the request body.
  }

  resp, err := loggingService.Projects.Sinks.Create(parent, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The full resource name of the sink to delete, including the parent resource and the sink
  // identifier:
  // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
  // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
  // It is an error if the sink does not exist. Example: "projects/my-project-id/sinks/my-sink-id". It
  // is an error if the sink does not exist.
  sinkName := "projects/my-project/sinks/my-sink"  // TODO: Update placeholder value.

  resp, err := loggingService.Projects.Sinks.Delete(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The parent resource name of the sink:
  // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
  // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
  // Example: "projects/my-project-id/sinks/my-sink-id".
  sinkName := "projects/my-project/sinks/my-sink"  // TODO: Update placeholder value.

  resp, err := loggingService.Projects.Sinks.Get(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The parent resource whose sinks are to be listed. Examples:
  // "projects/my-logging-project", "organizations/123456789".
  parent := "projects/my-project"  // TODO: Update placeholder value.

  req := loggingService.Projects.Sinks.List(parent)
  if err := req.Pages(ctx, func(page *logging.ListSinksResponse) error {
    for _, logSink := range page.Sinks {
      // TODO: Change code below to process each `logSink` resource:
      fmt.Printf("%#v\n", logSink)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  loggingService, err := logging.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Required. The full resource name of the sink to update, including the parent resource and the sink
  // identifier:
  // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
  // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
  // Example: "projects/my-project-id/sinks/my-sink-id".
  sinkName := "projects/my-project/sinks/my-sink"  // TODO: Update placeholder value.

  rb := &logging.LogSink{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := loggingService.Projects.Sinks.Update(sinkName, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
