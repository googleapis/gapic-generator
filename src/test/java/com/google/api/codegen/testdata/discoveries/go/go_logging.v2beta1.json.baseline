
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Entries.List(&logging.ListLogEntriesRequest{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Entries.Write(&logging.WriteLogEntriesRequest{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.MonitoredResourceDescriptors.List()
  if err := call.Pages(ctx, func(page *logging.ListMonitoredResourceDescriptorsResponse) error {
    for _, v := range page.ResourceDescriptors {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
  logName := "projects/{MY-PROJECT}/logs/{MY-LOG}" // TODO: Update placeholder value.

  resp, err := c.Projects.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
  // The new metric must be provided in the request.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value.

  resp, err := c.Projects.Metrics.Create(projectName, &logging.LogMetric{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Metrics.Delete(metricName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Metrics.Get(metricName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Required. The resource name of the project containing the metrics. Example:
  // `"projects/my-project-id"`.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value.


  call := c.Projects.Metrics.List(projectName)
  if err := call.Pages(ctx, func(page *logging.ListLogMetricsResponse) error {
    for _, v := range page.Metrics {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  // The updated metric must be provided in the request and have the same identifier that is specified in
  // `metricName`. If the metric does not exist, it is created.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Metrics.Update(metricName, &logging.LogMetric{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
  // The new sink must be provided in the request.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value.

  resp, err := c.Projects.Sinks.Create(projectName, &logging.LogSink{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value.

  resp, err := c.Projects.Sinks.Delete(sinkName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value.

  resp, err := c.Projects.Sinks.Get(sinkName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Required. The resource name of the project containing the sinks. Example:
  // `"projects/my-logging-project"`, `"projects/01234567890"`.
  projectName := "projects/{MY-PROJECT}" // TODO: Update placeholder value.


  call := c.Projects.Sinks.List(projectName)
  if err := call.Pages(ctx, func(page *logging.ListSinksResponse) error {
    for _, v := range page.Sinks {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/logging/v2beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := logging.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
  // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
  // If the sink does not exist, it is created.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}" // TODO: Update placeholder value.

  resp, err := c.Projects.Sinks.Update(sinkName, &logging.LogSink{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
