
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }


  listLogEntriesRequestBody := logging.ListLogEntriesRequest{
    // TODO: Add desired fields of the `listLogEntriesRequestBody` variable.
  }

  res, err := service.Entries.List(listLogEntriesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }


  writeLogEntriesRequestBody := logging.WriteLogEntriesRequest{
    // TODO: Add desired fields of the `writeLogEntriesRequestBody` variable.
  }

  res, err := service.Entries.Write(writeLogEntriesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }


  req := service.MonitoredResourceDescriptors.List()
  if err := req.Pages(ctx, func(page *logging.ListMonitoredResourceDescriptorsResponse) error {
    for _, monitoredResourceDescriptor := range page.ResourceDescriptors {
      // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
      out, err := json.MarshalIndent(monitoredResourceDescriptor, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
  logName := "projects/{MY-PROJECT}/logs/{MY-LOG}"

  res, err := service.Projects.Logs.Delete(logName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Create` method:

  // * The resource name of the project in which to create the metric. Example:
  //   `"projects/my-project-id"`. The new metric must be provided in the request.
  projectName := "projects/{MY-PROJECT}"

  logMetricBody := logging.LogMetric{
    // TODO: Add desired fields of the `logMetricBody` variable.
  }

  res, err := service.Projects.Metrics.Create(projectName, &logMetricBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * The resource name of the metric to delete. Example:
  //   `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"

  res, err := service.Projects.Metrics.Delete(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"

  res, err := service.Projects.Metrics.Get(metricName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Required. The resource name of the project containing the metrics. Example:
  //   `"projects/my-project-id"`.
  projectName := "projects/{MY-PROJECT}"

  req := service.Projects.Metrics.List(projectName)
  if err := req.Pages(ctx, func(page *logging.ListLogMetricsResponse) error {
    for _, logMetric := range page.Metrics {
      // TODO: Change code below to process each `logMetric` resource:
      out, err := json.MarshalIndent(logMetric, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * The resource name of the metric to update. Example:
  //   `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must be provided in the
  //   request and have the same identifier that is specified in `metricName`. If the metric does not
  //   exist, it is created.
  metricName := "projects/{MY-PROJECT}/metrics/{MY-METRIC}"

  logMetricBody := logging.LogMetric{
    // TODO: Add desired fields of the `logMetricBody` variable.
  }

  res, err := service.Projects.Metrics.Update(metricName, &logMetricBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Create` method:

  // * The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
  //   The new sink must be provided in the request.
  projectName := "projects/{MY-PROJECT}"

  logSinkBody := logging.LogSink{
    // TODO: Add desired fields of the `logSinkBody` variable.
  }

  res, err := service.Projects.Sinks.Create(projectName, &logSinkBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"

  res, err := service.Projects.Sinks.Delete(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"

  res, err := service.Projects.Sinks.Get(sinkName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Required. The resource name of the project containing the sinks. Example:
  //   `"projects/my-logging-project"`, `"projects/01234567890"`.
  projectName := "projects/{MY-PROJECT}"

  req := service.Projects.Sinks.List(projectName)
  if err := req.Pages(ctx, func(page *logging.ListSinksResponse) error {
    for _, logSink := range page.Sinks {
      // TODO: Change code below to process each `logSink` resource:
      out, err := json.MarshalIndent(logSink, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/logging/v2beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, logging.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the logging service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := logging.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
  //   updated sink must be provided in the request and have the same name that is specified in
  //   `sinkName`. If the sink does not exist, it is created.
  sinkName := "projects/{MY-PROJECT}/sinks/{MY-SINK}"

  logSinkBody := logging.LogSink{
    // TODO: Add desired fields of the `logSinkBody` variable.
  }

  res, err := service.Projects.Sinks.Update(sinkName, &logSinkBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
