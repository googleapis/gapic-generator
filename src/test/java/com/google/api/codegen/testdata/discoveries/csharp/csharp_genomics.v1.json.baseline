
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.BatchCreateAnnotationsRequest requestBody = new Data.BatchCreateAnnotationsRequest();

            AnnotationsResource.BatchCreateRequest request = genomicsService.Annotations.BatchCreate(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BatchCreateAnnotationsResponse response = request.Execute();
            // Data.BatchCreateAnnotationsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.Annotation requestBody = new Data.Annotation();

            AnnotationsResource.CreateRequest request = genomicsService.Annotations.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Annotation response = request.Execute();
            // Data.Annotation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation to be deleted.
            string annotationId = "";  // TODO: Update placeholder value.

            AnnotationsResource.DeleteRequest request = genomicsService.Annotations.Delete(annotationId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation to be retrieved.
            string annotationId = "";  // TODO: Update placeholder value.

            AnnotationsResource.GetRequest request = genomicsService.Annotations.Get(annotationId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Annotation response = request.Execute();
            // Data.Annotation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchAnnotationsRequest requestBody = new Data.SearchAnnotationsRequest();

            AnnotationsResource.SearchRequest request = genomicsService.Annotations.Search(requestBody);

            Data.SearchAnnotationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Annotations == null)
                {
                    continue;
                }
                foreach (Data.Annotation annotation in response.Annotations)
                {
                    // TODO: Change code below to process each `annotation` resource:
                    Console.WriteLine(annotation);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation to be updated.
            string annotationId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.Annotation requestBody = new Data.Annotation();

            AnnotationsResource.UpdateRequest request = genomicsService.Annotations.Update(requestBody, annotationId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Annotation response = request.Execute();
            // Data.Annotation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.AnnotationSet requestBody = new Data.AnnotationSet();

            AnnotationsetsResource.CreateRequest request = genomicsService.Annotationsets.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AnnotationSet response = request.Execute();
            // Data.AnnotationSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation set to be deleted.
            string annotationSetId = "";  // TODO: Update placeholder value.

            AnnotationsetsResource.DeleteRequest request = genomicsService.Annotationsets.Delete(annotationSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation set to be retrieved.
            string annotationSetId = "";  // TODO: Update placeholder value.

            AnnotationsetsResource.GetRequest request = genomicsService.Annotationsets.Get(annotationSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AnnotationSet response = request.Execute();
            // Data.AnnotationSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchAnnotationSetsRequest requestBody = new Data.SearchAnnotationSetsRequest();

            AnnotationsetsResource.SearchRequest request = genomicsService.Annotationsets.Search(requestBody);

            Data.SearchAnnotationSetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.AnnotationSets == null)
                {
                    continue;
                }
                foreach (Data.AnnotationSet annotationSet in response.AnnotationSets)
                {
                    // TODO: Change code below to process each `annotationSet` resource:
                    Console.WriteLine(annotationSet);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the annotation set to be updated.
            string annotationSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.AnnotationSet requestBody = new Data.AnnotationSet();

            AnnotationsetsResource.UpdateRequest request = genomicsService.Annotationsets.Update(requestBody, annotationSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AnnotationSet response = request.Execute();
            // Data.AnnotationSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.CallSet requestBody = new Data.CallSet();

            CallsetsResource.CreateRequest request = genomicsService.Callsets.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CallSet response = request.Execute();
            // Data.CallSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the call set to be deleted.
            string callSetId = "";  // TODO: Update placeholder value.

            CallsetsResource.DeleteRequest request = genomicsService.Callsets.Delete(callSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the call set.
            string callSetId = "";  // TODO: Update placeholder value.

            CallsetsResource.GetRequest request = genomicsService.Callsets.Get(callSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CallSet response = request.Execute();
            // Data.CallSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the call set to be updated.
            string callSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`. Only assigned
            // fields will be changed:
            Data.CallSet requestBody = new Data.CallSet();

            CallsetsResource.PatchRequest request = genomicsService.Callsets.Patch(requestBody, callSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CallSet response = request.Execute();
            // Data.CallSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchCallSetsRequest requestBody = new Data.SearchCallSetsRequest();

            CallsetsResource.SearchRequest request = genomicsService.Callsets.Search(requestBody);

            Data.SearchCallSetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CallSets == null)
                {
                    continue;
                }
                foreach (Data.CallSet callSet in response.CallSets)
                {
                    // TODO: Change code below to process each `callSet` resource:
                    Console.WriteLine(callSet);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.Dataset requestBody = new Data.Dataset();

            DatasetsResource.CreateRequest request = genomicsService.Datasets.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the dataset to be deleted.
            string datasetId = "";  // TODO: Update placeholder value.

            DatasetsResource.DeleteRequest request = genomicsService.Datasets.Delete(datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the dataset.
            string datasetId = "";  // TODO: Update placeholder value.

            DatasetsResource.GetRequest request = genomicsService.Datasets.Get(datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.GetIamPolicyRequest requestBody = new Data.GetIamPolicyRequest();

            DatasetsResource.GetIamPolicyRequest request = genomicsService.Datasets.GetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            DatasetsResource.ListRequest request = genomicsService.Datasets.List();

            Data.ListDatasetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Datasets == null)
                {
                    continue;
                }
                foreach (Data.Dataset dataset in response.Datasets)
                {
                    // TODO: Change code below to process each `dataset` resource:
                    Console.WriteLine(dataset);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the dataset to be updated.
            string datasetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`. Only assigned
            // fields will be changed:
            Data.Dataset requestBody = new Data.Dataset();

            DatasetsResource.PatchRequest request = genomicsService.Datasets.Patch(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SetIamPolicyRequest requestBody = new Data.SetIamPolicyRequest();

            DatasetsResource.SetIamPolicyRequest request = genomicsService.Datasets.SetIamPolicy(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Policy response = request.Execute();
            // Data.Policy response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
            string resource = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.TestIamPermissionsRequest requestBody = new Data.TestIamPermissionsRequest();

            DatasetsResource.TestIamPermissionsRequest request = genomicsService.Datasets.TestIamPermissions(requestBody, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TestIamPermissionsResponse response = request.Execute();
            // Data.TestIamPermissionsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the dataset to be undeleted.
            string datasetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.UndeleteDatasetRequest requestBody = new Data.UndeleteDatasetRequest();

            DatasetsResource.UndeleteRequest request = genomicsService.Datasets.Undelete(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The name of the operation resource to be cancelled.
            string name = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.CancelOperationRequest requestBody = new Data.CancelOperationRequest();

            OperationsResource.CancelRequest request = genomicsService.Operations.Cancel(requestBody, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The name of the operation resource.
            string name = "";  // TODO: Update placeholder value.

            OperationsResource.GetRequest request = genomicsService.Operations.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The name of the operation collection.
            string name = "";  // TODO: Update placeholder value.

            OperationsResource.ListRequest request = genomicsService.Operations.List(name);

            Data.ListOperationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(operation);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // Required. The ID of the read group set over which coverage is requested.
            string readGroupSetId = "";  // TODO: Update placeholder value.

            ReadgroupsetsResource.CoveragebucketsResource.ListRequest request = genomicsService.Readgroupsets.Coveragebuckets.List(readGroupSetId);

            Data.ListCoverageBucketsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.CoverageBuckets == null)
                {
                    continue;
                }
                foreach (Data.CoverageBucket coverageBucket in response.CoverageBuckets)
                {
                    // TODO: Change code below to process each `coverageBucket` resource:
                    Console.WriteLine(coverageBucket);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the read group set to be deleted. The caller must have WRITE permissions to the dataset
            // associated with this read group set.
            string readGroupSetId = "";  // TODO: Update placeholder value.

            ReadgroupsetsResource.DeleteRequest request = genomicsService.Readgroupsets.Delete(readGroupSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // Required. The ID of the read group set to export. The caller must have READ access to this read
            // group set.
            string readGroupSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.ExportReadGroupSetRequest requestBody = new Data.ExportReadGroupSetRequest();

            ReadgroupsetsResource.ExportRequest request = genomicsService.Readgroupsets.Export(requestBody, readGroupSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the read group set.
            string readGroupSetId = "";  // TODO: Update placeholder value.

            ReadgroupsetsResource.GetRequest request = genomicsService.Readgroupsets.Get(readGroupSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ReadGroupSet response = request.Execute();
            // Data.ReadGroupSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.ImportReadGroupSetsRequest requestBody = new Data.ImportReadGroupSetsRequest();

            ReadgroupsetsResource.ImportRequest request = genomicsService.Readgroupsets.Import(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the read group set to be updated. The caller must have WRITE permissions to the dataset
            // associated with this read group set.
            string readGroupSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`. Only assigned
            // fields will be changed:
            Data.ReadGroupSet requestBody = new Data.ReadGroupSet();

            ReadgroupsetsResource.PatchRequest request = genomicsService.Readgroupsets.Patch(requestBody, readGroupSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ReadGroupSet response = request.Execute();
            // Data.ReadGroupSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchReadGroupSetsRequest requestBody = new Data.SearchReadGroupSetsRequest();

            ReadgroupsetsResource.SearchRequest request = genomicsService.Readgroupsets.Search(requestBody);

            Data.SearchReadGroupSetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ReadGroupSets == null)
                {
                    continue;
                }
                foreach (Data.ReadGroupSet readGroupSet in response.ReadGroupSets)
                {
                    // TODO: Change code below to process each `readGroupSet` resource:
                    Console.WriteLine(readGroupSet);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchReadsRequest requestBody = new Data.SearchReadsRequest();

            ReadsResource.SearchRequest request = genomicsService.Reads.Search(requestBody);

            Data.SearchReadsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Alignments == null)
                {
                    continue;
                }
                foreach (Data.Read read in response.Alignments)
                {
                    // TODO: Change code below to process each `read` resource:
                    Console.WriteLine(read);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.StreamReadsRequest requestBody = new Data.StreamReadsRequest();

            ReadsResource.StreamRequest request = genomicsService.Reads.Stream(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.StreamReadsResponse response = request.Execute();
            // Data.StreamReadsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the reference.
            string referenceId = "";  // TODO: Update placeholder value.

            ReferencesResource.BasesResource.ListRequest request = genomicsService.References.Bases.List(referenceId);

            Data.ListBasesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Sequence == null)
                {
                    continue;
                }
                // TODO: Change code below to process each `response.Sequence` resource:
                Console.WriteLine(response.Sequence);

                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the reference.
            string referenceId = "";  // TODO: Update placeholder value.

            ReferencesResource.GetRequest request = genomicsService.References.Get(referenceId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Reference response = request.Execute();
            // Data.Reference response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchReferencesRequest requestBody = new Data.SearchReferencesRequest();

            ReferencesResource.SearchRequest request = genomicsService.References.Search(requestBody);

            Data.SearchReferencesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.References == null)
                {
                    continue;
                }
                foreach (Data.Reference reference in response.References)
                {
                    // TODO: Change code below to process each `reference` resource:
                    Console.WriteLine(reference);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the reference set.
            string referenceSetId = "";  // TODO: Update placeholder value.

            ReferencesetsResource.GetRequest request = genomicsService.Referencesets.Get(referenceSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ReferenceSet response = request.Execute();
            // Data.ReferenceSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchReferenceSetsRequest requestBody = new Data.SearchReferenceSetsRequest();

            ReferencesetsResource.SearchRequest request = genomicsService.Referencesets.Search(requestBody);

            Data.SearchReferenceSetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ReferenceSets == null)
                {
                    continue;
                }
                foreach (Data.ReferenceSet referenceSet in response.ReferenceSets)
                {
                    // TODO: Change code below to process each `referenceSet` resource:
                    Console.WriteLine(referenceSet);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.Variant requestBody = new Data.Variant();

            VariantsResource.CreateRequest request = genomicsService.Variants.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Variant response = request.Execute();
            // Data.Variant response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the variant to be deleted.
            string variantId = "";  // TODO: Update placeholder value.

            VariantsResource.DeleteRequest request = genomicsService.Variants.Delete(variantId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the variant.
            string variantId = "";  // TODO: Update placeholder value.

            VariantsResource.GetRequest request = genomicsService.Variants.Get(variantId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Variant response = request.Execute();
            // Data.Variant response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.ImportVariantsRequest requestBody = new Data.ImportVariantsRequest();

            VariantsResource.ImportRequest request = genomicsService.Variants.Import(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.MergeVariantsRequest requestBody = new Data.MergeVariantsRequest();

            VariantsResource.MergeRequest request = genomicsService.Variants.Merge(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the variant to be updated.
            string variantId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`. Only assigned
            // fields will be changed:
            Data.Variant requestBody = new Data.Variant();

            VariantsResource.PatchRequest request = genomicsService.Variants.Patch(requestBody, variantId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Variant response = request.Execute();
            // Data.Variant response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchVariantsRequest requestBody = new Data.SearchVariantsRequest();

            VariantsResource.SearchRequest request = genomicsService.Variants.Search(requestBody);

            Data.SearchVariantsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Variants == null)
                {
                    continue;
                }
                foreach (Data.Variant variant in response.Variants)
                {
                    // TODO: Change code below to process each `variant` resource:
                    Console.WriteLine(variant);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.StreamVariantsRequest requestBody = new Data.StreamVariantsRequest();

            VariantsResource.StreamRequest request = genomicsService.Variants.Stream(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.StreamVariantsResponse response = request.Execute();
            // Data.StreamVariantsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.VariantSet requestBody = new Data.VariantSet();

            VariantsetsResource.CreateRequest request = genomicsService.Variantsets.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.VariantSet response = request.Execute();
            // Data.VariantSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the variant set to be deleted.
            string variantSetId = "";  // TODO: Update placeholder value.

            VariantsetsResource.DeleteRequest request = genomicsService.Variantsets.Delete(variantSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // Required. The ID of the variant set that contains variant data which should be exported. The caller
            // must have READ access to this variant set.
            string variantSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`:
            Data.ExportVariantSetRequest requestBody = new Data.ExportVariantSetRequest();

            VariantsetsResource.ExportRequest request = genomicsService.Variantsets.Export(requestBody, variantSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // Required. The ID of the variant set.
            string variantSetId = "";  // TODO: Update placeholder value.

            VariantsetsResource.GetRequest request = genomicsService.Variantsets.Get(variantSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.VariantSet response = request.Execute();
            // Data.VariantSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // The ID of the variant to be updated (must already exist).
            string variantSetId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired fields of `requestBody`. Only assigned
            // fields will be changed:
            Data.VariantSet requestBody = new Data.VariantSet();

            VariantsetsResource.PatchRequest request = genomicsService.Variantsets.Patch(requestBody, variantSetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.VariantSet response = request.Execute();
            // Data.VariantSet response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
//    For more information, see:
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Genomics.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Genomics.v1.Data;

namespace GenomicsSample
{
    public class GenomicsExample
    {
        public static void Main(string[] args)
        {
            GenomicsService genomicsService = new GenomicsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-GenomicsSample/0.1",
            });

            // TODO: Assign values to desired fields of `requestBody`:
            Data.SearchVariantSetsRequest requestBody = new Data.SearchVariantSetsRequest();

            VariantsetsResource.SearchRequest request = genomicsService.Variantsets.Search(requestBody);

            Data.SearchVariantSetsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.VariantSets == null)
                {
                    continue;
                }
                foreach (Data.VariantSet variantSet in response.VariantSets)
                {
                    // TODO: Change code below to process each `variantSet` resource:
                    Console.WriteLine(variantSet);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
