
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
            long id = 0L;  // TODO: Update placeholder value.

            BackupRunsResource.DeleteRequest request = sqlAdminService.BackupRuns.Delete(project, instance, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // The ID of this Backup Run.
            long id = 0L;  // TODO: Update placeholder value.

            BackupRunsResource.GetRequest request = sqlAdminService.BackupRuns.Get(project, instance, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BackupRun response = request.Execute();
            // Data.BackupRun response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.BackupRun requestBody = new Data.BackupRun();

            BackupRunsResource.InsertRequest request = sqlAdminService.BackupRuns.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            BackupRunsResource.ListRequest request = sqlAdminService.BackupRuns.List(project, instance);

            Data.BackupRunsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.BackupRun backupRun in response.Items)
                {
                    // TODO: Change code below to process each `backupRun` resource:
                    Console.WriteLine(backupRun);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Name of the database to be deleted in the instance.
            string database = "";  // TODO: Update placeholder value.

            DatabasesResource.DeleteRequest request = sqlAdminService.Databases.Delete(project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Name of the database in the instance.
            string database = "";  // TODO: Update placeholder value.

            DatabasesResource.GetRequest request = sqlAdminService.Databases.Get(project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Database response = request.Execute();
            // Data.Database response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Database requestBody = new Data.Database();

            DatabasesResource.InsertRequest request = sqlAdminService.Databases.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            DatabasesResource.ListRequest request = sqlAdminService.Databases.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DatabasesListResponse response = request.Execute();
            // Data.DatabasesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Name of the database to be updated in the instance.
            string database = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Database requestBody = new Data.Database();

            DatabasesResource.PatchRequest request = sqlAdminService.Databases.Patch(requestBody, project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Name of the database to be updated in the instance.
            string database = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Database requestBody = new Data.Database();

            DatabasesResource.UpdateRequest request = sqlAdminService.Databases.Update(requestBody, project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            FlagsResource.ListRequest request = sqlAdminService.Flags.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FlagsListResponse response = request.Execute();
            // Data.FlagsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the source as well as the clone Cloud SQL instance.
            string project = "";  // TODO: Update placeholder value.

            // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesCloneRequest requestBody = new Data.InstancesCloneRequest();

            InstancesResource.CloneRequest request = sqlAdminService.Instances.Clone(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance to be deleted.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.DeleteRequest request = sqlAdminService.Instances.Delete(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance to be exported.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesExportRequest requestBody = new Data.InstancesExportRequest();

            InstancesResource.ExportRequest request = sqlAdminService.Instances.Export(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // ID of the project that contains the read replica.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesFailoverRequest requestBody = new Data.InstancesFailoverRequest();

            InstancesResource.FailoverRequest request = sqlAdminService.Instances.Failover(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.GetRequest request = sqlAdminService.Instances.Get(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DatabaseInstance response = request.Execute();
            // Data.DatabaseInstance response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesImportRequest requestBody = new Data.InstancesImportRequest();

            InstancesResource.ImportRequest request = sqlAdminService.Instances.Import(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project to which the newly created Cloud SQL instances should belong.
            string project = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();

            InstancesResource.InsertRequest request = sqlAdminService.Instances.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "";  // TODO: Update placeholder value.

            InstancesResource.ListRequest request = sqlAdminService.Instances.List(project);

            Data.InstancesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.DatabaseInstance databaseInstance in response.Items)
                {
                    // TODO: Change code below to process each `databaseInstance` resource:
                    Console.WriteLine(databaseInstance);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();

            InstancesResource.PatchRequest request = sqlAdminService.Instances.Patch(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // ID of the project that contains the read replica.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL read replica instance name.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.PromoteReplicaRequest request = sqlAdminService.Instances.PromoteReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.ResetSslConfigRequest request = sqlAdminService.Instances.ResetSslConfig(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance to be restarted.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.RestartRequest request = sqlAdminService.Instances.Restart(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesRestoreBackupRequest requestBody = new Data.InstancesRestoreBackupRequest();

            InstancesResource.RestoreBackupRequest request = sqlAdminService.Instances.RestoreBackup(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // ID of the project that contains the read replica.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL read replica instance name.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.StartReplicaRequest request = sqlAdminService.Instances.StartReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // ID of the project that contains the read replica.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL read replica instance name.
            string instance = "";  // TODO: Update placeholder value.

            InstancesResource.StopReplicaRequest request = sqlAdminService.Instances.StopReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the Cloud SQL project.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.InstancesTruncateLogRequest requestBody = new Data.InstancesTruncateLogRequest();

            InstancesResource.TruncateLogRequest request = sqlAdminService.Instances.TruncateLog(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();

            InstancesResource.UpdateRequest request = sqlAdminService.Instances.Update(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Instance operation ID.
            string operation = "";  // TODO: Update placeholder value.

            OperationsResource.GetRequest request = sqlAdminService.Operations.Get(project, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            OperationsResource.ListRequest request = sqlAdminService.Operations.List(project, instance);

            Data.OperationsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Items)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(operation);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the Cloud SQL project.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SslCertsCreateEphemeralRequest requestBody = new Data.SslCertsCreateEphemeralRequest();

            SslCertsResource.CreateEphemeralRequest request = sqlAdminService.SslCerts.CreateEphemeral(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCert response = request.Execute();
            // Data.SslCert response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance to be deleted.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Sha1 FingerPrint.
            string sha1Fingerprint = "";  // TODO: Update placeholder value.

            SslCertsResource.DeleteRequest request = sqlAdminService.SslCerts.Delete(project, instance, sha1Fingerprint);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Sha1 FingerPrint.
            string sha1Fingerprint = "";  // TODO: Update placeholder value.

            SslCertsResource.GetRequest request = sqlAdminService.SslCerts.Get(project, instance, sha1Fingerprint);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCert response = request.Execute();
            // Data.SslCert response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project to which the newly created Cloud SQL instances should belong.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.SslCertsInsertRequest requestBody = new Data.SslCertsInsertRequest();

            SslCertsResource.InsertRequest request = sqlAdminService.SslCerts.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCertsInsertResponse response = request.Execute();
            // Data.SslCertsInsertResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "";  // TODO: Update placeholder value.

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            SslCertsResource.ListRequest request = sqlAdminService.SslCerts.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCertsListResponse response = request.Execute();
            // Data.SslCertsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project for which to list tiers.
            string project = "";  // TODO: Update placeholder value.

            TiersResource.ListRequest request = sqlAdminService.Tiers.List(project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TiersListResponse response = request.Execute();
            // Data.TiersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Host of the user in the instance.
            string host = "";  // TODO: Update placeholder value.

            // Name of the user in the instance.
            string name = "";  // TODO: Update placeholder value.

            UsersResource.DeleteRequest request = sqlAdminService.Users.Delete(project, instance, host, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.User requestBody = new Data.User();

            UsersResource.InsertRequest request = sqlAdminService.Users.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            UsersResource.ListRequest request = sqlAdminService.Users.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UsersListResponse response = request.Execute();
            // Data.UsersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;

namespace SQLAdminSample
{
    public class SQLAdminExample
    {
        public static void Main(string[] args)
        {
            SQLAdminService sqlAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-SQLAdminSample/0.1",
            });

            // Project ID of the project that contains the instance.
            string project = "";  // TODO: Update placeholder value.

            // Database instance ID. This does not include the project ID.
            string instance = "";  // TODO: Update placeholder value.

            // Host of the user in the instance.
            string host = "";  // TODO: Update placeholder value.

            // Name of the user in the instance.
            string name = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.User requestBody = new Data.User();

            UsersResource.UpdateRequest request = sqlAdminService.Users.Update(requestBody, project, instance, host, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
