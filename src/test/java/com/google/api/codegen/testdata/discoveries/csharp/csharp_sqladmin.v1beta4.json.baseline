
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
            long id = 0L;


            BackupRunsResource.DeleteRequest request = sQLAdminService.BackupRuns.Delete(project, instance, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // The ID of this Backup Run.
            long id = 0L;


            BackupRunsResource.GetRequest request = sQLAdminService.BackupRuns.Get(project, instance, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BackupRun response = request.Execute();
            // Data.BackupRun response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.BackupRun requestBody = new Data.BackupRun();
            // TODO: Assign values to desired properties of the `requestBody` object.


            BackupRunsResource.InsertRequest request = sQLAdminService.BackupRuns.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            BackupRunsResource.ListRequest request = sQLAdminService.BackupRuns.List(project, instance);

            Data.BackupRunsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.BackupRun backupRun in response.Items)
                {
                    // TODO: Change code below to process each `backupRun` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(backupRun));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Name of the database to be deleted in the instance.
            string database = "{MY-DATABASE}";


            DatabasesResource.DeleteRequest request = sQLAdminService.Databases.Delete(project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Name of the database in the instance.
            string database = "{MY-DATABASE}";


            DatabasesResource.GetRequest request = sQLAdminService.Databases.Get(project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Database response = request.Execute();
            // Data.Database response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.Database requestBody = new Data.Database();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatabasesResource.InsertRequest request = sQLAdminService.Databases.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            DatabasesResource.ListRequest request = sQLAdminService.Databases.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DatabasesListResponse response = request.Execute();
            // Data.DatabasesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Name of the database to be updated in the instance.
            string database = "{MY-DATABASE}";


            Data.Database requestBody = new Data.Database();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            DatabasesResource.PatchRequest request = sQLAdminService.Databases.Patch(requestBody, project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Name of the database to be updated in the instance.
            string database = "{MY-DATABASE}";


            Data.Database requestBody = new Data.Database();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatabasesResource.UpdateRequest request = sQLAdminService.Databases.Update(requestBody, project, instance, database);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            FlagsResource.ListRequest request = sQLAdminService.Flags.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.FlagsListResponse response = request.Execute();
            // Data.FlagsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Clone` method:

            // Project ID of the source as well as the clone Cloud SQL instance.
            string project = "{MY-PROJECT}";

            // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.InstancesCloneRequest requestBody = new Data.InstancesCloneRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.CloneRequest request = sQLAdminService.Instances.Clone(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of the project that contains the instance to be deleted.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            InstancesResource.DeleteRequest request = sQLAdminService.Instances.Delete(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Export` method:

            // Project ID of the project that contains the instance to be exported.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.InstancesExportRequest requestBody = new Data.InstancesExportRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.ExportRequest request = sQLAdminService.Instances.Export(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Failover` method:

            // ID of the project that contains the read replica.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.InstancesFailoverRequest requestBody = new Data.InstancesFailoverRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.FailoverRequest request = sQLAdminService.Instances.Failover(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            InstancesResource.GetRequest request = sQLAdminService.Instances.Get(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DatabaseInstance response = request.Execute();
            // Data.DatabaseInstance response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Import` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.InstancesImportRequest requestBody = new Data.InstancesImportRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.ImportRequest request = sQLAdminService.Instances.Import(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of the project to which the newly created Cloud SQL instances should belong.
            string project = "{MY-PROJECT}";


            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.InsertRequest request = sQLAdminService.Instances.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "{MY-PROJECT}";


            InstancesResource.ListRequest request = sQLAdminService.Instances.List(project);

            Data.InstancesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.DatabaseInstance databaseInstance in response.Items)
                {
                    // TODO: Change code below to process each `databaseInstance` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(databaseInstance));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            InstancesResource.PatchRequest request = sQLAdminService.Instances.Patch(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `PromoteReplica` method:

            // ID of the project that contains the read replica.
            string project = "{MY-PROJECT}";

            // Cloud SQL read replica instance name.
            string instance = "{MY-INSTANCE}";


            InstancesResource.PromoteReplicaRequest request = sQLAdminService.Instances.PromoteReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `ResetSslConfig` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            InstancesResource.ResetSslConfigRequest request = sQLAdminService.Instances.ResetSslConfig(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Restart` method:

            // Project ID of the project that contains the instance to be restarted.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            InstancesResource.RestartRequest request = sQLAdminService.Instances.Restart(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `RestoreBackup` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.InstancesRestoreBackupRequest requestBody = new Data.InstancesRestoreBackupRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.RestoreBackupRequest request = sQLAdminService.Instances.RestoreBackup(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `StartReplica` method:

            // ID of the project that contains the read replica.
            string project = "{MY-PROJECT}";

            // Cloud SQL read replica instance name.
            string instance = "{MY-INSTANCE}";


            InstancesResource.StartReplicaRequest request = sQLAdminService.Instances.StartReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `StopReplica` method:

            // ID of the project that contains the read replica.
            string project = "{MY-PROJECT}";

            // Cloud SQL read replica instance name.
            string instance = "{MY-INSTANCE}";


            InstancesResource.StopReplicaRequest request = sQLAdminService.Instances.StopReplica(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.DatabaseInstance requestBody = new Data.DatabaseInstance();
            // TODO: Assign values to desired properties of the `requestBody` object.


            InstancesResource.UpdateRequest request = sQLAdminService.Instances.Update(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Instance operation ID.
            string operation = "{MY-OPERATION}";


            OperationsResource.GetRequest request = sQLAdminService.Operations.Get(project, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            OperationsResource.ListRequest request = sQLAdminService.Operations.List(project, instance);

            Data.OperationsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Items)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `CreateEphemeral` method:

            // Project ID of the Cloud SQL project.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.SslCertsCreateEphemeralRequest requestBody = new Data.SslCertsCreateEphemeralRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SslCertsResource.CreateEphemeralRequest request = sQLAdminService.SslCerts.CreateEphemeral(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCert response = request.Execute();
            // Data.SslCert response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of the project that contains the instance to be deleted.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Sha1 FingerPrint.
            string sha1Fingerprint = "{MY-SHA1-FINGERPRINT}";


            SslCertsResource.DeleteRequest request = sQLAdminService.SslCerts.Delete(project, instance, sha1Fingerprint);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Sha1 FingerPrint.
            string sha1Fingerprint = "{MY-SHA1-FINGERPRINT}";


            SslCertsResource.GetRequest request = sQLAdminService.SslCerts.Get(project, instance, sha1Fingerprint);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCert response = request.Execute();
            // Data.SslCert response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of the project to which the newly created Cloud SQL instances should belong.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.SslCertsInsertRequest requestBody = new Data.SslCertsInsertRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            SslCertsResource.InsertRequest request = sQLAdminService.SslCerts.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCertsInsertResponse response = request.Execute();
            // Data.SslCertsInsertResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project for which to list Cloud SQL instances.
            string project = "{MY-PROJECT}";

            // Cloud SQL instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            SslCertsResource.ListRequest request = sQLAdminService.SslCerts.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SslCertsListResponse response = request.Execute();
            // Data.SslCertsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project for which to list tiers.
            string project = "{MY-PROJECT}";


            TiersResource.ListRequest request = sQLAdminService.Tiers.List(project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TiersListResponse response = request.Execute();
            // Data.TiersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Host of the user in the instance.
            string host = "{MY-HOST}";

            // Name of the user in the instance.
            string name = "{MY-NAME}";


            UsersResource.DeleteRequest request = sQLAdminService.Users.Delete(project, instance, host, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            Data.User requestBody = new Data.User();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UsersResource.InsertRequest request = sQLAdminService.Users.Insert(requestBody, project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";


            UsersResource.ListRequest request = sQLAdminService.Users.List(project, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.UsersListResponse response = request.Execute();
            // Data.UsersListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.SQLAdmin.v1beta4;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.SQLAdmin.v1beta4.Data;


namespace SQLAdminSample
{
    public class SQLAdminServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            SQLAdminService sQLAdminService = new SQLAdminService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // Project ID of the project that contains the instance.
            string project = "{MY-PROJECT}";

            // Database instance ID. This does not include the project ID.
            string instance = "{MY-INSTANCE}";

            // Host of the user in the instance.
            string host = "{MY-HOST}";

            // Name of the user in the instance.
            string name = "{MY-NAME}";


            Data.User requestBody = new Data.User();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UsersResource.UpdateRequest request = sQLAdminService.Users.Update(requestBody, project, instance, host, name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
