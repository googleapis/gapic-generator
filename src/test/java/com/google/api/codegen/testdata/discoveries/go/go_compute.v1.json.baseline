
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.AddressAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Addresses.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the address resource to delete.
    address = ""

  )

  callResult, err := client.Addresses.Delete(project, region, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the address resource to return.
    address = ""

  )

  callResult, err := client.Addresses.Get(project, region, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""


    requestBody = &compute.Address{}
  )

  callResult, err := client.Addresses.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

  )

  fn := func(page *compute.AddressList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Addresses.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.AutoscalerAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Autoscalers.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // Name of the autoscaler to delete.
    autoscaler = ""

  )

  callResult, err := client.Autoscalers.Delete(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // Name of the autoscaler to return.
    autoscaler = ""

  )

  callResult, err := client.Autoscalers.Get(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""


    requestBody = &compute.Autoscaler{}
  )

  callResult, err := client.Autoscalers.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

  )

  fn := func(page *compute.AutoscalerList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Autoscalers.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // Name of the autoscaler to update.
    autoscaler = ""


    requestBody = &compute.Autoscaler{}
  )

  callResult, err := client.Autoscalers.Patch(project, zone, autoscaler, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""


    requestBody = &compute.Autoscaler{}
  )

  callResult, err := client.Autoscalers.Update(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the BackendService resource to delete.
    backendService = ""

  )

  callResult, err := client.BackendServices.Delete(project, backendService).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the BackendService resource to return.
    backendService = ""

  )

  callResult, err := client.BackendServices.Get(project, backendService).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getHealth' method:
  var (

    project = ""

    // Name of the BackendService resource to which the queried instance belongs.
    backendService = ""


    requestBody = &compute.ResourceGroupReference{}
  )

  callResult, err := client.BackendServices.GetHealth(project, backendService, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.BackendService{}
  )

  callResult, err := client.BackendServices.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.BackendServiceList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.BackendServices.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the BackendService resource to update.
    backendService = ""


    requestBody = &compute.BackendService{}
  )

  callResult, err := client.BackendServices.Patch(project, backendService, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the BackendService resource to update.
    backendService = ""


    requestBody = &compute.BackendService{}
  )

  callResult, err := client.BackendServices.Update(project, backendService, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.DiskTypeAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.DiskTypes.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the disk type to return.
    diskType = ""

  )

  callResult, err := client.DiskTypes.Get(project, zone, diskType).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

  )

  fn := func(page *compute.DiskTypeList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.DiskTypes.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.DiskAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Disks.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'createSnapshot' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the persistent disk to snapshot.
    disk = ""


    requestBody = &compute.Snapshot{}
  )

  callResult, err := client.Disks.CreateSnapshot(project, zone, disk, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the persistent disk to delete.
    disk = ""

  )

  callResult, err := client.Disks.Delete(project, zone, disk).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the persistent disk to return.
    disk = ""

  )

  callResult, err := client.Disks.Get(project, zone, disk).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""


    requestBody = &compute.Disk{}
  )

  callResult, err := client.Disks.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

  )

  fn := func(page *compute.DiskList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Disks.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the firewall rule to delete.
    firewall = ""

  )

  callResult, err := client.Firewalls.Delete(project, firewall).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the firewall rule to return.
    firewall = ""

  )

  callResult, err := client.Firewalls.Get(project, firewall).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Firewall{}
  )

  callResult, err := client.Firewalls.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.FirewallList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Firewalls.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the firewall rule to update.
    firewall = ""


    requestBody = &compute.Firewall{}
  )

  callResult, err := client.Firewalls.Patch(project, firewall, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the firewall rule to update.
    firewall = ""


    requestBody = &compute.Firewall{}
  )

  callResult, err := client.Firewalls.Update(project, firewall, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.ForwardingRuleAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ForwardingRules.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the ForwardingRule resource to delete.
    forwardingRule = ""

  )

  callResult, err := client.ForwardingRules.Delete(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the ForwardingRule resource to return.
    forwardingRule = ""

  )

  callResult, err := client.ForwardingRules.Get(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""


    requestBody = &compute.ForwardingRule{}
  )

  callResult, err := client.ForwardingRules.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

  )

  fn := func(page *compute.ForwardingRuleList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ForwardingRules.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setTarget' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the ForwardingRule resource in which target is to be set.
    forwardingRule = ""


    requestBody = &compute.TargetReference{}
  )

  callResult, err := client.ForwardingRules.SetTarget(project, region, forwardingRule, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the address resource to delete.
    address = ""

  )

  callResult, err := client.GlobalAddresses.Delete(project, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the address resource to return.
    address = ""

  )

  callResult, err := client.GlobalAddresses.Get(project, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Address{}
  )

  callResult, err := client.GlobalAddresses.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.AddressList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.GlobalAddresses.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the ForwardingRule resource to delete.
    forwardingRule = ""

  )

  callResult, err := client.GlobalForwardingRules.Delete(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the ForwardingRule resource to return.
    forwardingRule = ""

  )

  callResult, err := client.GlobalForwardingRules.Get(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.ForwardingRule{}
  )

  callResult, err := client.GlobalForwardingRules.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.ForwardingRuleList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.GlobalForwardingRules.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setTarget' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the ForwardingRule resource in which target is to be set.
    forwardingRule = ""


    requestBody = &compute.TargetReference{}
  )

  callResult, err := client.GlobalForwardingRules.SetTarget(project, forwardingRule, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.OperationAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.GlobalOperations.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Operations resource to delete.
    operation = ""

  )

  if err = client.GlobalOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Operations resource to return.
    operation = ""

  )

  callResult, err := client.GlobalOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.GlobalOperations.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpHealthCheck resource to delete.
    httpHealthCheck = ""

  )

  callResult, err := client.HttpHealthChecks.Delete(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpHealthCheck resource to return.
    httpHealthCheck = ""

  )

  callResult, err := client.HttpHealthChecks.Get(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.HttpHealthCheck{}
  )

  callResult, err := client.HttpHealthChecks.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.HttpHealthCheckList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.HttpHealthChecks.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpHealthCheck resource to update.
    httpHealthCheck = ""


    requestBody = &compute.HttpHealthCheck{}
  )

  callResult, err := client.HttpHealthChecks.Patch(project, httpHealthCheck, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpHealthCheck resource to update.
    httpHealthCheck = ""


    requestBody = &compute.HttpHealthCheck{}
  )

  callResult, err := client.HttpHealthChecks.Update(project, httpHealthCheck, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpsHealthCheck resource to delete.
    httpsHealthCheck = ""

  )

  callResult, err := client.HttpsHealthChecks.Delete(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpsHealthCheck resource to return.
    httpsHealthCheck = ""

  )

  callResult, err := client.HttpsHealthChecks.Get(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.HttpsHealthCheck{}
  )

  callResult, err := client.HttpsHealthChecks.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.HttpsHealthCheckList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.HttpsHealthChecks.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpsHealthCheck resource to update.
    httpsHealthCheck = ""


    requestBody = &compute.HttpsHealthCheck{}
  )

  callResult, err := client.HttpsHealthChecks.Patch(project, httpsHealthCheck, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the HttpsHealthCheck resource to update.
    httpsHealthCheck = ""


    requestBody = &compute.HttpsHealthCheck{}
  )

  callResult, err := client.HttpsHealthChecks.Update(project, httpsHealthCheck, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the image resource to delete.
    image = ""

  )

  callResult, err := client.Images.Delete(project, image).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'deprecate' method:
  var (
    // Project ID for this request.
    project = ""

    // Image name.
    image = ""


    requestBody = &compute.DeprecationStatus{}
  )

  callResult, err := client.Images.Deprecate(project, image, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the image resource to return.
    image = ""

  )

  callResult, err := client.Images.Get(project, image).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Image{}
  )

  callResult, err := client.Images.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.ImageList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Images.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'abandonInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""


    requestBody = &compute.InstanceGroupManagersAbandonInstancesRequest{}
  )

  callResult, err := client.InstanceGroupManagers.AbandonInstances(project, zone, instanceGroupManager, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.InstanceGroupManagerAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.InstanceGroupManagers.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group to delete.
    instanceGroupManager = ""

  )

  callResult, err := client.InstanceGroupManagers.Delete(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'deleteInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""


    requestBody = &compute.InstanceGroupManagersDeleteInstancesRequest{}
  )

  callResult, err := client.InstanceGroupManagers.DeleteInstances(project, zone, instanceGroupManager, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""

  )

  callResult, err := client.InstanceGroupManagers.Get(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where you want to create the managed instance group.
    zone = ""


    requestBody = &compute.InstanceGroupManager{}
  )

  callResult, err := client.InstanceGroupManagers.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

  )

  fn := func(page *compute.InstanceGroupManagerList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.InstanceGroupManagers.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'listManagedInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""

  )

  callResult, err := client.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'recreateInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""


    requestBody = &compute.InstanceGroupManagersRecreateInstancesRequest{}
  )

  callResult, err := client.InstanceGroupManagers.RecreateInstances(project, zone, instanceGroupManager, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'resize' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""

    // The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of instances specified by this parameter.
    size = int64(0)

  )

  callResult, err := client.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setInstanceTemplate' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""


    requestBody = &compute.InstanceGroupManagersSetInstanceTemplateRequest{}
  )

  callResult, err := client.InstanceGroupManagers.SetInstanceTemplate(project, zone, instanceGroupManager, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setTargetPools' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the managed instance group is located.
    zone = ""

    // The name of the managed instance group.
    instanceGroupManager = ""


    requestBody = &compute.InstanceGroupManagersSetTargetPoolsRequest{}
  )

  callResult, err := client.InstanceGroupManagers.SetTargetPools(project, zone, instanceGroupManager, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group where you are adding instances.
    instanceGroup = ""


    requestBody = &compute.InstanceGroupsAddInstancesRequest{}
  )

  callResult, err := client.InstanceGroups.AddInstances(project, zone, instanceGroup, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.InstanceGroupAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.InstanceGroups.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group to delete.
    instanceGroup = ""

  )

  callResult, err := client.InstanceGroups.Delete(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group.
    instanceGroup = ""

  )

  callResult, err := client.InstanceGroups.Get(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where you want to create the instance group.
    zone = ""


    requestBody = &compute.InstanceGroup{}
  )

  callResult, err := client.InstanceGroups.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

  )

  fn := func(page *compute.InstanceGroupList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.InstanceGroups.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'listInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group from which you want to generate a list of included instances.
    instanceGroup = ""


    requestBody = &compute.InstanceGroupsListInstancesRequest{}
  )

  callResult, err := client.InstanceGroups.ListInstances(project, zone, instanceGroup, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'removeInstances' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group where the specified instances will be removed.
    instanceGroup = ""


    requestBody = &compute.InstanceGroupsRemoveInstancesRequest{}
  )

  callResult, err := client.InstanceGroups.RemoveInstances(project, zone, instanceGroup, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setNamedPorts' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone where the instance group is located.
    zone = ""

    // The name of the instance group where the named ports are updated.
    instanceGroup = ""


    requestBody = &compute.InstanceGroupsSetNamedPortsRequest{}
  )

  callResult, err := client.InstanceGroups.SetNamedPorts(project, zone, instanceGroup, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the instance template to delete.
    instanceTemplate = ""

  )

  callResult, err := client.InstanceTemplates.Delete(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the instance template.
    instanceTemplate = ""

  )

  callResult, err := client.InstanceTemplates.Get(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.InstanceTemplate{}
  )

  callResult, err := client.InstanceTemplates.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.InstanceTemplateList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.InstanceTemplates.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addAccessConfig' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // The instance name for this request.
    instance = ""

    // The name of the network interface to add to this instance.
    networkInterface = ""


    requestBody = &compute.AccessConfig{}
  )

  callResult, err := client.Instances.AddAccessConfig(project, zone, instance, networkInterface, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.InstanceAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Instances.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'attachDisk' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // The instance name for this request.
    instance = ""


    requestBody = &compute.AttachedDisk{}
  )

  callResult, err := client.Instances.AttachDisk(project, zone, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance resource to delete.
    instance = ""

  )

  callResult, err := client.Instances.Delete(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'deleteAccessConfig' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // The instance name for this request.
    instance = ""

    // The name of the access config to delete.
    accessConfig = ""

    // The name of the network interface.
    networkInterface = ""

  )

  callResult, err := client.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'detachDisk' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Instance name.
    instance = ""

    // Disk device name to detach.
    deviceName = ""

  )

  callResult, err := client.Instances.DetachDisk(project, zone, instance, deviceName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance resource to return.
    instance = ""

  )

  callResult, err := client.Instances.Get(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getSerialPortOutput' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance scoping this request.
    instance = ""

  )

  callResult, err := client.Instances.GetSerialPortOutput(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""


    requestBody = &compute.Instance{}
  )

  callResult, err := client.Instances.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

  )

  fn := func(page *compute.InstanceList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Instances.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'reset' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance scoping this request.
    instance = ""

  )

  callResult, err := client.Instances.Reset(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setDiskAutoDelete' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // The instance name.
    instance = ""

    // Whether to auto-delete the disk when the instance is deleted.
    autoDelete = false

    // The device name of the disk to modify.
    deviceName = ""

  )

  callResult, err := client.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setMachineType' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance scoping this request.
    instance = ""


    requestBody = &compute.InstancesSetMachineTypeRequest{}
  )

  callResult, err := client.Instances.SetMachineType(project, zone, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setMetadata' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance scoping this request.
    instance = ""


    requestBody = &compute.Metadata{}
  )

  callResult, err := client.Instances.SetMetadata(project, zone, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setScheduling' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Instance name.
    instance = ""


    requestBody = &compute.Scheduling{}
  )

  callResult, err := client.Instances.SetScheduling(project, zone, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setTags' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance scoping this request.
    instance = ""


    requestBody = &compute.Tags{}
  )

  callResult, err := client.Instances.SetTags(project, zone, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'start' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance resource to start.
    instance = ""

  )

  callResult, err := client.Instances.Start(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'stop' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the instance resource to stop.
    instance = ""

  )

  callResult, err := client.Instances.Stop(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the License resource to return.
    license = ""

  )

  callResult, err := client.Licenses.Get(project, license).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.MachineTypeAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.MachineTypes.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

    // Name of the machine type to return.
    machineType = ""

  )

  callResult, err := client.MachineTypes.Get(project, zone, machineType).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // The name of the zone for this request.
    zone = ""

  )

  fn := func(page *compute.MachineTypeList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.MachineTypes.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the network to delete.
    network = ""

  )

  callResult, err := client.Networks.Delete(project, network).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the network to return.
    network = ""

  )

  callResult, err := client.Networks.Get(project, network).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Network{}
  )

  callResult, err := client.Networks.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.NetworkList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Networks.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

  )

  callResult, err := client.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'moveDisk' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.DiskMoveRequest{}
  )

  callResult, err := client.Projects.MoveDisk(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'moveInstance' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.InstanceMoveRequest{}
  )

  callResult, err := client.Projects.MoveInstance(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setCommonInstanceMetadata' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Metadata{}
  )

  callResult, err := client.Projects.SetCommonInstanceMetadata(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setUsageExportBucket' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.UsageExportLocation{}
  )

  callResult, err := client.Projects.SetUsageExportBucket(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the Operations resource to delete.
    operation = ""

  )

  if err = client.RegionOperations.Delete(project, region, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the Operations resource to return.
    operation = ""

  )

  callResult, err := client.RegionOperations.Get(project, region, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

  )

  fn := func(page *compute.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.RegionOperations.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region resource to return.
    region = ""

  )

  callResult, err := client.Regions.Get(project, region).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.RegionList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Regions.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Route resource to delete.
    route = ""

  )

  callResult, err := client.Routes.Delete(project, route).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Route resource to return.
    route = ""

  )

  callResult, err := client.Routes.Get(project, route).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.Route{}
  )

  callResult, err := client.Routes.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.RouteList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Routes.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Snapshot resource to delete.
    snapshot = ""

  )

  callResult, err := client.Snapshots.Delete(project, snapshot).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the Snapshot resource to return.
    snapshot = ""

  )

  callResult, err := client.Snapshots.Get(project, snapshot).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.SnapshotList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Snapshots.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the SslCertificate resource to delete.
    sslCertificate = ""

  )

  callResult, err := client.SslCertificates.Delete(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the SslCertificate resource to return.
    sslCertificate = ""

  )

  callResult, err := client.SslCertificates.Get(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.SslCertificate{}
  )

  callResult, err := client.SslCertificates.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.SslCertificateList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.SslCertificates.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.SubnetworkAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Subnetworks.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the Subnetwork resource to delete.
    subnetwork = ""

  )

  callResult, err := client.Subnetworks.Delete(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the Subnetwork resource to return.
    subnetwork = ""

  )

  callResult, err := client.Subnetworks.Get(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""


    requestBody = &compute.Subnetwork{}
  )

  callResult, err := client.Subnetworks.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

  )

  fn := func(page *compute.SubnetworkList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Subnetworks.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpProxy resource to delete.
    targetHttpProxy = ""

  )

  callResult, err := client.TargetHttpProxies.Delete(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpProxy resource to return.
    targetHttpProxy = ""

  )

  callResult, err := client.TargetHttpProxies.Get(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.TargetHttpProxy{}
  )

  callResult, err := client.TargetHttpProxies.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.TargetHttpProxyList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetHttpProxies.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setUrlMap' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpProxy to set a URL map for.
    targetHttpProxy = ""


    requestBody = &compute.UrlMapReference{}
  )

  callResult, err := client.TargetHttpProxies.SetUrlMap(project, targetHttpProxy, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpsProxy resource to delete.
    targetHttpsProxy = ""

  )

  callResult, err := client.TargetHttpsProxies.Delete(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpsProxy resource to return.
    targetHttpsProxy = ""

  )

  callResult, err := client.TargetHttpsProxies.Get(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.TargetHttpsProxy{}
  )

  callResult, err := client.TargetHttpsProxies.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.TargetHttpsProxyList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetHttpsProxies.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setSslCertificates' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
    targetHttpsProxy = ""


    requestBody = &compute.TargetHttpsProxiesSetSslCertificatesRequest{}
  )

  callResult, err := client.TargetHttpsProxies.SetSslCertificates(project, targetHttpsProxy, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setUrlMap' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the TargetHttpsProxy resource whose URL map is to be set.
    targetHttpsProxy = ""


    requestBody = &compute.UrlMapReference{}
  )

  callResult, err := client.TargetHttpsProxies.SetUrlMap(project, targetHttpsProxy, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.TargetInstanceAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetInstances.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""

    // Name of the TargetInstance resource to delete.
    targetInstance = ""

  )

  callResult, err := client.TargetInstances.Delete(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""

    // Name of the TargetInstance resource to return.
    targetInstance = ""

  )

  callResult, err := client.TargetInstances.Get(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""


    requestBody = &compute.TargetInstance{}
  )

  callResult, err := client.TargetInstances.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""

  )

  fn := func(page *compute.TargetInstanceList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetInstances.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addHealthCheck' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the target pool to add a health check to.
    targetPool = ""


    requestBody = &compute.TargetPoolsAddHealthCheckRequest{}
  )

  callResult, err := client.TargetPools.AddHealthCheck(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'addInstance' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to add instances to.
    targetPool = ""


    requestBody = &compute.TargetPoolsAddInstanceRequest{}
  )

  callResult, err := client.TargetPools.AddInstance(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.TargetPoolAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetPools.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to delete.
    targetPool = ""

  )

  callResult, err := client.TargetPools.Delete(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to return.
    targetPool = ""

  )

  callResult, err := client.TargetPools.Get(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getHealth' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to which the queried instance belongs.
    targetPool = ""


    requestBody = &compute.InstanceReference{}
  )

  callResult, err := client.TargetPools.GetHealth(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""


    requestBody = &compute.TargetPool{}
  )

  callResult, err := client.TargetPools.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

  )

  fn := func(page *compute.TargetPoolList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetPools.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'removeHealthCheck' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the target pool to remove health checks from.
    targetPool = ""


    requestBody = &compute.TargetPoolsRemoveHealthCheckRequest{}
  )

  callResult, err := client.TargetPools.RemoveHealthCheck(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'removeInstance' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to remove instances from.
    targetPool = ""


    requestBody = &compute.TargetPoolsRemoveInstanceRequest{}
  )

  callResult, err := client.TargetPools.RemoveInstance(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setBackup' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region scoping this request.
    region = ""

    // Name of the TargetPool resource to set a backup pool for.
    targetPool = ""


    requestBody = &compute.TargetReference{}
  )

  callResult, err := client.TargetPools.SetBackup(project, region, targetPool, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.TargetVpnGatewayAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetVpnGateways.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the target VPN gateway to delete.
    targetVpnGateway = ""

  )

  callResult, err := client.TargetVpnGateways.Delete(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the target VPN gateway to return.
    targetVpnGateway = ""

  )

  callResult, err := client.TargetVpnGateways.Get(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""


    requestBody = &compute.TargetVpnGateway{}
  )

  callResult, err := client.TargetVpnGateways.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

  )

  fn := func(page *compute.TargetVpnGatewayList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TargetVpnGateways.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the UrlMap resource to delete.
    urlMap = ""

  )

  callResult, err := client.UrlMaps.Delete(project, urlMap).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the UrlMap resource to return.
    urlMap = ""

  )

  callResult, err := client.UrlMaps.Get(project, urlMap).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""


    requestBody = &compute.UrlMap{}
  )

  callResult, err := client.UrlMaps.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.UrlMapList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.UrlMaps.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the UrlMap resource to update.
    urlMap = ""


    requestBody = &compute.UrlMap{}
  )

  callResult, err := client.UrlMaps.Patch(project, urlMap, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the UrlMap resource to update.
    urlMap = ""


    requestBody = &compute.UrlMap{}
  )

  callResult, err := client.UrlMaps.Update(project, urlMap, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'validate' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the UrlMap resource to be validated as.
    urlMap = ""


    requestBody = &compute.UrlMapsValidateRequest{}
  )

  callResult, err := client.UrlMaps.Validate(project, urlMap, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'aggregatedList' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.VpnTunnelAggregatedList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.VpnTunnels.AggregatedList(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the VpnTunnel resource to delete.
    vpnTunnel = ""

  )

  callResult, err := client.VpnTunnels.Delete(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

    // Name of the VpnTunnel resource to return.
    vpnTunnel = ""

  )

  callResult, err := client.VpnTunnels.Get(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""


    requestBody = &compute.VpnTunnel{}
  )

  callResult, err := client.VpnTunnels.Insert(project, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the region for this request.
    region = ""

  )

  fn := func(page *compute.VpnTunnelList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.VpnTunnels.List(project, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // Name of the Operations resource to delete.
    operation = ""

  )

  if err = client.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for this request.
    zone = ""

    // Name of the Operations resource to return.
    operation = ""

  )

  callResult, err := client.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone for request.
    zone = ""

  )

  fn := func(page *compute.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ZoneOperations.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID for this request.
    project = ""

    // Name of the zone resource to return.
    zone = ""

  )

  callResult, err := client.Zones.Get(project, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/compute/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := compute.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID for this request.
    project = ""

  )

  fn := func(page *compute.ZoneList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Zones.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
