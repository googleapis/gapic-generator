
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.Addresses.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.AddressAggregatedList) error {
    for name, addressesScopedList := range page.Items {
      // TODO: Change code below to process each (name: addressesScopedList) element:
      out, err := json.MarshalIndent(addressesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the address resource to delete.
  address := ""

  res, err := service.Addresses.Delete(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the address resource to return.
  address := ""

  res, err := service.Addresses.Get(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  addressBody := compute.Address{
    // TODO: Add desired fields of the `addressBody` variable.
  }

  res, err := service.Addresses.Insert(project, region, &addressBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  req := service.Addresses.List(project, region)
  if err := req.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      out, err := json.MarshalIndent(address, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.Autoscalers.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.AutoscalerAggregatedList) error {
    for name, autoscalersScopedList := range page.Items {
      // TODO: Change code below to process each (name: autoscalersScopedList) element:
      out, err := json.MarshalIndent(autoscalersScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  // * Name of the autoscaler to delete.
  autoscaler := ""

  res, err := service.Autoscalers.Delete(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  // * Name of the autoscaler to return.
  autoscaler := ""

  res, err := service.Autoscalers.Get(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  autoscalerBody := compute.Autoscaler{
    // TODO: Add desired fields of the `autoscalerBody` variable.
  }

  res, err := service.Autoscalers.Insert(project, zone, &autoscalerBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  req := service.Autoscalers.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.AutoscalerList) error {
    for _, autoscaler := range page.Items {
      // TODO: Change code below to process each `autoscaler` resource:
      out, err := json.MarshalIndent(autoscaler, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  // * Name of the autoscaler to update.
  autoscaler := ""

  autoscalerBody := compute.Autoscaler{
    // TODO: Add desired fields of the `autoscalerBody` variable to be changed.
  }

  res, err := service.Autoscalers.Patch(project, zone, autoscaler, &autoscalerBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  autoscalerBody := compute.Autoscaler{
    // TODO: Add desired fields of the `autoscalerBody` variable.
  }

  res, err := service.Autoscalers.Update(project, zone, &autoscalerBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the BackendService resource to delete.
  backendService := ""

  res, err := service.BackendServices.Delete(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the BackendService resource to return.
  backendService := ""

  res, err := service.BackendServices.Get(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `GetHealth` method:

  // * project
  project := ""

  // * Name of the BackendService resource to which the queried instance belongs.
  backendService := ""

  resourceGroupReferenceBody := compute.ResourceGroupReference{
    // TODO: Add desired fields of the `resourceGroupReferenceBody` variable.
  }

  res, err := service.BackendServices.GetHealth(project, backendService, &resourceGroupReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  backendServiceBody := compute.BackendService{
    // TODO: Add desired fields of the `backendServiceBody` variable.
  }

  res, err := service.BackendServices.Insert(project, &backendServiceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.BackendServices.List(project)
  if err := req.Pages(ctx, func(page *compute.BackendServiceList) error {
    for _, backendService := range page.Items {
      // TODO: Change code below to process each `backendService` resource:
      out, err := json.MarshalIndent(backendService, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the BackendService resource to update.
  backendService := ""

  backendServiceBody := compute.BackendService{
    // TODO: Add desired fields of the `backendServiceBody` variable to be changed.
  }

  res, err := service.BackendServices.Patch(project, backendService, &backendServiceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the BackendService resource to update.
  backendService := ""

  backendServiceBody := compute.BackendService{
    // TODO: Add desired fields of the `backendServiceBody` variable.
  }

  res, err := service.BackendServices.Update(project, backendService, &backendServiceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.DiskTypes.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.DiskTypeAggregatedList) error {
    for name, diskTypesScopedList := range page.Items {
      // TODO: Change code below to process each (name: diskTypesScopedList) element:
      out, err := json.MarshalIndent(diskTypesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the disk type to return.
  diskType := ""

  res, err := service.DiskTypes.Get(project, zone, diskType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  req := service.DiskTypes.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.DiskTypeList) error {
    for _, diskType := range page.Items {
      // TODO: Change code below to process each `diskType` resource:
      out, err := json.MarshalIndent(diskType, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.Disks.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.DiskAggregatedList) error {
    for name, disksScopedList := range page.Items {
      // TODO: Change code below to process each (name: disksScopedList) element:
      out, err := json.MarshalIndent(disksScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `CreateSnapshot` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the persistent disk to snapshot.
  disk := ""

  snapshotBody := compute.Snapshot{
    // TODO: Add desired fields of the `snapshotBody` variable.
  }

  res, err := service.Disks.CreateSnapshot(project, zone, disk, &snapshotBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the persistent disk to delete.
  disk := ""

  res, err := service.Disks.Delete(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the persistent disk to return.
  disk := ""

  res, err := service.Disks.Get(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  diskBody := compute.Disk{
    // TODO: Add desired fields of the `diskBody` variable.
  }

  res, err := service.Disks.Insert(project, zone, &diskBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  req := service.Disks.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.DiskList) error {
    for _, disk := range page.Items {
      // TODO: Change code below to process each `disk` resource:
      out, err := json.MarshalIndent(disk, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the firewall rule to delete.
  firewall := ""

  res, err := service.Firewalls.Delete(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the firewall rule to return.
  firewall := ""

  res, err := service.Firewalls.Get(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  firewallBody := compute.Firewall{
    // TODO: Add desired fields of the `firewallBody` variable.
  }

  res, err := service.Firewalls.Insert(project, &firewallBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Firewalls.List(project)
  if err := req.Pages(ctx, func(page *compute.FirewallList) error {
    for _, firewall := range page.Items {
      // TODO: Change code below to process each `firewall` resource:
      out, err := json.MarshalIndent(firewall, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the firewall rule to update.
  firewall := ""

  firewallBody := compute.Firewall{
    // TODO: Add desired fields of the `firewallBody` variable to be changed.
  }

  res, err := service.Firewalls.Patch(project, firewall, &firewallBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the firewall rule to update.
  firewall := ""

  firewallBody := compute.Firewall{
    // TODO: Add desired fields of the `firewallBody` variable.
  }

  res, err := service.Firewalls.Update(project, firewall, &firewallBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.ForwardingRules.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleAggregatedList) error {
    for name, forwardingRulesScopedList := range page.Items {
      // TODO: Change code below to process each (name: forwardingRulesScopedList) element:
      out, err := json.MarshalIndent(forwardingRulesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the ForwardingRule resource to delete.
  forwardingRule := ""

  res, err := service.ForwardingRules.Delete(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the ForwardingRule resource to return.
  forwardingRule := ""

  res, err := service.ForwardingRules.Get(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  forwardingRuleBody := compute.ForwardingRule{
    // TODO: Add desired fields of the `forwardingRuleBody` variable.
  }

  res, err := service.ForwardingRules.Insert(project, region, &forwardingRuleBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  req := service.ForwardingRules.List(project, region)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      out, err := json.MarshalIndent(forwardingRule, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetTarget` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := ""

  targetReferenceBody := compute.TargetReference{
    // TODO: Add desired fields of the `targetReferenceBody` variable.
  }

  res, err := service.ForwardingRules.SetTarget(project, region, forwardingRule, &targetReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the address resource to delete.
  address := ""

  res, err := service.GlobalAddresses.Delete(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the address resource to return.
  address := ""

  res, err := service.GlobalAddresses.Get(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  addressBody := compute.Address{
    // TODO: Add desired fields of the `addressBody` variable.
  }

  res, err := service.GlobalAddresses.Insert(project, &addressBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.GlobalAddresses.List(project)
  if err := req.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      out, err := json.MarshalIndent(address, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the ForwardingRule resource to delete.
  forwardingRule := ""

  res, err := service.GlobalForwardingRules.Delete(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the ForwardingRule resource to return.
  forwardingRule := ""

  res, err := service.GlobalForwardingRules.Get(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  forwardingRuleBody := compute.ForwardingRule{
    // TODO: Add desired fields of the `forwardingRuleBody` variable.
  }

  res, err := service.GlobalForwardingRules.Insert(project, &forwardingRuleBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.GlobalForwardingRules.List(project)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      out, err := json.MarshalIndent(forwardingRule, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetTarget` method:

  // * Project ID for this request.
  project := ""

  // * Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := ""

  targetReferenceBody := compute.TargetReference{
    // TODO: Add desired fields of the `targetReferenceBody` variable.
  }

  res, err := service.GlobalForwardingRules.SetTarget(project, forwardingRule, &targetReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.GlobalOperations.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.OperationAggregatedList) error {
    for name, operationsScopedList := range page.Items {
      // TODO: Change code below to process each (name: operationsScopedList) element:
      out, err := json.MarshalIndent(operationsScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Operations resource to delete.
  operation := ""

  if err := service.GlobalOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Operations resource to return.
  operation := ""

  res, err := service.GlobalOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.GlobalOperations.List(project)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpHealthCheck resource to delete.
  httpHealthCheck := ""

  res, err := service.HttpHealthChecks.Delete(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpHealthCheck resource to return.
  httpHealthCheck := ""

  res, err := service.HttpHealthChecks.Get(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  httpHealthCheckBody := compute.HttpHealthCheck{
    // TODO: Add desired fields of the `httpHealthCheckBody` variable.
  }

  res, err := service.HttpHealthChecks.Insert(project, &httpHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.HttpHealthChecks.List(project)
  if err := req.Pages(ctx, func(page *compute.HttpHealthCheckList) error {
    for _, httpHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpHealthCheck` resource:
      out, err := json.MarshalIndent(httpHealthCheck, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpHealthCheck resource to update.
  httpHealthCheck := ""

  httpHealthCheckBody := compute.HttpHealthCheck{
    // TODO: Add desired fields of the `httpHealthCheckBody` variable to be changed.
  }

  res, err := service.HttpHealthChecks.Patch(project, httpHealthCheck, &httpHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpHealthCheck resource to update.
  httpHealthCheck := ""

  httpHealthCheckBody := compute.HttpHealthCheck{
    // TODO: Add desired fields of the `httpHealthCheckBody` variable.
  }

  res, err := service.HttpHealthChecks.Update(project, httpHealthCheck, &httpHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpsHealthCheck resource to delete.
  httpsHealthCheck := ""

  res, err := service.HttpsHealthChecks.Delete(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpsHealthCheck resource to return.
  httpsHealthCheck := ""

  res, err := service.HttpsHealthChecks.Get(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  httpsHealthCheckBody := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the `httpsHealthCheckBody` variable.
  }

  res, err := service.HttpsHealthChecks.Insert(project, &httpsHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.HttpsHealthChecks.List(project)
  if err := req.Pages(ctx, func(page *compute.HttpsHealthCheckList) error {
    for _, httpsHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpsHealthCheck` resource:
      out, err := json.MarshalIndent(httpsHealthCheck, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := ""

  httpsHealthCheckBody := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the `httpsHealthCheckBody` variable to be changed.
  }

  res, err := service.HttpsHealthChecks.Patch(project, httpsHealthCheck, &httpsHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := ""

  httpsHealthCheckBody := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the `httpsHealthCheckBody` variable.
  }

  res, err := service.HttpsHealthChecks.Update(project, httpsHealthCheck, &httpsHealthCheckBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the image resource to delete.
  image := ""

  res, err := service.Images.Delete(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Deprecate` method:

  // * Project ID for this request.
  project := ""

  // * Image name.
  image := ""

  deprecationStatusBody := compute.DeprecationStatus{
    // TODO: Add desired fields of the `deprecationStatusBody` variable.
  }

  res, err := service.Images.Deprecate(project, image, &deprecationStatusBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the image resource to return.
  image := ""

  res, err := service.Images.Get(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  imageBody := compute.Image{
    // TODO: Add desired fields of the `imageBody` variable.
  }

  res, err := service.Images.Insert(project, &imageBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Images.List(project)
  if err := req.Pages(ctx, func(page *compute.ImageList) error {
    for _, image := range page.Items {
      // TODO: Change code below to process each `image` resource:
      out, err := json.MarshalIndent(image, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AbandonInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  instanceGroupManagersAbandonInstancesRequestBody := compute.InstanceGroupManagersAbandonInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupManagersAbandonInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroupManagers.AbandonInstances(project, zone, instanceGroupManager, &instanceGroupManagersAbandonInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.InstanceGroupManagers.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupManagerAggregatedList) error {
    for name, instanceGroupManagersScopedList := range page.Items {
      // TODO: Change code below to process each (name: instanceGroupManagersScopedList) element:
      out, err := json.MarshalIndent(instanceGroupManagersScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group to delete.
  instanceGroupManager := ""

  res, err := service.InstanceGroupManagers.Delete(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `DeleteInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  instanceGroupManagersDeleteInstancesRequestBody := compute.InstanceGroupManagersDeleteInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupManagersDeleteInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroupManagers.DeleteInstances(project, zone, instanceGroupManager, &instanceGroupManagersDeleteInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  res, err := service.InstanceGroupManagers.Get(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where you want to create the managed instance group.
  zone := ""

  instanceGroupManagerBody := compute.InstanceGroupManager{
    // TODO: Add desired fields of the `instanceGroupManagerBody` variable.
  }

  res, err := service.InstanceGroupManagers.Insert(project, zone, &instanceGroupManagerBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  req := service.InstanceGroupManagers.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupManagerList) error {
    for _, instanceGroupManager := range page.Items {
      // TODO: Change code below to process each `instanceGroupManager` resource:
      out, err := json.MarshalIndent(instanceGroupManager, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `ListManagedInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  res, err := service.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `RecreateInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  instanceGroupManagersRecreateInstancesRequestBody := compute.InstanceGroupManagersRecreateInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupManagersRecreateInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroupManagers.RecreateInstances(project, zone, instanceGroupManager, &instanceGroupManagersRecreateInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Resize` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  // * The number of running instances that the managed instance group should maintain at any given time.
  //   The group automatically adds or removes instances to maintain the number of instances specified by
  //   this parameter.
  size := int64(0)

  res, err := service.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetInstanceTemplate` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  instanceGroupManagersSetInstanceTemplateRequestBody := compute.InstanceGroupManagersSetInstanceTemplateRequest{
    // TODO: Add desired fields of the `instanceGroupManagersSetInstanceTemplateRequestBody` variable.
  }

  res, err := service.InstanceGroupManagers.SetInstanceTemplate(project, zone, instanceGroupManager, &instanceGroupManagersSetInstanceTemplateRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetTargetPools` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the managed instance group is located.
  zone := ""

  // * The name of the managed instance group.
  instanceGroupManager := ""

  instanceGroupManagersSetTargetPoolsRequestBody := compute.InstanceGroupManagersSetTargetPoolsRequest{
    // TODO: Add desired fields of the `instanceGroupManagersSetTargetPoolsRequestBody` variable.
  }

  res, err := service.InstanceGroupManagers.SetTargetPools(project, zone, instanceGroupManager, &instanceGroupManagersSetTargetPoolsRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AddInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group where you are adding instances.
  instanceGroup := ""

  instanceGroupsAddInstancesRequestBody := compute.InstanceGroupsAddInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupsAddInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroups.AddInstances(project, zone, instanceGroup, &instanceGroupsAddInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.InstanceGroups.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupAggregatedList) error {
    for name, instanceGroupsScopedList := range page.Items {
      // TODO: Change code below to process each (name: instanceGroupsScopedList) element:
      out, err := json.MarshalIndent(instanceGroupsScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group to delete.
  instanceGroup := ""

  res, err := service.InstanceGroups.Delete(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group.
  instanceGroup := ""

  res, err := service.InstanceGroups.Get(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where you want to create the instance group.
  zone := ""

  instanceGroupBody := compute.InstanceGroup{
    // TODO: Add desired fields of the `instanceGroupBody` variable.
  }

  res, err := service.InstanceGroups.Insert(project, zone, &instanceGroupBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  req := service.InstanceGroups.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupList) error {
    for _, instanceGroup := range page.Items {
      // TODO: Change code below to process each `instanceGroup` resource:
      out, err := json.MarshalIndent(instanceGroup, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `ListInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group from which you want to generate a list of included instances.
  instanceGroup := ""

  instanceGroupsListInstancesRequestBody := compute.InstanceGroupsListInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupsListInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroups.ListInstances(project, zone, instanceGroup, &instanceGroupsListInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `RemoveInstances` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group where the specified instances will be removed.
  instanceGroup := ""

  instanceGroupsRemoveInstancesRequestBody := compute.InstanceGroupsRemoveInstancesRequest{
    // TODO: Add desired fields of the `instanceGroupsRemoveInstancesRequestBody` variable.
  }

  res, err := service.InstanceGroups.RemoveInstances(project, zone, instanceGroup, &instanceGroupsRemoveInstancesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetNamedPorts` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone where the instance group is located.
  zone := ""

  // * The name of the instance group where the named ports are updated.
  instanceGroup := ""

  instanceGroupsSetNamedPortsRequestBody := compute.InstanceGroupsSetNamedPortsRequest{
    // TODO: Add desired fields of the `instanceGroupsSetNamedPortsRequestBody` variable.
  }

  res, err := service.InstanceGroups.SetNamedPorts(project, zone, instanceGroup, &instanceGroupsSetNamedPortsRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the instance template to delete.
  instanceTemplate := ""

  res, err := service.InstanceTemplates.Delete(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the instance template.
  instanceTemplate := ""

  res, err := service.InstanceTemplates.Get(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  instanceTemplateBody := compute.InstanceTemplate{
    // TODO: Add desired fields of the `instanceTemplateBody` variable.
  }

  res, err := service.InstanceTemplates.Insert(project, &instanceTemplateBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.InstanceTemplates.List(project)
  if err := req.Pages(ctx, func(page *compute.InstanceTemplateList) error {
    for _, instanceTemplate := range page.Items {
      // TODO: Change code below to process each `instanceTemplate` resource:
      out, err := json.MarshalIndent(instanceTemplate, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AddAccessConfig` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * The instance name for this request.
  instance := ""

  // * The name of the network interface to add to this instance.
  networkInterface := ""

  accessConfigBody := compute.AccessConfig{
    // TODO: Add desired fields of the `accessConfigBody` variable.
  }

  res, err := service.Instances.AddAccessConfig(project, zone, instance, networkInterface, &accessConfigBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.Instances.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceAggregatedList) error {
    for name, instancesScopedList := range page.Items {
      // TODO: Change code below to process each (name: instancesScopedList) element:
      out, err := json.MarshalIndent(instancesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AttachDisk` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * The instance name for this request.
  instance := ""

  attachedDiskBody := compute.AttachedDisk{
    // TODO: Add desired fields of the `attachedDiskBody` variable.
  }

  res, err := service.Instances.AttachDisk(project, zone, instance, &attachedDiskBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance resource to delete.
  instance := ""

  res, err := service.Instances.Delete(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `DeleteAccessConfig` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * The instance name for this request.
  instance := ""

  // * The name of the access config to delete.
  accessConfig := ""

  // * The name of the network interface.
  networkInterface := ""

  res, err := service.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `DetachDisk` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Instance name.
  instance := ""

  // * Disk device name to detach.
  deviceName := ""

  res, err := service.Instances.DetachDisk(project, zone, instance, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance resource to return.
  instance := ""

  res, err := service.Instances.Get(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `GetSerialPortOutput` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance scoping this request.
  instance := ""

  res, err := service.Instances.GetSerialPortOutput(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  instanceBody := compute.Instance{
    // TODO: Add desired fields of the `instanceBody` variable.
  }

  res, err := service.Instances.Insert(project, zone, &instanceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  req := service.Instances.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceList) error {
    for _, instance := range page.Items {
      // TODO: Change code below to process each `instance` resource:
      out, err := json.MarshalIndent(instance, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Reset` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance scoping this request.
  instance := ""

  res, err := service.Instances.Reset(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetDiskAutoDelete` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * The instance name.
  instance := ""

  // * Whether to auto-delete the disk when the instance is deleted.
  autoDelete := false

  // * The device name of the disk to modify.
  deviceName := ""

  res, err := service.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetMachineType` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance scoping this request.
  instance := ""

  instancesSetMachineTypeRequestBody := compute.InstancesSetMachineTypeRequest{
    // TODO: Add desired fields of the `instancesSetMachineTypeRequestBody` variable.
  }

  res, err := service.Instances.SetMachineType(project, zone, instance, &instancesSetMachineTypeRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetMetadata` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance scoping this request.
  instance := ""

  metadataBody := compute.Metadata{
    // TODO: Add desired fields of the `metadataBody` variable.
  }

  res, err := service.Instances.SetMetadata(project, zone, instance, &metadataBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetScheduling` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Instance name.
  instance := ""

  schedulingBody := compute.Scheduling{
    // TODO: Add desired fields of the `schedulingBody` variable.
  }

  res, err := service.Instances.SetScheduling(project, zone, instance, &schedulingBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetTags` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance scoping this request.
  instance := ""

  tagsBody := compute.Tags{
    // TODO: Add desired fields of the `tagsBody` variable.
  }

  res, err := service.Instances.SetTags(project, zone, instance, &tagsBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Start` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance resource to start.
  instance := ""

  res, err := service.Instances.Start(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Stop` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the instance resource to stop.
  instance := ""

  res, err := service.Instances.Stop(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the License resource to return.
  license := ""

  res, err := service.Licenses.Get(project, license).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.MachineTypes.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.MachineTypeAggregatedList) error {
    for name, machineTypesScopedList := range page.Items {
      // TODO: Change code below to process each (name: machineTypesScopedList) element:
      out, err := json.MarshalIndent(machineTypesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  // * Name of the machine type to return.
  machineType := ""

  res, err := service.MachineTypes.Get(project, zone, machineType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * The name of the zone for this request.
  zone := ""

  req := service.MachineTypes.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.MachineTypeList) error {
    for _, machineType := range page.Items {
      // TODO: Change code below to process each `machineType` resource:
      out, err := json.MarshalIndent(machineType, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the network to delete.
  network := ""

  res, err := service.Networks.Delete(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the network to return.
  network := ""

  res, err := service.Networks.Get(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  networkBody := compute.Network{
    // TODO: Add desired fields of the `networkBody` variable.
  }

  res, err := service.Networks.Insert(project, &networkBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Networks.List(project)
  if err := req.Pages(ctx, func(page *compute.NetworkList) error {
    for _, network := range page.Items {
      // TODO: Change code below to process each `network` resource:
      out, err := json.MarshalIndent(network, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  res, err := service.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `MoveDisk` method:

  // * Project ID for this request.
  project := ""

  diskMoveRequestBody := compute.DiskMoveRequest{
    // TODO: Add desired fields of the `diskMoveRequestBody` variable.
  }

  res, err := service.Projects.MoveDisk(project, &diskMoveRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `MoveInstance` method:

  // * Project ID for this request.
  project := ""

  instanceMoveRequestBody := compute.InstanceMoveRequest{
    // TODO: Add desired fields of the `instanceMoveRequestBody` variable.
  }

  res, err := service.Projects.MoveInstance(project, &instanceMoveRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetCommonInstanceMetadata` method:

  // * Project ID for this request.
  project := ""

  metadataBody := compute.Metadata{
    // TODO: Add desired fields of the `metadataBody` variable.
  }

  res, err := service.Projects.SetCommonInstanceMetadata(project, &metadataBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetUsageExportBucket` method:

  // * Project ID for this request.
  project := ""

  usageExportLocationBody := compute.UsageExportLocation{
    // TODO: Add desired fields of the `usageExportLocationBody` variable.
  }

  res, err := service.Projects.SetUsageExportBucket(project, &usageExportLocationBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the Operations resource to delete.
  operation := ""

  if err := service.RegionOperations.Delete(project, region, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the Operations resource to return.
  operation := ""

  res, err := service.RegionOperations.Get(project, region, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  req := service.RegionOperations.List(project, region)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region resource to return.
  region := ""

  res, err := service.Regions.Get(project, region).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Regions.List(project)
  if err := req.Pages(ctx, func(page *compute.RegionList) error {
    for _, region := range page.Items {
      // TODO: Change code below to process each `region` resource:
      out, err := json.MarshalIndent(region, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Route resource to delete.
  route := ""

  res, err := service.Routes.Delete(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Route resource to return.
  route := ""

  res, err := service.Routes.Get(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  routeBody := compute.Route{
    // TODO: Add desired fields of the `routeBody` variable.
  }

  res, err := service.Routes.Insert(project, &routeBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Routes.List(project)
  if err := req.Pages(ctx, func(page *compute.RouteList) error {
    for _, route := range page.Items {
      // TODO: Change code below to process each `route` resource:
      out, err := json.MarshalIndent(route, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Snapshot resource to delete.
  snapshot := ""

  res, err := service.Snapshots.Delete(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the Snapshot resource to return.
  snapshot := ""

  res, err := service.Snapshots.Get(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Snapshots.List(project)
  if err := req.Pages(ctx, func(page *compute.SnapshotList) error {
    for _, snapshot := range page.Items {
      // TODO: Change code below to process each `snapshot` resource:
      out, err := json.MarshalIndent(snapshot, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the SslCertificate resource to delete.
  sslCertificate := ""

  res, err := service.SslCertificates.Delete(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the SslCertificate resource to return.
  sslCertificate := ""

  res, err := service.SslCertificates.Get(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  sslCertificateBody := compute.SslCertificate{
    // TODO: Add desired fields of the `sslCertificateBody` variable.
  }

  res, err := service.SslCertificates.Insert(project, &sslCertificateBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.SslCertificates.List(project)
  if err := req.Pages(ctx, func(page *compute.SslCertificateList) error {
    for _, sslCertificate := range page.Items {
      // TODO: Change code below to process each `sslCertificate` resource:
      out, err := json.MarshalIndent(sslCertificate, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.Subnetworks.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.SubnetworkAggregatedList) error {
    for name, subnetworksScopedList := range page.Items {
      // TODO: Change code below to process each (name: subnetworksScopedList) element:
      out, err := json.MarshalIndent(subnetworksScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the Subnetwork resource to delete.
  subnetwork := ""

  res, err := service.Subnetworks.Delete(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the Subnetwork resource to return.
  subnetwork := ""

  res, err := service.Subnetworks.Get(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  subnetworkBody := compute.Subnetwork{
    // TODO: Add desired fields of the `subnetworkBody` variable.
  }

  res, err := service.Subnetworks.Insert(project, region, &subnetworkBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  req := service.Subnetworks.List(project, region)
  if err := req.Pages(ctx, func(page *compute.SubnetworkList) error {
    for _, subnetwork := range page.Items {
      // TODO: Change code below to process each `subnetwork` resource:
      out, err := json.MarshalIndent(subnetwork, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpProxy resource to delete.
  targetHttpProxy := ""

  res, err := service.TargetHttpProxies.Delete(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpProxy resource to return.
  targetHttpProxy := ""

  res, err := service.TargetHttpProxies.Get(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  targetHttpProxyBody := compute.TargetHttpProxy{
    // TODO: Add desired fields of the `targetHttpProxyBody` variable.
  }

  res, err := service.TargetHttpProxies.Insert(project, &targetHttpProxyBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.TargetHttpProxies.List(project)
  if err := req.Pages(ctx, func(page *compute.TargetHttpProxyList) error {
    for _, targetHttpProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpProxy` resource:
      out, err := json.MarshalIndent(targetHttpProxy, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetUrlMap` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpProxy to set a URL map for.
  targetHttpProxy := ""

  urlMapReferenceBody := compute.UrlMapReference{
    // TODO: Add desired fields of the `urlMapReferenceBody` variable.
  }

  res, err := service.TargetHttpProxies.SetUrlMap(project, targetHttpProxy, &urlMapReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpsProxy resource to delete.
  targetHttpsProxy := ""

  res, err := service.TargetHttpsProxies.Delete(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpsProxy resource to return.
  targetHttpsProxy := ""

  res, err := service.TargetHttpsProxies.Get(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  targetHttpsProxyBody := compute.TargetHttpsProxy{
    // TODO: Add desired fields of the `targetHttpsProxyBody` variable.
  }

  res, err := service.TargetHttpsProxies.Insert(project, &targetHttpsProxyBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.TargetHttpsProxies.List(project)
  if err := req.Pages(ctx, func(page *compute.TargetHttpsProxyList) error {
    for _, targetHttpsProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpsProxy` resource:
      out, err := json.MarshalIndent(targetHttpsProxy, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetSslCertificates` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
  targetHttpsProxy := ""

  targetHttpsProxiesSetSslCertificatesRequestBody := compute.TargetHttpsProxiesSetSslCertificatesRequest{
    // TODO: Add desired fields of the `targetHttpsProxiesSetSslCertificatesRequestBody` variable.
  }

  res, err := service.TargetHttpsProxies.SetSslCertificates(project, targetHttpsProxy, &targetHttpsProxiesSetSslCertificatesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetUrlMap` method:

  // * Project ID for this request.
  project := ""

  // * Name of the TargetHttpsProxy resource whose URL map is to be set.
  targetHttpsProxy := ""

  urlMapReferenceBody := compute.UrlMapReference{
    // TODO: Add desired fields of the `urlMapReferenceBody` variable.
  }

  res, err := service.TargetHttpsProxies.SetUrlMap(project, targetHttpsProxy, &urlMapReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.TargetInstances.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetInstanceAggregatedList) error {
    for name, targetInstancesScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetInstancesScopedList) element:
      out, err := json.MarshalIndent(targetInstancesScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  // * Name of the TargetInstance resource to delete.
  targetInstance := ""

  res, err := service.TargetInstances.Delete(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  // * Name of the TargetInstance resource to return.
  targetInstance := ""

  res, err := service.TargetInstances.Get(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  targetInstanceBody := compute.TargetInstance{
    // TODO: Add desired fields of the `targetInstanceBody` variable.
  }

  res, err := service.TargetInstances.Insert(project, zone, &targetInstanceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  req := service.TargetInstances.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.TargetInstanceList) error {
    for _, targetInstance := range page.Items {
      // TODO: Change code below to process each `targetInstance` resource:
      out, err := json.MarshalIndent(targetInstance, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AddHealthCheck` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the target pool to add a health check to.
  targetPool := ""

  targetPoolsAddHealthCheckRequestBody := compute.TargetPoolsAddHealthCheckRequest{
    // TODO: Add desired fields of the `targetPoolsAddHealthCheckRequestBody` variable.
  }

  res, err := service.TargetPools.AddHealthCheck(project, region, targetPool, &targetPoolsAddHealthCheckRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AddInstance` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to add instances to.
  targetPool := ""

  targetPoolsAddInstanceRequestBody := compute.TargetPoolsAddInstanceRequest{
    // TODO: Add desired fields of the `targetPoolsAddInstanceRequestBody` variable.
  }

  res, err := service.TargetPools.AddInstance(project, region, targetPool, &targetPoolsAddInstanceRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.TargetPools.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetPoolAggregatedList) error {
    for name, targetPoolsScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetPoolsScopedList) element:
      out, err := json.MarshalIndent(targetPoolsScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to delete.
  targetPool := ""

  res, err := service.TargetPools.Delete(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to return.
  targetPool := ""

  res, err := service.TargetPools.Get(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `GetHealth` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to which the queried instance belongs.
  targetPool := ""

  instanceReferenceBody := compute.InstanceReference{
    // TODO: Add desired fields of the `instanceReferenceBody` variable.
  }

  res, err := service.TargetPools.GetHealth(project, region, targetPool, &instanceReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  targetPoolBody := compute.TargetPool{
    // TODO: Add desired fields of the `targetPoolBody` variable.
  }

  res, err := service.TargetPools.Insert(project, region, &targetPoolBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  req := service.TargetPools.List(project, region)
  if err := req.Pages(ctx, func(page *compute.TargetPoolList) error {
    for _, targetPool := range page.Items {
      // TODO: Change code below to process each `targetPool` resource:
      out, err := json.MarshalIndent(targetPool, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `RemoveHealthCheck` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the target pool to remove health checks from.
  targetPool := ""

  targetPoolsRemoveHealthCheckRequestBody := compute.TargetPoolsRemoveHealthCheckRequest{
    // TODO: Add desired fields of the `targetPoolsRemoveHealthCheckRequestBody` variable.
  }

  res, err := service.TargetPools.RemoveHealthCheck(project, region, targetPool, &targetPoolsRemoveHealthCheckRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `RemoveInstance` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to remove instances from.
  targetPool := ""

  targetPoolsRemoveInstanceRequestBody := compute.TargetPoolsRemoveInstanceRequest{
    // TODO: Add desired fields of the `targetPoolsRemoveInstanceRequestBody` variable.
  }

  res, err := service.TargetPools.RemoveInstance(project, region, targetPool, &targetPoolsRemoveInstanceRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `SetBackup` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region scoping this request.
  region := ""

  // * Name of the TargetPool resource to set a backup pool for.
  targetPool := ""

  targetReferenceBody := compute.TargetReference{
    // TODO: Add desired fields of the `targetReferenceBody` variable.
  }

  res, err := service.TargetPools.SetBackup(project, region, targetPool, &targetReferenceBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.TargetVpnGateways.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetVpnGatewayAggregatedList) error {
    for name, targetVpnGatewaysScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetVpnGatewaysScopedList) element:
      out, err := json.MarshalIndent(targetVpnGatewaysScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the target VPN gateway to delete.
  targetVpnGateway := ""

  res, err := service.TargetVpnGateways.Delete(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the target VPN gateway to return.
  targetVpnGateway := ""

  res, err := service.TargetVpnGateways.Get(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  targetVpnGatewayBody := compute.TargetVpnGateway{
    // TODO: Add desired fields of the `targetVpnGatewayBody` variable.
  }

  res, err := service.TargetVpnGateways.Insert(project, region, &targetVpnGatewayBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  req := service.TargetVpnGateways.List(project, region)
  if err := req.Pages(ctx, func(page *compute.TargetVpnGatewayList) error {
    for _, targetVpnGateway := range page.Items {
      // TODO: Change code below to process each `targetVpnGateway` resource:
      out, err := json.MarshalIndent(targetVpnGateway, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the UrlMap resource to delete.
  urlMap := ""

  res, err := service.UrlMaps.Delete(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the UrlMap resource to return.
  urlMap := ""

  res, err := service.UrlMaps.Get(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  urlMapBody := compute.UrlMap{
    // TODO: Add desired fields of the `urlMapBody` variable.
  }

  res, err := service.UrlMaps.Insert(project, &urlMapBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.UrlMaps.List(project)
  if err := req.Pages(ctx, func(page *compute.UrlMapList) error {
    for _, urlMap := range page.Items {
      // TODO: Change code below to process each `urlMap` resource:
      out, err := json.MarshalIndent(urlMap, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * Project ID for this request.
  project := ""

  // * Name of the UrlMap resource to update.
  urlMap := ""

  urlMapBody := compute.UrlMap{
    // TODO: Add desired fields of the `urlMapBody` variable to be changed.
  }

  res, err := service.UrlMaps.Patch(project, urlMap, &urlMapBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Project ID for this request.
  project := ""

  // * Name of the UrlMap resource to update.
  urlMap := ""

  urlMapBody := compute.UrlMap{
    // TODO: Add desired fields of the `urlMapBody` variable.
  }

  res, err := service.UrlMaps.Update(project, urlMap, &urlMapBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Validate` method:

  // * Project ID for this request.
  project := ""

  // * Name of the UrlMap resource to be validated as.
  urlMap := ""

  urlMapsValidateRequestBody := compute.UrlMapsValidateRequest{
    // TODO: Add desired fields of the `urlMapsValidateRequestBody` variable.
  }

  res, err := service.UrlMaps.Validate(project, urlMap, &urlMapsValidateRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AggregatedList` method:

  // * Project ID for this request.
  project := ""

  req := service.VpnTunnels.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.VpnTunnelAggregatedList) error {
    for name, vpnTunnelsScopedList := range page.Items {
      // TODO: Change code below to process each (name: vpnTunnelsScopedList) element:
      out, err := json.MarshalIndent(vpnTunnelsScopedList, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(fmt.Sprintf("%v: %v", name, out))
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the VpnTunnel resource to delete.
  vpnTunnel := ""

  res, err := service.VpnTunnels.Delete(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  // * Name of the VpnTunnel resource to return.
  vpnTunnel := ""

  res, err := service.VpnTunnels.Get(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  vpnTunnelBody := compute.VpnTunnel{
    // TODO: Add desired fields of the `vpnTunnelBody` variable.
  }

  res, err := service.VpnTunnels.Insert(project, region, &vpnTunnelBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the region for this request.
  region := ""

  req := service.VpnTunnels.List(project, region)
  if err := req.Pages(ctx, func(page *compute.VpnTunnelList) error {
    for _, vpnTunnel := range page.Items {
      // TODO: Change code below to process each `vpnTunnel` resource:
      out, err := json.MarshalIndent(vpnTunnel, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  // * Name of the Operations resource to delete.
  operation := ""

  if err := service.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for this request.
  zone := ""

  // * Name of the Operations resource to return.
  operation := ""

  res, err := service.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone for request.
  zone := ""

  req := service.ZoneOperations.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Project ID for this request.
  project := ""

  // * Name of the zone resource to return.
  zone := ""

  res, err := service.Zones.Get(project, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the compute service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := compute.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Project ID for this request.
  project := ""

  req := service.Zones.List(project)
  if err := req.Pages(ctx, func(page *compute.ZoneList) error {
    for _, zone := range page.Items {
      // TODO: Change code below to process each `zone` resource:
      out, err := json.MarshalIndent(zone, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
