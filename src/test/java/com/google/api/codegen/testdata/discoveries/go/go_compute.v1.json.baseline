
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Addresses.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.AddressAggregatedList) error {
    for name, addressesScopedList := range page.Items {
      // TODO: Change code below to process each (name: addressesScopedList) element:
      fmt.Printf("%v: %#v\n", name, addressesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the address resource to delete.
  address := "{MY-ADDRESS}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Addresses.Delete(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the address resource to return.
  address := "{MY-ADDRESS}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Addresses.Get(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.Address{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Addresses.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.Addresses.List(project, region)
  if err := req.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      fmt.Printf("%#v\n", address)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Autoscalers.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.AutoscalerAggregatedList) error {
    for name, autoscalersScopedList := range page.Items {
      // TODO: Change code below to process each (name: autoscalersScopedList) element:
      fmt.Printf("%v: %#v\n", name, autoscalersScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the autoscaler to delete.
  autoscaler := "{MY-AUTOSCALER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Autoscalers.Delete(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the autoscaler to return.
  autoscaler := "{MY-AUTOSCALER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Autoscalers.Get(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Autoscalers.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.Autoscalers.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.AutoscalerList) error {
    for _, autoscaler := range page.Items {
      // TODO: Change code below to process each `autoscaler` resource:
      fmt.Printf("%#v\n", autoscaler)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the autoscaler to update.
  autoscaler := "{MY-AUTOSCALER}"
  // TODO: Change placeholder value above.

  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.Autoscalers.Patch(project, zone, autoscaler, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Autoscalers.Update(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the BackendService resource to delete.
  backendService := "{MY-BACKEND-SERVICE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.BackendServices.Delete(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the BackendService resource to return.
  backendService := "{MY-BACKEND-SERVICE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.BackendServices.Get(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // project
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the BackendService resource to which the queried instance belongs.
  backendService := "{MY-BACKEND-SERVICE}"
  // TODO: Change placeholder value above.

  rb := compute.ResourceGroupReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.BackendServices.GetHealth(project, backendService, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.BackendService{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.BackendServices.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.BackendServices.List(project)
  if err := req.Pages(ctx, func(page *compute.BackendServiceList) error {
    for _, backendService := range page.Items {
      // TODO: Change code below to process each `backendService` resource:
      fmt.Printf("%#v\n", backendService)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the BackendService resource to update.
  backendService := "{MY-BACKEND-SERVICE}"
  // TODO: Change placeholder value above.

  rb := compute.BackendService{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.BackendServices.Patch(project, backendService, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the BackendService resource to update.
  backendService := "{MY-BACKEND-SERVICE}"
  // TODO: Change placeholder value above.

  rb := compute.BackendService{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.BackendServices.Update(project, backendService, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.DiskTypes.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.DiskTypeAggregatedList) error {
    for name, diskTypesScopedList := range page.Items {
      // TODO: Change code below to process each (name: diskTypesScopedList) element:
      fmt.Printf("%v: %#v\n", name, diskTypesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the disk type to return.
  diskType := "{MY-DISK-TYPE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.DiskTypes.Get(project, zone, diskType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.DiskTypes.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.DiskTypeList) error {
    for _, diskType := range page.Items {
      // TODO: Change code below to process each `diskType` resource:
      fmt.Printf("%#v\n", diskType)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Disks.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.DiskAggregatedList) error {
    for name, disksScopedList := range page.Items {
      // TODO: Change code below to process each (name: disksScopedList) element:
      fmt.Printf("%v: %#v\n", name, disksScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the persistent disk to snapshot.
  disk := "{MY-DISK}"
  // TODO: Change placeholder value above.

  rb := compute.Snapshot{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Disks.CreateSnapshot(project, zone, disk, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the persistent disk to delete.
  disk := "{MY-DISK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Disks.Delete(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the persistent disk to return.
  disk := "{MY-DISK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Disks.Get(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  rb := compute.Disk{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Disks.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.Disks.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.DiskList) error {
    for _, disk := range page.Items {
      // TODO: Change code below to process each `disk` resource:
      fmt.Printf("%#v\n", disk)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // The name of the persistent disk.
  disk := "{MY-DISK}"
  // TODO: Change placeholder value above.

  rb := compute.DisksResizeRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Disks.Resize(project, zone, disk, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the firewall rule to delete.
  firewall := "{MY-FIREWALL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Firewalls.Delete(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the firewall rule to return.
  firewall := "{MY-FIREWALL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Firewalls.Get(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Firewall{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Firewalls.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Firewalls.List(project)
  if err := req.Pages(ctx, func(page *compute.FirewallList) error {
    for _, firewall := range page.Items {
      // TODO: Change code below to process each `firewall` resource:
      fmt.Printf("%#v\n", firewall)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the firewall rule to update.
  firewall := "{MY-FIREWALL}"
  // TODO: Change placeholder value above.

  rb := compute.Firewall{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.Firewalls.Patch(project, firewall, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the firewall rule to update.
  firewall := "{MY-FIREWALL}"
  // TODO: Change placeholder value above.

  rb := compute.Firewall{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Firewalls.Update(project, firewall, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.ForwardingRules.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleAggregatedList) error {
    for name, forwardingRulesScopedList := range page.Items {
      // TODO: Change code below to process each (name: forwardingRulesScopedList) element:
      fmt.Printf("%v: %#v\n", name, forwardingRulesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.ForwardingRules.Delete(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource to return.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.ForwardingRules.Get(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.ForwardingRule{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.ForwardingRules.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.ForwardingRules.List(project, region)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      fmt.Printf("%#v\n", forwardingRule)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.ForwardingRules.SetTarget(project, region, forwardingRule, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the address resource to delete.
  address := "{MY-ADDRESS}"
  // TODO: Change placeholder value above.

  resp, err := computeService.GlobalAddresses.Delete(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the address resource to return.
  address := "{MY-ADDRESS}"
  // TODO: Change placeholder value above.

  resp, err := computeService.GlobalAddresses.Get(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Address{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.GlobalAddresses.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.GlobalAddresses.List(project)
  if err := req.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      fmt.Printf("%#v\n", address)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.GlobalForwardingRules.Delete(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource to return.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.GlobalForwardingRules.Get(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.ForwardingRule{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.GlobalForwardingRules.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.GlobalForwardingRules.List(project)
  if err := req.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      fmt.Printf("%#v\n", forwardingRule)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "{MY-FORWARDING-RULE}"
  // TODO: Change placeholder value above.

  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.GlobalForwardingRules.SetTarget(project, forwardingRule, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.GlobalOperations.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.OperationAggregatedList) error {
    for name, operationsScopedList := range page.Items {
      // TODO: Change code below to process each (name: operationsScopedList) element:
      fmt.Printf("%v: %#v\n", name, operationsScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  if err := computeService.GlobalOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  resp, err := computeService.GlobalOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.GlobalOperations.List(project)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HealthCheck resource to delete.
  healthCheck := "{MY-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HealthChecks.Delete(project, healthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HealthCheck resource to return.
  healthCheck := "{MY-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HealthChecks.Get(project, healthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HealthChecks.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.HealthChecks.List(project)
  if err := req.Pages(ctx, func(page *compute.HealthCheckList) error {
    for _, healthCheck := range page.Items {
      // TODO: Change code below to process each `healthCheck` resource:
      fmt.Printf("%#v\n", healthCheck)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HealthCheck resource to update.
  healthCheck := "{MY-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.HealthChecks.Patch(project, healthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HealthCheck resource to update.
  healthCheck := "{MY-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HealthChecks.Update(project, healthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpHealthCheck resource to delete.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HttpHealthChecks.Delete(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpHealthCheck resource to return.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HttpHealthChecks.Get(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HttpHealthChecks.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.HttpHealthChecks.List(project)
  if err := req.Pages(ctx, func(page *compute.HttpHealthCheckList) error {
    for _, httpHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpHealthCheck` resource:
      fmt.Printf("%#v\n", httpHealthCheck)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.HttpHealthChecks.Patch(project, httpHealthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HttpHealthChecks.Update(project, httpHealthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpsHealthCheck resource to delete.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HttpsHealthChecks.Delete(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpsHealthCheck resource to return.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.HttpsHealthChecks.Get(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HttpsHealthChecks.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.HttpsHealthChecks.List(project)
  if err := req.Pages(ctx, func(page *compute.HttpsHealthCheckList) error {
    for _, httpsHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpsHealthCheck` resource:
      fmt.Printf("%#v\n", httpsHealthCheck)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.HttpsHealthChecks.Patch(project, httpsHealthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}"
  // TODO: Change placeholder value above.

  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.HttpsHealthChecks.Update(project, httpsHealthCheck, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the image resource to delete.
  image := "{MY-IMAGE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Images.Delete(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Image name.
  image := "{MY-IMAGE}"
  // TODO: Change placeholder value above.

  rb := compute.DeprecationStatus{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Images.Deprecate(project, image, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the image resource to return.
  image := "{MY-IMAGE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Images.Get(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the image family to search for.
  family := "{MY-FAMILY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Images.GetFromFamily(project, family).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Image{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Images.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Images.List(project)
  if err := req.Pages(ctx, func(page *compute.ImageList) error {
    for _, image := range page.Items {
      // TODO: Change code below to process each `image` resource:
      fmt.Printf("%#v\n", image)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManagersAbandonInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.AbandonInstances(project, zone, instanceGroupManager, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.InstanceGroupManagers.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupManagerAggregatedList) error {
    for name, instanceGroupManagersScopedList := range page.Items {
      // TODO: Change code below to process each (name: instanceGroupManagersScopedList) element:
      fmt.Printf("%v: %#v\n", name, instanceGroupManagersScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group to delete.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroupManagers.Delete(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManagersDeleteInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.DeleteInstances(project, zone, instanceGroupManager, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroupManagers.Get(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where you want to create the managed instance group.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManager{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  req := computeService.InstanceGroupManagers.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupManagerList) error {
    for _, instanceGroupManager := range page.Items {
      // TODO: Change code below to process each `instanceGroupManager` resource:
      fmt.Printf("%#v\n", instanceGroupManager)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManagersRecreateInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.RecreateInstances(project, zone, instanceGroupManager, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  // The number of running instances that the managed instance group should maintain at any given time.
  // The group automatically adds or removes instances to maintain the number of instances specified by
  // this parameter.
  size := int64(0)
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManagersSetInstanceTemplateRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.SetInstanceTemplate(project, zone, instanceGroupManager, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupManagersSetTargetPoolsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroupManagers.SetTargetPools(project, zone, instanceGroupManager, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group where you are adding instances.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupsAddInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroups.AddInstances(project, zone, instanceGroup, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.InstanceGroups.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupAggregatedList) error {
    for name, instanceGroupsScopedList := range page.Items {
      // TODO: Change code below to process each (name: instanceGroupsScopedList) element:
      fmt.Printf("%v: %#v\n", name, instanceGroupsScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group to delete.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroups.Delete(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceGroups.Get(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where you want to create the instance group.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroup{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroups.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  req := computeService.InstanceGroups.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceGroupList) error {
    for _, instanceGroup := range page.Items {
      // TODO: Change code below to process each `instanceGroup` resource:
      fmt.Printf("%#v\n", instanceGroup)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group from which you want to generate a list of included instances.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupsListInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroups.ListInstances(project, zone, instanceGroup, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group where the specified instances will be removed.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupsRemoveInstancesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroups.RemoveInstances(project, zone, instanceGroup, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the instance group where the named ports are updated.
  instanceGroup := "{MY-INSTANCE-GROUP}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceGroupsSetNamedPortsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceGroups.SetNamedPorts(project, zone, instanceGroup, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the instance template to delete.
  instanceTemplate := "{MY-INSTANCE-TEMPLATE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceTemplates.Delete(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the instance template.
  instanceTemplate := "{MY-INSTANCE-TEMPLATE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.InstanceTemplates.Get(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceTemplate{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.InstanceTemplates.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.InstanceTemplates.List(project)
  if err := req.Pages(ctx, func(page *compute.InstanceTemplateList) error {
    for _, instanceTemplate := range page.Items {
      // TODO: Change code below to process each `instanceTemplate` resource:
      fmt.Printf("%#v\n", instanceTemplate)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // The instance name for this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  // The name of the network interface to add to this instance.
  networkInterface := "{MY-NETWORK-INTERFACE}"
  // TODO: Change placeholder value above.

  rb := compute.AccessConfig{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.AddAccessConfig(project, zone, instance, networkInterface, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Instances.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.InstanceAggregatedList) error {
    for name, instancesScopedList := range page.Items {
      // TODO: Change code below to process each (name: instancesScopedList) element:
      fmt.Printf("%v: %#v\n", name, instancesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // The instance name for this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.AttachedDisk{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.AttachDisk(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance resource to delete.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.Delete(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // The instance name for this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  // The name of the access config to delete.
  accessConfig := "{MY-ACCESS-CONFIG}"
  // TODO: Change placeholder value above.

  // The name of the network interface.
  networkInterface := "{MY-NETWORK-INTERFACE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Instance name.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  // Disk device name to detach.
  deviceName := "{MY-DEVICE-NAME}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.DetachDisk(project, zone, instance, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance resource to return.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.Get(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.GetSerialPortOutput(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  rb := compute.Instance{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.Instances.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.InstanceList) error {
    for _, instance := range page.Items {
      // TODO: Change code below to process each `instance` resource:
      fmt.Printf("%#v\n", instance)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.Reset(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // The instance name.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  // Whether to auto-delete the disk when the instance is deleted.
  autoDelete := false
  // TODO: Change placeholder value above.

  // The device name of the disk to modify.
  deviceName := "{MY-DEVICE-NAME}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.InstancesSetMachineTypeRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.SetMachineType(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.Metadata{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.SetMetadata(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Instance name.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.Scheduling{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.SetScheduling(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.Tags{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.SetTags(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance resource to start.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.Start(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance resource to start.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  rb := compute.InstancesStartWithEncryptionKeyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Instances.StartWithEncryptionKey(project, zone, instance, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the instance resource to stop.
  instance := "{MY-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Instances.Stop(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the License resource to return.
  license := "{MY-LICENSE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Licenses.Get(project, license).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.MachineTypes.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.MachineTypeAggregatedList) error {
    for name, machineTypesScopedList := range page.Items {
      // TODO: Change code below to process each (name: machineTypesScopedList) element:
      fmt.Printf("%v: %#v\n", name, machineTypesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the machine type to return.
  machineType := "{MY-MACHINE-TYPE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.MachineTypes.Get(project, zone, machineType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.MachineTypes.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.MachineTypeList) error {
    for _, machineType := range page.Items {
      // TODO: Change code below to process each `machineType` resource:
      fmt.Printf("%#v\n", machineType)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the network to delete.
  network := "{MY-NETWORK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Networks.Delete(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the network to return.
  network := "{MY-NETWORK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Networks.Get(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Network{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Networks.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Networks.List(project)
  if err := req.Pages(ctx, func(page *compute.NetworkList) error {
    for _, network := range page.Items {
      // TODO: Change code below to process each `network` resource:
      fmt.Printf("%#v\n", network)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.DiskMoveRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Projects.MoveDisk(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceMoveRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Projects.MoveInstance(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Metadata{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Projects.SetCommonInstanceMetadata(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.UsageExportLocation{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Projects.SetUsageExportBucket(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  if err := computeService.RegionOperations.Delete(project, region, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  resp, err := computeService.RegionOperations.Get(project, region, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.RegionOperations.List(project, region)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region resource to return.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Regions.Get(project, region).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Regions.List(project)
  if err := req.Pages(ctx, func(page *compute.RegionList) error {
    for _, region := range page.Items {
      // TODO: Change code below to process each `region` resource:
      fmt.Printf("%#v\n", region)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Routers.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.RouterAggregatedList) error {
    for name, routersScopedList := range page.Items {
      // TODO: Change code below to process each (name: routersScopedList) element:
      fmt.Printf("%v: %#v\n", name, routersScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to delete.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Routers.Delete(project, region, router).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to return.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Routers.Get(project, region, router).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to query.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Routers.GetRouterStatus(project, region, router).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.Router{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Routers.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.Routers.List(project, region)
  if err := req.Pages(ctx, func(page *compute.RouterList) error {
    for _, router := range page.Items {
      // TODO: Change code below to process each `router` resource:
      fmt.Printf("%#v\n", router)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to update.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  rb := compute.Router{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.Routers.Patch(project, region, router, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to query.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  rb := compute.Router{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Routers.Preview(project, region, router, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Router resource to update.
  router := "{MY-ROUTER}"
  // TODO: Change placeholder value above.

  rb := compute.Router{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Routers.Update(project, region, router, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Route resource to delete.
  route := "{MY-ROUTE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Routes.Delete(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Route resource to return.
  route := "{MY-ROUTE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Routes.Get(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.Route{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Routes.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Routes.List(project)
  if err := req.Pages(ctx, func(page *compute.RouteList) error {
    for _, route := range page.Items {
      // TODO: Change code below to process each `route` resource:
      fmt.Printf("%#v\n", route)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Snapshot resource to delete.
  snapshot := "{MY-SNAPSHOT}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Snapshots.Delete(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the Snapshot resource to return.
  snapshot := "{MY-SNAPSHOT}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Snapshots.Get(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Snapshots.List(project)
  if err := req.Pages(ctx, func(page *compute.SnapshotList) error {
    for _, snapshot := range page.Items {
      // TODO: Change code below to process each `snapshot` resource:
      fmt.Printf("%#v\n", snapshot)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the SslCertificate resource to delete.
  sslCertificate := "{MY-SSL-CERTIFICATE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.SslCertificates.Delete(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the SslCertificate resource to return.
  sslCertificate := "{MY-SSL-CERTIFICATE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.SslCertificates.Get(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.SslCertificate{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.SslCertificates.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.SslCertificates.List(project)
  if err := req.Pages(ctx, func(page *compute.SslCertificateList) error {
    for _, sslCertificate := range page.Items {
      // TODO: Change code below to process each `sslCertificate` resource:
      fmt.Printf("%#v\n", sslCertificate)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Subnetworks.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.SubnetworkAggregatedList) error {
    for name, subnetworksScopedList := range page.Items {
      // TODO: Change code below to process each (name: subnetworksScopedList) element:
      fmt.Printf("%v: %#v\n", name, subnetworksScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Subnetwork resource to delete.
  subnetwork := "{MY-SUBNETWORK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Subnetworks.Delete(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the Subnetwork resource to return.
  subnetwork := "{MY-SUBNETWORK}"
  // TODO: Change placeholder value above.

  resp, err := computeService.Subnetworks.Get(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.Subnetwork{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.Subnetworks.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.Subnetworks.List(project, region)
  if err := req.Pages(ctx, func(page *compute.SubnetworkList) error {
    for _, subnetwork := range page.Items {
      // TODO: Change code below to process each `subnetwork` resource:
      fmt.Printf("%#v\n", subnetwork)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpProxy resource to delete.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetHttpProxies.Delete(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpProxy resource to return.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetHttpProxies.Get(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.TargetHttpProxy{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetHttpProxies.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetHttpProxies.List(project)
  if err := req.Pages(ctx, func(page *compute.TargetHttpProxyList) error {
    for _, targetHttpProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpProxy` resource:
      fmt.Printf("%#v\n", targetHttpProxy)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpProxy to set a URL map for.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMapReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetHttpProxies.SetUrlMap(project, targetHttpProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpsProxy resource to delete.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetHttpsProxies.Delete(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpsProxy resource to return.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetHttpsProxies.Get(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.TargetHttpsProxy{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetHttpsProxies.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetHttpsProxies.List(project)
  if err := req.Pages(ctx, func(page *compute.TargetHttpsProxyList) error {
    for _, targetHttpsProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpsProxy` resource:
      fmt.Printf("%#v\n", targetHttpsProxy)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.TargetHttpsProxiesSetSslCertificatesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetHttpsProxies.SetSslCertificates(project, targetHttpsProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetHttpsProxy resource whose URL map is to be set.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMapReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetHttpsProxies.SetUrlMap(project, targetHttpsProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetInstances.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetInstanceAggregatedList) error {
    for name, targetInstancesScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetInstancesScopedList) element:
      fmt.Printf("%v: %#v\n", name, targetInstancesScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the TargetInstance resource to delete.
  targetInstance := "{MY-TARGET-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetInstances.Delete(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the TargetInstance resource to return.
  targetInstance := "{MY-TARGET-INSTANCE}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetInstances.Get(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  rb := compute.TargetInstance{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetInstances.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.TargetInstances.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.TargetInstanceList) error {
    for _, targetInstance := range page.Items {
      // TODO: Change code below to process each `targetInstance` resource:
      fmt.Printf("%#v\n", targetInstance)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the target pool to add a health check to.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.TargetPoolsAddHealthCheckRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.AddHealthCheck(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to add instances to.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.TargetPoolsAddInstanceRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.AddInstance(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetPools.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetPoolAggregatedList) error {
    for name, targetPoolsScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetPoolsScopedList) element:
      fmt.Printf("%v: %#v\n", name, targetPoolsScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to delete.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetPools.Delete(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to return.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetPools.Get(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to which the queried instance belongs.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.InstanceReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.GetHealth(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.TargetPool{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.TargetPools.List(project, region)
  if err := req.Pages(ctx, func(page *compute.TargetPoolList) error {
    for _, targetPool := range page.Items {
      // TODO: Change code below to process each `targetPool` resource:
      fmt.Printf("%#v\n", targetPool)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the target pool to remove health checks from.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.TargetPoolsRemoveHealthCheckRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.RemoveHealthCheck(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to remove instances from.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.TargetPoolsRemoveInstanceRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.RemoveInstance(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region scoping this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the TargetPool resource to set a backup pool for.
  targetPool := "{MY-TARGET-POOL}"
  // TODO: Change placeholder value above.

  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetPools.SetBackup(project, region, targetPool, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetSslProxy resource to delete.
  targetSslProxy := "{MY-TARGET-SSL-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetSslProxies.Delete(project, targetSslProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetSslProxy resource to return.
  targetSslProxy := "{MY-TARGET-SSL-PROXY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetSslProxies.Get(project, targetSslProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.TargetSslProxy{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetSslProxies.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetSslProxies.List(project)
  if err := req.Pages(ctx, func(page *compute.TargetSslProxyList) error {
    for _, targetSslProxy := range page.Items {
      // TODO: Change code below to process each `targetSslProxy` resource:
      fmt.Printf("%#v\n", targetSslProxy)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetSslProxy resource whose BackendService resource is to be set.
  targetSslProxy := "{MY-TARGET-SSL-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.TargetSslProxiesSetBackendServiceRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetSslProxies.SetBackendService(project, targetSslProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetSslProxy resource whose ProxyHeader is to be set.
  targetSslProxy := "{MY-TARGET-SSL-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.TargetSslProxiesSetProxyHeaderRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetSslProxies.SetProxyHeader(project, targetSslProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
  targetSslProxy := "{MY-TARGET-SSL-PROXY}"
  // TODO: Change placeholder value above.

  rb := compute.TargetSslProxiesSetSslCertificatesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetSslProxies.SetSslCertificates(project, targetSslProxy, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.TargetVpnGateways.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.TargetVpnGatewayAggregatedList) error {
    for name, targetVpnGatewaysScopedList := range page.Items {
      // TODO: Change code below to process each (name: targetVpnGatewaysScopedList) element:
      fmt.Printf("%v: %#v\n", name, targetVpnGatewaysScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the target VPN gateway to delete.
  targetVpnGateway := "{MY-TARGET-VPN-GATEWAY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetVpnGateways.Delete(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the target VPN gateway to return.
  targetVpnGateway := "{MY-TARGET-VPN-GATEWAY}"
  // TODO: Change placeholder value above.

  resp, err := computeService.TargetVpnGateways.Get(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.TargetVpnGateway{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.TargetVpnGateways.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.TargetVpnGateways.List(project, region)
  if err := req.Pages(ctx, func(page *compute.TargetVpnGatewayList) error {
    for _, targetVpnGateway := range page.Items {
      // TODO: Change code below to process each `targetVpnGateway` resource:
      fmt.Printf("%#v\n", targetVpnGateway)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap resource to delete.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  resp, err := computeService.UrlMaps.Delete(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap resource to return.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  resp, err := computeService.UrlMaps.Get(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.UrlMaps.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap scoping this request.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  rb := compute.CacheInvalidationRule{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.UrlMaps.InvalidateCache(project, urlMap, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.UrlMaps.List(project)
  if err := req.Pages(ctx, func(page *compute.UrlMapList) error {
    for _, urlMap := range page.Items {
      // TODO: Change code below to process each `urlMap` resource:
      fmt.Printf("%#v\n", urlMap)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap resource to update.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := computeService.UrlMaps.Patch(project, urlMap, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap resource to update.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.UrlMaps.Update(project, urlMap, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the UrlMap resource to be validated as.
  urlMap := "{MY-URL-MAP}"
  // TODO: Change placeholder value above.

  rb := compute.UrlMapsValidateRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.UrlMaps.Validate(project, urlMap, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.VpnTunnels.AggregatedList(project)
  if err := req.Pages(ctx, func(page *compute.VpnTunnelAggregatedList) error {
    for name, vpnTunnelsScopedList := range page.Items {
      // TODO: Change code below to process each (name: vpnTunnelsScopedList) element:
      fmt.Printf("%v: %#v\n", name, vpnTunnelsScopedList)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the VpnTunnel resource to delete.
  vpnTunnel := "{MY-VPN-TUNNEL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.VpnTunnels.Delete(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  // Name of the VpnTunnel resource to return.
  vpnTunnel := "{MY-VPN-TUNNEL}"
  // TODO: Change placeholder value above.

  resp, err := computeService.VpnTunnels.Get(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  rb := compute.VpnTunnel{
    // TODO: Add desired fields of the request body.
  }

  resp, err := computeService.VpnTunnels.Insert(project, region, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the region for this request.
  region := "{MY-REGION}"
  // TODO: Change placeholder value above.

  req := computeService.VpnTunnels.List(project, region)
  if err := req.Pages(ctx, func(page *compute.VpnTunnelList) error {
    for _, vpnTunnel := range page.Items {
      // TODO: Change code below to process each `vpnTunnel` resource:
      fmt.Printf("%#v\n", vpnTunnel)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  if err := computeService.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for this request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  resp, err := computeService.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone for request.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  req := computeService.ZoneOperations.List(project, zone)
  if err := req.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone resource to return.
  zone := "{MY-ZONE}"  // ex: "us-central1-f"
  // TODO: Change placeholder value above.

  resp, err := computeService.Zones.Get(project, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := computeService.Zones.List(project)
  if err := req.Pages(ctx, func(page *compute.ZoneList) error {
    for _, zone := range page.Items {
      // TODO: Change code below to process each `zone` resource:
      fmt.Printf("%#v\n", zone)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
