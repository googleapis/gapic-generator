
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Addresses.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.AddressAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the address resource to delete.
  address := "" // TODO: Update placeholder value.

  resp, err := c.Addresses.Delete(project, region, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the address resource to return.
  address := "" // TODO: Update placeholder value.

  resp, err := c.Addresses.Get(project, region, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.Addresses.Insert(project, region, &compute.Address{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.


  call := c.Addresses.List(project, region)
  if err := call.Pages(ctx, func(page *compute.AddressList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Autoscalers.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.AutoscalerAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the autoscaler to delete.
  autoscaler := "" // TODO: Update placeholder value.

  resp, err := c.Autoscalers.Delete(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the autoscaler to return.
  autoscaler := "" // TODO: Update placeholder value.

  resp, err := c.Autoscalers.Get(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.Autoscalers.Insert(project, zone, &compute.Autoscaler{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.


  call := c.Autoscalers.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.AutoscalerList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the autoscaler to update.
  autoscaler := "" // TODO: Update placeholder value.

  resp, err := c.Autoscalers.Patch(project, zone, autoscaler, &compute.Autoscaler{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.Autoscalers.Update(project, zone, &compute.Autoscaler{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the BackendService resource to delete.
  backendService := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.Delete(project, backendService).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the BackendService resource to return.
  backendService := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.Get(project, backendService).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }


  project := "" // TODO: Update placeholder value.

  // Name of the BackendService resource to which the queried instance belongs.
  backendService := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.GetHealth(project, backendService, &compute.ResourceGroupReference{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.Insert(project, &compute.BackendService{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.BackendServices.List(project)
  if err := call.Pages(ctx, func(page *compute.BackendServiceList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the BackendService resource to update.
  backendService := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.Patch(project, backendService, &compute.BackendService{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the BackendService resource to update.
  backendService := "" // TODO: Update placeholder value.

  resp, err := c.BackendServices.Update(project, backendService, &compute.BackendService{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.DiskTypes.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.DiskTypeAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the disk type to return.
  diskType := "" // TODO: Update placeholder value.

  resp, err := c.DiskTypes.Get(project, zone, diskType).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.


  call := c.DiskTypes.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.DiskTypeList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Disks.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.DiskAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the persistent disk to snapshot.
  disk := "" // TODO: Update placeholder value.

  resp, err := c.Disks.CreateSnapshot(project, zone, disk, &compute.Snapshot{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the persistent disk to delete.
  disk := "" // TODO: Update placeholder value.

  resp, err := c.Disks.Delete(project, zone, disk).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the persistent disk to return.
  disk := "" // TODO: Update placeholder value.

  resp, err := c.Disks.Get(project, zone, disk).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.Disks.Insert(project, zone, &compute.Disk{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.


  call := c.Disks.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.DiskList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the firewall rule to delete.
  firewall := "" // TODO: Update placeholder value.

  resp, err := c.Firewalls.Delete(project, firewall).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the firewall rule to return.
  firewall := "" // TODO: Update placeholder value.

  resp, err := c.Firewalls.Get(project, firewall).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Firewalls.Insert(project, &compute.Firewall{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Firewalls.List(project)
  if err := call.Pages(ctx, func(page *compute.FirewallList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the firewall rule to update.
  firewall := "" // TODO: Update placeholder value.

  resp, err := c.Firewalls.Patch(project, firewall, &compute.Firewall{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the firewall rule to update.
  firewall := "" // TODO: Update placeholder value.

  resp, err := c.Firewalls.Update(project, firewall, &compute.Firewall{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.ForwardingRules.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.ForwardingRules.Delete(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to return.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.ForwardingRules.Get(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.ForwardingRules.Insert(project, region, &compute.ForwardingRule{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.


  call := c.ForwardingRules.List(project, region)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.ForwardingRules.SetTarget(project, region, forwardingRule, &compute.TargetReference{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the address resource to delete.
  address := "" // TODO: Update placeholder value.

  resp, err := c.GlobalAddresses.Delete(project, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the address resource to return.
  address := "" // TODO: Update placeholder value.

  resp, err := c.GlobalAddresses.Get(project, address).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.GlobalAddresses.Insert(project, &compute.Address{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.GlobalAddresses.List(project)
  if err := call.Pages(ctx, func(page *compute.AddressList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.GlobalForwardingRules.Delete(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to return.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.GlobalForwardingRules.Get(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.GlobalForwardingRules.Insert(project, &compute.ForwardingRule{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.GlobalForwardingRules.List(project)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "" // TODO: Update placeholder value.

  resp, err := c.GlobalForwardingRules.SetTarget(project, forwardingRule, &compute.TargetReference{
                                                   // TODO: Fill required fields.
                                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.GlobalOperations.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.OperationAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := "" // TODO: Update placeholder value.

  err := c.GlobalOperations.Delete(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := "" // TODO: Update placeholder value.

  resp, err := c.GlobalOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.GlobalOperations.List(project)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to delete.
  httpHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpHealthChecks.Delete(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to return.
  httpHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpHealthChecks.Get(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.HttpHealthChecks.Insert(project, &compute.HttpHealthCheck{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.HttpHealthChecks.List(project)
  if err := call.Pages(ctx, func(page *compute.HttpHealthCheckList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpHealthChecks.Patch(project, httpHealthCheck, &compute.HttpHealthCheck{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpHealthChecks.Update(project, httpHealthCheck, &compute.HttpHealthCheck{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to delete.
  httpsHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpsHealthChecks.Delete(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to return.
  httpsHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpsHealthChecks.Get(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.HttpsHealthChecks.Insert(project, &compute.HttpsHealthCheck{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.HttpsHealthChecks.List(project)
  if err := call.Pages(ctx, func(page *compute.HttpsHealthCheckList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpsHealthChecks.Patch(project, httpsHealthCheck, &compute.HttpsHealthCheck{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "" // TODO: Update placeholder value.

  resp, err := c.HttpsHealthChecks.Update(project, httpsHealthCheck, &compute.HttpsHealthCheck{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the image resource to delete.
  image := "" // TODO: Update placeholder value.

  resp, err := c.Images.Delete(project, image).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Image name.
  image := "" // TODO: Update placeholder value.

  resp, err := c.Images.Deprecate(project, image, &compute.DeprecationStatus{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the image resource to return.
  image := "" // TODO: Update placeholder value.

  resp, err := c.Images.Get(project, image).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Images.Insert(project, &compute.Image{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Images.List(project)
  if err := call.Pages(ctx, func(page *compute.ImageList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.AbandonInstances(project, zone, instanceGroupManager, &compute.InstanceGroupManagersAbandonInstancesRequest{
                                                          // TODO: Fill required fields.
                                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.InstanceGroupManagers.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupManagerAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group to delete.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.Delete(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.DeleteInstances(project, zone, instanceGroupManager, &compute.InstanceGroupManagersDeleteInstancesRequest{
                                                         // TODO: Fill required fields.
                                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.Get(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where you want to create the managed instance group.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.Insert(project, zone, &compute.InstanceGroupManager{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.


  call := c.InstanceGroupManagers.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupManagerList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.RecreateInstances(project, zone, instanceGroupManager, &compute.InstanceGroupManagersRecreateInstancesRequest{
                                                           // TODO: Fill required fields.
                                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  // The number of running instances that the managed instance group should maintain at any given time.
  // The group automatically adds or removes instances to maintain the number of instances specified by
  // this parameter.
  size := int64(0) // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.SetInstanceTemplate(project, zone, instanceGroupManager, &compute.InstanceGroupManagersSetInstanceTemplateRequest{
                                                             // TODO: Fill required fields.
                                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroupManagers.SetTargetPools(project, zone, instanceGroupManager, &compute.InstanceGroupManagersSetTargetPoolsRequest{
                                                        // TODO: Fill required fields.
                                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group where you are adding instances.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.AddInstances(project, zone, instanceGroup, &compute.InstanceGroupsAddInstancesRequest{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.InstanceGroups.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group to delete.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.Delete(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.Get(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where you want to create the instance group.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.Insert(project, zone, &compute.InstanceGroup{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.


  call := c.InstanceGroups.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group from which you want to generate a list of included instances.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.ListInstances(project, zone, instanceGroup, &compute.InstanceGroupsListInstancesRequest{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group where the specified instances will be removed.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.RemoveInstances(project, zone, instanceGroup, &compute.InstanceGroupsRemoveInstancesRequest{
                                                  // TODO: Fill required fields.
                                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := "" // TODO: Update placeholder value.

  // The name of the instance group where the named ports are updated.
  instanceGroup := "" // TODO: Update placeholder value.

  resp, err := c.InstanceGroups.SetNamedPorts(project, zone, instanceGroup, &compute.InstanceGroupsSetNamedPortsRequest{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the instance template to delete.
  instanceTemplate := "" // TODO: Update placeholder value.

  resp, err := c.InstanceTemplates.Delete(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the instance template.
  instanceTemplate := "" // TODO: Update placeholder value.

  resp, err := c.InstanceTemplates.Get(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.InstanceTemplates.Insert(project, &compute.InstanceTemplate{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.InstanceTemplates.List(project)
  if err := call.Pages(ctx, func(page *compute.InstanceTemplateList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The instance name for this request.
  instance := "" // TODO: Update placeholder value.

  // The name of the network interface to add to this instance.
  networkInterface := "" // TODO: Update placeholder value.

  resp, err := c.Instances.AddAccessConfig(project, zone, instance, networkInterface, &compute.AccessConfig{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Instances.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The instance name for this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.AttachDisk(project, zone, instance, &compute.AttachedDisk{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance resource to delete.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Delete(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The instance name for this request.
  instance := "" // TODO: Update placeholder value.

  // The name of the access config to delete.
  accessConfig := "" // TODO: Update placeholder value.

  // The name of the network interface.
  networkInterface := "" // TODO: Update placeholder value.

  resp, err := c.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Instance name.
  instance := "" // TODO: Update placeholder value.

  // Disk device name to detach.
  deviceName := "" // TODO: Update placeholder value.

  resp, err := c.Instances.DetachDisk(project, zone, instance, deviceName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance resource to return.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Get(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.GetSerialPortOutput(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Insert(project, zone, &compute.Instance{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.


  call := c.Instances.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Reset(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // The instance name.
  instance := "" // TODO: Update placeholder value.

  // Whether to auto-delete the disk when the instance is deleted.
  autoDelete := false // TODO: Update placeholder value.

  // The device name of the disk to modify.
  deviceName := "" // TODO: Update placeholder value.

  resp, err := c.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.SetMachineType(project, zone, instance, &compute.InstancesSetMachineTypeRequest{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.SetMetadata(project, zone, instance, &compute.Metadata{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Instance name.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.SetScheduling(project, zone, instance, &compute.Scheduling{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.SetTags(project, zone, instance, &compute.Tags{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance resource to start.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Start(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the instance resource to stop.
  instance := "" // TODO: Update placeholder value.

  resp, err := c.Instances.Stop(project, zone, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the License resource to return.
  license := "" // TODO: Update placeholder value.

  resp, err := c.Licenses.Get(project, license).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.MachineTypes.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.MachineTypeAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the machine type to return.
  machineType := "" // TODO: Update placeholder value.

  resp, err := c.MachineTypes.Get(project, zone, machineType).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := "" // TODO: Update placeholder value.


  call := c.MachineTypes.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.MachineTypeList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the network to delete.
  network := "" // TODO: Update placeholder value.

  resp, err := c.Networks.Delete(project, network).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the network to return.
  network := "" // TODO: Update placeholder value.

  resp, err := c.Networks.Get(project, network).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Networks.Insert(project, &compute.Network{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Networks.List(project)
  if err := call.Pages(ctx, func(page *compute.NetworkList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Projects.MoveDisk(project, &compute.DiskMoveRequest{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Projects.MoveInstance(project, &compute.InstanceMoveRequest{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Projects.SetCommonInstanceMetadata(project, &compute.Metadata{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Projects.SetUsageExportBucket(project, &compute.UsageExportLocation{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := "" // TODO: Update placeholder value.

  err := c.RegionOperations.Delete(project, region, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := "" // TODO: Update placeholder value.

  resp, err := c.RegionOperations.Get(project, region, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.


  call := c.RegionOperations.List(project, region)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region resource to return.
  region := "" // TODO: Update placeholder value.

  resp, err := c.Regions.Get(project, region).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Regions.List(project)
  if err := call.Pages(ctx, func(page *compute.RegionList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Route resource to delete.
  route := "" // TODO: Update placeholder value.

  resp, err := c.Routes.Delete(project, route).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Route resource to return.
  route := "" // TODO: Update placeholder value.

  resp, err := c.Routes.Get(project, route).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Routes.Insert(project, &compute.Route{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Routes.List(project)
  if err := call.Pages(ctx, func(page *compute.RouteList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Snapshot resource to delete.
  snapshot := "" // TODO: Update placeholder value.

  resp, err := c.Snapshots.Delete(project, snapshot).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the Snapshot resource to return.
  snapshot := "" // TODO: Update placeholder value.

  resp, err := c.Snapshots.Get(project, snapshot).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Snapshots.List(project)
  if err := call.Pages(ctx, func(page *compute.SnapshotList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the SslCertificate resource to delete.
  sslCertificate := "" // TODO: Update placeholder value.

  resp, err := c.SslCertificates.Delete(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the SslCertificate resource to return.
  sslCertificate := "" // TODO: Update placeholder value.

  resp, err := c.SslCertificates.Get(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.SslCertificates.Insert(project, &compute.SslCertificate{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.SslCertificates.List(project)
  if err := call.Pages(ctx, func(page *compute.SslCertificateList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Subnetworks.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.SubnetworkAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the Subnetwork resource to delete.
  subnetwork := "" // TODO: Update placeholder value.

  resp, err := c.Subnetworks.Delete(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the Subnetwork resource to return.
  subnetwork := "" // TODO: Update placeholder value.

  resp, err := c.Subnetworks.Get(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.Subnetworks.Insert(project, region, &compute.Subnetwork{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.


  call := c.Subnetworks.List(project, region)
  if err := call.Pages(ctx, func(page *compute.SubnetworkList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpProxy resource to delete.
  targetHttpProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpProxies.Delete(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpProxy resource to return.
  targetHttpProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpProxies.Get(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpProxies.Insert(project, &compute.TargetHttpProxy{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.TargetHttpProxies.List(project)
  if err := call.Pages(ctx, func(page *compute.TargetHttpProxyList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpProxy to set a URL map for.
  targetHttpProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpProxies.SetUrlMap(project, targetHttpProxy, &compute.UrlMapReference{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to delete.
  targetHttpsProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpsProxies.Delete(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to return.
  targetHttpsProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpsProxies.Get(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpsProxies.Insert(project, &compute.TargetHttpsProxy{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.TargetHttpsProxies.List(project)
  if err := call.Pages(ctx, func(page *compute.TargetHttpsProxyList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
  targetHttpsProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpsProxies.SetSslCertificates(project, targetHttpsProxy, &compute.TargetHttpsProxiesSetSslCertificatesRequest{
                                                         // TODO: Fill required fields.
                                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource whose URL map is to be set.
  targetHttpsProxy := "" // TODO: Update placeholder value.

  resp, err := c.TargetHttpsProxies.SetUrlMap(project, targetHttpsProxy, &compute.UrlMapReference{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.TargetInstances.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetInstanceAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the TargetInstance resource to delete.
  targetInstance := "" // TODO: Update placeholder value.

  resp, err := c.TargetInstances.Delete(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the TargetInstance resource to return.
  targetInstance := "" // TODO: Update placeholder value.

  resp, err := c.TargetInstances.Get(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.TargetInstances.Insert(project, zone, &compute.TargetInstance{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.


  call := c.TargetInstances.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.TargetInstanceList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the target pool to add a health check to.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.AddHealthCheck(project, region, targetPool, &compute.TargetPoolsAddHealthCheckRequest{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to add instances to.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.AddInstance(project, region, targetPool, &compute.TargetPoolsAddInstanceRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.TargetPools.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetPoolAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to delete.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.Delete(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to return.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.Get(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to which the queried instance belongs.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.GetHealth(project, region, targetPool, &compute.InstanceReference{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.Insert(project, region, &compute.TargetPool{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.


  call := c.TargetPools.List(project, region)
  if err := call.Pages(ctx, func(page *compute.TargetPoolList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the target pool to remove health checks from.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.RemoveHealthCheck(project, region, targetPool, &compute.TargetPoolsRemoveHealthCheckRequest{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to remove instances from.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.RemoveInstance(project, region, targetPool, &compute.TargetPoolsRemoveInstanceRequest{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := "" // TODO: Update placeholder value.

  // Name of the TargetPool resource to set a backup pool for.
  targetPool := "" // TODO: Update placeholder value.

  resp, err := c.TargetPools.SetBackup(project, region, targetPool, &compute.TargetReference{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.TargetVpnGateways.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetVpnGatewayAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the target VPN gateway to delete.
  targetVpnGateway := "" // TODO: Update placeholder value.

  resp, err := c.TargetVpnGateways.Delete(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the target VPN gateway to return.
  targetVpnGateway := "" // TODO: Update placeholder value.

  resp, err := c.TargetVpnGateways.Get(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.TargetVpnGateways.Insert(project, region, &compute.TargetVpnGateway{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.


  call := c.TargetVpnGateways.List(project, region)
  if err := call.Pages(ctx, func(page *compute.TargetVpnGatewayList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the UrlMap resource to delete.
  urlMap := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Delete(project, urlMap).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the UrlMap resource to return.
  urlMap := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Get(project, urlMap).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Insert(project, &compute.UrlMap{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.UrlMaps.List(project)
  if err := call.Pages(ctx, func(page *compute.UrlMapList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the UrlMap resource to update.
  urlMap := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Patch(project, urlMap, &compute.UrlMap{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the UrlMap resource to update.
  urlMap := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Update(project, urlMap, &compute.UrlMap{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the UrlMap resource to be validated as.
  urlMap := "" // TODO: Update placeholder value.

  resp, err := c.UrlMaps.Validate(project, urlMap, &compute.UrlMapsValidateRequest{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.VpnTunnels.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.VpnTunnelAggregatedList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the VpnTunnel resource to delete.
  vpnTunnel := "" // TODO: Update placeholder value.

  resp, err := c.VpnTunnels.Delete(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  // Name of the VpnTunnel resource to return.
  vpnTunnel := "" // TODO: Update placeholder value.

  resp, err := c.VpnTunnels.Get(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.

  resp, err := c.VpnTunnels.Insert(project, region, &compute.VpnTunnel{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the region for this request.
  region := "" // TODO: Update placeholder value.


  call := c.VpnTunnels.List(project, region)
  if err := call.Pages(ctx, func(page *compute.VpnTunnelList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := "" // TODO: Update placeholder value.

  err := c.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := "" // TODO: Update placeholder value.

  resp, err := c.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone for request.
  zone := "" // TODO: Update placeholder value.


  call := c.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone resource to return.
  zone := "" // TODO: Update placeholder value.

  resp, err := c.Zones.Get(project, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/compute/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := compute.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID for this request.
  project := "" // TODO: Update placeholder value.


  call := c.Zones.List(project)
  if err := call.Pages(ctx, func(page *compute.ZoneList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
