
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Addresses.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.AddressAggregatedList) error {
    for name, addressesScopedList := range page.Items {
      // TODO: Use name, addressesScopedList
      log.Printf("%v: %#v\n", name, addressesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the address resource to delete.
  address := "{MY-ADDRESS}" // TODO: Update placeholder value(s).

  resp, err := s.Addresses.Delete(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the address resource to return.
  address := "{MY-ADDRESS}" // TODO: Update placeholder value(s).

  resp, err := s.Addresses.Get(project, region, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.Address{
    // TODO: Add the desired fields.
  }

  resp, err := s.Addresses.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.Addresses.List(project, region)
  if err := call.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Use address
      log.Printf("%#v\n", address)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Autoscalers.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.AutoscalerAggregatedList) error {
    for name, autoscalersScopedList := range page.Items {
      // TODO: Use name, autoscalersScopedList
      log.Printf("%v: %#v\n", name, autoscalersScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the autoscaler to delete.
  autoscaler := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resp, err := s.Autoscalers.Delete(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the autoscaler to return.
  autoscaler := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resp, err := s.Autoscalers.Get(project, zone, autoscaler).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resource := &compute.Autoscaler{
    // TODO: Add the desired fields.
  }

  resp, err := s.Autoscalers.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.Autoscalers.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.AutoscalerList) error {
    for _, autoscaler := range page.Items {
      // TODO: Use autoscaler
      log.Printf("%#v\n", autoscaler)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the autoscaler to update.
  autoscaler := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resource := &compute.Autoscaler{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Autoscalers.Patch(project, zone, autoscaler, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resource := &compute.Autoscaler{
    // TODO: Add the desired fields.
  }

  resp, err := s.Autoscalers.Update(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the BackendService resource to delete.
  backendService := "{MY-BACKEND-SERVICE}" // TODO: Update placeholder value(s).

  resp, err := s.BackendServices.Delete(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the BackendService resource to return.
  backendService := "{MY-BACKEND-SERVICE}" // TODO: Update placeholder value(s).

  resp, err := s.BackendServices.Get(project, backendService).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }


  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the BackendService resource to which the queried instance belongs.
  backendService := "{MY-BACKEND-SERVICE}" // TODO: Update placeholder value(s).

  resource := &compute.ResourceGroupReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.BackendServices.GetHealth(project, backendService, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.BackendService{
    // TODO: Add the desired fields.
  }

  resp, err := s.BackendServices.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.BackendServices.List(project)
  if err := call.Pages(ctx, func(page *compute.BackendServiceList) error {
    for _, backendService := range page.Items {
      // TODO: Use backendService
      log.Printf("%#v\n", backendService)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the BackendService resource to update.
  backendService := "{MY-BACKEND-SERVICE}" // TODO: Update placeholder value(s).

  resource := &compute.BackendService{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.BackendServices.Patch(project, backendService, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the BackendService resource to update.
  backendService := "{MY-BACKEND-SERVICE}" // TODO: Update placeholder value(s).

  resource := &compute.BackendService{
    // TODO: Add the desired fields.
  }

  resp, err := s.BackendServices.Update(project, backendService, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.DiskTypes.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.DiskTypeAggregatedList) error {
    for name, diskTypesScopedList := range page.Items {
      // TODO: Use name, diskTypesScopedList
      log.Printf("%v: %#v\n", name, diskTypesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the disk type to return.
  diskType := "{MY-DISK-TYPE}" // TODO: Update placeholder value(s).

  resp, err := s.DiskTypes.Get(project, zone, diskType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.DiskTypes.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.DiskTypeList) error {
    for _, diskType := range page.Items {
      // TODO: Use diskType
      log.Printf("%#v\n", diskType)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Disks.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.DiskAggregatedList) error {
    for name, disksScopedList := range page.Items {
      // TODO: Use name, disksScopedList
      log.Printf("%v: %#v\n", name, disksScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the persistent disk to snapshot.
  disk := "{MY-DISK}" // TODO: Update placeholder value(s).

  resource := &compute.Snapshot{
    // TODO: Add the desired fields.
  }

  resp, err := s.Disks.CreateSnapshot(project, zone, disk, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the persistent disk to delete.
  disk := "{MY-DISK}" // TODO: Update placeholder value(s).

  resp, err := s.Disks.Delete(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the persistent disk to return.
  disk := "{MY-DISK}" // TODO: Update placeholder value(s).

  resp, err := s.Disks.Get(project, zone, disk).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resource := &compute.Disk{
    // TODO: Add the desired fields.
  }

  resp, err := s.Disks.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.Disks.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.DiskList) error {
    for _, disk := range page.Items {
      // TODO: Use disk
      log.Printf("%#v\n", disk)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the firewall rule to delete.
  firewall := "{MY-FIREWALL}" // TODO: Update placeholder value(s).

  resp, err := s.Firewalls.Delete(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the firewall rule to return.
  firewall := "{MY-FIREWALL}" // TODO: Update placeholder value(s).

  resp, err := s.Firewalls.Get(project, firewall).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Firewall{
    // TODO: Add the desired fields.
  }

  resp, err := s.Firewalls.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Firewalls.List(project)
  if err := call.Pages(ctx, func(page *compute.FirewallList) error {
    for _, firewall := range page.Items {
      // TODO: Use firewall
      log.Printf("%#v\n", firewall)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the firewall rule to update.
  firewall := "{MY-FIREWALL}" // TODO: Update placeholder value(s).

  resource := &compute.Firewall{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Firewalls.Patch(project, firewall, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the firewall rule to update.
  firewall := "{MY-FIREWALL}" // TODO: Update placeholder value(s).

  resource := &compute.Firewall{
    // TODO: Add the desired fields.
  }

  resp, err := s.Firewalls.Update(project, firewall, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.ForwardingRules.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleAggregatedList) error {
    for name, forwardingRulesScopedList := range page.Items {
      // TODO: Use name, forwardingRulesScopedList
      log.Printf("%v: %#v\n", name, forwardingRulesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resp, err := s.ForwardingRules.Delete(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource to return.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resp, err := s.ForwardingRules.Get(project, region, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.ForwardingRule{
    // TODO: Add the desired fields.
  }

  resp, err := s.ForwardingRules.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.ForwardingRules.List(project, region)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Use forwardingRule
      log.Printf("%#v\n", forwardingRule)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resource := &compute.TargetReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.ForwardingRules.SetTarget(project, region, forwardingRule, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the address resource to delete.
  address := "{MY-ADDRESS}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalAddresses.Delete(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the address resource to return.
  address := "{MY-ADDRESS}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalAddresses.Get(project, address).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Address{
    // TODO: Add the desired fields.
  }

  resp, err := s.GlobalAddresses.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.GlobalAddresses.List(project)
  if err := call.Pages(ctx, func(page *compute.AddressList) error {
    for _, address := range page.Items {
      // TODO: Use address
      log.Printf("%#v\n", address)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource to delete.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalForwardingRules.Delete(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource to return.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalForwardingRules.Get(project, forwardingRule).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.ForwardingRule{
    // TODO: Add the desired fields.
  }

  resp, err := s.GlobalForwardingRules.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.GlobalForwardingRules.List(project)
  if err := call.Pages(ctx, func(page *compute.ForwardingRuleList) error {
    for _, forwardingRule := range page.Items {
      // TODO: Use forwardingRule
      log.Printf("%#v\n", forwardingRule)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := "{MY-FORWARDING-RULE}" // TODO: Update placeholder value(s).

  resource := &compute.TargetReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.GlobalForwardingRules.SetTarget(project, forwardingRule, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.GlobalOperations.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.OperationAggregatedList) error {
    for name, operationsScopedList := range page.Items {
      // TODO: Use name, operationsScopedList
      log.Printf("%v: %#v\n", name, operationsScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  if err := s.GlobalOperations.Delete(project, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.GlobalOperations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.GlobalOperations.List(project)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      log.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpHealthCheck resource to delete.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resp, err := s.HttpHealthChecks.Delete(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpHealthCheck resource to return.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resp, err := s.HttpHealthChecks.Get(project, httpHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.HttpHealthCheck{
    // TODO: Add the desired fields.
  }

  resp, err := s.HttpHealthChecks.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.HttpHealthChecks.List(project)
  if err := call.Pages(ctx, func(page *compute.HttpHealthCheckList) error {
    for _, httpHealthCheck := range page.Items {
      // TODO: Use httpHealthCheck
      log.Printf("%#v\n", httpHealthCheck)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resource := &compute.HttpHealthCheck{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.HttpHealthChecks.Patch(project, httpHealthCheck, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := "{MY-HTTP-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resource := &compute.HttpHealthCheck{
    // TODO: Add the desired fields.
  }

  resp, err := s.HttpHealthChecks.Update(project, httpHealthCheck, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpsHealthCheck resource to delete.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resp, err := s.HttpsHealthChecks.Delete(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpsHealthCheck resource to return.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resp, err := s.HttpsHealthChecks.Get(project, httpsHealthCheck).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.HttpsHealthCheck{
    // TODO: Add the desired fields.
  }

  resp, err := s.HttpsHealthChecks.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.HttpsHealthChecks.List(project)
  if err := call.Pages(ctx, func(page *compute.HttpsHealthCheckList) error {
    for _, httpsHealthCheck := range page.Items {
      // TODO: Use httpsHealthCheck
      log.Printf("%#v\n", httpsHealthCheck)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resource := &compute.HttpsHealthCheck{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.HttpsHealthChecks.Patch(project, httpsHealthCheck, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := "{MY-HTTPS-HEALTH-CHECK}" // TODO: Update placeholder value(s).

  resource := &compute.HttpsHealthCheck{
    // TODO: Add the desired fields.
  }

  resp, err := s.HttpsHealthChecks.Update(project, httpsHealthCheck, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the image resource to delete.
  image := "{MY-IMAGE}" // TODO: Update placeholder value(s).

  resp, err := s.Images.Delete(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Image name.
  image := "{MY-IMAGE}" // TODO: Update placeholder value(s).

  resource := &compute.DeprecationStatus{
    // TODO: Add the desired fields.
  }

  resp, err := s.Images.Deprecate(project, image, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the image resource to return.
  image := "{MY-IMAGE}" // TODO: Update placeholder value(s).

  resp, err := s.Images.Get(project, image).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Image{
    // TODO: Add the desired fields.
  }

  resp, err := s.Images.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Images.List(project)
  if err := call.Pages(ctx, func(page *compute.ImageList) error {
    for _, image := range page.Items {
      // TODO: Use image
      log.Printf("%#v\n", image)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManagersAbandonInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.AbandonInstances(project, zone, instanceGroupManager, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.InstanceGroupManagers.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupManagerAggregatedList) error {
    for name, instanceGroupManagersScopedList := range page.Items {
      // TODO: Use name, instanceGroupManagersScopedList
      log.Printf("%v: %#v\n", name, instanceGroupManagersScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group to delete.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroupManagers.Delete(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManagersDeleteInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.DeleteInstances(project, zone, instanceGroupManager, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroupManagers.Get(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where you want to create the managed instance group.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManager{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  call := s.InstanceGroupManagers.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupManagerList) error {
    for _, instanceGroupManager := range page.Items {
      // TODO: Use instanceGroupManager
      log.Printf("%#v\n", instanceGroupManager)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManagersRecreateInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.RecreateInstances(project, zone, instanceGroupManager, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  // The number of running instances that the managed instance group should maintain at any given time.
  // The group automatically adds or removes instances to maintain the number of instances specified by
  // this parameter.
  size := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManagersSetInstanceTemplateRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.SetInstanceTemplate(project, zone, instanceGroupManager, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the managed instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the managed instance group.
  instanceGroupManager := "{MY-INSTANCE-GROUP-MANAGER}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupManagersSetTargetPoolsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroupManagers.SetTargetPools(project, zone, instanceGroupManager, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group where you are adding instances.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupsAddInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroups.AddInstances(project, zone, instanceGroup, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.InstanceGroups.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupAggregatedList) error {
    for name, instanceGroupsScopedList := range page.Items {
      // TODO: Use name, instanceGroupsScopedList
      log.Printf("%v: %#v\n", name, instanceGroupsScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group to delete.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroups.Delete(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceGroups.Get(project, zone, instanceGroup).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where you want to create the instance group.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroup{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroups.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  call := s.InstanceGroups.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceGroupList) error {
    for _, instanceGroup := range page.Items {
      // TODO: Use instanceGroup
      log.Printf("%#v\n", instanceGroup)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group from which you want to generate a list of included instances.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupsListInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroups.ListInstances(project, zone, instanceGroup, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group where the specified instances will be removed.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupsRemoveInstancesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroups.RemoveInstances(project, zone, instanceGroup, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone where the instance group is located.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the instance group where the named ports are updated.
  instanceGroup := "{MY-INSTANCE-GROUP}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceGroupsSetNamedPortsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceGroups.SetNamedPorts(project, zone, instanceGroup, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the instance template to delete.
  instanceTemplate := "{MY-INSTANCE-TEMPLATE}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceTemplates.Delete(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the instance template.
  instanceTemplate := "{MY-INSTANCE-TEMPLATE}" // TODO: Update placeholder value(s).

  resp, err := s.InstanceTemplates.Get(project, instanceTemplate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceTemplate{
    // TODO: Add the desired fields.
  }

  resp, err := s.InstanceTemplates.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.InstanceTemplates.List(project)
  if err := call.Pages(ctx, func(page *compute.InstanceTemplateList) error {
    for _, instanceTemplate := range page.Items {
      // TODO: Use instanceTemplate
      log.Printf("%#v\n", instanceTemplate)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // The instance name for this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // The name of the network interface to add to this instance.
  networkInterface := "{MY-NETWORK-INTERFACE}" // TODO: Update placeholder value(s).

  resource := &compute.AccessConfig{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.AddAccessConfig(project, zone, instance, networkInterface, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Instances.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.InstanceAggregatedList) error {
    for name, instancesScopedList := range page.Items {
      // TODO: Use name, instancesScopedList
      log.Printf("%v: %#v\n", name, instancesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // The instance name for this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &compute.AttachedDisk{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.AttachDisk(project, zone, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance resource to delete.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Delete(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // The instance name for this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // The name of the access config to delete.
  accessConfig := "{MY-ACCESS-CONFIG}" // TODO: Update placeholder value(s).

  // The name of the network interface.
  networkInterface := "{MY-NETWORK-INTERFACE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Disk device name to detach.
  deviceName := "{MY-DEVICE-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.DetachDisk(project, zone, instance, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance resource to return.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Get(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.GetSerialPortOutput(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resource := &compute.Instance{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.Instances.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.InstanceList) error {
    for _, instance := range page.Items {
      // TODO: Use instance
      log.Printf("%#v\n", instance)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Reset(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // The instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Whether to auto-delete the disk when the instance is deleted.
  autoDelete := false // TODO: Update placeholder value(s).

  // The device name of the disk to modify.
  deviceName := "{MY-DEVICE-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &compute.InstancesSetMachineTypeRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.SetMachineType(project, zone, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &compute.Metadata{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.SetMetadata(project, zone, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &compute.Scheduling{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.SetScheduling(project, zone, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance scoping this request.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &compute.Tags{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.SetTags(project, zone, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance resource to start.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Start(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the instance resource to stop.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Stop(project, zone, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the License resource to return.
  license := "{MY-LICENSE}" // TODO: Update placeholder value(s).

  resp, err := s.Licenses.Get(project, license).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.MachineTypes.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.MachineTypeAggregatedList) error {
    for name, machineTypesScopedList := range page.Items {
      // TODO: Use name, machineTypesScopedList
      log.Printf("%v: %#v\n", name, machineTypesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the machine type to return.
  machineType := "{MY-MACHINE-TYPE}" // TODO: Update placeholder value(s).

  resp, err := s.MachineTypes.Get(project, zone, machineType).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.MachineTypes.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.MachineTypeList) error {
    for _, machineType := range page.Items {
      // TODO: Use machineType
      log.Printf("%#v\n", machineType)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the network to delete.
  network := "{MY-NETWORK}" // TODO: Update placeholder value(s).

  resp, err := s.Networks.Delete(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the network to return.
  network := "{MY-NETWORK}" // TODO: Update placeholder value(s).

  resp, err := s.Networks.Get(project, network).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Network{
    // TODO: Add the desired fields.
  }

  resp, err := s.Networks.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Networks.List(project)
  if err := call.Pages(ctx, func(page *compute.NetworkList) error {
    for _, network := range page.Items {
      // TODO: Use network
      log.Printf("%#v\n", network)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.DiskMoveRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.MoveDisk(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceMoveRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.MoveInstance(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Metadata{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.SetCommonInstanceMetadata(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.UsageExportLocation{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.SetUsageExportBucket(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  if err := s.RegionOperations.Delete(project, region, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.RegionOperations.Get(project, region, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.RegionOperations.List(project, region)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      log.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region resource to return.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resp, err := s.Regions.Get(project, region).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Regions.List(project)
  if err := call.Pages(ctx, func(page *compute.RegionList) error {
    for _, region := range page.Items {
      // TODO: Use region
      log.Printf("%#v\n", region)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Route resource to delete.
  route := "{MY-ROUTE}" // TODO: Update placeholder value(s).

  resp, err := s.Routes.Delete(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Route resource to return.
  route := "{MY-ROUTE}" // TODO: Update placeholder value(s).

  resp, err := s.Routes.Get(project, route).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.Route{
    // TODO: Add the desired fields.
  }

  resp, err := s.Routes.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Routes.List(project)
  if err := call.Pages(ctx, func(page *compute.RouteList) error {
    for _, route := range page.Items {
      // TODO: Use route
      log.Printf("%#v\n", route)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Snapshot resource to delete.
  snapshot := "{MY-SNAPSHOT}" // TODO: Update placeholder value(s).

  resp, err := s.Snapshots.Delete(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the Snapshot resource to return.
  snapshot := "{MY-SNAPSHOT}" // TODO: Update placeholder value(s).

  resp, err := s.Snapshots.Get(project, snapshot).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Snapshots.List(project)
  if err := call.Pages(ctx, func(page *compute.SnapshotList) error {
    for _, snapshot := range page.Items {
      // TODO: Use snapshot
      log.Printf("%#v\n", snapshot)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the SslCertificate resource to delete.
  sslCertificate := "{MY-SSL-CERTIFICATE}" // TODO: Update placeholder value(s).

  resp, err := s.SslCertificates.Delete(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the SslCertificate resource to return.
  sslCertificate := "{MY-SSL-CERTIFICATE}" // TODO: Update placeholder value(s).

  resp, err := s.SslCertificates.Get(project, sslCertificate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.SslCertificate{
    // TODO: Add the desired fields.
  }

  resp, err := s.SslCertificates.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.SslCertificates.List(project)
  if err := call.Pages(ctx, func(page *compute.SslCertificateList) error {
    for _, sslCertificate := range page.Items {
      // TODO: Use sslCertificate
      log.Printf("%#v\n", sslCertificate)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Subnetworks.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.SubnetworkAggregatedList) error {
    for name, subnetworksScopedList := range page.Items {
      // TODO: Use name, subnetworksScopedList
      log.Printf("%v: %#v\n", name, subnetworksScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the Subnetwork resource to delete.
  subnetwork := "{MY-SUBNETWORK}" // TODO: Update placeholder value(s).

  resp, err := s.Subnetworks.Delete(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the Subnetwork resource to return.
  subnetwork := "{MY-SUBNETWORK}" // TODO: Update placeholder value(s).

  resp, err := s.Subnetworks.Get(project, region, subnetwork).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.Subnetwork{
    // TODO: Add the desired fields.
  }

  resp, err := s.Subnetworks.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.Subnetworks.List(project, region)
  if err := call.Pages(ctx, func(page *compute.SubnetworkList) error {
    for _, subnetwork := range page.Items {
      // TODO: Use subnetwork
      log.Printf("%#v\n", subnetwork)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpProxy resource to delete.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetHttpProxies.Delete(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpProxy resource to return.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetHttpProxies.Get(project, targetHttpProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.TargetHttpProxy{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetHttpProxies.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.TargetHttpProxies.List(project)
  if err := call.Pages(ctx, func(page *compute.TargetHttpProxyList) error {
    for _, targetHttpProxy := range page.Items {
      // TODO: Use targetHttpProxy
      log.Printf("%#v\n", targetHttpProxy)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpProxy to set a URL map for.
  targetHttpProxy := "{MY-TARGET-HTTP-PROXY}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMapReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetHttpProxies.SetUrlMap(project, targetHttpProxy, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpsProxy resource to delete.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetHttpsProxies.Delete(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpsProxy resource to return.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetHttpsProxies.Get(project, targetHttpsProxy).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.TargetHttpsProxy{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetHttpsProxies.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.TargetHttpsProxies.List(project)
  if err := call.Pages(ctx, func(page *compute.TargetHttpsProxyList) error {
    for _, targetHttpsProxy := range page.Items {
      // TODO: Use targetHttpsProxy
      log.Printf("%#v\n", targetHttpsProxy)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}" // TODO: Update placeholder value(s).

  resource := &compute.TargetHttpsProxiesSetSslCertificatesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetHttpsProxies.SetSslCertificates(project, targetHttpsProxy, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the TargetHttpsProxy resource whose URL map is to be set.
  targetHttpsProxy := "{MY-TARGET-HTTPS-PROXY}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMapReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetHttpsProxies.SetUrlMap(project, targetHttpsProxy, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.TargetInstances.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetInstanceAggregatedList) error {
    for name, targetInstancesScopedList := range page.Items {
      // TODO: Use name, targetInstancesScopedList
      log.Printf("%v: %#v\n", name, targetInstancesScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the TargetInstance resource to delete.
  targetInstance := "{MY-TARGET-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.TargetInstances.Delete(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the TargetInstance resource to return.
  targetInstance := "{MY-TARGET-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.TargetInstances.Get(project, zone, targetInstance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resource := &compute.TargetInstance{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetInstances.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.TargetInstances.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.TargetInstanceList) error {
    for _, targetInstance := range page.Items {
      // TODO: Use targetInstance
      log.Printf("%#v\n", targetInstance)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the target pool to add a health check to.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.TargetPoolsAddHealthCheckRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.AddHealthCheck(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to add instances to.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.TargetPoolsAddInstanceRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.AddInstance(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.TargetPools.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetPoolAggregatedList) error {
    for name, targetPoolsScopedList := range page.Items {
      // TODO: Use name, targetPoolsScopedList
      log.Printf("%v: %#v\n", name, targetPoolsScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to delete.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resp, err := s.TargetPools.Delete(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to return.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resp, err := s.TargetPools.Get(project, region, targetPool).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to which the queried instance belongs.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.InstanceReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.GetHealth(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.TargetPool{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.TargetPools.List(project, region)
  if err := call.Pages(ctx, func(page *compute.TargetPoolList) error {
    for _, targetPool := range page.Items {
      // TODO: Use targetPool
      log.Printf("%#v\n", targetPool)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the target pool to remove health checks from.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.TargetPoolsRemoveHealthCheckRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.RemoveHealthCheck(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to remove instances from.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.TargetPoolsRemoveInstanceRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.RemoveInstance(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region scoping this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the TargetPool resource to set a backup pool for.
  targetPool := "{MY-TARGET-POOL}" // TODO: Update placeholder value(s).

  resource := &compute.TargetReference{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetPools.SetBackup(project, region, targetPool, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.TargetVpnGateways.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.TargetVpnGatewayAggregatedList) error {
    for name, targetVpnGatewaysScopedList := range page.Items {
      // TODO: Use name, targetVpnGatewaysScopedList
      log.Printf("%v: %#v\n", name, targetVpnGatewaysScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the target VPN gateway to delete.
  targetVpnGateway := "{MY-TARGET-VPN-GATEWAY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetVpnGateways.Delete(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the target VPN gateway to return.
  targetVpnGateway := "{MY-TARGET-VPN-GATEWAY}" // TODO: Update placeholder value(s).

  resp, err := s.TargetVpnGateways.Get(project, region, targetVpnGateway).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.TargetVpnGateway{
    // TODO: Add the desired fields.
  }

  resp, err := s.TargetVpnGateways.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.TargetVpnGateways.List(project, region)
  if err := call.Pages(ctx, func(page *compute.TargetVpnGatewayList) error {
    for _, targetVpnGateway := range page.Items {
      // TODO: Use targetVpnGateway
      log.Printf("%#v\n", targetVpnGateway)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the UrlMap resource to delete.
  urlMap := "{MY-URL-MAP}" // TODO: Update placeholder value(s).

  resp, err := s.UrlMaps.Delete(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the UrlMap resource to return.
  urlMap := "{MY-URL-MAP}" // TODO: Update placeholder value(s).

  resp, err := s.UrlMaps.Get(project, urlMap).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMap{
    // TODO: Add the desired fields.
  }

  resp, err := s.UrlMaps.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.UrlMaps.List(project)
  if err := call.Pages(ctx, func(page *compute.UrlMapList) error {
    for _, urlMap := range page.Items {
      // TODO: Use urlMap
      log.Printf("%#v\n", urlMap)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the UrlMap resource to update.
  urlMap := "{MY-URL-MAP}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMap{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.UrlMaps.Patch(project, urlMap, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the UrlMap resource to update.
  urlMap := "{MY-URL-MAP}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMap{
    // TODO: Add the desired fields.
  }

  resp, err := s.UrlMaps.Update(project, urlMap, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the UrlMap resource to be validated as.
  urlMap := "{MY-URL-MAP}" // TODO: Update placeholder value(s).

  resource := &compute.UrlMapsValidateRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.UrlMaps.Validate(project, urlMap, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.VpnTunnels.AggregatedList(project)
  if err := call.Pages(ctx, func(page *compute.VpnTunnelAggregatedList) error {
    for name, vpnTunnelsScopedList := range page.Items {
      // TODO: Use name, vpnTunnelsScopedList
      log.Printf("%v: %#v\n", name, vpnTunnelsScopedList)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the VpnTunnel resource to delete.
  vpnTunnel := "{MY-VPN-TUNNEL}" // TODO: Update placeholder value(s).

  resp, err := s.VpnTunnels.Delete(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // Name of the VpnTunnel resource to return.
  vpnTunnel := "{MY-VPN-TUNNEL}" // TODO: Update placeholder value(s).

  resp, err := s.VpnTunnels.Get(project, region, vpnTunnel).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  resource := &compute.VpnTunnel{
    // TODO: Add the desired fields.
  }

  resp, err := s.VpnTunnels.Insert(project, region, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the region for this request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.VpnTunnels.List(project, region)
  if err := call.Pages(ctx, func(page *compute.VpnTunnelList) error {
    for _, vpnTunnel := range page.Items {
      // TODO: Use vpnTunnel
      log.Printf("%#v\n", vpnTunnel)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the Operations resource to delete.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  if err := s.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  // Name of the Operations resource to return.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone for request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *compute.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      log.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone resource to return.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  resp, err := s.Zones.Get(project, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/compute/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := compute.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Zones.List(project)
  if err := call.Pages(ctx, func(page *compute.ZoneList) error {
    for _, zone := range page.Items {
      // TODO: Use zone
      log.Printf("%#v\n", zone)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
