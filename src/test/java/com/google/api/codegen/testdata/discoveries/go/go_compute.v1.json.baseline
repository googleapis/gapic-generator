
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Addresses().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the address resource to delete.
  address := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the address resource to return.
  address := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.Address{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.Addresses().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      fmt.Printf("%#v\n", address)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Autoscalers().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the autoscaler to delete.
  autoscaler := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the autoscaler to return.
  autoscaler := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.Autoscalers().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, autoscaler := range page.Items {
      // TODO: Change code below to process each `autoscaler` resource:
      fmt.Printf("%#v\n", autoscaler)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the autoscaler to update.
  autoscaler := ""  // TODO: Update placeholder value.


  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.Autoscaler{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the BackendService resource to delete.
  backendService := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the BackendService resource to return.
  backendService := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  project := ""  // TODO: Update placeholder value.

  // Name of the BackendService resource to which the queried instance belongs.
  backendService := ""  // TODO: Update placeholder value.


  rb := compute.ResourceGroupReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.BackendService{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.BackendServices().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, backendService := range page.Items {
      // TODO: Change code below to process each `backendService` resource:
      fmt.Printf("%#v\n", backendService)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the BackendService resource to update.
  backendService := ""  // TODO: Update placeholder value.


  rb := compute.BackendService{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the BackendService resource to update.
  backendService := ""  // TODO: Update placeholder value.


  rb := compute.BackendService{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.DiskTypes().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the disk type to return.
  diskType := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.DiskTypes().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, diskType := range page.Items {
      // TODO: Change code below to process each `diskType` resource:
      fmt.Printf("%#v\n", diskType)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Disks().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the persistent disk to snapshot.
  disk := ""  // TODO: Update placeholder value.


  rb := compute.Snapshot{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the persistent disk to delete.
  disk := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the persistent disk to return.
  disk := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.Disk{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.Disks().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, disk := range page.Items {
      // TODO: Change code below to process each `disk` resource:
      fmt.Printf("%#v\n", disk)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // The name of the persistent disk.
  disk := ""  // TODO: Update placeholder value.


  rb := compute.DisksResizeRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the firewall rule to delete.
  firewall := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the firewall rule to return.
  firewall := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Firewall{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Firewalls().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, firewall := range page.Items {
      // TODO: Change code below to process each `firewall` resource:
      fmt.Printf("%#v\n", firewall)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the firewall rule to update.
  firewall := ""  // TODO: Update placeholder value.


  rb := compute.Firewall{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the firewall rule to update.
  firewall := ""  // TODO: Update placeholder value.


  rb := compute.Firewall{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.ForwardingRules().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to return.
  forwardingRule := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.ForwardingRule{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.ForwardingRules().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      fmt.Printf("%#v\n", forwardingRule)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := ""  // TODO: Update placeholder value.


  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the address resource to delete.
  address := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the address resource to return.
  address := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Address{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.GlobalAddresses().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, address := range page.Items {
      // TODO: Change code below to process each `address` resource:
      fmt.Printf("%#v\n", address)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to delete.
  forwardingRule := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource to return.
  forwardingRule := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.ForwardingRule{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.GlobalForwardingRules().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, forwardingRule := range page.Items {
      // TODO: Change code below to process each `forwardingRule` resource:
      fmt.Printf("%#v\n", forwardingRule)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the ForwardingRule resource in which target is to be set.
  forwardingRule := ""  // TODO: Update placeholder value.


  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.GlobalOperations().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.GlobalOperations().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HealthCheck resource to delete.
  healthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HealthCheck resource to return.
  healthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.HealthChecks().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, healthCheck := range page.Items {
      // TODO: Change code below to process each `healthCheck` resource:
      fmt.Printf("%#v\n", healthCheck)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HealthCheck resource to update.
  healthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HealthCheck resource to update.
  healthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to delete.
  httpHealthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to return.
  httpHealthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.HttpHealthChecks().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, httpHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpHealthCheck` resource:
      fmt.Printf("%#v\n", httpHealthCheck)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpHealthCheck resource to update.
  httpHealthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HttpHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to delete.
  httpsHealthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to return.
  httpsHealthCheck := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.HttpsHealthChecks().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, httpsHealthCheck := range page.Items {
      // TODO: Change code below to process each `httpsHealthCheck` resource:
      fmt.Printf("%#v\n", httpsHealthCheck)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the HttpsHealthCheck resource to update.
  httpsHealthCheck := ""  // TODO: Update placeholder value.


  rb := compute.HttpsHealthCheck{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the image resource to delete.
  image := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Image name.
  image := ""  // TODO: Update placeholder value.


  rb := compute.DeprecationStatus{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the image resource to return.
  image := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the image family to search for.
  family := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.DevstorageFullControl, compute.DevstorageReadOnly, compute.DevstorageReadWrite)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Image{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Images().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, image := range page.Items {
      // TODO: Change code below to process each `image` resource:
      fmt.Printf("%#v\n", image)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManagersAbandonInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.InstanceGroupManagers().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group to delete.
  instanceGroupManager := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManagersDeleteInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where you want to create the managed instance group.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManager{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.InstanceGroupManagers().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, instanceGroupManager := range page.Items {
      // TODO: Change code below to process each `instanceGroupManager` resource:
      fmt.Printf("%#v\n", instanceGroupManager)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManagersRecreateInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.

  // The number of running instances that the managed instance group should maintain at any given time.
  // The group automatically adds or removes instances to maintain the number of instances specified by
  // this parameter.
  size := 0  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManagersSetInstanceTemplateRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the managed instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the managed instance group.
  instanceGroupManager := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupManagersSetTargetPoolsRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group where you are adding instances.
  instanceGroup := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupsAddInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.InstanceGroups().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group to delete.
  instanceGroup := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group.
  instanceGroup := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where you want to create the instance group.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroup{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.InstanceGroups().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, instanceGroup := range page.Items {
      // TODO: Change code below to process each `instanceGroup` resource:
      fmt.Printf("%#v\n", instanceGroup)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group from which you want to generate a list of included instances.
  instanceGroup := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupsListInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
  req := computeService.InstanceGroups().ListInstances(project, zone, instanceGroup, rb)
  if err := req.Pages(ctx, func(page *) error {
    for _, instanceWithNamedPorts := range page.Items {
      // TODO: Change code below to process each `instanceWithNamedPorts` resource:
      fmt.Printf("%#v\n", instanceWithNamedPorts)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group where the specified instances will be removed.
  instanceGroup := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupsRemoveInstancesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone where the instance group is located.
  zone := ""  // TODO: Update placeholder value.

  // The name of the instance group where the named ports are updated.
  instanceGroup := ""  // TODO: Update placeholder value.


  rb := compute.InstanceGroupsSetNamedPortsRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the instance template to delete.
  instanceTemplate := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the instance template.
  instanceTemplate := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.InstanceTemplate{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.InstanceTemplates().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, instanceTemplate := range page.Items {
      // TODO: Change code below to process each `instanceTemplate` resource:
      fmt.Printf("%#v\n", instanceTemplate)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // The instance name for this request.
  instance := ""  // TODO: Update placeholder value.

  // The name of the network interface to add to this instance.
  networkInterface := ""  // TODO: Update placeholder value.


  rb := compute.AccessConfig{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Instances().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // The instance name for this request.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.AttachedDisk{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance resource to delete.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // The instance name for this request.
  instance := ""  // TODO: Update placeholder value.

  // The name of the access config to delete.
  accessConfig := ""  // TODO: Update placeholder value.

  // The name of the network interface.
  networkInterface := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Instance name.
  instance := ""  // TODO: Update placeholder value.

  // Disk device name to detach.
  deviceName := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance resource to return.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.Instance{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.Instances().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, instance := range page.Items {
      // TODO: Change code below to process each `instance` resource:
      fmt.Printf("%#v\n", instance)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // The instance name.
  instance := ""  // TODO: Update placeholder value.

  // Whether to auto-delete the disk when the instance is deleted.
  autoDelete := false  // TODO: Update placeholder value.

  // The device name of the disk to modify.
  deviceName := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.InstancesSetMachineTypeRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.Metadata{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Instance name.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.Scheduling{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance scoping this request.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.Tags{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance resource to start.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance resource to start.
  instance := ""  // TODO: Update placeholder value.


  rb := compute.InstancesStartWithEncryptionKeyRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the instance resource to stop.
  instance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the License resource to return.
  license := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.MachineTypes().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the machine type to return.
  machineType := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // The name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.MachineTypes().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, machineType := range page.Items {
      // TODO: Change code below to process each `machineType` resource:
      fmt.Printf("%#v\n", machineType)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the network to delete.
  network := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the network to return.
  network := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Network{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Networks().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, network := range page.Items {
      // TODO: Change code below to process each `network` resource:
      fmt.Printf("%#v\n", network)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.DiskMoveRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.InstanceMoveRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Metadata{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.DevstorageFullControl, compute.DevstorageReadOnly, compute.DevstorageReadWrite)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.UsageExportLocation{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.RegionOperations().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region resource to return.
  region := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Regions().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, region := range page.Items {
      // TODO: Change code below to process each `region` resource:
      fmt.Printf("%#v\n", region)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Routers().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to delete.
  router := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to return.
  router := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to query.
  router := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.Router{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.Routers().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, router := range page.Items {
      // TODO: Change code below to process each `router` resource:
      fmt.Printf("%#v\n", router)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to update.
  router := ""  // TODO: Update placeholder value.


  rb := compute.Router{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to query.
  router := ""  // TODO: Update placeholder value.


  rb := compute.Router{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Router resource to update.
  router := ""  // TODO: Update placeholder value.


  rb := compute.Router{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Route resource to delete.
  route := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Route resource to return.
  route := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.Route{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Routes().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, route := range page.Items {
      // TODO: Change code below to process each `route` resource:
      fmt.Printf("%#v\n", route)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Snapshot resource to delete.
  snapshot := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the Snapshot resource to return.
  snapshot := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Snapshots().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, snapshot := range page.Items {
      // TODO: Change code below to process each `snapshot` resource:
      fmt.Printf("%#v\n", snapshot)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the SslCertificate resource to delete.
  sslCertificate := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the SslCertificate resource to return.
  sslCertificate := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.SslCertificate{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.SslCertificates().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, sslCertificate := range page.Items {
      // TODO: Change code below to process each `sslCertificate` resource:
      fmt.Printf("%#v\n", sslCertificate)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Subnetworks().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Subnetwork resource to delete.
  subnetwork := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the Subnetwork resource to return.
  subnetwork := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.Subnetwork{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.Subnetworks().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, subnetwork := range page.Items {
      // TODO: Change code below to process each `subnetwork` resource:
      fmt.Printf("%#v\n", subnetwork)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpProxy resource to delete.
  targetHttpProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpProxy resource to return.
  targetHttpProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.TargetHttpProxy{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetHttpProxies().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetHttpProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpProxy` resource:
      fmt.Printf("%#v\n", targetHttpProxy)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpProxy to set a URL map for.
  targetHttpProxy := ""  // TODO: Update placeholder value.


  rb := compute.UrlMapReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to delete.
  targetHttpsProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to return.
  targetHttpsProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.TargetHttpsProxy{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetHttpsProxies().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetHttpsProxy := range page.Items {
      // TODO: Change code below to process each `targetHttpsProxy` resource:
      fmt.Printf("%#v\n", targetHttpsProxy)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
  targetHttpsProxy := ""  // TODO: Update placeholder value.


  rb := compute.TargetHttpsProxiesSetSslCertificatesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetHttpsProxy resource whose URL map is to be set.
  targetHttpsProxy := ""  // TODO: Update placeholder value.


  rb := compute.UrlMapReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetInstances().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the TargetInstance resource to delete.
  targetInstance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the TargetInstance resource to return.
  targetInstance := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := ""  // TODO: Update placeholder value.


  rb := compute.TargetInstance{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.TargetInstances().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetInstance := range page.Items {
      // TODO: Change code below to process each `targetInstance` resource:
      fmt.Printf("%#v\n", targetInstance)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the target pool to add a health check to.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.TargetPoolsAddHealthCheckRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to add instances to.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.TargetPoolsAddInstanceRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetPools().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to delete.
  targetPool := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to return.
  targetPool := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to which the queried instance belongs.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.InstanceReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.TargetPool{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.TargetPools().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetPool := range page.Items {
      // TODO: Change code below to process each `targetPool` resource:
      fmt.Printf("%#v\n", targetPool)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the target pool to remove health checks from.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.TargetPoolsRemoveHealthCheckRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to remove instances from.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.TargetPoolsRemoveInstanceRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region scoping this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the TargetPool resource to set a backup pool for.
  targetPool := ""  // TODO: Update placeholder value.


  rb := compute.TargetReference{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetSslProxy resource to delete.
  targetSslProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetSslProxy resource to return.
  targetSslProxy := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.TargetSslProxy{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetSslProxies().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetSslProxy := range page.Items {
      // TODO: Change code below to process each `targetSslProxy` resource:
      fmt.Printf("%#v\n", targetSslProxy)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetSslProxy resource whose BackendService resource is to be set.
  targetSslProxy := ""  // TODO: Update placeholder value.


  rb := compute.TargetSslProxiesSetBackendServiceRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetSslProxy resource whose ProxyHeader is to be set.
  targetSslProxy := ""  // TODO: Update placeholder value.


  rb := compute.TargetSslProxiesSetProxyHeaderRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
  targetSslProxy := ""  // TODO: Update placeholder value.


  rb := compute.TargetSslProxiesSetSslCertificatesRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.TargetVpnGateways().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the target VPN gateway to delete.
  targetVpnGateway := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the target VPN gateway to return.
  targetVpnGateway := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.TargetVpnGateway{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.TargetVpnGateways().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, targetVpnGateway := range page.Items {
      // TODO: Change code below to process each `targetVpnGateway` resource:
      fmt.Printf("%#v\n", targetVpnGateway)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap resource to delete.
  urlMap := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap resource to return.
  urlMap := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.


  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap scoping this request.
  urlMap := ""  // TODO: Update placeholder value.


  rb := compute.CacheInvalidationRule{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.UrlMaps().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, urlMap := range page.Items {
      // TODO: Change code below to process each `urlMap` resource:
      fmt.Printf("%#v\n", urlMap)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap resource to update.
  urlMap := ""  // TODO: Update placeholder value.


  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed:
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap resource to update.
  urlMap := ""  // TODO: Update placeholder value.


  rb := compute.UrlMap{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the UrlMap resource to be validated as.
  urlMap := ""  // TODO: Update placeholder value.


  rb := compute.UrlMapsValidateRequest{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.VpnTunnels().AggregatedList(project)
  if err := req.Pages(ctx, func(page *) error {
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the VpnTunnel resource to delete.
  vpnTunnel := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  // Name of the VpnTunnel resource to return.
  vpnTunnel := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.


  rb := compute.VpnTunnel{
    // TODO: Add desired fields of the request body to be changed.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the region for this request.
  region := ""  // TODO: Update placeholder value.

  req := computeService.VpnTunnels().List(project, region)
  if err := req.Pages(ctx, func(page *) error {
    for _, vpnTunnel := range page.Items {
      // TODO: Change code below to process each `vpnTunnel` resource:
      fmt.Printf("%#v\n", vpnTunnel)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to delete.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for this request.
  zone := ""  // TODO: Update placeholder value.

  // Name of the Operations resource to return.
  operation := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone for request.
  zone := ""  // TODO: Update placeholder value.

  req := computeService.ZoneOperations().List(project, zone)
  if err := req.Pages(ctx, func(page *) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  // Name of the zone resource to return.
  zone := ""  // TODO: Update placeholder value.

}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "google.golang.org/api/compute/v1"
  "google.golang.org/x/oauth2/google"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, compute.CloudPlatform, compute.Compute, compute.ComputeReadonly)
  if err != nil {
    log.Fatal(err)
  }

  computeService, err := compute.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID for this request.
  project := ""  // TODO: Update placeholder value.

  req := computeService.Zones().List(project)
  if err := req.Pages(ctx, func(page *) error {
    for _, zone := range page.Items {
      // TODO: Change code below to process each `zone` resource:
      fmt.Printf("%#v\n", zone)
    }
  }); err != nil {
    log.Fatal(err)
  }
}
