
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the log to delete.  Example:
# `"projects/my-project/logs/syslog"`.
log_name = ''  # TODO: Update placeholder value.
# ex: 'billingAccounts/my-billingAccount/logs/my-log'

request = service.billingAccounts().logs().delete(logName=log_name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

list_log_entries_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.entries().list(body=list_log_entries_request_body)
while request is not None:
    response = request.execute()

    for log_entry in response['entries']:
        # TODO: Change code below to process each `log_entry` resource:
        pprint(log_entry)

    list_log_entries_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

write_log_entries_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.entries().write(body=write_log_entries_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

request = service.monitoredResourceDescriptors().list()
while request is not None:
    response = request.execute()

    for monitored_resource_descriptor in response['resourceDescriptors']:
        # TODO: Change code below to process each `monitored_resource_descriptor` resource:
        pprint(monitored_resource_descriptor)

    request = service.monitoredResourceDescriptors().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the log to delete.  Example:
# `"projects/my-project/logs/syslog"`.
log_name = ''  # TODO: Update placeholder value.
# ex: 'organizations/my-organization/logs/my-log'

request = service.organizations().logs().delete(logName=log_name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the log to delete.  Example:
# `"projects/my-project/logs/syslog"`.
log_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/logs/my-log'

request = service.projects().logs().delete(logName=log_name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# The resource name of the project in which to create the metric.
# Example: `"projects/my-project-id"`.
# The new metric must be provided in the request.
parent = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project'

log_metric_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().metrics().create(parent=parent, body=log_metric_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# The resource name of the metric to delete.
# Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/metrics/my-metric'

request = service.projects().metrics().delete(metricName=metric_name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# The resource name of the desired metric.
# Example: `"projects/my-project-id/metrics/my-metric-id"`.
metric_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/metrics/my-metric'

request = service.projects().metrics().get(metricName=metric_name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name containing the metrics.
# Example: `"projects/my-project-id"`.
parent = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project'

request = service.projects().metrics().list(parent=parent)
while request is not None:
    response = request.execute()

    for log_metric in response['metrics']:
        # TODO: Change code below to process each `log_metric` resource:
        pprint(log_metric)

    request = service.projects().metrics().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# The resource name of the metric to update.
# Example: `"projects/my-project-id/metrics/my-metric-id"`.
# The updated metric must be provided in the request and have the
# same identifier that is specified in `metricName`.
# If the metric does not exist, it is created.
metric_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/metrics/my-metric'

log_metric_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.projects().metrics().update(metricName=metric_name, body=log_metric_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource in which to create the sink.
# Example: `"projects/my-project-id"`.
# The new sink must be provided in the request.
parent = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project'

log_sink_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().sinks().create(parent=parent, body=log_sink_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the sink to delete, including the parent
# resource and the sink identifier.  Example:
# `"projects/my-project-id/sinks/my-sink-id"`.  It is an error if the sink
# does not exist.
sink_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/sinks/my-sink'

request = service.projects().sinks().delete(sinkName=sink_name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the sink to return.
# Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/sinks/my-sink'

request = service.projects().sinks().get(sinkName=sink_name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The cloud resource containing the sinks.
# Example: `"projects/my-logging-project"`.
parent = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project'

request = service.projects().sinks().list(parent=parent)
while request is not None:
    response = request.execute()

    for log_sink in response['sinks']:
        # TODO: Change code below to process each `log_sink` resource:
        pprint(log_sink)

    request = service.projects().sinks().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Stackdriver Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)

# Required. The resource name of the sink to update, including the parent
# resource and the sink identifier.  If the sink does not exist, this method
# creates the sink.  Example: `"projects/my-project-id/sinks/my-sink-id"`.
sink_name = ''  # TODO: Update placeholder value.
# ex: 'projects/my-project/sinks/my-sink'

log_sink_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.projects().sinks().update(sinkName=sink_name, body=log_sink_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
