
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


list_log_entries_request_body = {
    # TODO: Add desired entries of the request body.
}


entries = service.entries()
request = entries.list(body=list_log_entries_request_body)
while request is not None:
    response = request.execute()

    for log_entry in response['entries']:
        # TODO: Change code below to process each `log_entry` resource:
        pprint(log_entry)

    list_log_entries_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


write_log_entries_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.entries().write(body=write_log_entries_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


monitoredResourceDescriptors = service.monitoredResourceDescriptors()
request = monitoredResourceDescriptors.list()
while request is not None:
    response = request.execute()

    for monitored_resource_descriptor in response['resourceDescriptors']:
        # TODO: Change code below to process each `monitored_resource_descriptor` resource:
        pprint(monitored_resource_descriptor)

    request = monitoredResourceDescriptors.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
logName = 'projects/{MY-PROJECT}/logs/{MY-LOG}'


request = service.projects().logs().delete(logName=logName)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
# The new metric must be provided in the request.
projectName = 'projects/{MY-PROJECT}'


log_metric_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().metrics().create(projectName=projectName, body=log_metric_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'


request = service.projects().metrics().delete(metricName=metricName)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'


request = service.projects().metrics().get(metricName=metricName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Required. The resource name of the project containing the metrics. Example:
# `"projects/my-project-id"`.
projectName = 'projects/{MY-PROJECT}'


metrics = service.projects().metrics()
request = metrics.list(projectName=projectName)
while request is not None:
    response = request.execute()

    for log_metric in response['metrics']:
        # TODO: Change code below to process each `log_metric` resource:
        pprint(log_metric)

    request = metrics.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
# The updated metric must be provided in the request and have the same identifier that is specified in
# `metricName`. If the metric does not exist, it is created.
metricName = 'projects/{MY-PROJECT}/metrics/{MY-METRIC}'


log_metric_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().metrics().update(metricName=metricName, body=log_metric_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
# The new sink must be provided in the request.
projectName = 'projects/{MY-PROJECT}'


log_sink_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().sinks().create(projectName=projectName, body=log_sink_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'


request = service.projects().sinks().delete(sinkName=sinkName)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'


request = service.projects().sinks().get(sinkName=sinkName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Required. The resource name of the project containing the sinks. Example:
# `"projects/my-logging-project"`.
projectName = 'projects/{MY-PROJECT}'


sinks = service.projects().sinks()
request = sinks.list(projectName=projectName)
while request is not None:
    response = request.execute()

    for log_sink in response['sinks']:
        # TODO: Change code below to process each `log_sink` resource:
        pprint(log_sink)

    request = sinks.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Logging API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/logging
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('logging', 'v2beta1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
# updated sink must be provided in the request and have the same name that is specified in `sinkName`.
# If the sink does not exist, it is created.
sinkName = 'projects/{MY-PROJECT}/sinks/{MY-SINK}'


log_sink_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().sinks().update(sinkName=sinkName, body=log_sink_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
