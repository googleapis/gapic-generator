
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.Delete request = storageService.bucketAccessControls().delete(bucket, entity);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.BucketAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.Get request = storageService.bucketAccessControls().get(bucket, entity);

    BucketAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.BucketAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    BucketAccessControl requestBody = new BucketAccessControl();

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.Insert request = storageService.bucketAccessControls().insert(bucket, requestBody);

    BucketAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.BucketAccessControls;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.List request = storageService.bucketAccessControls().list(bucket);

    BucketAccessControls response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.BucketAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    BucketAccessControl requestBody = new BucketAccessControl();

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.Patch request = storageService.bucketAccessControls().patch(bucket, entity, requestBody);

    BucketAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.BucketAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    BucketAccessControl requestBody = new BucketAccessControl();

    Storage storageService = createStorageService();
    Storage.BucketAccessControls.Update request = storageService.bucketAccessControls().update(bucket, entity, requestBody);

    BucketAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Buckets.Delete request = storageService.buckets().delete(bucket);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Bucket;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Buckets.Get request = storageService.buckets().get(bucket);

    Bucket response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Bucket;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // A valid API project identifier.
    String project = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Bucket requestBody = new Bucket();

    Storage storageService = createStorageService();
    Storage.Buckets.Insert request = storageService.buckets().insert(project, requestBody);

    Bucket response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Bucket;
import com.google.api.services.storage.model.Buckets;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // A valid API project identifier.
    String project = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Buckets.List request = storageService.buckets().list(project);

    Buckets response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (Bucket bucket : response.getItems()) {
        // TODO: Change code below to process each `bucket` resource:
        System.out.println(bucket);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Bucket;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Bucket requestBody = new Bucket();

    Storage storageService = createStorageService();
    Storage.Buckets.Patch request = storageService.buckets().patch(bucket, requestBody);

    Bucket response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Bucket;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    Bucket requestBody = new Bucket();

    Storage storageService = createStorageService();
    Storage.Buckets.Update request = storageService.buckets().update(bucket, requestBody);

    Bucket response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Channel;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // TODO: Assign values to desired fields of `requestBody`:
    Channel requestBody = new Channel();

    Storage storageService = createStorageService();
    Storage.Channels.Stop request = storageService.channels().stop(requestBody);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.Delete request = storageService.defaultObjectAccessControls().delete(bucket, entity);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.Get request = storageService.defaultObjectAccessControls().get(bucket, entity);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.Insert request = storageService.defaultObjectAccessControls().insert(bucket, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControls;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.List request = storageService.defaultObjectAccessControls().list(bucket);

    ObjectAccessControls response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.Patch request = storageService.defaultObjectAccessControls().patch(bucket, entity, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.DefaultObjectAccessControls.Update request = storageService.defaultObjectAccessControls().update(bucket, entity, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.Delete request = storageService.objectAccessControls().delete(bucket, object, entity);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.Get request = storageService.objectAccessControls().get(bucket, object, entity);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.Insert request = storageService.objectAccessControls().insert(bucket, object, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControls;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.List request = storageService.objectAccessControls().list(bucket, object);

    ObjectAccessControls response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.Patch request = storageService.objectAccessControls().patch(bucket, object, entity, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ObjectAccessControl;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of a bucket.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    String entity = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    ObjectAccessControl requestBody = new ObjectAccessControl();

    Storage storageService = createStorageService();
    Storage.ObjectAccessControls.Update request = storageService.objectAccessControls().update(bucket, object, entity, requestBody);

    ObjectAccessControl response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.ComposeRequest;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to store the new object.
    String destinationBucket = "";  // TODO: Update placeholder value.

    // Name of the new object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String destinationObject = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ComposeRequest requestBody = new ComposeRequest();

    Storage storageService = createStorageService();
    Storage.Objects.Compose request = storageService.objects().compose(destinationBucket, destinationObject, requestBody);

    // TODO: Download media content if desired. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to find the source object.
    String sourceBucket = "";  // TODO: Update placeholder value.

    // Name of the source object. For information about how to URL encode object names to be path safe,
    // see Encoding URI Path Parts.
    String sourceObject = "";  // TODO: Update placeholder value.

    // Name of the bucket in which to store the new object. Overrides the provided object metadata's
    // bucket value, if any.For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String destinationBucket = "";  // TODO: Update placeholder value.

    // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    // object metadata's name value, if any.
    String destinationObject = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    StorageObject requestBody = new StorageObject();

    Storage storageService = createStorageService();
    Storage.Objects.Copy request = storageService.objects().copy(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody);

    // TODO: Download media content if desired. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which the object resides.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Objects.Delete request = storageService.objects().delete(bucket, object);

    request.execute();
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which the object resides.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Objects.Get request = storageService.objects().get(bucket, object);

    // TODO: Download media content if desired. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to store the new object. Overrides the provided object metadata's
    // bucket value, if any.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    StorageObject requestBody = new StorageObject();

    // TODO: Add desired media content for upload. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload

    Storage storageService = createStorageService();
    Storage.Objects.Insert request = storageService.objects().insert(bucket, requestBody);

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Objects;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to look for objects.
    String bucket = "";  // TODO: Update placeholder value.

    Storage storageService = createStorageService();
    Storage.Objects.List request = storageService.objects().list(bucket);

    Objects response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (StorageObject storageObject : response.getItems()) {
        // TODO: Change code below to process each `storageObject` resource:
        System.out.println(storageObject);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which the object resides.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    StorageObject requestBody = new StorageObject();

    Storage storageService = createStorageService();
    Storage.Objects.Patch request = storageService.objects().patch(bucket, object, requestBody);

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.RewriteResponse;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to find the source object.
    String sourceBucket = "";  // TODO: Update placeholder value.

    // Name of the source object. For information about how to URL encode object names to be path safe,
    // see Encoding URI Path Parts.
    String sourceObject = "";  // TODO: Update placeholder value.

    // Name of the bucket in which to store the new object. Overrides the provided object metadata's
    // bucket value, if any.
    String destinationBucket = "";  // TODO: Update placeholder value.

    // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    // object metadata's name value, if any. For information about how to URL encode object names to be
    // path safe, see Encoding URI Path Parts.
    String destinationObject = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    StorageObject requestBody = new StorageObject();

    Storage storageService = createStorageService();
    Storage.Objects.Rewrite request = storageService.objects().rewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody);

    RewriteResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.StorageObject;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which the object resides.
    String bucket = "";  // TODO: Update placeholder value.

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    String object = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    StorageObject requestBody = new StorageObject();

    Storage storageService = createStorageService();
    Storage.Objects.Update request = storageService.objects().update(bucket, object, requestBody);

    // TODO: Download media content if desired. See
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    StorageObject response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storage/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storage.Storage;
import com.google.api.services.storage.model.Channel;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StorageExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the bucket in which to look for objects.
    String bucket = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Channel requestBody = new Channel();

    Storage storageService = createStorageService();
    Storage.Objects.WatchAll request = storageService.objects().watchAll(bucket, requestBody);

    Channel response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storage createStorageService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storage.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StorageSample/0.1")
        .build();
  }
}
