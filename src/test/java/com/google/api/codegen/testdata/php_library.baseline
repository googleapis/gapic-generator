<?php
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 */

namespace Google\Example\Library\V1;

use \Google\GAX\AgentHeaderDescriptor;
use \Google\GAX\ApiCallable;
use \Google\GAX\CallSettings;
use \Google\GAX\GrpcBootstrap;
use \Google\GAX\GrpcConstants;
use \Google\GAX\PageStreamingDescriptor;
use \Google\GAX\PathTemplate;
use \RuntimeException;



// TODO service doc
class LibraryServiceApi
{
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';

    private static $grpcBootstrap;
    private static $shelfNameTemplate;
    private static $bookNameTemplate;
    private static $pageStreamingDescriptors;

    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;

    /**
     * This should not be called outside of the implementation file.
     */
    static function initClass()
    {
        if (!empty(self::$grpcBootstrap)) {
            throw new RuntimeException("PublisherApi::initClass called more than once");
        }

        self::$grpcBootstrap = GrpcBootstrap::defaultInstance();

        self::$shelfNameTemplate = new PathTemplate("shelves/{shelf}");
        self::$bookNameTemplate = new PathTemplate("shelves/{shelf}/books/{book}");

        $listShelvesPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'shelves']);
        $listBooksPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'books']);
        $listStringsPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'strings']);
        self::$pageStreamingDescriptors = [
            'listShelves' => $listShelvesPageStreamingDescriptor,
            'listBooks' => $listBooksPageStreamingDescriptor,
            'listStrings' => $listStringsPageStreamingDescriptor
        ];
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     */
    public static function formatShelfName($shelf)
    {
        return self::$shelfNameTemplate->render([
            'shelf' => $shelf]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     */
    public static function formatBookName($shelf, $book)
    {
        return self::$bookNameTemplate->render([
            'shelf' => $shelf, 'book' => $book]);
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a shelf resource.
     */
    public static function parseShelfFromShelfName($shelfName)
    {
        return self::$shelfNameTemplate->match($shelfName)['shelf'];
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseShelfFromBookName($bookName)
    {
        return self::$bookNameTemplate->match($bookName)['shelf'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseBookFromBookName($bookName)
    {
        return self::$bookNameTemplate->match($bookName)['book'];
    }


    // TODO(garrettjones): add channel (when supported in gRPC)
    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress The domain name of the API remote host.
     *                                  Default 'library-example.googleapis.com'.
     *     @type mixed $port The port on which to connect to the remote host. Default 443.
     *     @type \Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           \Grpc\ChannelCredentials::createSsl()
     *     @type array $scopes A string array of scopes to use when acquiring credentials.
     *                         Default the scopes for .
     *     @type array $retryingOverride
     *           An associative array of string => RetryOptions, where the keys
     *           are method names (e.g. 'createFoo'), that overrides default retrying
     *           settings. A value of null indicates that the method in question should
     *           not retry.
     *     @type int $timeoutMillis The timeout in milliseconds to use for calls
     *                              that don't use retries. For calls that use retries,
     *                              set the timeout in RetryOptions.
     *                              Default: 30000 (30 seconds)
     *     @type string $appName The codename of the calling service. Default 'gax'.
     *     @type string $appVersion The version of the calling service.
     *                              Default: the current version of GAX.
     * }
     */
    public function __construct($options = [])
    {
        $defaultScopes = [
            'https://www.googleapis.com/auth/library',
            'https://www.googleapis.com/auth/cloud-platform'
        ];
        $defaultOptions = [
            'serviceAddress' => self::SERVICE_ADDRESS,
            'port' => self::DEFAULT_SERVICE_PORT,
            'scopes' => $defaultScopes,
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'appName' => 'gax',
            'appVersion' => self::_GAX_VERSION];
        $options = array_merge($defaultOptions, $options);

        $headerDescriptor = new AgentHeaderDescriptor([
            'clientName' => $options['appName'],
            'clientVersion' => $options['appVersion'],
            'codeGenName' => self::_CODEGEN_NAME,
            'codeGenVersion' => self::_CODEGEN_VERSION,
            'gaxVersion' => self::_GAX_VERSION,
            'phpVersion' => phpversion(),
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            'default' => $defaultDescriptors
        ];
        foreach (self::$pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $descriptors = $defaultDescriptors;
            $descriptors['pageStreamingDescriptor'] = $pageStreamingDescriptor;
            $this->descriptors[$method] = $descriptors;
        }

        // TODO load the client config in a more package-friendly way
        $clientConfigJsonString = file_get_contents('./resources/library_service_client_config.json');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('google.example.library.v1.LibraryService',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $generatedCreateStub = function($hostname, $opts) {
            return new LibraryServiceClient($hostname, $opts);
        };
        $createStubOptions = [];
        if (!empty($options['sslCreds'])) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $this->stub = self::$grpcBootstrap->createStub(
            $generatedCreateStub,
            $options['serviceAddress'],
            $options['port'],
            $createStubOptions);
    }


    // API methods here

    // TODO

    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        $this->stub->close();
    }

    private function createCredentialsCallback()
    {
        return self::$grpcBootstrap->createCallCredentialsCallback($this->scopes);
    }
}

LibraryServiceApi::initClass();

