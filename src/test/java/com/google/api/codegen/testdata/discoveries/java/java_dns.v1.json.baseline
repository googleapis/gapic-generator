
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.Changes.Create;
import com.google.api.services.dns.model.Change;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Change requestBody = new Change();

    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    Dns service = createService();
    Create request = service.changes().create(project, managedZone, requestBody);
    Change response = request.execute();
    System.out.println(response);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.Changes.Get;
import com.google.api.services.dns.model.Change;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
    String changeId = ""; // TODO: Update field(s).

    Dns service = createService();
    Get request = service.changes().get(project, managedZone, changeId);
    Change response = request.execute();
    System.out.println(response);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.Changes.List;
import com.google.api.services.dns.model.Change;
import com.google.api.services.dns.model.ChangesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    Dns service = createService();
    List request = service.changes().list(project, managedZone);
    ChangesListResponse response;
    do {
      response = request.execute();
      if (response.getChanges() == null) {
        continue;
      }
      for (Change item : response.getChanges()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.ManagedZones.Create;
import com.google.api.services.dns.model.ManagedZone;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    ManagedZone requestBody = new ManagedZone();

    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    Dns service = createService();
    Create request = service.managedZones().create(project, requestBody);
    ManagedZone response = request.execute();
    System.out.println(response);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.ManagedZones.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    Dns service = createService();
    Delete request = service.managedZones().delete(project, managedZone);
    request.execute();
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.ManagedZones.Get;
import com.google.api.services.dns.model.ManagedZone;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    Dns service = createService();
    Get request = service.managedZones().get(project, managedZone);
    ManagedZone response = request.execute();
    System.out.println(response);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.ManagedZones.List;
import com.google.api.services.dns.model.ManagedZone;
import com.google.api.services.dns.model.ManagedZonesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    Dns service = createService();
    List request = service.managedZones().list(project);
    ManagedZonesListResponse response;
    do {
      response = request.execute();
      if (response.getManagedZones() == null) {
        continue;
      }
      for (ManagedZone item : response.getManagedZones()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.Projects.Get;
import com.google.api.services.dns.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    Dns service = createService();
    Get request = service.projects().get(project);
    Project response = request.execute();
    System.out.println(response);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.Dns.ResourceRecordSets.List;
import com.google.api.services.dns.model.ResourceRecordSet;
import com.google.api.services.dns.model.ResourceRecordSetsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DnsExample {
  public void run() throws IOException, GeneralSecurityException {
    // Identifies the project addressed by this request.
    String project = ""; // TODO: Update field(s).

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = ""; // TODO: Update field(s).

    Dns service = createService();
    List request = service.resourceRecordSets().list(project, managedZone);
    ResourceRecordSetsListResponse response;
    do {
      response = request.execute();
      if (response.getRrsets() == null) {
        continue;
      }
      for (ResourceRecordSet item : response.getRrsets()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Dns createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new DnsExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
