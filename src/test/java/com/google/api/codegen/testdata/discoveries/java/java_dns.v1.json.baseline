
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Change;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `create` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";


    Change requestBody = new Change();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Dns.Changes.Create request = dnsService.changes().create(project, managedZone, requestBody);
    Change response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Change;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";

    // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
    String changeId = "{MY-CHANGE-ID}";


    Dns.Changes.Get request = dnsService.changes().get(project, managedZone, changeId);
    Change response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Change;
import com.google.api.services.dns.model.ChangesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";


    Dns.Changes.List request = dnsService.changes().list(project, managedZone);
    ChangesListResponse response;
    do {
      response = request.execute();
      if (response.getChanges() == null)
        continue;

      for (Change change : response.getChanges()) {
        // TODO: Change code below to process each `change` resource:
        System.out.println(change);
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.ManagedZone;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `create` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";


    ManagedZone requestBody = new ManagedZone();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Dns.ManagedZones.Create request = dnsService.managedZones().create(project, requestBody);
    ManagedZone response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";


    Dns.ManagedZones.Delete request = dnsService.managedZones().delete(project, managedZone);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.ManagedZone;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";


    Dns.ManagedZones.Get request = dnsService.managedZones().get(project, managedZone);
    ManagedZone response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.ManagedZone;
import com.google.api.services.dns.model.ManagedZonesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";


    Dns.ManagedZones.List request = dnsService.managedZones().list(project);
    ManagedZonesListResponse response;
    do {
      response = request.execute();
      if (response.getManagedZones() == null)
        continue;

      for (ManagedZone managedZone : response.getManagedZones()) {
        // TODO: Change code below to process each `managedZone` resource:
        System.out.println(managedZone);
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `get` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";


    Dns.Projects.Get request = dnsService.projects().get(project);
    Project response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dns/v1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dns.Dns;
import com.google.api.services.dns.model.ResourceRecordSet;
import com.google.api.services.dns.model.ResourceRecordSetsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DnsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Dns dnsService = new Dns.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Identifies the project addressed by this request.
    String project = "{MY-PROJECT}";

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    String managedZone = "{MY-MANAGED-ZONE}";


    Dns.ResourceRecordSets.List request = dnsService.resourceRecordSets().list(project, managedZone);
    ResourceRecordSetsListResponse response;
    do {
      response = request.execute();
      if (response.getRrsets() == null)
        continue;

      for (ResourceRecordSet resourceRecordSet : response.getRrsets()) {
        // TODO: Change code below to process each `resourceRecordSet` resource:
        System.out.println(resourceRecordSet);
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
