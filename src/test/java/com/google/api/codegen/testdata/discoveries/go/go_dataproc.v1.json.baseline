
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'download' method:
  var (
    // Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    resourceName = ""

  )

  callResult, err := client.Media.Download(resourceName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'upload' method:
  var (
    // Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    resourceName = ""


    requestBody = &dataproc.Media{}
  )

  callResult, err := client.Media.Upload(resourceName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""


    requestBody = &dataproc.Cluster{}
  )

  callResult, err := client.Projects.Regions.Clusters.Create(projectId, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The cluster name.
    clusterName = ""

  )

  callResult, err := client.Projects.Regions.Clusters.Delete(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'diagnose' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The cluster name.
    clusterName = ""


    requestBody = &dataproc.DiagnoseClusterRequest{}
  )

  callResult, err := client.Projects.Regions.Clusters.Diagnose(projectId, region, clusterName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The cluster name.
    clusterName = ""

  )

  callResult, err := client.Projects.Regions.Clusters.Get(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

  )

  fn := func(page *dataproc.ListClustersResponse) error {
    // doThingsWith(page)
    for i, element := range page.Clusters {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Regions.Clusters.List(projectId, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The cluster name.
    clusterName = ""


    requestBody = &dataproc.Cluster{}
  )

  callResult, err := client.Projects.Regions.Clusters.Patch(projectId, region, clusterName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The job ID.
    jobId = ""


    requestBody = &dataproc.CancelJobRequest{}
  )

  callResult, err := client.Projects.Regions.Jobs.Cancel(projectId, region, jobId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The job ID.
    jobId = ""

  )

  callResult, err := client.Projects.Regions.Jobs.Delete(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

    // [Required] The job ID.
    jobId = ""

  )

  callResult, err := client.Projects.Regions.Jobs.Get(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""

  )

  fn := func(page *dataproc.ListJobsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Jobs {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Regions.Jobs.List(projectId, region).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'submit' method:
  var (
    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId = ""

    // [Required] The Cloud Dataproc region in which to handle the request.
    region = ""


    requestBody = &dataproc.SubmitJobRequest{}
  )

  callResult, err := client.Projects.Regions.Jobs.Submit(projectId, region, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:
  var (
    // The name of the operation resource to be cancelled.
    name = ""

  )

  callResult, err := client.Projects.Regions.Operations.Cancel(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The name of the operation resource to be deleted.
    name = ""

  )

  callResult, err := client.Projects.Regions.Operations.Delete(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The name of the operation resource.
    name = ""

  )

  callResult, err := client.Projects.Regions.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dataproc/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dataproc.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The name of the operation collection.
    name = ""

  )

  fn := func(page *dataproc.ListOperationsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Operations {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Regions.Operations.List(name).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
