
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  resp, err := c.Projects.Regions.Clusters.Create(projectId, region, &dataproc.Cluster{
                                                    // TODO: Fill required fields.
                                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The cluster name.
  // TODO: Update placeholder value.
  clusterName := "{MY-CLUSTER-NAME}"

  resp, err := c.Projects.Regions.Clusters.Delete(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The cluster name.
  // TODO: Update placeholder value.
  clusterName := "{MY-CLUSTER-NAME}"

  resp, err := c.Projects.Regions.Clusters.Diagnose(projectId, region, clusterName, &dataproc.DiagnoseClusterRequest{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The cluster name.
  // TODO: Update placeholder value.
  clusterName := "{MY-CLUSTER-NAME}"

  resp, err := c.Projects.Regions.Clusters.Get(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"


  call := c.Projects.Regions.Clusters.List(projectId, region)
  if err := call.Pages(ctx, func(page *dataproc.ListClustersResponse) error {
    for _, v := range page.Clusters {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The cluster name.
  // TODO: Update placeholder value.
  clusterName := "{MY-CLUSTER-NAME}"

  resp, err := c.Projects.Regions.Clusters.Patch(projectId, region, clusterName, &dataproc.Cluster{
                                                   // TODO: Fill required fields.
                                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The job ID.
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Projects.Regions.Jobs.Cancel(projectId, region, jobId, &dataproc.CancelJobRequest{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The job ID.
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Projects.Regions.Jobs.Delete(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  // [Required] The job ID.
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Projects.Regions.Jobs.Get(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"


  call := c.Projects.Regions.Jobs.List(projectId, region)
  if err := call.Pages(ctx, func(page *dataproc.ListJobsResponse) error {
    for _, v := range page.Jobs {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] The Cloud Dataproc region in which to handle the request.
  // TODO: Update placeholder value.
  region := "{MY-REGION}"

  resp, err := c.Projects.Regions.Jobs.Submit(projectId, region, &dataproc.SubmitJobRequest{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the operation resource to be cancelled.
  // TODO: Update placeholder value.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  resp, err := c.Projects.Regions.Operations.Cancel(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the operation resource to be deleted.
  // TODO: Update placeholder value.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  resp, err := c.Projects.Regions.Operations.Delete(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the operation resource.
  // TODO: Update placeholder value.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  resp, err := c.Projects.Regions.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataproc.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the operation collection.
  // TODO: Update placeholder value.
  name := "{MY-NAME}"


  call := c.Projects.Regions.Operations.List(name)
  if err := call.Pages(ctx, func(page *dataproc.ListOperationsResponse) error {
    for _, v := range page.Operations {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
