
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  cluster := &dataproc.Cluster{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Regions.Clusters.Create(projectId, region, &cluster).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The cluster name.
  clusterName := "{MY-CLUSTER-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Clusters.Delete(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The cluster name.
  clusterName := "{MY-CLUSTER-NAME}" // TODO: Update placeholder value(s).

  diagnoseClusterRequest := &dataproc.DiagnoseClusterRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Regions.Clusters.Diagnose(projectId, region, clusterName, &diagnoseClusterRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The cluster name.
  clusterName := "{MY-CLUSTER-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Clusters.Get(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.Projects.Regions.Clusters.List(projectId, region)
  if err := call.Pages(ctx, func(page *dataproc.ListClustersResponse) error {
    for _, cluster := range page.Clusters {
      // TODO: Use cluster
      fmt.Printf("%#v\n", cluster)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The cluster name.
  clusterName := "{MY-CLUSTER-NAME}" // TODO: Update placeholder value(s).

  cluster := &dataproc.Cluster{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Projects.Regions.Clusters.Patch(projectId, region, clusterName, &cluster).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The job ID.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  cancelJobRequest := &dataproc.CancelJobRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Regions.Jobs.Cancel(projectId, region, jobId, &cancelJobRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The job ID.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Jobs.Delete(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  // [Required] The job ID.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Jobs.Get(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  call := s.Projects.Regions.Jobs.List(projectId, region)
  if err := call.Pages(ctx, func(page *dataproc.ListJobsResponse) error {
    for _, job := range page.Jobs {
      // TODO: Use job
      fmt.Printf("%#v\n", job)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // [Required] The Cloud Dataproc region in which to handle the request.
  region := "{MY-REGION}" // TODO: Update placeholder value(s).

  submitJobRequest := &dataproc.SubmitJobRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Regions.Jobs.Submit(projectId, region, &submitJobRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource to be cancelled.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Operations.Cancel(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource to be deleted.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Operations.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Regions.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataproc.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation collection.
  name := "{MY-NAME}" // TODO: Update placeholder value(s).

  call := s.Projects.Regions.Operations.List(name)
  if err := call.Pages(ctx, func(page *dataproc.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Use operation
      fmt.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
