
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Create` method:

  // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  clusterBody := dataproc.Cluster{
    // TODO: Add desired fields of the `clusterBody` variable.
  }

  res, err := service.Projects.Regions.Clusters.Create(projectId, region, &clusterBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The cluster name.
  clusterName := ""

  res, err := service.Projects.Regions.Clusters.Delete(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Diagnose` method:

  // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The cluster name.
  clusterName := ""

  diagnoseClusterRequestBody := dataproc.DiagnoseClusterRequest{
    // TODO: Add desired fields of the `diagnoseClusterRequestBody` variable.
  }

  res, err := service.Projects.Regions.Clusters.Diagnose(projectId, region, clusterName, &diagnoseClusterRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The cluster name.
  clusterName := ""

  res, err := service.Projects.Regions.Clusters.Get(projectId, region, clusterName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  req := service.Projects.Regions.Clusters.List(projectId, region)
  if err := req.Pages(ctx, func(page *dataproc.ListClustersResponse) error {
    for _, cluster := range page.Clusters {
      // TODO: Change code below to process each `cluster` resource:
      out, err := json.MarshalIndent(cluster, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * [Required] The ID of the Google Cloud Platform project the cluster belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The cluster name.
  clusterName := ""

  clusterBody := dataproc.Cluster{
    // TODO: Add desired fields of the `clusterBody` variable to be changed.
  }

  res, err := service.Projects.Regions.Clusters.Patch(projectId, region, clusterName, &clusterBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

  // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The job ID.
  jobId := ""

  cancelJobRequestBody := dataproc.CancelJobRequest{
    // TODO: Add desired fields of the `cancelJobRequestBody` variable.
  }

  res, err := service.Projects.Regions.Jobs.Cancel(projectId, region, jobId, &cancelJobRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The job ID.
  jobId := ""

  res, err := service.Projects.Regions.Jobs.Delete(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  // * [Required] The job ID.
  jobId := ""

  res, err := service.Projects.Regions.Jobs.Get(projectId, region, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  req := service.Projects.Regions.Jobs.List(projectId, region)
  if err := req.Pages(ctx, func(page *dataproc.ListJobsResponse) error {
    for _, job := range page.Jobs {
      // TODO: Change code below to process each `job` resource:
      out, err := json.MarshalIndent(job, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Submit` method:

  // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
  projectId := ""

  // * [Required] The Cloud Dataproc region in which to handle the request.
  region := ""

  submitJobRequestBody := dataproc.SubmitJobRequest{
    // TODO: Add desired fields of the `submitJobRequestBody` variable.
  }

  res, err := service.Projects.Regions.Jobs.Submit(projectId, region, &submitJobRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

  // * The name of the operation resource to be cancelled.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  res, err := service.Projects.Regions.Operations.Cancel(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * The name of the operation resource to be deleted.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  res, err := service.Projects.Regions.Operations.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The name of the operation resource.
  name := "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}"

  res, err := service.Projects.Regions.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataproc/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, dataproc.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the dataproc service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := dataproc.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The name of the operation collection.
  name := ""

  req := service.Projects.Regions.Operations.List(name)
  if err := req.Pages(ctx, func(page *dataproc.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
