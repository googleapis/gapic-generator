============== file: src/main/java/com/google/gcloud/pubsub/spi/PagedResponseWrappers.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.FixedSizeCollection;
import com.google.api.gax.core.Page;
import com.google.api.gax.core.PagedListResponse;
import com.google.api.gax.grpc.AbstractFixedSizeCollection;
import com.google.api.gax.grpc.AbstractPage;
import com.google.api.gax.grpc.AbstractPagedListResponse;
import com.google.api.gax.grpc.ApiExceptions;
import com.google.api.gax.grpc.CallContext;
import com.google.api.gax.grpc.PagedListDescriptor;
import com.google.api.gax.grpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.Shelf;
import com.google.protobuf.ExperimentalApi;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Wrapper class to contain paged response types for page streaming methods.
 * Each static class inside this wrapper class is used as the return type of
 * one of an API method that implements the page streaming pattern.
 */
@Generated("by GAPIC")
@ExperimentalApi
public class PagedResponseWrappers {

  public static class ListShelvesPagedResponse extends AbstractPagedListResponse<ListShelvesRequest, ListShelvesResponse, Shelf> {

    private final ListShelvesPage page;

    public static ListShelvesPagedResponse callApiAndCreate(
        UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
        PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> pageDescriptor,
        ListShelvesRequest request,
        CallContext callContext) {
      return new ListShelvesPagedResponse(ListShelvesPage.callApiAndCreate(callable, pageDescriptor, request, callContext));
    }

    private ListShelvesPagedResponse(ListShelvesPage page) {
      this.page = page;
    }

    @Override
    public ListShelvesPage getPage() {
      return page;
    }

    @Override
    public Iterable<ListShelvesPage> iteratePages() {
      return page.iteratePages();
    }

    @Override
    public ListShelvesFixedSizeCollection expandToFixedSizeCollection(int collectionSize) {
      return ListShelvesFixedSizeCollection.expandPage(page, collectionSize);
    }

    @Override
    public Iterable<ListShelvesFixedSizeCollection> iterateFixedSizeCollections(final int collectionSize) {
      return expandToFixedSizeCollection(collectionSize).iterateCollections();
    }


  }

  public static class ListShelvesPage extends AbstractPage<ListShelvesRequest, ListShelvesResponse, Shelf> {

    private static final PageFactory<ListShelvesRequest, ListShelvesResponse, Shelf, ListShelvesPage> PAGE_FACTORY =
      new PageFactory<ListShelvesRequest, ListShelvesResponse, Shelf, ListShelvesPage>() {
        @Override
        public ListShelvesPage createPage(
            UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
            PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> pageDescriptor,
            ListShelvesRequest request,
            CallContext context,
            ListShelvesResponse response) {
          return new ListShelvesPage(callable, pageDescriptor, request, context, response);
        }
      };

    public static ListShelvesPage callApiAndCreate(UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
        PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> pageDescriptor,
        ListShelvesRequest request,
        CallContext context) {
      return callApiAndCreate(PAGE_FACTORY, callable, pageDescriptor, request, context);
    }

    private ListShelvesPage(
        UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
        PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> pageDescriptor,
        ListShelvesRequest request,
        CallContext context,
        ListShelvesResponse response) {
      super(callable, pageDescriptor, request, context, response);
    }

    @Override
    public ListShelvesPage getNextPage() {
      return getNextPage(PAGE_FACTORY);
    }

    @Override
    public ListShelvesPage getNextPage(int pageSize) {
      return getNextPage(PAGE_FACTORY, pageSize);
    }

    private Iterable<ListShelvesPage> iteratePages() {
      return iterate(PAGE_FACTORY, this);
    }


  }

  public static class ListShelvesFixedSizeCollection
      extends AbstractFixedSizeCollection<ListShelvesRequest, ListShelvesResponse, Shelf> {

    private static final CollectionFactory<ListShelvesFixedSizeCollection, ListShelvesPage> SIZED_COLLECTION_FACTORY =
      new CollectionFactory<ListShelvesFixedSizeCollection, ListShelvesPage>() {
        @Override
        public ListShelvesFixedSizeCollection createCollection(
            final ListShelvesPage page, final int collectionSize) {
          List<ListShelvesPage> pages =
              getPages(ListShelvesPage.PAGE_FACTORY, page, collectionSize);
          return new ListShelvesFixedSizeCollection(pages, collectionSize);
        }
      };

    private static ListShelvesFixedSizeCollection expandPage(
        final ListShelvesPage firstPage, final int collectionSize) {
      return expandPage(SIZED_COLLECTION_FACTORY, firstPage, collectionSize);
    }

    private ListShelvesFixedSizeCollection(List<ListShelvesPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    @Override
    public ListShelvesFixedSizeCollection getNextCollection() {
      return getNextCollection(SIZED_COLLECTION_FACTORY, ListShelvesPage.PAGE_FACTORY);
    }

    private Iterable<ListOperationsFixedSizeCollection> iterateCollections() {
      return iterate(SIZED_COLLECTION_FACTORY, ListShelvesPage.PAGE_FACTORY, this);
    }
  }

  public static class ListBooksPagedResponse extends AbstractPagedListResponse<ListBooksRequest, ListBooksResponse, Book> {

    private final ListBooksPage page;

    public static ListBooksPagedResponse callApiAndCreate(
        UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
        PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> pageDescriptor,
        ListBooksRequest request,
        CallContext callContext) {
      return new ListBooksPagedResponse(ListBooksPage.callApiAndCreate(callable, pageDescriptor, request, callContext));
    }

    private ListBooksPagedResponse(ListBooksPage page) {
      this.page = page;
    }

    @Override
    public ListBooksPage getPage() {
      return page;
    }

    @Override
    public Iterable<ListBooksPage> iteratePages() {
      return page.iteratePages();
    }

    @Override
    public ListBooksFixedSizeCollection expandToFixedSizeCollection(int collectionSize) {
      return ListBooksFixedSizeCollection.expandPage(page, collectionSize);
    }

    @Override
    public Iterable<ListBooksFixedSizeCollection> iterateFixedSizeCollections(final int collectionSize) {
      return expandToFixedSizeCollection(collectionSize).iterateCollections();
    }


  }

  public static class ListBooksPage extends AbstractPage<ListBooksRequest, ListBooksResponse, Book> {

    private static final PageFactory<ListBooksRequest, ListBooksResponse, Book, ListBooksPage> PAGE_FACTORY =
      new PageFactory<ListBooksRequest, ListBooksResponse, Book, ListBooksPage>() {
        @Override
        public ListBooksPage createPage(
            UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
            PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> pageDescriptor,
            ListBooksRequest request,
            CallContext context,
            ListBooksResponse response) {
          return new ListBooksPage(callable, pageDescriptor, request, context, response);
        }
      };

    public static ListBooksPage callApiAndCreate(UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
        PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> pageDescriptor,
        ListBooksRequest request,
        CallContext context) {
      return callApiAndCreate(PAGE_FACTORY, callable, pageDescriptor, request, context);
    }

    private ListBooksPage(
        UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
        PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> pageDescriptor,
        ListBooksRequest request,
        CallContext context,
        ListBooksResponse response) {
      super(callable, pageDescriptor, request, context, response);
    }

    @Override
    public ListBooksPage getNextPage() {
      return getNextPage(PAGE_FACTORY);
    }

    @Override
    public ListBooksPage getNextPage(int pageSize) {
      return getNextPage(PAGE_FACTORY, pageSize);
    }

    private Iterable<ListBooksPage> iteratePages() {
      return iterate(PAGE_FACTORY, this);
    }


  }

  public static class ListBooksFixedSizeCollection
      extends AbstractFixedSizeCollection<ListBooksRequest, ListBooksResponse, Book> {

    private static final CollectionFactory<ListBooksFixedSizeCollection, ListBooksPage> SIZED_COLLECTION_FACTORY =
      new CollectionFactory<ListBooksFixedSizeCollection, ListBooksPage>() {
        @Override
        public ListBooksFixedSizeCollection createCollection(
            final ListBooksPage page, final int collectionSize) {
          List<ListBooksPage> pages =
              getPages(ListBooksPage.PAGE_FACTORY, page, collectionSize);
          return new ListBooksFixedSizeCollection(pages, collectionSize);
        }
      };

    private static ListBooksFixedSizeCollection expandPage(
        final ListBooksPage firstPage, final int collectionSize) {
      return expandPage(SIZED_COLLECTION_FACTORY, firstPage, collectionSize);
    }

    private ListBooksFixedSizeCollection(List<ListBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    @Override
    public ListBooksFixedSizeCollection getNextCollection() {
      return getNextCollection(SIZED_COLLECTION_FACTORY, ListBooksPage.PAGE_FACTORY);
    }

    private Iterable<ListOperationsFixedSizeCollection> iterateCollections() {
      return iterate(SIZED_COLLECTION_FACTORY, ListBooksPage.PAGE_FACTORY, this);
    }
  }

  public static class ListStringsPagedResponse extends AbstractPagedListResponse<ListStringsRequest, ListStringsResponse, String> {

    private final ListStringsPage page;

    public static ListStringsPagedResponse callApiAndCreate(
        UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
        PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> pageDescriptor,
        ListStringsRequest request,
        CallContext callContext) {
      return new ListStringsPagedResponse(ListStringsPage.callApiAndCreate(callable, pageDescriptor, request, callContext));
    }

    private ListStringsPagedResponse(ListStringsPage page) {
      this.page = page;
    }

    @Override
    public ListStringsPage getPage() {
      return page;
    }

    @Override
    public Iterable<ListStringsPage> iteratePages() {
      return page.iteratePages();
    }

    @Override
    public ListStringsFixedSizeCollection expandToFixedSizeCollection(int collectionSize) {
      return ListStringsFixedSizeCollection.expandPage(page, collectionSize);
    }

    @Override
    public Iterable<ListStringsFixedSizeCollection> iterateFixedSizeCollections(final int collectionSize) {
      return expandToFixedSizeCollection(collectionSize).iterateCollections();
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsPage extends AbstractPage<ListStringsRequest, ListStringsResponse, String> {

    private static final PageFactory<ListStringsRequest, ListStringsResponse, String, ListStringsPage> PAGE_FACTORY =
      new PageFactory<ListStringsRequest, ListStringsResponse, String, ListStringsPage>() {
        @Override
        public ListStringsPage createPage(
            UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
            PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> pageDescriptor,
            ListStringsRequest request,
            CallContext context,
            ListStringsResponse response) {
          return new ListStringsPage(callable, pageDescriptor, request, context, response);
        }
      };

    public static ListStringsPage callApiAndCreate(UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
        PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> pageDescriptor,
        ListStringsRequest request,
        CallContext context) {
      return callApiAndCreate(PAGE_FACTORY, callable, pageDescriptor, request, context);
    }

    private ListStringsPage(
        UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
        PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> pageDescriptor,
        ListStringsRequest request,
        CallContext context,
        ListStringsResponse response) {
      super(callable, pageDescriptor, request, context, response);
    }

    @Override
    public ListStringsPage getNextPage() {
      return getNextPage(PAGE_FACTORY);
    }

    @Override
    public ListStringsPage getNextPage(int pageSize) {
      return getNextPage(PAGE_FACTORY, pageSize);
    }

    private Iterable<ListStringsPage> iteratePages() {
      return iterate(PAGE_FACTORY, this);
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsFixedSizeCollection
      extends AbstractFixedSizeCollection<ListStringsRequest, ListStringsResponse, String> {

    private static final CollectionFactory<ListStringsFixedSizeCollection, ListStringsPage> SIZED_COLLECTION_FACTORY =
      new CollectionFactory<ListStringsFixedSizeCollection, ListStringsPage>() {
        @Override
        public ListStringsFixedSizeCollection createCollection(
            final ListStringsPage page, final int collectionSize) {
          List<ListStringsPage> pages =
              getPages(ListStringsPage.PAGE_FACTORY, page, collectionSize);
          return new ListStringsFixedSizeCollection(pages, collectionSize);
        }
      };

    private static ListStringsFixedSizeCollection expandPage(
        final ListStringsPage firstPage, final int collectionSize) {
      return expandPage(SIZED_COLLECTION_FACTORY, firstPage, collectionSize);
    }

    private ListStringsFixedSizeCollection(List<ListStringsPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    @Override
    public ListStringsFixedSizeCollection getNextCollection() {
      return getNextCollection(SIZED_COLLECTION_FACTORY, ListStringsPage.PAGE_FACTORY);
    }

    private Iterable<ListOperationsFixedSizeCollection> iterateCollections() {
      return iterate(SIZED_COLLECTION_FACTORY, ListStringsPage.PAGE_FACTORY, this);
    }
  }

  public static class FindRelatedBooksPagedResponse extends AbstractPagedListResponse<FindRelatedBooksRequest, FindRelatedBooksResponse, String> {

    private final FindRelatedBooksPage page;

    public static FindRelatedBooksPagedResponse callApiAndCreate(
        UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
        PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageDescriptor,
        FindRelatedBooksRequest request,
        CallContext callContext) {
      return new FindRelatedBooksPagedResponse(FindRelatedBooksPage.callApiAndCreate(callable, pageDescriptor, request, callContext));
    }

    private FindRelatedBooksPagedResponse(FindRelatedBooksPage page) {
      this.page = page;
    }

    @Override
    public FindRelatedBooksPage getPage() {
      return page;
    }

    @Override
    public Iterable<FindRelatedBooksPage> iteratePages() {
      return page.iteratePages();
    }

    @Override
    public FindRelatedBooksFixedSizeCollection expandToFixedSizeCollection(int collectionSize) {
      return FindRelatedBooksFixedSizeCollection.expandPage(page, collectionSize);
    }

    @Override
    public Iterable<FindRelatedBooksFixedSizeCollection> iterateFixedSizeCollections(final int collectionSize) {
      return expandToFixedSizeCollection(collectionSize).iterateCollections();
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPage extends AbstractPage<FindRelatedBooksRequest, FindRelatedBooksResponse, String> {

    private static final PageFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, String, FindRelatedBooksPage> PAGE_FACTORY =
      new PageFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, String, FindRelatedBooksPage>() {
        @Override
        public FindRelatedBooksPage createPage(
            UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
            PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageDescriptor,
            FindRelatedBooksRequest request,
            CallContext context,
            FindRelatedBooksResponse response) {
          return new FindRelatedBooksPage(callable, pageDescriptor, request, context, response);
        }
      };

    public static FindRelatedBooksPage callApiAndCreate(UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
        PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageDescriptor,
        FindRelatedBooksRequest request,
        CallContext context) {
      return callApiAndCreate(PAGE_FACTORY, callable, pageDescriptor, request, context);
    }

    private FindRelatedBooksPage(
        UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
        PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageDescriptor,
        FindRelatedBooksRequest request,
        CallContext context,
        FindRelatedBooksResponse response) {
      super(callable, pageDescriptor, request, context, response);
    }

    @Override
    public FindRelatedBooksPage getNextPage() {
      return getNextPage(PAGE_FACTORY);
    }

    @Override
    public FindRelatedBooksPage getNextPage(int pageSize) {
      return getNextPage(PAGE_FACTORY, pageSize);
    }

    private Iterable<FindRelatedBooksPage> iteratePages() {
      return iterate(PAGE_FACTORY, this);
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksFixedSizeCollection
      extends AbstractFixedSizeCollection<FindRelatedBooksRequest, FindRelatedBooksResponse, String> {

    private static final CollectionFactory<FindRelatedBooksFixedSizeCollection, FindRelatedBooksPage> SIZED_COLLECTION_FACTORY =
      new CollectionFactory<FindRelatedBooksFixedSizeCollection, FindRelatedBooksPage>() {
        @Override
        public FindRelatedBooksFixedSizeCollection createCollection(
            final FindRelatedBooksPage page, final int collectionSize) {
          List<FindRelatedBooksPage> pages =
              getPages(FindRelatedBooksPage.PAGE_FACTORY, page, collectionSize);
          return new FindRelatedBooksFixedSizeCollection(pages, collectionSize);
        }
      };

    private static FindRelatedBooksFixedSizeCollection expandPage(
        final FindRelatedBooksPage firstPage, final int collectionSize) {
      return expandPage(SIZED_COLLECTION_FACTORY, firstPage, collectionSize);
    }

    private FindRelatedBooksFixedSizeCollection(List<FindRelatedBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    @Override
    public FindRelatedBooksFixedSizeCollection getNextCollection() {
      return getNextCollection(SIZED_COLLECTION_FACTORY, FindRelatedBooksPage.PAGE_FACTORY);
    }

    private Iterable<ListOperationsFixedSizeCollection> iterateCollections() {
      return iterate(SIZED_COLLECTION_FACTORY, FindRelatedBooksPage.PAGE_FACTORY, this);
    }
  }

}
