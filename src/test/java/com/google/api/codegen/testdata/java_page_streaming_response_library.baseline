============== file: src/main/java/com/google/gcloud/pubsub/spi/PagedResponseWrappers.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.FixedSizeCollection;
import com.google.api.gax.core.Page;
import com.google.api.gax.core.PagedListResponse;
import com.google.api.gax.grpc.CallContext;
import com.google.api.gax.grpc.PageContext;
import com.google.api.gax.grpc.PagedListDescriptor;
import com.google.api.gax.grpc.PagedListResponseContext;
import com.google.api.gax.grpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.common.base.Function;
import com.google.common.collect.Iterators;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.Shelf;
import com.google.protobuf.ExperimentalApi;
import java.util.Iterator;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Wrapper class to contain paged response types for page streaming methods.
 * Each static class inside this wrapper class is used as the return type of
 * one of an API method that implements the page streaming pattern.
 */
@Generated("by GAPIC")
@ExperimentalApi
public class PagedResponseWrappers {

  public static class ListShelvesPagedResponse implements PagedListResponse<Shelf> {

    private final PagedListResponseContext<ListShelvesRequest, ListShelvesResponse, Shelf> context;
    private final ListShelvesPage page;

    public ListShelvesPagedResponse(
        UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
        PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> pageDescriptor,
        ListShelvesRequest request,
        CallContext callContext) {
      this.context = new PagedListResponseContext<>(callable, pageDescriptor, request, callContext);
      this.page = new ListShelvesPage(this.context);
    }

    public Iterable<Shelf> iterateAll() {
      return context.iterateAll();
    }

    public Page<Shelf> getPage() {
      return page;
    }

    public Iterable<ListShelvesPage> iteratePages() {
      return new Iterable<ListShelvesPage>() {
        @Override
        public Iterator<ListShelvesPage> iterator() {
          return new PageContext.PageIterator<ListShelvesPage>(
            new PageContext.PageFetcher<ListShelvesPage>() {
              @Override
              public ListShelvesPage getNextPage(ListShelvesPage currentPage) {
                return currentPage.getNextPage();
              }
            },
            page);
        }
      };
    }

    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    public FixedSizeCollection<Shelf> expandToFixedSizeCollection(int collectionSize) {
      return context.expandToFixedSizeCollection(collectionSize);
    }

    public Iterable<FixedSizeCollection<Shelf>> iterateFixedSizeCollections(int collectionSize) {
      return context.iterateFixedSizeCollections(collectionSize);
    }


  }

  public static class ListShelvesPage implements Page<Shelf> {
    private final PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context;

    public ListShelvesPage(PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context) {
      this.context = context;
    }

    @Override
    public Iterator<Shelf> iterator() {
      return context.getResourceIterable().iterator();
    }

    @Override
    public boolean hasNextPage() {
      return context.hasNextPage();
    }

    @Override
    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    @Override
    public ListShelvesPage getNextPage() {
      return new ListShelvesPage(context.getNextPageContext());
    }

    public ListShelvesPage getNextPage(int pageSize) {
      return new ListShelvesPage(context.getNextPageContext(pageSize));
    }

    @Override
    public Iterable<Shelf> iterateAll() {
      return context.iterateAll();
    }

    public ListShelvesResponse getResponse() {
      return context.getResponse();
    }

    public ListShelvesRequest getRequest() {
      return context.getRequest();
    }


  }

  public static class ListBooksPagedResponse implements PagedListResponse<Book> {

    private final PagedListResponseContext<ListBooksRequest, ListBooksResponse, Book> context;
    private final ListBooksPage page;

    public ListBooksPagedResponse(
        UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
        PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> pageDescriptor,
        ListBooksRequest request,
        CallContext callContext) {
      this.context = new PagedListResponseContext<>(callable, pageDescriptor, request, callContext);
      this.page = new ListBooksPage(this.context);
    }

    public Iterable<Book> iterateAll() {
      return context.iterateAll();
    }

    public Page<Book> getPage() {
      return page;
    }

    public Iterable<ListBooksPage> iteratePages() {
      return new Iterable<ListBooksPage>() {
        @Override
        public Iterator<ListBooksPage> iterator() {
          return new PageContext.PageIterator<ListBooksPage>(
            new PageContext.PageFetcher<ListBooksPage>() {
              @Override
              public ListBooksPage getNextPage(ListBooksPage currentPage) {
                return currentPage.getNextPage();
              }
            },
            page);
        }
      };
    }

    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    public FixedSizeCollection<Book> expandToFixedSizeCollection(int collectionSize) {
      return context.expandToFixedSizeCollection(collectionSize);
    }

    public Iterable<FixedSizeCollection<Book>> iterateFixedSizeCollections(int collectionSize) {
      return context.iterateFixedSizeCollections(collectionSize);
    }


  }

  public static class ListBooksPage implements Page<Book> {
    private final PageContext<ListBooksRequest, ListBooksResponse, Book> context;

    public ListBooksPage(PageContext<ListBooksRequest, ListBooksResponse, Book> context) {
      this.context = context;
    }

    @Override
    public Iterator<Book> iterator() {
      return context.getResourceIterable().iterator();
    }

    @Override
    public boolean hasNextPage() {
      return context.hasNextPage();
    }

    @Override
    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    @Override
    public ListBooksPage getNextPage() {
      return new ListBooksPage(context.getNextPageContext());
    }

    public ListBooksPage getNextPage(int pageSize) {
      return new ListBooksPage(context.getNextPageContext(pageSize));
    }

    @Override
    public Iterable<Book> iterateAll() {
      return context.iterateAll();
    }

    public ListBooksResponse getResponse() {
      return context.getResponse();
    }

    public ListBooksRequest getRequest() {
      return context.getRequest();
    }


  }

  public static class ListStringsPagedResponse implements PagedListResponse<String> {

    private final PagedListResponseContext<ListStringsRequest, ListStringsResponse, String> context;
    private final ListStringsPage page;

    public ListStringsPagedResponse(
        UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
        PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> pageDescriptor,
        ListStringsRequest request,
        CallContext callContext) {
      this.context = new PagedListResponseContext<>(callable, pageDescriptor, request, callContext);
      this.page = new ListStringsPage(this.context);
    }

    public Iterable<String> iterateAll() {
      return context.iterateAll();
    }

    public Page<String> getPage() {
      return page;
    }

    public Iterable<ListStringsPage> iteratePages() {
      return new Iterable<ListStringsPage>() {
        @Override
        public Iterator<ListStringsPage> iterator() {
          return new PageContext.PageIterator<ListStringsPage>(
            new PageContext.PageFetcher<ListStringsPage>() {
              @Override
              public ListStringsPage getNextPage(ListStringsPage currentPage) {
                return currentPage.getNextPage();
              }
            },
            page);
        }
      };
    }

    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    public FixedSizeCollection<String> expandToFixedSizeCollection(int collectionSize) {
      return context.expandToFixedSizeCollection(collectionSize);
    }

    public Iterable<FixedSizeCollection<String>> iterateFixedSizeCollections(int collectionSize) {
      return context.iterateFixedSizeCollections(collectionSize);
    }
    public Iterator<ResourceName> iterateAllAsResourceName() {
      return Iterators.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsPage implements Page<String> {
    private final PageContext<ListStringsRequest, ListStringsResponse, String> context;

    public ListStringsPage(PageContext<ListStringsRequest, ListStringsResponse, String> context) {
      this.context = context;
    }

    @Override
    public Iterator<String> iterator() {
      return context.getResourceIterable().iterator();
    }

    @Override
    public boolean hasNextPage() {
      return context.hasNextPage();
    }

    @Override
    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    @Override
    public ListStringsPage getNextPage() {
      return new ListStringsPage(context.getNextPageContext());
    }

    public ListStringsPage getNextPage(int pageSize) {
      return new ListStringsPage(context.getNextPageContext(pageSize));
    }

    @Override
    public Iterable<String> iterateAll() {
      return context.iterateAll();
    }

    public ListStringsResponse getResponse() {
      return context.getResponse();
    }

    public ListStringsRequest getRequest() {
      return context.getRequest();
    }
    public Iterator<ResourceName> iterateAllAsResourceName() {
      return Iterators.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPagedResponse implements PagedListResponse<String> {

    private final PagedListResponseContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context;
    private final FindRelatedBooksPage page;

    public FindRelatedBooksPagedResponse(
        UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
        PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageDescriptor,
        FindRelatedBooksRequest request,
        CallContext callContext) {
      this.context = new PagedListResponseContext<>(callable, pageDescriptor, request, callContext);
      this.page = new FindRelatedBooksPage(this.context);
    }

    public Iterable<String> iterateAll() {
      return context.iterateAll();
    }

    public Page<String> getPage() {
      return page;
    }

    public Iterable<FindRelatedBooksPage> iteratePages() {
      return new Iterable<FindRelatedBooksPage>() {
        @Override
        public Iterator<FindRelatedBooksPage> iterator() {
          return new PageContext.PageIterator<FindRelatedBooksPage>(
            new PageContext.PageFetcher<FindRelatedBooksPage>() {
              @Override
              public FindRelatedBooksPage getNextPage(FindRelatedBooksPage currentPage) {
                return currentPage.getNextPage();
              }
            },
            page);
        }
      };
    }

    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    public FixedSizeCollection<String> expandToFixedSizeCollection(int collectionSize) {
      return context.expandToFixedSizeCollection(collectionSize);
    }

    public Iterable<FixedSizeCollection<String>> iterateFixedSizeCollections(int collectionSize) {
      return context.iterateFixedSizeCollections(collectionSize);
    }
    public Iterator<BookName> iterateAllAsBookName() {
      return Iterators.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPage implements Page<String> {
    private final PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context;

    public FindRelatedBooksPage(PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context) {
      this.context = context;
    }

    @Override
    public Iterator<String> iterator() {
      return context.getResourceIterable().iterator();
    }

    @Override
    public boolean hasNextPage() {
      return context.hasNextPage();
    }

    @Override
    public String getNextPageToken() {
      return context.getNextPageToken();
    }

    @Override
    public FindRelatedBooksPage getNextPage() {
      return new FindRelatedBooksPage(context.getNextPageContext());
    }

    public FindRelatedBooksPage getNextPage(int pageSize) {
      return new FindRelatedBooksPage(context.getNextPageContext(pageSize));
    }

    @Override
    public Iterable<String> iterateAll() {
      return context.iterateAll();
    }

    public FindRelatedBooksResponse getResponse() {
      return context.getResponse();
    }

    public FindRelatedBooksRequest getRequest() {
      return context.getRequest();
    }
    public Iterator<BookName> iterateAllAsBookName() {
      return Iterators.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

}
