============== file: src/main/java/com/google/gcloud/pubsub/v1/PagedResponseWrappers.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.FixedSizeCollection;
import com.google.api.gax.core.Page;
import com.google.api.gax.core.PagedListResponse;
import com.google.api.gax.grpc.AbstractFixedSizeCollection;
import com.google.api.gax.grpc.AbstractPage;
import com.google.api.gax.grpc.AbstractPagedListResponse;
import com.google.api.gax.grpc.ApiExceptions;
import com.google.api.gax.grpc.PageContext;
import com.google.api.resourcenames.ResourceName;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.Shelf;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Wrapper class to contain paged response types for page streaming methods.
 * Each static class inside this wrapper class is used as the return type of
 * one of an API method that implements the page streaming pattern.
 */
@Generated("by GAPIC")
public class PagedResponseWrappers {

  public static class ListShelvesPagedResponse extends AbstractPagedListResponse<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage,
      ListShelvesFixedSizeCollection> {

    public static ApiFuture<ListShelvesPagedResponse> createAsync(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ApiFuture<ListShelvesResponse> futureResponse) {
      ApiFuture<ListShelvesPage> futurePage =
          ListShelvesPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListShelvesPage, ListShelvesPagedResponse>() {
            @Override
            public ListShelvesPagedResponse apply(ListShelvesPage input) {
              return new ListShelvesPagedResponse(input);
            }
          });
    }

    private ListShelvesPagedResponse(ListShelvesPage page) {
      super(page, ListShelvesFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListShelvesPage extends AbstractPage<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage> {

    private ListShelvesPage(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ListShelvesResponse response) {
      super(context, response);
    }

    private static ListShelvesPage createEmptyPage() {
      return new ListShelvesPage(null, null);
    }

    @Override
    protected ListShelvesPage createPage(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ListShelvesResponse response) {
      return new ListShelvesPage(context, response);
    }

    @Override
    protected ApiFuture<ListShelvesPage> createPageAsync(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ApiFuture<ListShelvesResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListShelvesFixedSizeCollection extends AbstractFixedSizeCollection<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage,
      ListShelvesFixedSizeCollection> {

    private ListShelvesFixedSizeCollection(List<ListShelvesPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListShelvesFixedSizeCollection createEmptyCollection() {
      return new ListShelvesFixedSizeCollection(null, 0);
    }

    @Override
    protected ListShelvesFixedSizeCollection createCollection(
        List<ListShelvesPage> pages, int collectionSize) {
      return new ListShelvesFixedSizeCollection(pages, collectionSize);
    }


  }

  public static class ListBooksPagedResponse extends AbstractPagedListResponse<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    public static ApiFuture<ListBooksPagedResponse> createAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      ApiFuture<ListBooksPage> futurePage =
          ListBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListBooksPage, ListBooksPagedResponse>() {
            @Override
            public ListBooksPagedResponse apply(ListBooksPage input) {
              return new ListBooksPagedResponse(input);
            }
          });
    }

    private ListBooksPagedResponse(ListBooksPage page) {
      super(page, ListBooksFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListBooksPage extends AbstractPage<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage> {

    private ListBooksPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      super(context, response);
    }

    private static ListBooksPage createEmptyPage() {
      return new ListBooksPage(null, null);
    }

    @Override
    protected ListBooksPage createPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      return new ListBooksPage(context, response);
    }

    @Override
    protected ApiFuture<ListBooksPage> createPageAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    private ListBooksFixedSizeCollection(List<ListBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListBooksFixedSizeCollection createEmptyCollection() {
      return new ListBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected ListBooksFixedSizeCollection createCollection(
        List<ListBooksPage> pages, int collectionSize) {
      return new ListBooksFixedSizeCollection(pages, collectionSize);
    }


  }

  public static class ListStringsPagedResponse extends AbstractPagedListResponse<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    public static ApiFuture<ListStringsPagedResponse> createAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      ApiFuture<ListStringsPage> futurePage =
          ListStringsPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListStringsPage, ListStringsPagedResponse>() {
            @Override
            public ListStringsPagedResponse apply(ListStringsPage input) {
              return new ListStringsPagedResponse(input);
            }
          });
    }

    private ListStringsPagedResponse(ListStringsPage page) {
      super(page, ListStringsFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsPage extends AbstractPage<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage> {

    private ListStringsPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      super(context, response);
    }

    private static ListStringsPage createEmptyPage() {
      return new ListStringsPage(null, null);
    }

    @Override
    protected ListStringsPage createPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      return new ListStringsPage(context, response);
    }

    @Override
    protected ApiFuture<ListStringsPage> createPageAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsFixedSizeCollection extends AbstractFixedSizeCollection<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    private ListStringsFixedSizeCollection(List<ListStringsPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListStringsFixedSizeCollection createEmptyCollection() {
      return new ListStringsFixedSizeCollection(null, 0);
    }

    @Override
    protected ListStringsFixedSizeCollection createCollection(
        List<ListStringsPage> pages, int collectionSize) {
      return new ListStringsFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPagedResponse extends AbstractPagedListResponse<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    public static ApiFuture<FindRelatedBooksPagedResponse> createAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      ApiFuture<FindRelatedBooksPage> futurePage =
          FindRelatedBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<FindRelatedBooksPage, FindRelatedBooksPagedResponse>() {
            @Override
            public FindRelatedBooksPagedResponse apply(FindRelatedBooksPage input) {
              return new FindRelatedBooksPagedResponse(input);
            }
          });
    }

    private FindRelatedBooksPagedResponse(FindRelatedBooksPage page) {
      super(page, FindRelatedBooksFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPage extends AbstractPage<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage> {

    private FindRelatedBooksPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      super(context, response);
    }

    private static FindRelatedBooksPage createEmptyPage() {
      return new FindRelatedBooksPage(null, null);
    }

    @Override
    protected FindRelatedBooksPage createPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      return new FindRelatedBooksPage(context, response);
    }

    @Override
    protected ApiFuture<FindRelatedBooksPage> createPageAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    private FindRelatedBooksFixedSizeCollection(List<FindRelatedBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static FindRelatedBooksFixedSizeCollection createEmptyCollection() {
      return new FindRelatedBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected FindRelatedBooksFixedSizeCollection createCollection(
        List<FindRelatedBooksPage> pages, int collectionSize) {
      return new FindRelatedBooksFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

}
