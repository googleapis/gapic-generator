
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'


change_body = {
    # TODO: Add desired entries of the request body.
}


request = service.changes().create(project=project, managedZone=managedZone, body=change_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'

# The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
changeId = '{MY-CHANGE-ID}'


request = service.changes().get(project=project, managedZone=managedZone, changeId=changeId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'


changes = service.changes()
request = changes.list(project=project, managedZone=managedZone)
while request is not None:
    response = request.execute()

    for change in response['changes']:
        # TODO: Change code below to process each `change` resource:
        pprint(change)

    request = changes.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'


managed_zone_body = {
    # TODO: Add desired entries of the request body.
}


request = service.managedZones().create(project=project, body=managed_zone_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'


request = service.managedZones().delete(project=project, managedZone=managedZone)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'


request = service.managedZones().get(project=project, managedZone=managedZone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'


managedZones = service.managedZones()
request = managedZones.list(project=project)
while request is not None:
    response = request.execute()

    for managed_zone in response['managedZones']:
        # TODO: Change code below to process each `managed_zone` resource:
        pprint(managed_zone)

    request = managedZones.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'


request = service.projects().get(project=project)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Identifies the project addressed by this request.
project = '{MY-PROJECT}'

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = '{MY-MANAGED-ZONE}'


resourceRecordSets = service.resourceRecordSets()
request = resourceRecordSets.list(project=project, managedZone=managedZone)
while request is not None:
    response = request.execute()

    for resource_record_set in response['rrsets']:
        # TODO: Change code below to process each `resource_record_set` resource:
        pprint(resource_record_set)

    request = resourceRecordSets.list_next(previous_request=request, previous_response=response)
