
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

change_body = {
    # TODO: Add desired entries to the request body.
}

request = service.changes().create(project=project, managedZone=managed_zone, body=change_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

# The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
change_id = ''  # TODO: Update placeholder value.

request = service.changes().get(project=project, managedZone=managed_zone, changeId=change_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

request = service.changes().list(project=project, managedZone=managed_zone)
while request is not None:
    response = request.execute()

    for change in response['changes']:
        # TODO: Change code below to process each `change` resource:
        pprint(change)

    request = service.changes().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

managed_zone_body = {
    # TODO: Add desired entries to the request body.
}

request = service.managedZones().create(project=project, body=managed_zone_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

request = service.managedZones().delete(project=project, managedZone=managed_zone)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

request = service.managedZones().get(project=project, managedZone=managed_zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

request = service.managedZones().list(project=project)
while request is not None:
    response = request.execute()

    for managed_zone in response['managedZones']:
        # TODO: Change code below to process each `managed_zone` resource:
        pprint(managed_zone)

    request = service.managedZones().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

request = service.projects().get(project=project)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dns', 'v1', credentials=credentials)

# Identifies the project addressed by this request.
project = ''  # TODO: Update placeholder value.

# Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managed_zone = ''  # TODO: Update placeholder value.

request = service.resourceRecordSets().list(project=project, managedZone=managed_zone)
while request is not None:
    response = request.execute()

    for resource_record_set in response['rrsets']:
        # TODO: Change code below to process each `resource_record_set` resource:
        pprint(resource_record_set)

    request = service.resourceRecordSets().list_next(previous_request=request, previous_response=response)
