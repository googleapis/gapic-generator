
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''

change = {
# TODO: Add desired entries of the 'change' dict
}

request = service.changes().create(project, managedZone, change)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''
# * The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
changeId = ''

request = service.changes().get(project, managedZone, changeId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''

changes = service.changes()
request = changes.list(project, managedZone)
while request is not None:
    response = request.execute()

    for change in response['changes']:
        # TODO: Add code here to process each 'change' resource

    request = changes.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:
# * Identifies the project addressed by this request.
project = ''

managed_zone = {
# TODO: Add desired entries of the 'managed_zone' dict
}

request = service.managedZones().create(project, managed_zone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''

request = service.managedZones().delete(project, managedZone)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''

request = service.managedZones().get(project, managedZone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Identifies the project addressed by this request.
project = ''

managedZones = service.managedZones()
request = managedZones.list(project)
while request is not None:
    response = request.execute()

    for managed_zone in response['managedZones']:
        # TODO: Add code here to process each 'managed_zone' resource

    request = managedZones.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Identifies the project addressed by this request.
project = ''

request = service.projects().get(project)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud DNS API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dns
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dns service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dns', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Identifies the project addressed by this request.
project = ''
# * Identifies the managed zone addressed by this request. Can be the managed zone name or id.
managedZone = ''

resourceRecordSets = service.resourceRecordSets()
request = resourceRecordSets.list(project, managedZone)
while request is not None:
    response = request.execute()

    for resource_record_set in response['rrsets']:
        # TODO: Add code here to process each 'resource_record_set' resource

    request = resourceRecordSets.list_next(request, response)
