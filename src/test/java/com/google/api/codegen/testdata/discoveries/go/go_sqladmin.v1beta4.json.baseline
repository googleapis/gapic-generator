
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
    id = int64(0)
  )

  response, err := client.BackupRuns.Delete(project, instance, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    // The ID of this Backup Run.
    id = int64(0)
  )

  response, err := client.BackupRuns.Get(project, instance, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  fn := func(page *sqladmin.BackupRunsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.BackupRuns.List(project, instance).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Name of the database to be deleted in the instance.
    database = ""
  )

  response, err := client.Databases.Delete(project, instance, database).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Name of the database in the instance.
    database = ""
  )

  response, err := client.Databases.Get(project, instance, database).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.Database{}
  )

  response, err := client.Databases.Insert(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project for which to list Cloud SQL instances.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Databases.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Name of the database to be updated in the instance.
    database = ""

    requestBody = &sqladmin.Database{}
  )

  response, err := client.Databases.Patch(project, instance, database, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Name of the database to be updated in the instance.
    database = ""

    requestBody = &sqladmin.Database{}
  )

  response, err := client.Databases.Update(project, instance, database, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  response, err := client.Flags.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'clone' method:
  var (
    // Project ID of the source as well as the clone Cloud SQL instance.
    project = ""

    // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.InstancesCloneRequest{}
  )

  response, err := client.Instances.Clone(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of the project that contains the instance to be deleted.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Instances.Delete(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'export' method:
  var (
    // Project ID of the project that contains the instance to be exported.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.InstancesExportRequest{}
  )

  response, err := client.Instances.Export(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'failover' method:
  var (
    // ID of the project that contains the read replica.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.InstancesFailoverRequest{}
  )

  response, err := client.Instances.Failover(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Instances.Get(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'import' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.InstancesImportRequest{}
  )

  response, err := client.Instances.Import(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    project = ""

    requestBody = &sqladmin.DatabaseInstance{}
  )

  response, err := client.Instances.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project for which to list Cloud SQL instances.
    project = ""
  )

  fn := func(page *sqladmin.InstancesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Instances.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.DatabaseInstance{}
  )

  response, err := client.Instances.Patch(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'promoteReplica' method:
  var (
    // ID of the project that contains the read replica.
    project = ""

    // Cloud SQL read replica instance name.
    instance = ""
  )

  response, err := client.Instances.PromoteReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'resetSslConfig' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Instances.ResetSslConfig(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'restart' method:
  var (
    // Project ID of the project that contains the instance to be restarted.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Instances.Restart(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'restoreBackup' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.InstancesRestoreBackupRequest{}
  )

  response, err := client.Instances.RestoreBackup(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'startReplica' method:
  var (
    // ID of the project that contains the read replica.
    project = ""

    // Cloud SQL read replica instance name.
    instance = ""
  )

  response, err := client.Instances.StartReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'stopReplica' method:
  var (
    // ID of the project that contains the read replica.
    project = ""

    // Cloud SQL read replica instance name.
    instance = ""
  )

  response, err := client.Instances.StopReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.DatabaseInstance{}
  )

  response, err := client.Instances.Update(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Instance operation ID.
    operation = ""
  )

  response, err := client.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  fn := func(page *sqladmin.OperationsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Operations.List(project, instance).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'createEphemeral' method:
  var (
    // Project ID of the Cloud SQL project.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.SslCertsCreateEphemeralRequest{}
  )

  response, err := client.SslCerts.CreateEphemeral(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of the project that contains the instance to be deleted.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    // Sha1 FingerPrint.
    sha1Fingerprint = ""
  )

  response, err := client.SslCerts.Delete(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    // Sha1 FingerPrint.
    sha1Fingerprint = ""
  )

  response, err := client.SslCerts.Get(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.SslCertsInsertRequest{}
  )

  response, err := client.SslCerts.Insert(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project for which to list Cloud SQL instances.
    project = ""

    // Cloud SQL instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.SslCerts.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project for which to list tiers.
    project = ""
  )

  response, err := client.Tiers.List(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Host of the user in the instance.
    host = ""

    // Name of the user in the instance.
    name = ""
  )

  response, err := client.Users.Delete(project, instance, host, name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    requestBody = &sqladmin.User{}
  )

  response, err := client.Users.Insert(project, instance, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""
  )

  response, err := client.Users.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/sqladmin/v1beta4'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := sqladmin.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID of the project that contains the instance.
    project = ""

    // Database instance ID. This does not include the project ID.
    instance = ""

    // Host of the user in the instance.
    host = ""

    // Name of the user in the instance.
    name = ""

    requestBody = &sqladmin.User{}
  )

  response, err := client.Users.Update(project, instance, host, name, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
