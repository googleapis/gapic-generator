
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
  id := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.BackupRuns.Delete(project, instance, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // The ID of this Backup Run.
  id := int64(0) // TODO: Update placeholder value(s).

  resp, err := s.BackupRuns.Get(project, instance, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  call := s.BackupRuns.List(project, instance)
  if err := call.Pages(ctx, func(page *sqladmin.BackupRunsListResponse) error {
    for _, backupRun := range page.Items {
      // TODO: Use backupRun
      log.Printf("%#v\n", backupRun)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Name of the database to be deleted in the instance.
  database := "{MY-DATABASE}" // TODO: Update placeholder value(s).

  resp, err := s.Databases.Delete(project, instance, database).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Name of the database in the instance.
  database := "{MY-DATABASE}" // TODO: Update placeholder value(s).

  resp, err := s.Databases.Get(project, instance, database).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.Database{
    // TODO: Add the desired fields.
  }

  resp, err := s.Databases.Insert(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project for which to list Cloud SQL instances.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Databases.List(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Name of the database to be updated in the instance.
  database := "{MY-DATABASE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.Database{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Databases.Patch(project, instance, database, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Name of the database to be updated in the instance.
  database := "{MY-DATABASE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.Database{
    // TODO: Add the desired fields.
  }

  resp, err := s.Databases.Update(project, instance, database, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := s.Flags.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the source as well as the clone Cloud SQL instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.InstancesCloneRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Clone(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance to be deleted.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Delete(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance to be exported.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.InstancesExportRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Export(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the project that contains the read replica.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.InstancesFailoverRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Failover(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Get(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.InstancesImportRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Import(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project to which the newly created Cloud SQL instances should belong.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resource := &sqladmin.DatabaseInstance{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Insert(project, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project for which to list Cloud SQL instances.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Instances.List(project)
  if err := call.Pages(ctx, func(page *sqladmin.InstancesListResponse) error {
    for _, databaseInstance := range page.Items {
      // TODO: Use databaseInstance
      log.Printf("%#v\n", databaseInstance)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.DatabaseInstance{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Instances.Patch(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the project that contains the read replica.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL read replica instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.PromoteReplica(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.ResetSslConfig(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance to be restarted.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.Restart(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.InstancesRestoreBackupRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.RestoreBackup(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the project that contains the read replica.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL read replica instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.StartReplica(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the project that contains the read replica.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL read replica instance name.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Instances.StopReplica(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.DatabaseInstance{
    // TODO: Add the desired fields.
  }

  resp, err := s.Instances.Update(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Instance operation ID.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  call := s.Operations.List(project, instance)
  if err := call.Pages(ctx, func(page *sqladmin.OperationsListResponse) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      log.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the Cloud SQL project.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.SslCertsCreateEphemeralRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.SslCerts.CreateEphemeral(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance to be deleted.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Sha1 FingerPrint.
  sha1Fingerprint := "{MY-SHA1-FINGERPRINT}" // TODO: Update placeholder value(s).

  resp, err := s.SslCerts.Delete(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Sha1 FingerPrint.
  sha1Fingerprint := "{MY-SHA1-FINGERPRINT}" // TODO: Update placeholder value(s).

  resp, err := s.SslCerts.Get(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project to which the newly created Cloud SQL instances should belong.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.SslCertsInsertRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.SslCerts.Insert(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project for which to list Cloud SQL instances.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Cloud SQL instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.SslCerts.List(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project for which to list tiers.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resp, err := s.Tiers.List(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Host of the user in the instance.
  host := "{MY-HOST}" // TODO: Update placeholder value(s).

  // Name of the user in the instance.
  name := "{MY-NAME}" // TODO: Update placeholder value(s).

  resp, err := s.Users.Delete(project, instance, host, name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resource := &sqladmin.User{
    // TODO: Add the desired fields.
  }

  resp, err := s.Users.Insert(project, instance, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  resp, err := s.Users.List(project, instance).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := sqladmin.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that contains the instance.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Database instance ID. This does not include the project ID.
  instance := "{MY-INSTANCE}" // TODO: Update placeholder value(s).

  // Host of the user in the instance.
  host := "{MY-HOST}" // TODO: Update placeholder value(s).

  // Name of the user in the instance.
  name := "{MY-NAME}" // TODO: Update placeholder value(s).

  resource := &sqladmin.User{
    // TODO: Add the desired fields.
  }

  resp, err := s.Users.Update(project, instance, host, name, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
