
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
  // TODO: Update placeholder value.
  id := int64(0)

  resp, err := c.BackupRuns.Delete(project, instance, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // The ID of this Backup Run.
  // TODO: Update placeholder value.
  id := int64(0)

  resp, err := c.BackupRuns.Get(project, instance, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"


  call := c.BackupRuns.List(project, instance)
  if err := call.Pages(ctx, func(page *sqladmin.BackupRunsListResponse) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Name of the database to be deleted in the instance.
  // TODO: Update placeholder value.
  database := "{MY-DATABASE}"

  resp, err := c.Databases.Delete(project, instance, database).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Name of the database in the instance.
  // TODO: Update placeholder value.
  database := "{MY-DATABASE}"

  resp, err := c.Databases.Get(project, instance, database).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Databases.Insert(project, instance, &sqladmin.Database{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project for which to list Cloud SQL instances.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Databases.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Name of the database to be updated in the instance.
  // TODO: Update placeholder value.
  database := "{MY-DATABASE}"

  resp, err := c.Databases.Patch(project, instance, database, &sqladmin.Database{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Name of the database to be updated in the instance.
  // TODO: Update placeholder value.
  database := "{MY-DATABASE}"

  resp, err := c.Databases.Update(project, instance, database, &sqladmin.Database{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Flags.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the source as well as the clone Cloud SQL instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Clone(project, instance, &sqladmin.InstancesCloneRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance to be deleted.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Delete(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance to be exported.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Export(project, instance, &sqladmin.InstancesExportRequest{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the project that contains the read replica.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Failover(project, instance, &sqladmin.InstancesFailoverRequest{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Get(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Import(project, instance, &sqladmin.InstancesImportRequest{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project to which the newly created Cloud SQL instances should belong.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  resp, err := c.Instances.Insert(project, &sqladmin.DatabaseInstance{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project for which to list Cloud SQL instances.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  call := c.Instances.List(project)
  if err := call.Pages(ctx, func(page *sqladmin.InstancesListResponse) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Patch(project, instance, &sqladmin.DatabaseInstance{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the project that contains the read replica.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL read replica instance name.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.PromoteReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.ResetSslConfig(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance to be restarted.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Restart(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.RestoreBackup(project, instance, &sqladmin.InstancesRestoreBackupRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the project that contains the read replica.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL read replica instance name.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.StartReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the project that contains the read replica.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL read replica instance name.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.StopReplica(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Instances.Update(project, instance, &sqladmin.DatabaseInstance{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Instance operation ID.
  // TODO: Update placeholder value.
  operation := "{MY-OPERATION}"

  resp, err := c.Operations.Get(project, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"


  call := c.Operations.List(project, instance)
  if err := call.Pages(ctx, func(page *sqladmin.OperationsListResponse) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the Cloud SQL project.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.SslCerts.CreateEphemeral(project, instance, &sqladmin.SslCertsCreateEphemeralRequest{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance to be deleted.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Sha1 FingerPrint.
  // TODO: Update placeholder value.
  sha1Fingerprint := "{MY-SHA1-FINGERPRINT}"

  resp, err := c.SslCerts.Delete(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Sha1 FingerPrint.
  // TODO: Update placeholder value.
  sha1Fingerprint := "{MY-SHA1-FINGERPRINT}"

  resp, err := c.SslCerts.Get(project, instance, sha1Fingerprint).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project to which the newly created Cloud SQL instances should belong.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.SslCerts.Insert(project, instance, &sqladmin.SslCertsInsertRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project for which to list Cloud SQL instances.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Cloud SQL instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.SslCerts.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project for which to list tiers.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  resp, err := c.Tiers.List(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Host of the user in the instance.
  // TODO: Update placeholder value.
  host := "{MY-HOST}"

  // Name of the user in the instance.
  // TODO: Update placeholder value.
  name := "{MY-NAME}"

  resp, err := c.Users.Delete(project, instance, host, name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Users.Insert(project, instance, &sqladmin.User{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  resp, err := c.Users.List(project, instance).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/sqladmin/v1beta4"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, sqladmin.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := sqladmin.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that contains the instance.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Database instance ID. This does not include the project ID.
  // TODO: Update placeholder value.
  instance := "{MY-INSTANCE}"

  // Host of the user in the instance.
  // TODO: Update placeholder value.
  host := "{MY-HOST}"

  // Name of the user in the instance.
  // TODO: Update placeholder value.
  name := "{MY-NAME}"

  resp, err := c.Users.Update(project, instance, host, name, &sqladmin.User{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
