
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // Identifies the debuggee.
            string debuggeeId = "";

            ControllerResource.DebuggeesResource.BreakpointsResource.ListRequest request = clouddebuggerService.Controller.Debuggees.Breakpoints.List(debuggeeId);
            Data.ListActiveBreakpointsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.ListActiveBreakpointsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:
            // Identifies the debuggee being debugged.
            string debuggeeId = "";
            // Breakpoint identifier, unique in the scope of the debuggee.
            string id = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UpdateActiveBreakpointRequest content = new Data.UpdateActiveBreakpointRequest();

            ControllerResource.DebuggeesResource.BreakpointsResource.UpdateRequest request = clouddebuggerService.Controller.Debuggees.Breakpoints.Update(content, debuggeeId, id);
            Data.UpdateActiveBreakpointResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.UpdateActiveBreakpointResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Register() method:

            // TODO Add code to assign values to properties of 'content'.
            Data.RegisterDebuggeeRequest content = new Data.RegisterDebuggeeRequest();

            ControllerResource.DebuggeesResource.RegisterRequest request = clouddebuggerService.Controller.Debuggees.Register(content);
            Data.RegisterDebuggeeResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.RegisterDebuggeeResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // ID of the debuggee whose breakpoint to delete.
            string debuggeeId = "";
            // ID of the breakpoint to delete.
            string breakpointId = "";

            DebuggerResource.DebuggeesResource.BreakpointsResource.DeleteRequest request = clouddebuggerService.Debugger.Debuggees.Breakpoints.Delete(debuggeeId, breakpointId);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // ID of the debuggee whose breakpoint to get.
            string debuggeeId = "";
            // ID of the breakpoint to get.
            string breakpointId = "";

            DebuggerResource.DebuggeesResource.BreakpointsResource.GetRequest request = clouddebuggerService.Debugger.Debuggees.Breakpoints.Get(debuggeeId, breakpointId);
            Data.GetBreakpointResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.GetBreakpointResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // ID of the debuggee whose breakpoints to list.
            string debuggeeId = "";

            DebuggerResource.DebuggeesResource.BreakpointsResource.ListRequest request = clouddebuggerService.Debugger.Debuggees.Breakpoints.List(debuggeeId);
            Data.ListBreakpointsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.ListBreakpointsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Set() method:
            // ID of the debuggee where the breakpoint is to be set.
            string debuggeeId = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Breakpoint content = new Data.Breakpoint();

            DebuggerResource.DebuggeesResource.BreakpointsResource.SetRequest request = clouddebuggerService.Debugger.Debuggees.Breakpoints.Set(content, debuggeeId);
            Data.SetBreakpointResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.SetBreakpointResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Clouddebugger.v2;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Clouddebugger.v2.Data;

namespace ClouddebuggerSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ClouddebuggerService clouddebuggerService = new ClouddebuggerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            DebuggerResource.DebuggeesResource.ListRequest request = clouddebuggerService.Debugger.Debuggees.List();
            Data.ListDebuggeesResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.ListDebuggeesResponse response = await request.ExecuteAsync();
        }
    }
}
