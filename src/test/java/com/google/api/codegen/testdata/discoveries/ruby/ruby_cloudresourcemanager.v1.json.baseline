
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_operation` method:

# The name of the operation resource.
name = '{MY-NAME}'


# Perform the call
response = service.get_operation(name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_organization` method:

# The resource name of the Organization to fetch, e.g. "organizations/1234".
name = 'organizations/{MY-ORGANIZATION}'


# Perform the call
response = service.get_organization(name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_organization_iam_policy` method:

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path. For example, a Project resource is specified as `projects/{project}`.
resource = 'organizations/{MY-ORGANIZATION}'


request_body = Google::Apis::CloudresourcemanagerV1::GetIamPolicyRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.get_organization_iam_policy(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


request_body = Google::Apis::CloudresourcemanagerV1::SearchOrganizationsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
organizations = service.fetch_all(items: :organizations) do |token|
  service.search_organizations(request_body, page_token: token)
end

organizations.each do |organization|
  # TODO: Change code below to process each `organization` resource:
  puts JSON.pretty_generate(organization)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `set_organization_iam_policy` method:

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path. For example, a Project resource is specified as `projects/{project}`.
resource = 'organizations/{MY-ORGANIZATION}'


request_body = Google::Apis::CloudresourcemanagerV1::SetIamPolicyRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_organization_iam_policy(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `test_organization_iam_permissions` method:

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path. For example, a Project resource is specified as `projects/{project}`.
resource = 'organizations/{MY-ORGANIZATION}'


request_body = Google::Apis::CloudresourcemanagerV1::TestIamPermissionsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.test_organization_iam_permissions(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


request_body = Google::Apis::CloudresourcemanagerV1::Project.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.create_project(request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `delete_project` method:

# The Project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'


# Perform the call
service.delete_project(project_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_project` method:

# The Project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'


# Perform the call
response = service.get_project(project_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_project_iam_policy` method:

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path. For example, a Project resource is specified as `projects/{project}`.
resource = '{MY-RESOURCE}'


request_body = Google::Apis::CloudresourcemanagerV1::GetIamPolicyRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.get_project_iam_policy(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
projects = service.fetch_all(items: :projects) do |token|
  service.list_projects(, page_token: token)
end

projects.each do |project|
  # TODO: Change code below to process each `project` resource:
  puts JSON.pretty_generate(project)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `set_project_iam_policy` method:

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path. For example, a Project resource is specified as `projects/{project}`.
resource = '{MY-RESOURCE}'


request_body = Google::Apis::CloudresourcemanagerV1::SetIamPolicyRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.set_project_iam_policy(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `test_project_iam_permissions` method:

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path. For example, a Project resource is specified as `projects/{project}`.
resource = '{MY-RESOURCE}'


request_body = Google::Apis::CloudresourcemanagerV1::TestIamPermissionsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.test_project_iam_permissions(resource, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `undelete_project` method:

# The project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'


request_body = Google::Apis::CloudresourcemanagerV1::UndeleteProjectRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
service.undelete_project(project_id, request_body)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1::CloudResourceManagerService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `update_project` method:

# The project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'


request_body = Google::Apis::CloudresourcemanagerV1::Project.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_project(project_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
