
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            BucketAccessControlsResource.DeleteRequest request = storageService.BucketAccessControls.Delete(bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            BucketAccessControlsResource.GetRequest request = storageService.BucketAccessControls.Get(bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.BucketAccessControl response = request.Execute();
            // Data.BucketAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.BucketAccessControl requestBody = new Data.BucketAccessControl();

            BucketAccessControlsResource.InsertRequest request = storageService.BucketAccessControls.Insert(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.BucketAccessControl response = request.Execute();
            // Data.BucketAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            BucketAccessControlsResource.ListRequest request = storageService.BucketAccessControls.List(bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.BucketAccessControls response = request.Execute();
            // Data.BucketAccessControls response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.BucketAccessControl requestBody = new Data.BucketAccessControl();

            BucketAccessControlsResource.PatchRequest request = storageService.BucketAccessControls.Patch(requestBody, bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.BucketAccessControl response = request.Execute();
            // Data.BucketAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.BucketAccessControl requestBody = new Data.BucketAccessControl();

            BucketAccessControlsResource.UpdateRequest request = storageService.BucketAccessControls.Update(requestBody, bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.BucketAccessControl response = request.Execute();
            // Data.BucketAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            BucketsResource.DeleteRequest request = storageService.Buckets.Delete(bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            BucketsResource.GetRequest request = storageService.Buckets.Get(bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Bucket response = request.Execute();
            // Data.Bucket response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // A valid API project identifier.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Bucket requestBody = new Data.Bucket();

            BucketsResource.InsertRequest request = storageService.Buckets.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Bucket response = request.Execute();
            // Data.Bucket response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // A valid API project identifier.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            BucketsResource.ListRequest request = storageService.Buckets.List(project);

            Data.Buckets response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Bucket bucket in response.Items)
                {
                    // TODO: Use bucket
                    Console.WriteLine(new JavaScriptSerializer().Serialize(bucket));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Bucket requestBody = new Data.Bucket();

            BucketsResource.PatchRequest request = storageService.Buckets.Patch(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Bucket response = request.Execute();
            // Data.Bucket response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Bucket requestBody = new Data.Bucket();

            BucketsResource.UpdateRequest request = storageService.Buckets.Update(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Bucket response = request.Execute();
            // Data.Bucket response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Assign values to the desired properties.
            Data.Channel requestBody = new Data.Channel();

            ChannelsResource.StopRequest request = storageService.Channels.Stop(requestBody);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            DefaultObjectAccessControlsResource.DeleteRequest request = storageService.DefaultObjectAccessControls.Delete(bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            DefaultObjectAccessControlsResource.GetRequest request = storageService.DefaultObjectAccessControls.Get(bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            DefaultObjectAccessControlsResource.InsertRequest request = storageService.DefaultObjectAccessControls.Insert(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            DefaultObjectAccessControlsResource.ListRequest request = storageService.DefaultObjectAccessControls.List(bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControls response = request.Execute();
            // Data.ObjectAccessControls response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            DefaultObjectAccessControlsResource.PatchRequest request = storageService.DefaultObjectAccessControls.Patch(requestBody, bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            DefaultObjectAccessControlsResource.UpdateRequest request = storageService.DefaultObjectAccessControls.Update(requestBody, bucket, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            ObjectAccessControlsResource.DeleteRequest request = storageService.ObjectAccessControls.Delete(bucket, object_, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            ObjectAccessControlsResource.GetRequest request = storageService.ObjectAccessControls.Get(bucket, object_, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            ObjectAccessControlsResource.InsertRequest request = storageService.ObjectAccessControls.Insert(requestBody, bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            ObjectAccessControlsResource.ListRequest request = storageService.ObjectAccessControls.List(bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControls response = request.Execute();
            // Data.ObjectAccessControls response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            ObjectAccessControlsResource.PatchRequest request = storageService.ObjectAccessControls.Patch(requestBody, bucket, object_, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of a bucket.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
            // group-emailAddress, allUsers, or allAuthenticatedUsers.
            string entity = "{MY-ENTITY}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ObjectAccessControl requestBody = new Data.ObjectAccessControl();

            ObjectAccessControlsResource.UpdateRequest request = storageService.ObjectAccessControls.Update(requestBody, bucket, object_, entity);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.ObjectAccessControl response = request.Execute();
            // Data.ObjectAccessControl response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to store the new object.
            string destinationBucket = "{MY-DESTINATION-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the new object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string destinationObject = "{MY-DESTINATION-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ComposeRequest requestBody = new Data.ComposeRequest();

            ObjectsResource.ComposeRequest request = storageService.Objects.Compose(requestBody, destinationBucket, destinationObject);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to find the source object.
            string sourceBucket = "{MY-SOURCE-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the source object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string sourceObject = "{MY-SOURCE-OBJECT}"; // TODO: Update placeholder value(s).

            // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
            // value, if any.For information about how to URL encode object names to be path safe, see Encoding URI
            // Path Parts.
            string destinationBucket = "{MY-DESTINATION-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
            // object metadata's name value, if any.
            string destinationObject = "{MY-DESTINATION-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Object requestBody = new Data.Object();

            ObjectsResource.CopyRequest request = storageService.Objects.Copy(requestBody, sourceBucket, sourceObject, destinationBucket, destinationObject);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which the object resides.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            ObjectsResource.DeleteRequest request = storageService.Objects.Delete(bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which the object resides.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            ObjectsResource.GetRequest request = storageService.Objects.Get(bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
            // value, if any.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Object requestBody = new Data.Object();

            ObjectsResource.InsertRequest request = storageService.Objects.Insert(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to look for objects.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            ObjectsResource.ListRequest request = storageService.Objects.List(bucket);

            Data.Objects response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Object object_ in response.Items)
                {
                    // TODO: Use object_
                    Console.WriteLine(new JavaScriptSerializer().Serialize(object_));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which the object resides.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Object requestBody = new Data.Object();

            ObjectsResource.PatchRequest request = storageService.Objects.Patch(requestBody, bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to find the source object.
            string sourceBucket = "{MY-SOURCE-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the source object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string sourceObject = "{MY-SOURCE-OBJECT}"; // TODO: Update placeholder value(s).

            // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
            // value, if any.
            string destinationBucket = "{MY-DESTINATION-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
            // object metadata's name value, if any. For information about how to URL encode object names to be
            // path safe, see Encoding URI Path Parts.
            string destinationObject = "{MY-DESTINATION-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Object requestBody = new Data.Object();

            ObjectsResource.RewriteRequest request = storageService.Objects.Rewrite(requestBody, sourceBucket, sourceObject, destinationBucket, destinationObject);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.RewriteResponse response = request.Execute();
            // Data.RewriteResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which the object resides.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // Name of the object. For information about how to URL encode object names to be path safe, see
            // Encoding URI Path Parts.
            string object_ = "{MY-OBJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Object requestBody = new Data.Object();

            ObjectsResource.UpdateRequest request = storageService.Objects.Update(requestBody, bucket, object_);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Object response = request.Execute();
            // Data.Object response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storage.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storage.v1.Data;


namespace StorageSample
{
    public class StorageServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StorageService storageService = new StorageService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Name of the bucket in which to look for objects.
            string bucket = "{MY-BUCKET}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Channel requestBody = new Data.Channel();

            ObjectsResource.WatchAllRequest request = storageService.Objects.WatchAll(requestBody, bucket);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Channel response = request.Execute();
            // Data.Channel response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
