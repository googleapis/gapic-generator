
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id
id_ = 0  # TODO: Update placeholder value.

request = service.accounts().get(id=id_)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

request = service.accounts().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id
id_ = 0  # TODO: Update placeholder value.

account_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.accounts().patch(id=id_, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id
id_ = 0  # TODO: Update placeholder value.

account_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.accounts().update(id=id_, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id.
account_id = 0  # TODO: Update placeholder value.

request = service.billingInfo().get(accountId=account_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

request = service.billingInfo().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to get the budget information for.
account_id = str(0)  # TODO: Update placeholder value.

# The billing id to get the budget information for.
billing_id = str(0)  # TODO: Update placeholder value.

request = service.budget().get(accountId=account_id, billingId=billing_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id associated with the budget being updated.
account_id = str(0)  # TODO: Update placeholder value.

# The billing id associated with the budget being updated.
billing_id = str(0)  # TODO: Update placeholder value.

budget_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.budget().patch(accountId=account_id, billingId=billing_id, body=budget_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id associated with the budget being updated.
account_id = str(0)  # TODO: Update placeholder value.

# The billing id associated with the budget being updated.
billing_id = str(0)  # TODO: Update placeholder value.

budget_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.budget().update(accountId=account_id, billingId=billing_id, body=budget_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The id for the account that will serve this creative.
account_id = 0  # TODO: Update placeholder value.

# The buyer-specific id for this creative.
buyer_creative_id = 'my-buyer-creative-id'  # TODO: Update placeholder value.

# The id of the deal id to associate with this creative.
deal_id = str(0)  # TODO: Update placeholder value.

request = service.creatives().addDeal(accountId=account_id, buyerCreativeId=buyer_creative_id, dealId=deal_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The id for the account that will serve this creative.
account_id = 0  # TODO: Update placeholder value.

# The buyer-specific id for this creative.
buyer_creative_id = 'my-buyer-creative-id'  # TODO: Update placeholder value.

request = service.creatives().get(accountId=account_id, buyerCreativeId=buyer_creative_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

creative_body = {
    # TODO: Add desired entries to the request body.
}

request = service.creatives().insert(body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

request = service.creatives().list()
while request is not None:
    response = request.execute()

    for creative in response['items']:
        # TODO: Change code below to process each `creative` resource:
        pprint(creative)

    request = service.creatives().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The id for the account that will serve this creative.
account_id = 0  # TODO: Update placeholder value.

# The buyer-specific id for this creative.
buyer_creative_id = 'my-buyer-creative-id'  # TODO: Update placeholder value.

request = service.creatives().listDeals(accountId=account_id, buyerCreativeId=buyer_creative_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The id for the account that will serve this creative.
account_id = 0  # TODO: Update placeholder value.

# The buyer-specific id for this creative.
buyer_creative_id = 'my-buyer-creative-id'  # TODO: Update placeholder value.

# The id of the deal id to disassociate with this creative.
deal_id = str(0)  # TODO: Update placeholder value.

request = service.creatives().removeDeal(accountId=account_id, buyerCreativeId=buyer_creative_id, dealId=deal_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposalId to delete deals from.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

delete_order_deals_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.marketplacedeals().delete(proposalId=proposal_id, body=delete_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# proposalId for which deals need to be added.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

add_order_deals_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.marketplacedeals().insert(proposalId=proposal_id, body=add_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

request = service.marketplacedeals().list(proposalId=proposal_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposalId to edit deals on.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

edit_all_order_deals_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.marketplacedeals().update(proposalId=proposal_id, body=edit_all_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposalId to add notes for.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

add_order_notes_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.marketplacenotes().insert(proposalId=proposal_id, body=add_order_notes_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

request = service.marketplacenotes().list(proposalId=proposal_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The private auction id to be updated.
private_auction_id = 'my-private-auction-id'  # TODO: Update placeholder value.

update_private_auction_proposal_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.marketplaceprivateauction().updateproposal(privateAuctionId=private_auction_id, body=update_private_auction_proposal_request_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to get the reports.
account_id = str(0)  # TODO: Update placeholder value.

# The end time of the report in ISO 8601 timestamp format using UTC.
end_date_time = ''  # TODO: Update placeholder value.

# The start time of the report in ISO 8601 timestamp format using UTC.
start_date_time = ''  # TODO: Update placeholder value.

request = service.performanceReport().list(accountId=account_id, endDateTime=end_date_time, startDateTime=start_date_time)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to delete the pretargeting config for.
account_id = str(0)  # TODO: Update placeholder value.

# The specific id of the configuration to delete.
config_id = str(0)  # TODO: Update placeholder value.

request = service.pretargetingConfig().delete(accountId=account_id, configId=config_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to get the pretargeting config for.
account_id = str(0)  # TODO: Update placeholder value.

# The specific id of the configuration to retrieve.
config_id = str(0)  # TODO: Update placeholder value.

request = service.pretargetingConfig().get(accountId=account_id, configId=config_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to insert the pretargeting config for.
account_id = str(0)  # TODO: Update placeholder value.

pretargeting_config_body = {
    # TODO: Add desired entries to the request body.
}

request = service.pretargetingConfig().insert(accountId=account_id, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to get the pretargeting configs for.
account_id = str(0)  # TODO: Update placeholder value.

request = service.pretargetingConfig().list(accountId=account_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to update the pretargeting config for.
account_id = str(0)  # TODO: Update placeholder value.

# The specific id of the configuration to update.
config_id = str(0)  # TODO: Update placeholder value.

pretargeting_config_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.pretargetingConfig().patch(accountId=account_id, configId=config_id, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The account id to update the pretargeting config for.
account_id = str(0)  # TODO: Update placeholder value.

# The specific id of the configuration to update.
config_id = str(0)  # TODO: Update placeholder value.

pretargeting_config_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.pretargetingConfig().update(accountId=account_id, configId=config_id, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The id for the product to get the head revision for.
product_id = 'my-product-id'  # TODO: Update placeholder value.

request = service.products().get(productId=product_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

request = service.products().search()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# Id of the proposal to retrieve.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

request = service.proposals().get(proposalId=proposal_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

create_orders_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.proposals().insert(body=create_orders_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposal id to update.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

# The last known revision number to update. If the head revision in the marketplace database has
# since changed, an error will be thrown. The caller should then fetch the latest proposal at head
# revision and retry the update at that revision.
revision_number = str(0)  # TODO: Update placeholder value.

# The proposed action to take on the proposal. This field is required and it must be set when
# updating a proposal.
update_action = ''  # TODO: Update placeholder value.

proposal_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.proposals().patch(proposalId=proposal_id, revisionNumber=revision_number, updateAction=update_action, body=proposal_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

request = service.proposals().search()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposal id for which the setup is complete
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

request = service.proposals().setupcomplete(proposalId=proposal_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The proposal id to update.
proposal_id = 'my-proposal-id'  # TODO: Update placeholder value.

# The last known revision number to update. If the head revision in the marketplace database has
# since changed, an error will be thrown. The caller should then fetch the latest proposal at head
# revision and retry the update at that revision.
revision_number = str(0)  # TODO: Update placeholder value.

# The proposed action to take on the proposal. This field is required and it must be set when
# updating a proposal.
update_action = ''  # TODO: Update placeholder value.

proposal_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.proposals().update(proposalId=proposal_id, revisionNumber=revision_number, updateAction=update_action, body=proposal_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using the following scope:
#     'https://www.googleapis.com/auth/adexchange.buyer'
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)

# The accountId of the publisher to get profiles for.
account_id = 0  # TODO: Update placeholder value.

request = service.pubprofiles().list(accountId=account_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
