
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The account id
id = 0


request = service.accounts().get(id=id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


request = service.accounts().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The account id
id = 0


account_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.accounts().patch(id=id, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The account id
id = 0


account_body = {
    # TODO: Add desired entries of the request body.
}


request = service.accounts().update(id=id, body=account_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The account id.
accountId = 0


request = service.billingInfo().get(accountId=accountId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


request = service.billingInfo().list()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The account id to get the budget information for.
accountId = str(0L)

# The billing id to get the budget information for.
billingId = str(0L)


request = service.budget().get(accountId=accountId, billingId=billingId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The account id associated with the budget being updated.
accountId = str(0L)

# The billing id associated with the budget being updated.
billingId = str(0L)


budget_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.budget().patch(accountId=accountId, billingId=billingId, body=budget_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The account id associated with the budget being updated.
accountId = str(0L)

# The billing id associated with the budget being updated.
billingId = str(0L)


budget_body = {
    # TODO: Add desired entries of the request body.
}


request = service.budget().update(accountId=accountId, billingId=billingId, body=budget_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `addDeal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `addDeal` method:

# The id for the account that will serve this creative.
accountId = 0

# The buyer-specific id for this creative.
buyerCreativeId = '{MY-BUYER-CREATIVE-ID}'

# The id of the deal id to associate with this creative.
dealId = str(0L)


request = service.creatives().addDeal(accountId=accountId, buyerCreativeId=buyerCreativeId, dealId=dealId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The id for the account that will serve this creative.
accountId = 0

# The buyer-specific id for this creative.
buyerCreativeId = '{MY-BUYER-CREATIVE-ID}'


request = service.creatives().get(accountId=accountId, buyerCreativeId=buyerCreativeId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


creative_body = {
    # TODO: Add desired entries of the request body.
}


request = service.creatives().insert(body=creative_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


creatives = service.creatives()
request = creatives.list()
while request is not None:
    response = request.execute()

    for creative in response['items']:
        # TODO: Change code below to process each `creative` resource:
        pprint(creative)

    request = creatives.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `removeDeal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `removeDeal` method:

# The id for the account that will serve this creative.
accountId = 0

# The buyer-specific id for this creative.
buyerCreativeId = '{MY-BUYER-CREATIVE-ID}'

# The id of the deal id to disassociate with this creative.
dealId = str(0L)


request = service.creatives().removeDeal(accountId=accountId, buyerCreativeId=buyerCreativeId, dealId=dealId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The proposalId to delete deals from.
proposalId = '{MY-PROPOSAL-ID}'


delete_order_deals_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.marketplacedeals().delete(proposalId=proposalId, body=delete_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# proposalId for which deals need to be added.
proposalId = '{MY-PROPOSAL-ID}'


add_order_deals_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.marketplacedeals().insert(proposalId=proposalId, body=add_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposalId = '{MY-PROPOSAL-ID}'


request = service.marketplacedeals().list(proposalId=proposalId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The proposalId to edit deals on.
proposalId = '{MY-PROPOSAL-ID}'


edit_all_order_deals_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.marketplacedeals().update(proposalId=proposalId, body=edit_all_order_deals_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# The proposalId to add notes for.
proposalId = '{MY-PROPOSAL-ID}'


add_order_notes_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.marketplacenotes().insert(proposalId=proposalId, body=add_order_notes_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposalId = '{MY-PROPOSAL-ID}'


request = service.marketplacenotes().list(proposalId=proposalId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `updateproposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `updateproposal` method:

# The private auction id to be updated.
privateAuctionId = '{MY-PRIVATE-AUCTION-ID}'


update_private_auction_proposal_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.marketplaceprivateauction().updateproposal(privateAuctionId=privateAuctionId, body=update_private_auction_proposal_request_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The account id to get the reports.
accountId = str(0L)

# The end time of the report in ISO 8601 timestamp format using UTC.
endDateTime = '{MY-END-DATE-TIME}'

# The start time of the report in ISO 8601 timestamp format using UTC.
startDateTime = '{MY-START-DATE-TIME}'


request = service.performanceReport().list(accountId=accountId, endDateTime=endDateTime, startDateTime=startDateTime)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The account id to delete the pretargeting config for.
accountId = str(0L)

# The specific id of the configuration to delete.
configId = str(0L)


request = service.pretargetingConfig().delete(accountId=accountId, configId=configId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The account id to get the pretargeting config for.
accountId = str(0L)

# The specific id of the configuration to retrieve.
configId = str(0L)


request = service.pretargetingConfig().get(accountId=accountId, configId=configId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# The account id to insert the pretargeting config for.
accountId = str(0L)


pretargeting_config_body = {
    # TODO: Add desired entries of the request body.
}


request = service.pretargetingConfig().insert(accountId=accountId, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The account id to get the pretargeting configs for.
accountId = str(0L)


request = service.pretargetingConfig().list(accountId=accountId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The account id to update the pretargeting config for.
accountId = str(0L)

# The specific id of the configuration to update.
configId = str(0L)


pretargeting_config_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.pretargetingConfig().patch(accountId=accountId, configId=configId, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The account id to update the pretargeting config for.
accountId = str(0L)

# The specific id of the configuration to update.
configId = str(0L)


pretargeting_config_body = {
    # TODO: Add desired entries of the request body.
}


request = service.pretargetingConfig().update(accountId=accountId, configId=configId, body=pretargeting_config_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The id for the product to get the head revision for.
productId = '{MY-PRODUCT-ID}'


request = service.products().get(productId=productId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `search` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


request = service.products().search()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Id of the proposal to retrieve.
proposalId = '{MY-PROPOSAL-ID}'


request = service.proposals().get(proposalId=proposalId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


create_orders_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.proposals().insert(body=create_orders_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The proposal id to update.
proposalId = '{MY-PROPOSAL-ID}'

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revisionNumber = str(0L)

# The proposed action to take on the proposal. This field is required and it must be set when updating
# a proposal.
updateAction = '{MY-UPDATE-ACTION}'


proposal_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.proposals().patch(proposalId=proposalId, revisionNumber=revisionNumber, updateAction=updateAction, body=proposal_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `search` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


request = service.proposals().search()
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `setupcomplete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setupcomplete` method:

# The proposal id for which the setup is complete
proposalId = '{MY-PROPOSAL-ID}'


request = service.proposals().setupcomplete(proposalId=proposalId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The proposal id to update.
proposalId = '{MY-PROPOSAL-ID}'

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revisionNumber = str(0L)

# The proposed action to take on the proposal. This field is required and it must be set when updating
# a proposal.
updateAction = '{MY-UPDATE-ACTION}'


proposal_body = {
    # TODO: Add desired entries of the request body.
}


request = service.proposals().update(proposalId=proposalId, revisionNumber=revisionNumber, updateAction=updateAction, body=proposal_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery


# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
credentials = None

service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The accountId of the publisher to get profiles for.
accountId = 0


request = service.pubprofiles().list(accountId=accountId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
