
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The account id
id = 0

request = service.accounts().get(id)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



request = service.accounts().list()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The account id
id = 0

account = {
# TODO: Add desired entries of the 'account' dict to be changed
}

request = service.accounts().patch(id, account)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The account id
id = 0

account = {
# TODO: Add desired entries of the 'account' dict
}

request = service.accounts().update(id, account)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The account id.
accountId = 0

request = service.billingInfo().get(accountId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



request = service.billingInfo().list()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The account id to get the budget information for.
accountId = 0L
# * The billing id to get the budget information for.
billingId = 0L

request = service.budget().get(accountId, billingId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The account id associated with the budget being updated.
accountId = 0L
# * The billing id associated with the budget being updated.
billingId = 0L

budget = {
# TODO: Add desired entries of the 'budget' dict to be changed
}

request = service.budget().patch(accountId, billingId, budget)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The account id associated with the budget being updated.
accountId = 0L
# * The billing id associated with the budget being updated.
billingId = 0L

budget = {
# TODO: Add desired entries of the 'budget' dict
}

request = service.budget().update(accountId, billingId, budget)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addDeal' method:
# * The id for the account that will serve this creative.
accountId = 0
# * The buyer-specific id for this creative.
buyerCreativeId = ''
# * The id of the deal id to associate with this creative.
dealId = 0L

request = service.creatives().addDeal(accountId, buyerCreativeId, dealId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The id for the account that will serve this creative.
accountId = 0
# * The buyer-specific id for this creative.
buyerCreativeId = ''

request = service.creatives().get(accountId, buyerCreativeId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



creative = {
# TODO: Add desired entries of the 'creative' dict
}

request = service.creatives().insert(creative)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



creatives = service.creatives()
request = creatives.list()
while request is not None:
    response = request.execute()

    for creative in response['items']:
        # TODO: Add code here to process each 'creative' resource

    request = creatives.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeDeal' method:
# * The id for the account that will serve this creative.
accountId = 0
# * The buyer-specific id for this creative.
buyerCreativeId = ''
# * The id of the deal id to disassociate with this creative.
dealId = 0L

request = service.creatives().removeDeal(accountId, buyerCreativeId, dealId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * The proposalId to delete deals from.
proposalId = ''

delete_order_deals_request = {
# TODO: Add desired entries of the 'delete_order_deals_request' dict
}

request = service.marketplacedeals().delete(proposalId, delete_order_deals_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * proposalId for which deals need to be added.
proposalId = ''

add_order_deals_request = {
# TODO: Add desired entries of the 'add_order_deals_request' dict
}

request = service.marketplacedeals().insert(proposalId, add_order_deals_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The proposalId to get deals for. To search across proposals specify order_id = '-' as part of the URL.
proposalId = ''

request = service.marketplacedeals().list(proposalId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The proposalId to edit deals on.
proposalId = ''

edit_all_order_deals_request = {
# TODO: Add desired entries of the 'edit_all_order_deals_request' dict
}

request = service.marketplacedeals().update(proposalId, edit_all_order_deals_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * The proposalId to add notes for.
proposalId = ''

add_order_notes_request = {
# TODO: Add desired entries of the 'add_order_notes_request' dict
}

request = service.marketplacenotes().insert(proposalId, add_order_notes_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The proposalId to get notes for.
proposalId = ''

request = service.marketplacenotes().list(proposalId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'updateproposal' method:
# * The private auction id to be updated.
privateAuctionId = ''

update_private_auction_proposal_request = {
# TODO: Add desired entries of the 'update_private_auction_proposal_request' dict
}

request = service.marketplaceprivateauction().updateproposal(privateAuctionId, update_private_auction_proposal_request)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The account id to get the reports.
accountId = 0L
# * The end time of the report in ISO 8601 timestamp format using UTC.
endDateTime = ''
# * The start time of the report in ISO 8601 timestamp format using UTC.
startDateTime = ''

request = service.performanceReport().list(accountId, endDateTime, startDateTime)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * The account id to delete the pretargeting config for.
accountId = 0L
# * The specific id of the configuration to delete.
configId = 0L

request = service.pretargetingConfig().delete(accountId, configId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The account id to get the pretargeting config for.
accountId = 0L
# * The specific id of the configuration to retrieve.
configId = 0L

request = service.pretargetingConfig().get(accountId, configId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * The account id to insert the pretargeting config for.
accountId = 0L

pretargeting_config = {
# TODO: Add desired entries of the 'pretargeting_config' dict
}

request = service.pretargetingConfig().insert(accountId, pretargeting_config)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The account id to get the pretargeting configs for.
accountId = 0L

request = service.pretargetingConfig().list(accountId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The account id to update the pretargeting config for.
accountId = 0L
# * The specific id of the configuration to update.
configId = 0L

pretargeting_config = {
# TODO: Add desired entries of the 'pretargeting_config' dict to be changed
}

request = service.pretargetingConfig().patch(accountId, configId, pretargeting_config)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The account id to update the pretargeting config for.
accountId = 0L
# * The specific id of the configuration to update.
configId = 0L

pretargeting_config = {
# TODO: Add desired entries of the 'pretargeting_config' dict
}

request = service.pretargetingConfig().update(accountId, configId, pretargeting_config)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The id for the product to get the head revision for.
productId = ''

request = service.products().get(productId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



request = service.products().search()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Id of the proposal to retrieve.
proposalId = ''

request = service.proposals().get(proposalId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



create_orders_request = {
# TODO: Add desired entries of the 'create_orders_request' dict
}

request = service.proposals().insert(create_orders_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The proposal id to update.
proposalId = ''
# * The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
revisionNumber = 0L
# * The proposed action to take on the proposal.
updateAction = ''

proposal = {
# TODO: Add desired entries of the 'proposal' dict to be changed
}

request = service.proposals().patch(proposalId, revisionNumber, updateAction, proposal)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)



request = service.proposals().search()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setupcomplete' method:
# * The proposal id for which the setup is complete
proposalId = ''

request = service.proposals().setupcomplete(proposalId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The proposal id to update.
proposalId = ''
# * The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision.
revisionNumber = 0L
# * The proposed action to take on the proposal.
updateAction = ''

proposal = {
# TODO: Add desired entries of the 'proposal' dict
}

request = service.proposals().update(proposalId, revisionNumber, updateAction, proposal)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Ad Exchange Buyer API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/adexchangebuyer
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the adexchangebuyer service object (version v1.4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('adexchangebuyer', 'v1.4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The accountId of the publisher to get profiles for.
accountId = 0

request = service.pubprofiles().list(accountId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
