============== file: src/test/java/com/google/gcloud/pubsub/spi/MockLibraryServiceImpl.java ==============
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.gcloud.pubsub.spi;

import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc.LibraryService;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import com.google.protobuf.GeneratedMessage;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.List;

@javax.annotation.Generated("by GAPIC")
public class MockLibraryServiceImpl implements LibraryService  {
   private ArrayList<GeneratedMessage> requests;

   public MockLibraryServiceImpl() {
     requests = new ArrayList<>();
   }

   public List<GeneratedMessage> getRequests() {
     return requests;
   }

   public void reset() {
     requests = new ArrayList<>();
   }

   @Override
   public void createShelf(CreateShelfRequest request,
       StreamObserver<Shelf> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Shelf.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void getShelf(GetShelfRequest request,
       StreamObserver<Shelf> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Shelf.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void listShelves(ListShelvesRequest request,
       StreamObserver<ListShelvesResponse> responseObserver) {
     requests.add(request);
     responseObserver.onNext(ListShelvesResponse.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void deleteShelf(DeleteShelfRequest request,
       StreamObserver<Empty> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Empty.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void mergeShelves(MergeShelvesRequest request,
       StreamObserver<Shelf> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Shelf.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void createBook(CreateBookRequest request,
       StreamObserver<Book> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Book.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void publishSeries(PublishSeriesRequest request,
       StreamObserver<PublishSeriesResponse> responseObserver) {
     requests.add(request);
     responseObserver.onNext(PublishSeriesResponse.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void getBook(GetBookRequest request,
       StreamObserver<Book> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Book.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void listBooks(ListBooksRequest request,
       StreamObserver<ListBooksResponse> responseObserver) {
     requests.add(request);
     responseObserver.onNext(ListBooksResponse.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void deleteBook(DeleteBookRequest request,
       StreamObserver<Empty> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Empty.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void updateBook(UpdateBookRequest request,
       StreamObserver<Book> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Book.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void moveBook(MoveBookRequest request,
       StreamObserver<Book> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Book.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void listStrings(ListStringsRequest request,
       StreamObserver<ListStringsResponse> responseObserver) {
     requests.add(request);
     responseObserver.onNext(ListStringsResponse.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void addComments(AddCommentsRequest request,
       StreamObserver<Empty> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Empty.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void getBookFromArchive(GetBookFromArchiveRequest request,
       StreamObserver<Book> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Book.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void updateBookIndex(UpdateBookIndexRequest request,
       StreamObserver<Empty> responseObserver) {
     requests.add(request);
     responseObserver.onNext(Empty.newBuilder().build());
     responseObserver.onCompleted();
   }

   @Override
   public void streamShelves(ListShelvesRequest request,
       StreamObserver<ListShelvesResponse> responseObserver) {
     requests.add(request);
     responseObserver.onNext(ListShelvesResponse.newBuilder().build());
     responseObserver.onCompleted();
   }

}
