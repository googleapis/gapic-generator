============== file: Google/Example/Library/V1/LibraryServiceClientSnippets.g.cs ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using Google.Api.Gax.Grpc;
using Google.Example.Library.V1;
using Google.Longrunning;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Google.Tagger.V1;
using Grpc.Core;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Google.Example.Library.V1.Snippets
{
    public class GeneratedLibraryServiceClientSnippets
    {
        public async Task CreateShelfAsync()
        {
            // Snippet: CreateShelfAsync(Shelf,CallSettings)
            // Additional: CreateShelfAsync(Shelf,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            // Make the request
            Shelf response = await libraryServiceClient.CreateShelfAsync(shelf);
            // End snippet
        }

        public void CreateShelf()
        {
            // Snippet: CreateShelf(Shelf,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            // Make the request
            Shelf response = libraryServiceClient.CreateShelf(shelf);
            // End snippet
        }

        public async Task GetShelfAsync1()
        {
            // Snippet: GetShelfAsync(ShelfName,CallSettings)
            // Additional: GetShelfAsync(ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(name);
            // End snippet
        }

        public void GetShelf1()
        {
            // Snippet: GetShelf(ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(name);
            // End snippet
        }

        public async Task GetShelfAsync2()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            SomeMessage message = new SomeMessage();
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(formattedName, message);
            // End snippet
        }

        public void GetShelf2()
        {
            // Snippet: GetShelf(string,SomeMessage,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            SomeMessage message = new SomeMessage();
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(formattedName, message);
            // End snippet
        }

        public async Task GetShelfAsync3()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,StringBuilder,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,StringBuilder,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(formattedName, message, stringBuilder);
            // End snippet
        }

        public void GetShelf3()
        {
            // Snippet: GetShelf(string,SomeMessage,StringBuilder,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(formattedName, message, stringBuilder);
            // End snippet
        }

        public async Task ListShelvesAsync()
        {
            // Snippet: ListShelvesAsync(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)

            // Make the request
            IPagedAsyncEnumerable<ListShelvesResponse,Shelf> response =
                libraryServiceClient.ListShelvesAsync();

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Shelf item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            IAsyncEnumerable<FixedSizePage<Shelf>> fixedSizePages = response.AsPages().WithFixedSize(pageSize);
            await fixedSizePages.ForEachAsync((FixedSizePage<Shelf> page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            });
            // End snippet
        }

        public void ListShelves()
        {
            // Snippet: ListShelves(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)

            // Make the request
            IPagedEnumerable<ListShelvesResponse,Shelf> response =
                libraryServiceClient.ListShelves();

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Shelf item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            foreach (FixedSizePage<Shelf> page in response.AsPages().WithFixedSize(pageSize))
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            }
            // End snippet
        }

        public async Task DeleteShelfAsync()
        {
            // Snippet: DeleteShelfAsync(ShelfName,CallSettings)
            // Additional: DeleteShelfAsync(ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            await libraryServiceClient.DeleteShelfAsync(name);
            // End snippet
        }

        public void DeleteShelf()
        {
            // Snippet: DeleteShelf(ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            libraryServiceClient.DeleteShelf(name);
            // End snippet
        }

        public async Task MergeShelvesAsync()
        {
            // Snippet: MergeShelvesAsync(ShelfName,ShelfName,CallSettings)
            // Additional: MergeShelvesAsync(ShelfName,ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = await libraryServiceClient.MergeShelvesAsync(name, otherShelfName);
            // End snippet
        }

        public void MergeShelves()
        {
            // Snippet: MergeShelves(ShelfName,ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = libraryServiceClient.MergeShelves(name, otherShelfName);
            // End snippet
        }

        public async Task CreateBookAsync()
        {
            // Snippet: CreateBookAsync(string,Book,CallSettings)
            // Additional: CreateBookAsync(string,Book,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            Book book = new Book();
            // Make the request
            Book response = await libraryServiceClient.CreateBookAsync(formattedName, book);
            // End snippet
        }

        public void CreateBook()
        {
            // Snippet: CreateBook(string,Book,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatShelfName("[SHELF_ID]");
            Book book = new Book();
            // Make the request
            Book response = libraryServiceClient.CreateBook(formattedName, book);
            // End snippet
        }

        public async Task PublishSeriesAsync()
        {
            // Snippet: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint,CallSettings)
            // Additional: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            // Make the request
            PublishSeriesResponse response = await libraryServiceClient.PublishSeriesAsync(shelf, books, edition);
            // End snippet
        }

        public void PublishSeries()
        {
            // Snippet: PublishSeries(Shelf,IEnumerable<Book>,uint,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            // Make the request
            PublishSeriesResponse response = libraryServiceClient.PublishSeries(shelf, books, edition);
            // End snippet
        }

        public async Task GetBookAsync()
        {
            // Snippet: GetBookAsync(BookName,CallSettings)
            // Additional: GetBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Book response = await libraryServiceClient.GetBookAsync(name);
            // End snippet
        }

        public void GetBook()
        {
            // Snippet: GetBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Book response = libraryServiceClient.GetBook(name);
            // End snippet
        }

        public async Task ListBooksAsync()
        {
            // Snippet: ListBooksAsync(ShelfName,string,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            string filter = "";
            // Make the request
            IPagedAsyncEnumerable<ListBooksResponse,Book> response =
                libraryServiceClient.ListBooksAsync(name, filter);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Book item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            IAsyncEnumerable<FixedSizePage<Book>> fixedSizePages = response.AsPages().WithFixedSize(pageSize);
            await fixedSizePages.ForEachAsync((FixedSizePage<Book> page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            });
            // End snippet
        }

        public void ListBooks()
        {
            // Snippet: ListBooks(ShelfName,string,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            string filter = "";
            // Make the request
            IPagedEnumerable<ListBooksResponse,Book> response =
                libraryServiceClient.ListBooks(name, filter);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Book item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            foreach (FixedSizePage<Book> page in response.AsPages().WithFixedSize(pageSize))
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            }
            // End snippet
        }

        public async Task DeleteBookAsync()
        {
            // Snippet: DeleteBookAsync(BookName,CallSettings)
            // Additional: DeleteBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            await libraryServiceClient.DeleteBookAsync(name);
            // End snippet
        }

        public void DeleteBook()
        {
            // Snippet: DeleteBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            libraryServiceClient.DeleteBook(name);
            // End snippet
        }

        public async Task UpdateBookAsync1()
        {
            // Snippet: UpdateBookAsync(BookName,Book,CallSettings)
            // Additional: UpdateBookAsync(BookName,Book,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            // Make the request
            Book response = await libraryServiceClient.UpdateBookAsync(name, book);
            // End snippet
        }

        public void UpdateBook1()
        {
            // Snippet: UpdateBook(BookName,Book,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            // Make the request
            Book response = libraryServiceClient.UpdateBook(name, book);
            // End snippet
        }

        public async Task UpdateBookAsync2()
        {
            // Snippet: UpdateBookAsync(BookName,Book,FieldMask,FieldMask,CallSettings)
            // Additional: UpdateBookAsync(BookName,Book,FieldMask,FieldMask,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            // Make the request
            Book response = await libraryServiceClient.UpdateBookAsync(name, book, updateMask, physicalMask);
            // End snippet
        }

        public void UpdateBook2()
        {
            // Snippet: UpdateBook(BookName,Book,FieldMask,FieldMask,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            // Make the request
            Book response = libraryServiceClient.UpdateBook(name, book, updateMask, physicalMask);
            // End snippet
        }

        public async Task MoveBookAsync()
        {
            // Snippet: MoveBookAsync(BookName,ShelfName,CallSettings)
            // Additional: MoveBookAsync(BookName,ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Book response = await libraryServiceClient.MoveBookAsync(name, otherShelfName);
            // End snippet
        }

        public void MoveBook()
        {
            // Snippet: MoveBook(BookName,ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Book response = libraryServiceClient.MoveBook(name, otherShelfName);
            // End snippet
        }

        public async Task ListStringsAsync1()
        {
            // Snippet: ListStringsAsync(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)

            // Make the request
            IPagedAsyncEnumerable<ListStringsResponse,string> response =
                libraryServiceClient.ListStringsAsync();

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((string item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            IAsyncEnumerable<FixedSizePage<string>> fixedSizePages = response.AsPages().WithFixedSize(pageSize);
            await fixedSizePages.ForEachAsync((FixedSizePage<string> page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (string item in page)
                {
                    Console.WriteLine(item);
                }
            });
            // End snippet
        }

        public void ListStrings1()
        {
            // Snippet: ListStrings(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)

            // Make the request
            IPagedEnumerable<ListStringsResponse,string> response =
                libraryServiceClient.ListStrings();

            // Iterate over all response items, lazily performing RPCs as required
            foreach (string item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            foreach (FixedSizePage<string> page in response.AsPages().WithFixedSize(pageSize))
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (string item in page)
                {
                    Console.WriteLine(item);
                }
            }
            // End snippet
        }

        public async Task ListStringsAsync2()
        {
            // Snippet: ListStringsAsync(ResourceName,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ResourceName name = new ShelfName("[SHELF_ID]");
            // Make the request
            IPagedAsyncEnumerable<ListStringsResponse,string> response =
                libraryServiceClient.ListStringsAsync(name);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((string item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            IAsyncEnumerable<FixedSizePage<string>> fixedSizePages = response.AsPages().WithFixedSize(pageSize);
            await fixedSizePages.ForEachAsync((FixedSizePage<string> page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (string item in page)
                {
                    Console.WriteLine(item);
                }
            });
            // End snippet
        }

        public void ListStrings2()
        {
            // Snippet: ListStrings(ResourceName,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ResourceName name = new ShelfName("[SHELF_ID]");
            // Make the request
            IPagedEnumerable<ListStringsResponse,string> response =
                libraryServiceClient.ListStrings(name);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (string item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            foreach (FixedSizePage<string> page in response.AsPages().WithFixedSize(pageSize))
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (string item in page)
                {
                    Console.WriteLine(item);
                }
            }
            // End snippet
        }

        public async Task AddCommentsAsync()
        {
            // Snippet: AddCommentsAsync(string,IEnumerable<Comment>,CallSettings)
            // Additional: AddCommentsAsync(string,IEnumerable<Comment>,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            IEnumerable<Comment> comments = new[]
            {
                new Comment
                {
                    Comment = ByteString.CopyFromUtf8(""),
                    Stage = Comment.Types.Stage.Unset,
                    Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                },
            };
            // Make the request
            await libraryServiceClient.AddCommentsAsync(formattedName, comments);
            // End snippet
        }

        public void AddComments()
        {
            // Snippet: AddComments(string,IEnumerable<Comment>,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            IEnumerable<Comment> comments = new[]
            {
                new Comment
                {
                    Comment = ByteString.CopyFromUtf8(""),
                    Stage = Comment.Types.Stage.Unset,
                    Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                },
            };
            // Make the request
            libraryServiceClient.AddComments(formattedName, comments);
            // End snippet
        }

        public async Task GetBookFromArchiveAsync()
        {
            // Snippet: GetBookFromArchiveAsync(ArchivedBookName,CallSettings)
            // Additional: GetBookFromArchiveAsync(ArchivedBookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ArchivedBookName name = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]");
            // Make the request
            BookFromArchive response = await libraryServiceClient.GetBookFromArchiveAsync(name);
            // End snippet
        }

        public void GetBookFromArchive()
        {
            // Snippet: GetBookFromArchive(ArchivedBookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ArchivedBookName name = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]");
            // Make the request
            BookFromArchive response = libraryServiceClient.GetBookFromArchive(name);
            // End snippet
        }

        public async Task GetBookFromAnywhereAsync()
        {
            // Snippet: GetBookFromAnywhereAsync(BookNameOneof,BookName,CallSettings)
            // Additional: GetBookFromAnywhereAsync(BookNameOneof,BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookNameOneof name = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            BookName altBookName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            BookFromAnywhere response = await libraryServiceClient.GetBookFromAnywhereAsync(name, altBookName);
            // End snippet
        }

        public void GetBookFromAnywhere()
        {
            // Snippet: GetBookFromAnywhere(BookNameOneof,BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookNameOneof name = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            BookName altBookName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            BookFromAnywhere response = libraryServiceClient.GetBookFromAnywhere(name, altBookName);
            // End snippet
        }

        public async Task UpdateBookIndexAsync()
        {
            // Snippet: UpdateBookIndexAsync(BookName,string,IDictionary<string, string>,CallSettings)
            // Additional: UpdateBookIndexAsync(BookName,string,IDictionary<string, string>,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            string indexName = "default index";
            IDictionary<string, string> indexMap = new Dictionary<string, string>
            {
                { "default_key", "" },
            };
            // Make the request
            await libraryServiceClient.UpdateBookIndexAsync(name, indexName, indexMap);
            // End snippet
        }

        public void UpdateBookIndex()
        {
            // Snippet: UpdateBookIndex(BookName,string,IDictionary<string, string>,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            string indexName = "default index";
            IDictionary<string, string> indexMap = new Dictionary<string, string>
            {
                { "default_key", "" },
            };
            // Make the request
            libraryServiceClient.UpdateBookIndex(name, indexName, indexMap);
            // End snippet
        }

        public async Task FindRelatedBooksAsync()
        {
            // Snippet: FindRelatedBooksAsync(IEnumerable<BookName>,IEnumerable<ShelfName>,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            IEnumerable<BookName> names = new[]
            {
                new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            IEnumerable<ShelfName> shelves = new List<string>();
            // Make the request
            IPagedAsyncEnumerable<FindRelatedBooksResponse,BookName> response =
                libraryServiceClient.FindRelatedBooksAsync(names, shelves);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((BookName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            IAsyncEnumerable<FixedSizePage<BookName>> fixedSizePages = response.AsPages().WithFixedSize(pageSize);
            await fixedSizePages.ForEachAsync((FixedSizePage<BookName> page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            });
            // End snippet
        }

        public void FindRelatedBooks()
        {
            // Snippet: FindRelatedBooks(IEnumerable<BookName>,IEnumerable<ShelfName>,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            IEnumerable<BookName> names = new[]
            {
                new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            IEnumerable<ShelfName> shelves = new List<string>();
            // Make the request
            IPagedEnumerable<FindRelatedBooksResponse,BookName> response =
                libraryServiceClient.FindRelatedBooks(names, shelves);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (BookName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over fixed-sized pages, lazily performing RPCs as required
            int pageSize = 10;
            foreach (FixedSizePage<BookName> page in response.AsPages().WithFixedSize(pageSize))
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            }
            // End snippet
        }

        public async Task AddTagAsync()
        {
            // Snippet: AddTagAsync(string,string,CallSettings)
            // Additional: AddTagAsync(string,string,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            string tag = "";
            // Make the request
            AddTagResponse response = await libraryServiceClient.AddTagAsync(formattedResource, tag);
            // End snippet
        }

        public void AddTag()
        {
            // Snippet: AddTag(string,string,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            string tag = "";
            // Make the request
            AddTagResponse response = libraryServiceClient.AddTag(formattedResource, tag);
            // End snippet
        }

        public async Task AddLabelAsync()
        {
            // Snippet: AddLabelAsync(string,string,CallSettings)
            // Additional: AddLabelAsync(string,string,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            string label = "";
            // Make the request
            AddLabelResponse response = await libraryServiceClient.AddLabelAsync(formattedResource, label);
            // End snippet
        }

        public void AddLabel()
        {
            // Snippet: AddLabel(string,string,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = LibraryServiceClient.FormatBookName("[SHELF_ID]", "[BOOK_ID]");
            string label = "";
            // Make the request
            AddLabelResponse response = libraryServiceClient.AddLabel(formattedResource, label);
            // End snippet
        }

        public async Task GetBigBookAsync()
        {
            // Snippet: GetBigBookAsync(BookName,CallSettings)
            // Additional: GetBigBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation response = await libraryServiceClient.GetBigBookAsync(name);
            // End snippet
        }

        public void GetBigBook()
        {
            // Snippet: GetBigBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation response = libraryServiceClient.GetBigBook(name);
            // End snippet
        }

    }
}

