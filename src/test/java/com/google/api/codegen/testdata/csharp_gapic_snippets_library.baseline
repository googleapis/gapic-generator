============== file: /LibraryServiceClientSnippets.g.cs ==============
// Copyright 2017, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using Google.Api.Gax.Grpc;
using Google.Example.Library.V1;
using Google.LongRunning;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Google.Tagger.V1;
using Grpc.Core;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Google.Example.Library.V1.Snippets
{
    public class GeneratedLibraryServiceClientSnippets
    {
        public async Task CreateShelfAsync()
        {
            // Snippet: CreateShelfAsync(Shelf,CallSettings)
            // Additional: CreateShelfAsync(Shelf,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            // Make the request
            Shelf response = await libraryServiceClient.CreateShelfAsync(shelf);
            // End snippet
        }

        public void CreateShelf()
        {
            // Snippet: CreateShelf(Shelf,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            // Make the request
            Shelf response = libraryServiceClient.CreateShelf(shelf);
            // End snippet
        }

        public async Task CreateShelfAsync_RequestObject()
        {
            // Snippet: CreateShelfAsync(CreateShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            CreateShelfRequest request = new CreateShelfRequest
            {
                Shelf = new Shelf(),
            };
            // Make the request
            Shelf response = await libraryServiceClient.CreateShelfAsync(request);
            // End snippet
        }

        public void CreateShelf_RequestObject()
        {
            // Snippet: CreateShelf(CreateShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            CreateShelfRequest request = new CreateShelfRequest
            {
                Shelf = new Shelf(),
            };
            // Make the request
            Shelf response = libraryServiceClient.CreateShelf(request);
            // End snippet
        }

        public async Task GetShelfAsync1()
        {
            // Snippet: GetShelfAsync(ShelfName,CallSettings)
            // Additional: GetShelfAsync(ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(name);
            // End snippet
        }

        public void GetShelf1()
        {
            // Snippet: GetShelf(ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(name);
            // End snippet
        }

        public async Task GetShelfAsync2()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            SomeMessage message = new SomeMessage();
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(formattedName, message);
            // End snippet
        }

        public void GetShelf2()
        {
            // Snippet: GetShelf(string,SomeMessage,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            SomeMessage message = new SomeMessage();
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(formattedName, message);
            // End snippet
        }

        public async Task GetShelfAsync3()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,StringBuilder,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,StringBuilder,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(formattedName, message, stringBuilder);
            // End snippet
        }

        public void GetShelf3()
        {
            // Snippet: GetShelf(string,SomeMessage,StringBuilder,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(formattedName, message, stringBuilder);
            // End snippet
        }

        public async Task GetShelfAsync_RequestObject()
        {
            // Snippet: GetShelfAsync(GetShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetShelfRequest request = new GetShelfRequest
            {
                Name = new ShelfName("[SHELF_ID]").ToString(),
                Options = "",
            };
            // Make the request
            Shelf response = await libraryServiceClient.GetShelfAsync(request);
            // End snippet
        }

        public void GetShelf_RequestObject()
        {
            // Snippet: GetShelf(GetShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetShelfRequest request = new GetShelfRequest
            {
                Name = new ShelfName("[SHELF_ID]").ToString(),
                Options = "",
            };
            // Make the request
            Shelf response = libraryServiceClient.GetShelf(request);
            // End snippet
        }

        public async Task ListShelvesAsync()
        {
            // Snippet: ListShelvesAsync(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Make the request
            PagedAsyncEnumerable<ListShelvesResponse, Shelf> response =
                libraryServiceClient.ListShelvesAsync();

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Shelf item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListShelvesResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Shelf> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Shelf item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListShelves()
        {
            // Snippet: ListShelves(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Make the request
            PagedEnumerable<ListShelvesResponse, Shelf> response =
                libraryServiceClient.ListShelves();

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Shelf item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListShelvesResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Shelf> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Shelf item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task ListShelvesAsync_RequestObject()
        {
            // Snippet: ListShelvesAsync(ListShelvesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ListShelvesRequest request = new ListShelvesRequest();
            // Make the request
            PagedAsyncEnumerable<ListShelvesResponse, Shelf> response =
                libraryServiceClient.ListShelvesAsync(request);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Shelf item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListShelvesResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Shelf> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Shelf item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListShelves_RequestObject()
        {
            // Snippet: ListShelves(ListShelvesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ListShelvesRequest request = new ListShelvesRequest();
            // Make the request
            PagedEnumerable<ListShelvesResponse, Shelf> response =
                libraryServiceClient.ListShelves(request);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Shelf item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListShelvesResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Shelf item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Shelf> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Shelf item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task DeleteShelfAsync()
        {
            // Snippet: DeleteShelfAsync(ShelfName,CallSettings)
            // Additional: DeleteShelfAsync(ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            await libraryServiceClient.DeleteShelfAsync(name);
            // End snippet
        }

        public void DeleteShelf()
        {
            // Snippet: DeleteShelf(ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            // Make the request
            libraryServiceClient.DeleteShelf(name);
            // End snippet
        }

        public async Task DeleteShelfAsync_RequestObject()
        {
            // Snippet: DeleteShelfAsync(DeleteShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            DeleteShelfRequest request = new DeleteShelfRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            await libraryServiceClient.DeleteShelfAsync(request);
            // End snippet
        }

        public void DeleteShelf_RequestObject()
        {
            // Snippet: DeleteShelf(DeleteShelfRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            DeleteShelfRequest request = new DeleteShelfRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            libraryServiceClient.DeleteShelf(request);
            // End snippet
        }

        public async Task MergeShelvesAsync()
        {
            // Snippet: MergeShelvesAsync(ShelfName,ShelfName,CallSettings)
            // Additional: MergeShelvesAsync(ShelfName,ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = await libraryServiceClient.MergeShelvesAsync(name, otherShelfName);
            // End snippet
        }

        public void MergeShelves()
        {
            // Snippet: MergeShelves(ShelfName,ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Shelf response = libraryServiceClient.MergeShelves(name, otherShelfName);
            // End snippet
        }

        public async Task MergeShelvesAsync_RequestObject()
        {
            // Snippet: MergeShelvesAsync(MergeShelvesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            MergeShelvesRequest request = new MergeShelvesRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
                OtherShelfNameAsShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            Shelf response = await libraryServiceClient.MergeShelvesAsync(request);
            // End snippet
        }

        public void MergeShelves_RequestObject()
        {
            // Snippet: MergeShelves(MergeShelvesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            MergeShelvesRequest request = new MergeShelvesRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
                OtherShelfNameAsShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            Shelf response = libraryServiceClient.MergeShelves(request);
            // End snippet
        }

        public async Task CreateBookAsync()
        {
            // Snippet: CreateBookAsync(string,Book,CallSettings)
            // Additional: CreateBookAsync(string,Book,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            Book book = new Book();
            // Make the request
            Book response = await libraryServiceClient.CreateBookAsync(formattedName, book);
            // End snippet
        }

        public void CreateBook()
        {
            // Snippet: CreateBook(string,Book,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = new ShelfName("[SHELF_ID]").ToString();
            Book book = new Book();
            // Make the request
            Book response = libraryServiceClient.CreateBook(formattedName, book);
            // End snippet
        }

        public async Task CreateBookAsync_RequestObject()
        {
            // Snippet: CreateBookAsync(CreateBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            CreateBookRequest request = new CreateBookRequest
            {
                Name = new ShelfName("[SHELF_ID]").ToString(),
                Book = new Book(),
            };
            // Make the request
            Book response = await libraryServiceClient.CreateBookAsync(request);
            // End snippet
        }

        public void CreateBook_RequestObject()
        {
            // Snippet: CreateBook(CreateBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            CreateBookRequest request = new CreateBookRequest
            {
                Name = new ShelfName("[SHELF_ID]").ToString(),
                Book = new Book(),
            };
            // Make the request
            Book response = libraryServiceClient.CreateBook(request);
            // End snippet
        }

        public async Task PublishSeriesAsync()
        {
            // Snippet: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint?,SeriesUuid,CallSettings)
            // Additional: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint?,SeriesUuid,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            SeriesUuid seriesUuid = new SeriesUuid
            {
                SeriesString = "foobar",
            };
            // Make the request
            PublishSeriesResponse response = await libraryServiceClient.PublishSeriesAsync(shelf, books, edition, seriesUuid);
            // End snippet
        }

        public void PublishSeries()
        {
            // Snippet: PublishSeries(Shelf,IEnumerable<Book>,uint?,SeriesUuid,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            SeriesUuid seriesUuid = new SeriesUuid
            {
                SeriesString = "foobar",
            };
            // Make the request
            PublishSeriesResponse response = libraryServiceClient.PublishSeries(shelf, books, edition, seriesUuid);
            // End snippet
        }

        public async Task PublishSeriesAsync_RequestObject()
        {
            // Snippet: PublishSeriesAsync(PublishSeriesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            PublishSeriesRequest request = new PublishSeriesRequest
            {
                Shelf = new Shelf(),
                Books = { },
                SeriesUuid = new SeriesUuid
                             {
                                 SeriesString = "foobar",
                             },
            };
            // Make the request
            PublishSeriesResponse response = await libraryServiceClient.PublishSeriesAsync(request);
            // End snippet
        }

        public void PublishSeries_RequestObject()
        {
            // Snippet: PublishSeries(PublishSeriesRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            PublishSeriesRequest request = new PublishSeriesRequest
            {
                Shelf = new Shelf(),
                Books = { },
                SeriesUuid = new SeriesUuid
                             {
                                 SeriesString = "foobar",
                             },
            };
            // Make the request
            PublishSeriesResponse response = libraryServiceClient.PublishSeries(request);
            // End snippet
        }

        public async Task GetBookAsync()
        {
            // Snippet: GetBookAsync(BookName,CallSettings)
            // Additional: GetBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Book response = await libraryServiceClient.GetBookAsync(name);
            // End snippet
        }

        public void GetBook()
        {
            // Snippet: GetBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Book response = libraryServiceClient.GetBook(name);
            // End snippet
        }

        public async Task GetBookAsync_RequestObject()
        {
            // Snippet: GetBookAsync(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Book response = await libraryServiceClient.GetBookAsync(request);
            // End snippet
        }

        public void GetBook_RequestObject()
        {
            // Snippet: GetBook(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Book response = libraryServiceClient.GetBook(request);
            // End snippet
        }

        public async Task ListBooksAsync()
        {
            // Snippet: ListBooksAsync(ShelfName,string,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            string filter = "";
            // Make the request
            PagedAsyncEnumerable<ListBooksResponse, Book> response =
                libraryServiceClient.ListBooksAsync(name, filter);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Book item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListBooksResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Book> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Book item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListBooks()
        {
            // Snippet: ListBooks(ShelfName,string,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ShelfName name = new ShelfName("[SHELF_ID]");
            string filter = "";
            // Make the request
            PagedEnumerable<ListBooksResponse, Book> response =
                libraryServiceClient.ListBooks(name, filter);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Book item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListBooksResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Book> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Book item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task ListBooksAsync_RequestObject()
        {
            // Snippet: ListBooksAsync(ListBooksRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ListBooksRequest request = new ListBooksRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            PagedAsyncEnumerable<ListBooksResponse, Book> response =
                libraryServiceClient.ListBooksAsync(request);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((Book item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListBooksResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Book> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Book item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListBooks_RequestObject()
        {
            // Snippet: ListBooks(ListBooksRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ListBooksRequest request = new ListBooksRequest
            {
                ShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            PagedEnumerable<ListBooksResponse, Book> response =
                libraryServiceClient.ListBooks(request);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (Book item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListBooksResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (Book item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<Book> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (Book item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task DeleteBookAsync()
        {
            // Snippet: DeleteBookAsync(BookName,CallSettings)
            // Additional: DeleteBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            await libraryServiceClient.DeleteBookAsync(name);
            // End snippet
        }

        public void DeleteBook()
        {
            // Snippet: DeleteBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            libraryServiceClient.DeleteBook(name);
            // End snippet
        }

        public async Task DeleteBookAsync_RequestObject()
        {
            // Snippet: DeleteBookAsync(DeleteBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            DeleteBookRequest request = new DeleteBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            await libraryServiceClient.DeleteBookAsync(request);
            // End snippet
        }

        public void DeleteBook_RequestObject()
        {
            // Snippet: DeleteBook(DeleteBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            DeleteBookRequest request = new DeleteBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            libraryServiceClient.DeleteBook(request);
            // End snippet
        }

        public async Task UpdateBookAsync1()
        {
            // Snippet: UpdateBookAsync(BookName,Book,CallSettings)
            // Additional: UpdateBookAsync(BookName,Book,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            // Make the request
            Book response = await libraryServiceClient.UpdateBookAsync(name, book);
            // End snippet
        }

        public void UpdateBook1()
        {
            // Snippet: UpdateBook(BookName,Book,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            // Make the request
            Book response = libraryServiceClient.UpdateBook(name, book);
            // End snippet
        }

        public async Task UpdateBookAsync2()
        {
            // Snippet: UpdateBookAsync(BookName,Book,FieldMask,FieldMask,CallSettings)
            // Additional: UpdateBookAsync(BookName,Book,FieldMask,FieldMask,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            // Make the request
            Book response = await libraryServiceClient.UpdateBookAsync(name, book, updateMask, physicalMask);
            // End snippet
        }

        public void UpdateBook2()
        {
            // Snippet: UpdateBook(BookName,Book,FieldMask,FieldMask,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            // Make the request
            Book response = libraryServiceClient.UpdateBook(name, book, updateMask, physicalMask);
            // End snippet
        }

        public async Task UpdateBookAsync_RequestObject()
        {
            // Snippet: UpdateBookAsync(UpdateBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                Book = new Book(),
            };
            // Make the request
            Book response = await libraryServiceClient.UpdateBookAsync(request);
            // End snippet
        }

        public void UpdateBook_RequestObject()
        {
            // Snippet: UpdateBook(UpdateBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            UpdateBookRequest request = new UpdateBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                Book = new Book(),
            };
            // Make the request
            Book response = libraryServiceClient.UpdateBook(request);
            // End snippet
        }

        public async Task MoveBookAsync()
        {
            // Snippet: MoveBookAsync(BookName,ShelfName,CallSettings)
            // Additional: MoveBookAsync(BookName,ShelfName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Book response = await libraryServiceClient.MoveBookAsync(name, otherShelfName);
            // End snippet
        }

        public void MoveBook()
        {
            // Snippet: MoveBook(BookName,ShelfName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            ShelfName otherShelfName = new ShelfName("[SHELF_ID]");
            // Make the request
            Book response = libraryServiceClient.MoveBook(name, otherShelfName);
            // End snippet
        }

        public async Task MoveBookAsync_RequestObject()
        {
            // Snippet: MoveBookAsync(MoveBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            MoveBookRequest request = new MoveBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                OtherShelfNameAsShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            Book response = await libraryServiceClient.MoveBookAsync(request);
            // End snippet
        }

        public void MoveBook_RequestObject()
        {
            // Snippet: MoveBook(MoveBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            MoveBookRequest request = new MoveBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                OtherShelfNameAsShelfName = new ShelfName("[SHELF_ID]"),
            };
            // Make the request
            Book response = libraryServiceClient.MoveBook(request);
            // End snippet
        }

        public async Task ListStringsAsync1()
        {
            // Snippet: ListStringsAsync(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Make the request
            PagedAsyncEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStringsAsync();

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((IResourceName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListStringsResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListStrings1()
        {
            // Snippet: ListStrings(string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Make the request
            PagedEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStrings();

            // Iterate over all response items, lazily performing RPCs as required
            foreach (IResourceName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListStringsResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task ListStringsAsync2()
        {
            // Snippet: ListStringsAsync(IResourceName,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            IResourceName name = new ShelfName("[SHELF_ID]");
            // Make the request
            PagedAsyncEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStringsAsync(name);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((IResourceName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListStringsResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListStrings2()
        {
            // Snippet: ListStrings(IResourceName,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            IResourceName name = new ShelfName("[SHELF_ID]");
            // Make the request
            PagedEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStrings(name);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (IResourceName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListStringsResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task ListStringsAsync_RequestObject()
        {
            // Snippet: ListStringsAsync(ListStringsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ListStringsRequest request = new ListStringsRequest();
            // Make the request
            PagedAsyncEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStringsAsync(request);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((IResourceName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((ListStringsResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void ListStrings_RequestObject()
        {
            // Snippet: ListStrings(ListStringsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ListStringsRequest request = new ListStringsRequest();
            // Make the request
            PagedEnumerable<ListStringsResponse, IResourceName> response =
                libraryServiceClient.ListStrings(request);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (IResourceName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (ListStringsResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (IResourceName item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<IResourceName> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (IResourceName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task AddCommentsAsync()
        {
            // Snippet: AddCommentsAsync(string,IEnumerable<Comment>,CallSettings)
            // Additional: AddCommentsAsync(string,IEnumerable<Comment>,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedName = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            IEnumerable<Comment> comments = new[]
            {
                new Comment
                {
                    Comment = ByteString.CopyFromUtf8(""),
                    Stage = Comment.Types.Stage.Unset,
                    Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                },
            };
            // Make the request
            await libraryServiceClient.AddCommentsAsync(formattedName, comments);
            // End snippet
        }

        public void AddComments()
        {
            // Snippet: AddComments(string,IEnumerable<Comment>,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedName = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            IEnumerable<Comment> comments = new[]
            {
                new Comment
                {
                    Comment = ByteString.CopyFromUtf8(""),
                    Stage = Comment.Types.Stage.Unset,
                    Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                },
            };
            // Make the request
            libraryServiceClient.AddComments(formattedName, comments);
            // End snippet
        }

        public async Task AddCommentsAsync_RequestObject()
        {
            // Snippet: AddCommentsAsync(AddCommentsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            AddCommentsRequest request = new AddCommentsRequest
            {
                Name = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Comments = {
                               new Comment
                               {
                                   Comment = ByteString.CopyFromUtf8(""),
                                   Stage = Comment.Types.Stage.Unset,
                                   Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                               },
                           },
            };
            // Make the request
            await libraryServiceClient.AddCommentsAsync(request);
            // End snippet
        }

        public void AddComments_RequestObject()
        {
            // Snippet: AddComments(AddCommentsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            AddCommentsRequest request = new AddCommentsRequest
            {
                Name = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Comments = {
                               new Comment
                               {
                                   Comment = ByteString.CopyFromUtf8(""),
                                   Stage = Comment.Types.Stage.Unset,
                                   Alignment = SomeMessage2.Types.SomeMessage3.Types.Alignment.Char,
                               },
                           },
            };
            // Make the request
            libraryServiceClient.AddComments(request);
            // End snippet
        }

        public async Task GetBookFromArchiveAsync()
        {
            // Snippet: GetBookFromArchiveAsync(ArchivedBookName,CallSettings)
            // Additional: GetBookFromArchiveAsync(ArchivedBookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            ArchivedBookName name = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]");
            // Make the request
            BookFromArchive response = await libraryServiceClient.GetBookFromArchiveAsync(name);
            // End snippet
        }

        public void GetBookFromArchive()
        {
            // Snippet: GetBookFromArchive(ArchivedBookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            ArchivedBookName name = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]");
            // Make the request
            BookFromArchive response = libraryServiceClient.GetBookFromArchive(name);
            // End snippet
        }

        public async Task GetBookFromArchiveAsync_RequestObject()
        {
            // Snippet: GetBookFromArchiveAsync(GetBookFromArchiveRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetBookFromArchiveRequest request = new GetBookFromArchiveRequest
            {
                ArchivedBookName = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]"),
            };
            // Make the request
            BookFromArchive response = await libraryServiceClient.GetBookFromArchiveAsync(request);
            // End snippet
        }

        public void GetBookFromArchive_RequestObject()
        {
            // Snippet: GetBookFromArchive(GetBookFromArchiveRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetBookFromArchiveRequest request = new GetBookFromArchiveRequest
            {
                ArchivedBookName = new ArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]"),
            };
            // Make the request
            BookFromArchive response = libraryServiceClient.GetBookFromArchive(request);
            // End snippet
        }

        public async Task GetBookFromAnywhereAsync()
        {
            // Snippet: GetBookFromAnywhereAsync(BookNameOneof,BookName,CallSettings)
            // Additional: GetBookFromAnywhereAsync(BookNameOneof,BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookNameOneof name = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            BookName altBookName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            BookFromAnywhere response = await libraryServiceClient.GetBookFromAnywhereAsync(name, altBookName);
            // End snippet
        }

        public void GetBookFromAnywhere()
        {
            // Snippet: GetBookFromAnywhere(BookNameOneof,BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookNameOneof name = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            BookName altBookName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            BookFromAnywhere response = libraryServiceClient.GetBookFromAnywhere(name, altBookName);
            // End snippet
        }

        public async Task GetBookFromAnywhereAsync_RequestObject()
        {
            // Snippet: GetBookFromAnywhereAsync(GetBookFromAnywhereRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetBookFromAnywhereRequest request = new GetBookFromAnywhereRequest
            {
                BookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
                AltBookNameAsBookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
            };
            // Make the request
            BookFromAnywhere response = await libraryServiceClient.GetBookFromAnywhereAsync(request);
            // End snippet
        }

        public void GetBookFromAnywhere_RequestObject()
        {
            // Snippet: GetBookFromAnywhere(GetBookFromAnywhereRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetBookFromAnywhereRequest request = new GetBookFromAnywhereRequest
            {
                BookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
                AltBookNameAsBookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
            };
            // Make the request
            BookFromAnywhere response = libraryServiceClient.GetBookFromAnywhere(request);
            // End snippet
        }

        public async Task UpdateBookIndexAsync()
        {
            // Snippet: UpdateBookIndexAsync(BookName,string,IDictionary<string, string>,CallSettings)
            // Additional: UpdateBookIndexAsync(BookName,string,IDictionary<string, string>,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            string indexName = "default index";
            IDictionary<string, string> indexMap = new Dictionary<string, string>
            {
                { "default_key", "" },
            };
            // Make the request
            await libraryServiceClient.UpdateBookIndexAsync(name, indexName, indexMap);
            // End snippet
        }

        public void UpdateBookIndex()
        {
            // Snippet: UpdateBookIndex(BookName,string,IDictionary<string, string>,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            string indexName = "default index";
            IDictionary<string, string> indexMap = new Dictionary<string, string>
            {
                { "default_key", "" },
            };
            // Make the request
            libraryServiceClient.UpdateBookIndex(name, indexName, indexMap);
            // End snippet
        }

        public async Task UpdateBookIndexAsync_RequestObject()
        {
            // Snippet: UpdateBookIndexAsync(UpdateBookIndexRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            UpdateBookIndexRequest request = new UpdateBookIndexRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                IndexName = "default index",
                IndexMap = {
                               { "default_key", "" },
                           },
            };
            // Make the request
            await libraryServiceClient.UpdateBookIndexAsync(request);
            // End snippet
        }

        public void UpdateBookIndex_RequestObject()
        {
            // Snippet: UpdateBookIndex(UpdateBookIndexRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            UpdateBookIndexRequest request = new UpdateBookIndexRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                IndexName = "default index",
                IndexMap = {
                               { "default_key", "" },
                           },
            };
            // Make the request
            libraryServiceClient.UpdateBookIndex(request);
            // End snippet
        }

        public async Task DiscussBook()
        {
            // Snippet: DiscussBook(CallSettings,BidirectionalStreamingSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize streaming call, retrieving the stream object
            LibraryServiceClient.DiscussBookStream duplexStream = libraryServiceClient.DiscussBook();

            // Sending requests and retrieving responses can be arbitrarily interleaved.
            // Exact sequence will depend on client/server behavior.

            // Create task to do something with responses from server
            Task.Run(async () =>
            {
                IAsyncEnumerator<Comment> responseStream = duplexStream.ResponseStream;
                while (await responseStream.MoveNext())
                {
                    Comment response = responseStream.Current;
                    // Do something with streamed response
                }
                // The response stream has completed
            });

            // Send requests to the server
            bool done = false;
            while (!done)
            {
                // Initialize a request
                DiscussBookRequest request = new DiscussBookRequest
                {
                    Name = "",
                };
                // Stream a request to the server
                await duplexStream.WriteAsync(request);

                // Set "done" to true when sending requests is complete
            }
            // Complete writing requests to the stream
            await duplexStream.WriteCompleteAsync();
            // End snippet
        }

        public async Task FindRelatedBooksAsync()
        {
            // Snippet: FindRelatedBooksAsync(IEnumerable<BookName>,IEnumerable<ShelfName>,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            IEnumerable<BookName> names = new[]
            {
                new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            IEnumerable<ShelfName> shelves = new List<ShelfName>();
            // Make the request
            PagedAsyncEnumerable<FindRelatedBooksResponse, BookName> response =
                libraryServiceClient.FindRelatedBooksAsync(names, shelves);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((BookName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((FindRelatedBooksResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<BookName> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (BookName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void FindRelatedBooks()
        {
            // Snippet: FindRelatedBooks(IEnumerable<BookName>,IEnumerable<ShelfName>,string,int?,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            IEnumerable<BookName> names = new[]
            {
                new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            IEnumerable<ShelfName> shelves = new List<ShelfName>();
            // Make the request
            PagedEnumerable<FindRelatedBooksResponse, BookName> response =
                libraryServiceClient.FindRelatedBooks(names, shelves);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (BookName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (FindRelatedBooksResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<BookName> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (BookName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task FindRelatedBooksAsync_RequestObject()
        {
            // Snippet: FindRelatedBooksAsync(FindRelatedBooksRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            FindRelatedBooksRequest request = new FindRelatedBooksRequest
            {
                BookNames = {
                                new BookName("[SHELF_ID]", "[BOOK_ID]"),
                            },
                ShelvesAsShelfNames = { },
            };
            // Make the request
            PagedAsyncEnumerable<FindRelatedBooksResponse, BookName> response =
                libraryServiceClient.FindRelatedBooksAsync(request);

            // Iterate over all response items, lazily performing RPCs as required
            await response.ForEachAsync((BookName item) =>
            {
                // Do something with each item
                Console.WriteLine(item);
            });

            // Or iterate over pages (of server-defined size), performing one RPC per page
            await response.AsRawResponses().ForEachAsync((FindRelatedBooksResponse page) =>
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            });

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<BookName> singlePage = await response.ReadPageAsync(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (BookName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public void FindRelatedBooks_RequestObject()
        {
            // Snippet: FindRelatedBooks(FindRelatedBooksRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            FindRelatedBooksRequest request = new FindRelatedBooksRequest
            {
                BookNames = {
                                new BookName("[SHELF_ID]", "[BOOK_ID]"),
                            },
                ShelvesAsShelfNames = { },
            };
            // Make the request
            PagedEnumerable<FindRelatedBooksResponse, BookName> response =
                libraryServiceClient.FindRelatedBooks(request);

            // Iterate over all response items, lazily performing RPCs as required
            foreach (BookName item in response)
            {
                // Do something with each item
                Console.WriteLine(item);
            }

            // Or iterate over pages (of server-defined size), performing one RPC per page
            foreach (FindRelatedBooksResponse page in response.AsRawResponses())
            {
                // Do something with each page of items
                Console.WriteLine("A page of results:");
                foreach (BookName item in page)
                {
                    Console.WriteLine(item);
                }
            }

            // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
            int pageSize = 10;
            Page<BookName> singlePage = response.ReadPage(pageSize);
            // Do something with the page of items
            Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
            foreach (BookName item in singlePage)
            {
                Console.WriteLine(item);
            }
            // Store the pageToken, for when the next page is required.
            string nextPageToken = singlePage.NextPageToken;
            // End snippet
        }

        public async Task AddTagAsync()
        {
            // Snippet: AddTagAsync(string,string,CallSettings)
            // Additional: AddTagAsync(string,string,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedResource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            string tag = "";
            // Make the request
            AddTagResponse response = await libraryServiceClient.AddTagAsync(formattedResource, tag);
            // End snippet
        }

        public void AddTag()
        {
            // Snippet: AddTag(string,string,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            string tag = "";
            // Make the request
            AddTagResponse response = libraryServiceClient.AddTag(formattedResource, tag);
            // End snippet
        }

        public async Task AddTagAsync_RequestObject()
        {
            // Snippet: AddTagAsync(AddTagRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            AddTagRequest request = new AddTagRequest
            {
                Resource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Tag = "",
            };
            // Make the request
            AddTagResponse response = await libraryServiceClient.AddTagAsync(request);
            // End snippet
        }

        public void AddTag_RequestObject()
        {
            // Snippet: AddTag(AddTagRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            AddTagRequest request = new AddTagRequest
            {
                Resource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Tag = "",
            };
            // Make the request
            AddTagResponse response = libraryServiceClient.AddTag(request);
            // End snippet
        }

        public async Task AddLabelAsync()
        {
            // Snippet: AddLabelAsync(string,string,CallSettings)
            // Additional: AddLabelAsync(string,string,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            string formattedResource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            string label = "";
            // Make the request
            AddLabelResponse response = await libraryServiceClient.AddLabelAsync(formattedResource, label);
            // End snippet
        }

        public void AddLabel()
        {
            // Snippet: AddLabel(string,string,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            string formattedResource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString();
            string label = "";
            // Make the request
            AddLabelResponse response = libraryServiceClient.AddLabel(formattedResource, label);
            // End snippet
        }

        public async Task AddLabelAsync_RequestObject()
        {
            // Snippet: AddLabelAsync(AddLabelRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            AddLabelRequest request = new AddLabelRequest
            {
                Resource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Label = "",
            };
            // Make the request
            AddLabelResponse response = await libraryServiceClient.AddLabelAsync(request);
            // End snippet
        }

        public void AddLabel_RequestObject()
        {
            // Snippet: AddLabel(AddLabelRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            AddLabelRequest request = new AddLabelRequest
            {
                Resource = new BookName("[SHELF_ID]", "[BOOK_ID]").ToString(),
                Label = "",
            };
            // Make the request
            AddLabelResponse response = libraryServiceClient.AddLabel(request);
            // End snippet
        }

        public async Task GetBigBookAsync()
        {
            // Snippet: GetBigBookAsync(BookName,CallSettings)
            // Additional: GetBigBookAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation<Book, GetBigBookMetadata> response =
                await libraryServiceClient.GetBigBookAsync(name);

            // Poll until the returned long-running operation is complete
            Operation<Book, GetBigBookMetadata> completedResponse =
                await response.PollUntilCompletedAsync();
            // Retrieve the operation result
            Book result = completedResponse.Result;

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Book, GetBigBookMetadata> retrievedResponse =
                await libraryServiceClient.PollOnceGetBigBookAsync(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // If it has completed, then access the result
                Book retrievedResult = retrievedResponse.Result;
            }
            // End snippet
        }

        public void GetBigBook()
        {
            // Snippet: GetBigBook(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation<Book, GetBigBookMetadata> response =
                libraryServiceClient.GetBigBook(name);

            // Poll until the returned long-running operation is complete
            Operation<Book, GetBigBookMetadata> completedResponse =
                response.PollUntilCompleted();
            // Retrieve the operation result
            Book result = completedResponse.Result;

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Book, GetBigBookMetadata> retrievedResponse =
                libraryServiceClient.PollOnceGetBigBook(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // If it has completed, then access the result
                Book retrievedResult = retrievedResponse.Result;
            }
            // End snippet
        }

        public async Task GetBigBookAsync_RequestObject()
        {
            // Snippet: GetBigBookAsync(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Operation<Book, GetBigBookMetadata> response =
                await libraryServiceClient.GetBigBookAsync(request);

            // Poll until the returned long-running operation is complete
            Operation<Book, GetBigBookMetadata> completedResponse =
                await response.PollUntilCompletedAsync();
            // Retrieve the operation result
            Book result = completedResponse.Result;

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Book, GetBigBookMetadata> retrievedResponse =
                await libraryServiceClient.PollOnceGetBigBookAsync(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // If it has completed, then access the result
                Book retrievedResult = retrievedResponse.Result;
            }
            // End snippet
        }

        public void GetBigBook_RequestObject()
        {
            // Snippet: GetBigBook(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Operation<Book, GetBigBookMetadata> response =
                libraryServiceClient.GetBigBook(request);

            // Poll until the returned long-running operation is complete
            Operation<Book, GetBigBookMetadata> completedResponse =
                response.PollUntilCompleted();
            // Retrieve the operation result
            Book result = completedResponse.Result;

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Book, GetBigBookMetadata> retrievedResponse =
                libraryServiceClient.PollOnceGetBigBook(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // If it has completed, then access the result
                Book retrievedResult = retrievedResponse.Result;
            }
            // End snippet
        }

        public async Task GetBigNothingAsync()
        {
            // Snippet: GetBigNothingAsync(BookName,CallSettings)
            // Additional: GetBigNothingAsync(BookName,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation<Empty, GetBigBookMetadata> response =
                await libraryServiceClient.GetBigNothingAsync(name);

            // Poll until the returned long-running operation is complete
            Operation<Empty, GetBigBookMetadata> completedResponse =
                await response.PollUntilCompletedAsync();
            // The long-running operation is now complete.

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Empty, GetBigBookMetadata> retrievedResponse =
                await libraryServiceClient.PollOnceGetBigNothingAsync(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // The long-running operation is now complete.
            }
            // End snippet
        }

        public void GetBigNothing()
        {
            // Snippet: GetBigNothing(BookName,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            BookName name = new BookName("[SHELF_ID]", "[BOOK_ID]");
            // Make the request
            Operation<Empty, GetBigBookMetadata> response =
                libraryServiceClient.GetBigNothing(name);

            // Poll until the returned long-running operation is complete
            Operation<Empty, GetBigBookMetadata> completedResponse =
                response.PollUntilCompleted();
            // The long-running operation is now complete.

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Empty, GetBigBookMetadata> retrievedResponse =
                libraryServiceClient.PollOnceGetBigNothing(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // The long-running operation is now complete.
            }
            // End snippet
        }

        public async Task GetBigNothingAsync_RequestObject()
        {
            // Snippet: GetBigNothingAsync(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Operation<Empty, GetBigBookMetadata> response =
                await libraryServiceClient.GetBigNothingAsync(request);

            // Poll until the returned long-running operation is complete
            Operation<Empty, GetBigBookMetadata> completedResponse =
                await response.PollUntilCompletedAsync();
            // The long-running operation is now complete.

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Empty, GetBigBookMetadata> retrievedResponse =
                await libraryServiceClient.PollOnceGetBigNothingAsync(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // The long-running operation is now complete.
            }
            // End snippet
        }

        public void GetBigNothing_RequestObject()
        {
            // Snippet: GetBigNothing(GetBookRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            GetBookRequest request = new GetBookRequest
            {
                BookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
            };
            // Make the request
            Operation<Empty, GetBigBookMetadata> response =
                libraryServiceClient.GetBigNothing(request);

            // Poll until the returned long-running operation is complete
            Operation<Empty, GetBigBookMetadata> completedResponse =
                response.PollUntilCompleted();
            // The long-running operation is now complete.

            // Or get the name of the operation
            string operationName = response.Name;
            // This name can be stored, then the long-running operation retrieved later by name
            Operation<Empty, GetBigBookMetadata> retrievedResponse =
                libraryServiceClient.PollOnceGetBigNothing(operationName);
            // Check if the retrieved long-running operation has completed
            if (retrievedResponse.IsCompleted)
            {
                // The long-running operation is now complete.
            }
            // End snippet
        }

        public async Task TestOptionalRequiredFlatteningParamsAsync1()
        {
            // Snippet: TestOptionalRequiredFlatteningParamsAsync(,CallSettings)
            // Additional: TestOptionalRequiredFlatteningParamsAsync(,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = await libraryServiceClient.TestOptionalRequiredFlatteningParamsAsync();
            // End snippet
        }

        public void TestOptionalRequiredFlatteningParams1()
        {
            // Snippet: TestOptionalRequiredFlatteningParams(,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.TestOptionalRequiredFlatteningParams();
            // End snippet
        }

        public async Task TestOptionalRequiredFlatteningParamsAsync2()
        {
            // Snippet: TestOptionalRequiredFlatteningParamsAsync(int,long,float,double,bool,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int,long,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,int?,long?,float?,double?,bool?,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum?,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int?,long?,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,CallSettings)
            // Additional: TestOptionalRequiredFlatteningParamsAsync(int,long,float,double,bool,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int,long,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,int?,long?,float?,double?,bool?,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum?,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int?,long?,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,CancellationToken)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            int requiredSingularInt32 = 0;
            long requiredSingularInt64 = 0L;
            float requiredSingularFloat = 0.0f;
            double requiredSingularDouble = 0.0;
            bool requiredSingularBool = false;
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero;
            string requiredSingularString = "";
            ByteString requiredSingularBytes = ByteString.CopyFromUtf8("");
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage requiredSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage();
            BookName requiredSingularResourceName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            int requiredSingularFixed32 = 0;
            long requiredSingularFixed64 = 0L;
            IEnumerable<int> requiredRepeatedInt32 = new List<int>();
            IEnumerable<long> requiredRepeatedInt64 = new List<long>();
            IEnumerable<float> requiredRepeatedFloat = new List<float>();
            IEnumerable<double> requiredRepeatedDouble = new List<double>();
            IEnumerable<bool> requiredRepeatedBool = new List<bool>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum> requiredRepeatedEnum = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>();
            IEnumerable<string> requiredRepeatedString = new List<string>();
            IEnumerable<ByteString> requiredRepeatedBytes = new List<ByteString>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage> requiredRepeatedMessage = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>();
            IEnumerable<BookName> requiredRepeatedResourceName = new List<BookName>();
            IEnumerable<BookNameOneof> requiredRepeatedResourceNameOneof = new List<BookNameOneof>();
            IEnumerable<int> requiredRepeatedFixed32 = new List<int>();
            IEnumerable<long> requiredRepeatedFixed64 = new List<long>();
            IDictionary<int, string> requiredMap = new Dictionary<int, string>();
            int optionalSingularInt32 = 0;
            long optionalSingularInt64 = 0L;
            float optionalSingularFloat = 0.0f;
            double optionalSingularDouble = 0.0;
            bool optionalSingularBool = false;
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero;
            string optionalSingularString = "";
            ByteString optionalSingularBytes = ByteString.CopyFromUtf8("");
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage optionalSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage();
            BookName optionalSingularResourceName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            BookNameOneof optionalSingularResourceNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            int optionalSingularFixed32 = 0;
            long optionalSingularFixed64 = 0L;
            IEnumerable<int> optionalRepeatedInt32 = new List<int>();
            IEnumerable<long> optionalRepeatedInt64 = new List<long>();
            IEnumerable<float> optionalRepeatedFloat = new List<float>();
            IEnumerable<double> optionalRepeatedDouble = new List<double>();
            IEnumerable<bool> optionalRepeatedBool = new List<bool>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum> optionalRepeatedEnum = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>();
            IEnumerable<string> optionalRepeatedString = new List<string>();
            IEnumerable<ByteString> optionalRepeatedBytes = new List<ByteString>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage> optionalRepeatedMessage = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>();
            IEnumerable<BookName> optionalRepeatedResourceName = new List<BookName>();
            IEnumerable<BookNameOneof> optionalRepeatedResourceNameOneof = new List<BookNameOneof>();
            IEnumerable<int> optionalRepeatedFixed32 = new List<int>();
            IEnumerable<long> optionalRepeatedFixed64 = new List<long>();
            IDictionary<int, string> optionalMap = new Dictionary<int, string>();
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = await libraryServiceClient.TestOptionalRequiredFlatteningParamsAsync(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap);
            // End snippet
        }

        public void TestOptionalRequiredFlatteningParams2()
        {
            // Snippet: TestOptionalRequiredFlatteningParams(int,long,float,double,bool,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int,long,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,int?,long?,float?,double?,bool?,TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum?,string,ByteString,TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage,BookName,BookNameOneof,int?,long?,IEnumerable<int>,IEnumerable<long>,IEnumerable<float>,IEnumerable<double>,IEnumerable<bool>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>,IEnumerable<string>,IEnumerable<ByteString>,IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>,IEnumerable<BookName>,IEnumerable<BookNameOneof>,IEnumerable<int>,IEnumerable<long>,IDictionary<int, string>,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            int requiredSingularInt32 = 0;
            long requiredSingularInt64 = 0L;
            float requiredSingularFloat = 0.0f;
            double requiredSingularDouble = 0.0;
            bool requiredSingularBool = false;
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero;
            string requiredSingularString = "";
            ByteString requiredSingularBytes = ByteString.CopyFromUtf8("");
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage requiredSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage();
            BookName requiredSingularResourceName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            int requiredSingularFixed32 = 0;
            long requiredSingularFixed64 = 0L;
            IEnumerable<int> requiredRepeatedInt32 = new List<int>();
            IEnumerable<long> requiredRepeatedInt64 = new List<long>();
            IEnumerable<float> requiredRepeatedFloat = new List<float>();
            IEnumerable<double> requiredRepeatedDouble = new List<double>();
            IEnumerable<bool> requiredRepeatedBool = new List<bool>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum> requiredRepeatedEnum = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>();
            IEnumerable<string> requiredRepeatedString = new List<string>();
            IEnumerable<ByteString> requiredRepeatedBytes = new List<ByteString>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage> requiredRepeatedMessage = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>();
            IEnumerable<BookName> requiredRepeatedResourceName = new List<BookName>();
            IEnumerable<BookNameOneof> requiredRepeatedResourceNameOneof = new List<BookNameOneof>();
            IEnumerable<int> requiredRepeatedFixed32 = new List<int>();
            IEnumerable<long> requiredRepeatedFixed64 = new List<long>();
            IDictionary<int, string> requiredMap = new Dictionary<int, string>();
            int optionalSingularInt32 = 0;
            long optionalSingularInt64 = 0L;
            float optionalSingularFloat = 0.0f;
            double optionalSingularDouble = 0.0;
            bool optionalSingularBool = false;
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero;
            string optionalSingularString = "";
            ByteString optionalSingularBytes = ByteString.CopyFromUtf8("");
            TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage optionalSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage();
            BookName optionalSingularResourceName = new BookName("[SHELF_ID]", "[BOOK_ID]");
            BookNameOneof optionalSingularResourceNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]"));
            int optionalSingularFixed32 = 0;
            long optionalSingularFixed64 = 0L;
            IEnumerable<int> optionalRepeatedInt32 = new List<int>();
            IEnumerable<long> optionalRepeatedInt64 = new List<long>();
            IEnumerable<float> optionalRepeatedFloat = new List<float>();
            IEnumerable<double> optionalRepeatedDouble = new List<double>();
            IEnumerable<bool> optionalRepeatedBool = new List<bool>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum> optionalRepeatedEnum = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum>();
            IEnumerable<string> optionalRepeatedString = new List<string>();
            IEnumerable<ByteString> optionalRepeatedBytes = new List<ByteString>();
            IEnumerable<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage> optionalRepeatedMessage = new List<TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage>();
            IEnumerable<BookName> optionalRepeatedResourceName = new List<BookName>();
            IEnumerable<BookNameOneof> optionalRepeatedResourceNameOneof = new List<BookNameOneof>();
            IEnumerable<int> optionalRepeatedFixed32 = new List<int>();
            IEnumerable<long> optionalRepeatedFixed64 = new List<long>();
            IDictionary<int, string> optionalMap = new Dictionary<int, string>();
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.TestOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap);
            // End snippet
        }

        public async Task TestOptionalRequiredFlatteningParamsAsync_RequestObject()
        {
            // Snippet: TestOptionalRequiredFlatteningParamsAsync(TestOptionalRequiredFlatteningParamsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = await LibraryServiceClient.CreateAsync();
            // Initialize request argument(s)
            TestOptionalRequiredFlatteningParamsRequest request = new TestOptionalRequiredFlatteningParamsRequest
            {
                RequiredSingularInt32 = 0,
                RequiredSingularInt64 = 0L,
                RequiredSingularFloat = 0.0f,
                RequiredSingularDouble = 0.0,
                RequiredSingularBool = false,
                RequiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero,
                RequiredSingularString = "",
                RequiredSingularBytes = ByteString.CopyFromUtf8(""),
                RequiredSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage(),
                RequiredSingularResourceNameAsBookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                RequiredSingularResourceNameOneofAsBookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
                RequiredSingularFixed32 = 0,
                RequiredSingularFixed64 = 0L,
                RequiredRepeatedInt32 = { },
                RequiredRepeatedInt64 = { },
                RequiredRepeatedFloat = { },
                RequiredRepeatedDouble = { },
                RequiredRepeatedBool = { },
                RequiredRepeatedEnum = { },
                RequiredRepeatedString = { },
                RequiredRepeatedBytes = { },
                RequiredRepeatedMessage = { },
                RequiredRepeatedResourceNameAsBookNames = { },
                RequiredRepeatedResourceNameOneofAsBookNameOneofs = { },
                RequiredRepeatedFixed32 = { },
                RequiredRepeatedFixed64 = { },
                RequiredMap = { },
            };
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = await libraryServiceClient.TestOptionalRequiredFlatteningParamsAsync(request);
            // End snippet
        }

        public void TestOptionalRequiredFlatteningParams_RequestObject()
        {
            // Snippet: TestOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest,CallSettings)
            // Create client
            LibraryServiceClient libraryServiceClient = LibraryServiceClient.Create();
            // Initialize request argument(s)
            TestOptionalRequiredFlatteningParamsRequest request = new TestOptionalRequiredFlatteningParamsRequest
            {
                RequiredSingularInt32 = 0,
                RequiredSingularInt64 = 0L,
                RequiredSingularFloat = 0.0f,
                RequiredSingularDouble = 0.0,
                RequiredSingularBool = false,
                RequiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.Types.InnerEnum.Zero,
                RequiredSingularString = "",
                RequiredSingularBytes = ByteString.CopyFromUtf8(""),
                RequiredSingularMessage = new TestOptionalRequiredFlatteningParamsRequest.Types.InnerMessage(),
                RequiredSingularResourceNameAsBookName = new BookName("[SHELF_ID]", "[BOOK_ID]"),
                RequiredSingularResourceNameOneofAsBookNameOneof = BookNameOneof.From(new BookName("[SHELF_ID]", "[BOOK_ID]")),
                RequiredSingularFixed32 = 0,
                RequiredSingularFixed64 = 0L,
                RequiredRepeatedInt32 = { },
                RequiredRepeatedInt64 = { },
                RequiredRepeatedFloat = { },
                RequiredRepeatedDouble = { },
                RequiredRepeatedBool = { },
                RequiredRepeatedEnum = { },
                RequiredRepeatedString = { },
                RequiredRepeatedBytes = { },
                RequiredRepeatedMessage = { },
                RequiredRepeatedResourceNameAsBookNames = { },
                RequiredRepeatedResourceNameOneofAsBookNameOneofs = { },
                RequiredRepeatedFixed32 = { },
                RequiredRepeatedFixed64 = { },
                RequiredMap = { },
            };
            // Make the request
            TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.TestOptionalRequiredFlatteningParams(request);
            // End snippet
        }

    }
}

