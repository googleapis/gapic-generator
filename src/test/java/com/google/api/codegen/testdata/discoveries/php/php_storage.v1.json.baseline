
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$service->bucketAccessControls->delete($bucket, $entity);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$response = $service->bucketAccessControls->get($bucket, $entity);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * Name of a bucket.
$bucket = '';


$Google_Service_Storage_BucketAccessControlBody = new Google_Service_Storage_BucketAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketAccessControlBody` object.


$response = $service->bucketAccessControls->insert($bucket, $Google_Service_Storage_BucketAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `listBucketAccessControls` method:

// * Name of a bucket.
$bucket = '';


$response = $service->bucketAccessControls->listBucketAccessControls($bucket);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_BucketAccessControlBody = new Google_Service_Storage_BucketAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketAccessControlBody` object to be changed.


$response = $service->bucketAccessControls->patch($bucket, $entity, $Google_Service_Storage_BucketAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_BucketAccessControlBody = new Google_Service_Storage_BucketAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketAccessControlBody` object.


$response = $service->bucketAccessControls->update($bucket, $entity, $Google_Service_Storage_BucketAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Name of a bucket.
$bucket = '';


$service->buckets->delete($bucket);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of a bucket.
$bucket = '';


$response = $service->buckets->get($bucket);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * A valid API project identifier.
$project = '';


$Google_Service_Storage_BucketBody = new Google_Service_Storage_Bucket($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketBody` object.


$response = $service->buckets->insert($project, $Google_Service_Storage_BucketBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `listBuckets` method:

// * A valid API project identifier.
$project = '';


$optParams = array();
do {
  $response = $service->buckets->listBuckets($project, $optParams);

  foreach ($response['items'] as $bucket) {
    // TODO: Change code below to process each `bucket` resource:
    echo '<pre>', var_export($bucket, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// * Name of a bucket.
$bucket = '';


$Google_Service_Storage_BucketBody = new Google_Service_Storage_Bucket($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketBody` object to be changed.


$response = $service->buckets->patch($bucket, $Google_Service_Storage_BucketBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * Name of a bucket.
$bucket = '';


$Google_Service_Storage_BucketBody = new Google_Service_Storage_Bucket($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_BucketBody` object.


$response = $service->buckets->update($bucket, $Google_Service_Storage_BucketBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


$Google_Service_Storage_ChannelBody = new Google_Service_Storage_Channel($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ChannelBody` object.


$service->channels->stop($Google_Service_Storage_ChannelBody);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$service->defaultObjectAccessControls->delete($bucket, $entity);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$response = $service->defaultObjectAccessControls->get($bucket, $entity);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * Name of a bucket.
$bucket = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object.


$response = $service->defaultObjectAccessControls->insert($bucket, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `listDefaultObjectAccessControls` method:

// * Name of a bucket.
$bucket = '';


$response = $service->defaultObjectAccessControls->listDefaultObjectAccessControls($bucket);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object to be changed.


$response = $service->defaultObjectAccessControls->patch($bucket, $entity, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object.


$response = $service->defaultObjectAccessControls->update($bucket, $entity, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$service->objectAccessControls->delete($bucket, $object, $entity);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$response = $service->objectAccessControls->get($bucket, $object, $entity);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object.


$response = $service->objectAccessControls->insert($bucket, $object, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `listObjectAccessControls` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$response = $service->objectAccessControls->listObjectAccessControls($bucket, $object);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object to be changed.


$response = $service->objectAccessControls->patch($bucket, $object, $entity, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';


$Google_Service_Storage_ObjectAccessControlBody = new Google_Service_Storage_ObjectAccessControl($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ObjectAccessControlBody` object.


$response = $service->objectAccessControls->update($bucket, $object, $entity, $Google_Service_Storage_ObjectAccessControlBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `compose` method:

// * Name of the bucket in which to store the new object.
$destinationBucket = '';

// * Name of the new object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$destinationObject = '';


$Google_Service_Storage_ComposeRequestBody = new Google_Service_Storage_ComposeRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ComposeRequestBody` object.


$response = $service->objects->compose($destinationBucket, $destinationObject, $Google_Service_Storage_ComposeRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `copy` method:

// * Name of the bucket in which to find the source object.
$sourceBucket = '';

// * Name of the source object. For information about how to URL encode object names to be path safe,
//   see Encoding URI Path Parts.
$sourceObject = '';

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$destinationBucket = '';

// * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
//   object metadata's name value, if any.
$destinationObject = '';


$Google_Service_Storage_StorageObjectBody = new Google_Service_Storage_StorageObject($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_StorageObjectBody` object.


$response = $service->objects->copy($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $Google_Service_Storage_StorageObjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$service->objects->delete($bucket, $object);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$response = $service->objects->get($bucket, $object);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.
$bucket = '';


$Google_Service_Storage_StorageObjectBody = new Google_Service_Storage_StorageObject($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_StorageObjectBody` object.


$response = $service->objects->insert($bucket, $Google_Service_Storage_StorageObjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `listObjects` method:

// * Name of the bucket in which to look for objects.
$bucket = '';


$optParams = array();
do {
  $response = $service->objects->listObjects($bucket, $optParams);

  foreach ($response['items'] as $object) {
    // TODO: Change code below to process each `object` resource:
    echo '<pre>', var_export($object, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$Google_Service_Storage_StorageObjectBody = new Google_Service_Storage_StorageObject($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_StorageObjectBody` object to be changed.


$response = $service->objects->patch($bucket, $object, $Google_Service_Storage_StorageObjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `rewrite` method:

// * Name of the bucket in which to find the source object.
$sourceBucket = '';

// * Name of the source object. For information about how to URL encode object names to be path safe,
//   see Encoding URI Path Parts.
$sourceObject = '';

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.
$destinationBucket = '';

// * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
//   object metadata's name value, if any. For information about how to URL encode object names to be
//   path safe, see Encoding URI Path Parts.
$destinationObject = '';


$Google_Service_Storage_StorageObjectBody = new Google_Service_Storage_StorageObject($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_StorageObjectBody` object.


$response = $service->objects->rewrite($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $Google_Service_Storage_StorageObjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';


$Google_Service_Storage_StorageObjectBody = new Google_Service_Storage_StorageObject($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_StorageObjectBody` object.


$response = $service->objects->update($bucket, $object, $Google_Service_Storage_StorageObjectBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Storage service object for interacting with the API.
$service = new Google_Service_Storage($client);


// TODO: Change placeholders below to desired parameter values for the `watchAll` method:

// * Name of the bucket in which to look for objects.
$bucket = '';


$Google_Service_Storage_ChannelBody = new Google_Service_Storage_Channel($client);
// TODO: Assign values to desired properties of the `$Google_Service_Storage_ChannelBody` object.


$response = $service->objects->watchAll($bucket, $Google_Service_Storage_ChannelBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
