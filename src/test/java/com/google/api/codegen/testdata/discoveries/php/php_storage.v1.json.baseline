
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$service->bucketAccessControls->delete($bucket, $entity);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$response = $service->bucketAccessControls->get($bucket, $entity);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_BucketAccessControl();

$response = $service->bucketAccessControls->insert($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

$response = $service->bucketAccessControls->listBucketAccessControls($bucket);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Storage_BucketAccessControl();

$response = $service->bucketAccessControls->patch($bucket, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Storage_BucketAccessControl();

$response = $service->bucketAccessControls->update($bucket, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

$service->buckets->delete($bucket);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

$response = $service->buckets->get($bucket);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// A valid API project identifier.
$project = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_Bucket();

$response = $service->buckets->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// A valid API project identifier.
$project = '';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->buckets->listBuckets($project, $optParams);

  foreach ($response['items'] as $bucket) {
    // TODO: Change code below to process each `bucket` resource:
    echo '<pre>', var_export($bucket, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Storage_Bucket();

$response = $service->buckets->patch($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Storage_Bucket();

$response = $service->buckets->update($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_Channel();

$service->channels->stop($requestBody);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$service->defaultObjectAccessControls->delete($bucket, $entity);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$response = $service->defaultObjectAccessControls->get($bucket, $entity);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->defaultObjectAccessControls->insert($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

$response = $service->defaultObjectAccessControls->listDefaultObjectAccessControls($bucket);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->defaultObjectAccessControls->patch($bucket, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->defaultObjectAccessControls->update($bucket, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$service->objectAccessControls->delete($bucket, $object, $entity);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

$response = $service->objectAccessControls->get($bucket, $object, $entity);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->objectAccessControls->insert($bucket, $object, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

$response = $service->objectAccessControls->listObjectAccessControls($bucket, $object);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->objectAccessControls->patch($bucket, $object, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of a bucket.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
// group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Storage_ObjectAccessControl();

$response = $service->objectAccessControls->update($bucket, $object, $entity, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to store the new object.
$destinationBucket = '';  // TODO: Update placeholder value.

// Name of the new object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$destinationObject = '';  // TODO: Update placeholder value.

$optParams = [];

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_ComposeRequest();

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->objects->compose($destinationBucket, $destinationObject, $requestBody, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to find the source object.
$sourceBucket = '';  // TODO: Update placeholder value.

// Name of the source object. For information about how to URL encode object names to be path safe,
// see Encoding URI Path Parts.
$sourceObject = '';  // TODO: Update placeholder value.

// Name of the bucket in which to store the new object. Overrides the provided object metadata's
// bucket value, if any.For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$destinationBucket = '';  // TODO: Update placeholder value.

// Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
// object metadata's name value, if any.
$destinationObject = '';  // TODO: Update placeholder value.

$optParams = [];

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_StorageObject();

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->objects->copy($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $requestBody, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which the object resides.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

$service->objects->delete($bucket, $object);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which the object resides.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

$optParams = [];

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->objects->get($bucket, $object, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to store the new object. Overrides the provided object metadata's
// bucket value, if any.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_StorageObject();

// TODO: Add desired media content for upload. For more information, see
// https://developers.google.com/api-client-library/php/guide/media_upload

$response = $service->objects->insert($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to look for objects.
$bucket = '';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->objects->listObjects($bucket, $optParams);

  foreach ($response['items'] as $storageObject) {
    // TODO: Change code below to process each `storageObject` resource:
    echo '<pre>', var_export($storageObject, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which the object resides.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Storage_StorageObject();

$response = $service->objects->patch($bucket, $object, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to find the source object.
$sourceBucket = '';  // TODO: Update placeholder value.

// Name of the source object. For information about how to URL encode object names to be path safe,
// see Encoding URI Path Parts.
$sourceObject = '';  // TODO: Update placeholder value.

// Name of the bucket in which to store the new object. Overrides the provided object metadata's
// bucket value, if any.
$destinationBucket = '';  // TODO: Update placeholder value.

// Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
// object metadata's name value, if any. For information about how to URL encode object names to be
// path safe, see Encoding URI Path Parts.
$destinationObject = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_StorageObject();

$response = $service->objects->rewrite($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which the object resides.
$bucket = '';  // TODO: Update placeholder value.

// Name of the object. For information about how to URL encode object names to be path safe, see
// Encoding URI Path Parts.
$object = '';  // TODO: Update placeholder value.

$optParams = [];

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Storage_StorageObject();

// TODO: To download media content, use:
//
// $optParams['alt'] = 'media';

$response = $service->objects->update($bucket, $object, $requestBody, $optParams);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-StorageSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storage($client);

// Name of the bucket in which to look for objects.
$bucket = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Storage_Channel();

$response = $service->objects->watchAll($bucket, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
