
<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->bucketAccessControls->delete($bucket, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->bucketAccessControls->get($bucket, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$postBody = new Google_Service_Storage_BucketAccessControl($client);

$response = $service->bucketAccessControls->insert($bucket, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$response = $service->bucketAccessControls->listBucketAccessControls($bucket);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_BucketAccessControl($client);

$response = $service->bucketAccessControls->patch($bucket, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_BucketAccessControl($client);

$response = $service->bucketAccessControls->update($bucket, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$response = $service->buckets->delete($bucket);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$response = $service->buckets->get($bucket);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * A valid API project identifier.
$project = '';

$postBody = new Google_Service_Storage_Bucket($client);

$response = $service->buckets->insert($project, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * A valid API project identifier.
$project = '';

$response = $service->buckets->listBuckets($project);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$postBody = new Google_Service_Storage_Bucket($client);

$response = $service->buckets->patch($bucket, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$postBody = new Google_Service_Storage_Bucket($client);

$response = $service->buckets->update($bucket, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);


$postBody = new Google_Service_Storage_Channel($client);

$response = $service->channels->stop($postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->defaultObjectAccessControls->delete($bucket, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->defaultObjectAccessControls->get($bucket, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->defaultObjectAccessControls->insert($bucket, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

$response = $service->defaultObjectAccessControls->listDefaultObjectAccessControls($bucket);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->defaultObjectAccessControls->patch($bucket, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->defaultObjectAccessControls->update($bucket, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->objectAccessControls->delete($bucket, $object, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$response = $service->objectAccessControls->get($bucket, $object, $entity);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->objectAccessControls->insert($bucket, $object, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$response = $service->objectAccessControls->listObjectAccessControls($bucket, $object);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->objectAccessControls->patch($bucket, $object, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of a bucket.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

// * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
//   group-emailAddress, allUsers, or allAuthenticatedUsers.
$entity = '';

$postBody = new Google_Service_Storage_ObjectAccessControl($client);

$response = $service->objectAccessControls->update($bucket, $object, $entity, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to store the new object.
$destinationBucket = '';

// * Name of the new object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$destinationObject = '';

$postBody = new Google_Service_Storage_ComposeRequest($client);

$response = $service->objects->compose($destinationBucket, $destinationObject, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to find the source object.
$sourceBucket = '';

// * Name of the source object. For information about how to URL encode object names to be path safe,
//   see Encoding URI Path Parts.
$sourceObject = '';

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$destinationBucket = '';

// * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
//   object metadata's name value, if any.
$destinationObject = '';

$postBody = new Google_Service_Storage_StorageObject($client);

$response = $service->objects->copy($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$response = $service->objects->delete($bucket, $object);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$response = $service->objects->get($bucket, $object);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.
$bucket = '';

$postBody = new Google_Service_Storage_StorageObject($client);

$response = $service->objects->insert($bucket, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to look for objects.
$bucket = '';

$response = $service->objects->listObjects($bucket);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$postBody = new Google_Service_Storage_StorageObject($client);

$response = $service->objects->patch($bucket, $object, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to find the source object.
$sourceBucket = '';

// * Name of the source object. For information about how to URL encode object names to be path safe,
//   see Encoding URI Path Parts.
$sourceObject = '';

// * Name of the bucket in which to store the new object. Overrides the provided object metadata's
//   bucket value, if any.
$destinationBucket = '';

// * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
//   object metadata's name value, if any. For information about how to URL encode object names to be
//   path safe, see Encoding URI Path Parts.
$destinationObject = '';

$postBody = new Google_Service_Storage_StorageObject($client);

$response = $service->objects->rewrite($sourceBucket, $sourceObject, $destinationBucket, $destinationObject, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which the object resides.
$bucket = '';

// * Name of the object. For information about how to URL encode object names to be path safe, see
//   Encoding URI Path Parts.
$object = '';

$postBody = new Google_Service_Storage_StorageObject($client);

$response = $service->objects->update($bucket, $object, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud Storage JSON API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storage
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Storage service.
$service = new Google_Service_Storage($client);

// * Name of the bucket in which to look for objects.
$bucket = '';

$postBody = new Google_Service_Storage_Channel($client);

$response = $service->objects->watchAll($bucket, $postBody);

