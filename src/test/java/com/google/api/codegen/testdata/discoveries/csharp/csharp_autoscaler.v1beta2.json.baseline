
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";

            // Name of the Autoscaler resource.
            string autoscaler = "{MY-AUTOSCALER}";


            AutoscalersResource.DeleteRequest request = autoscalerService.Autoscalers.Delete(project, zone, autoscaler);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";

            // Name of the Autoscaler resource.
            string autoscaler = "{MY-AUTOSCALER}";


            AutoscalersResource.GetRequest request = autoscalerService.Autoscalers.Get(project, zone, autoscaler);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Autoscaler response = request.Execute();
            // Data.Autoscaler response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";


            Data.Autoscaler requestBody = new Data.Autoscaler();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AutoscalersResource.InsertRequest request = autoscalerService.Autoscalers.Insert(requestBody, project, zone);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";


            AutoscalersResource.ListRequest request = autoscalerService.Autoscalers.List(project, zone);

            Data.AutoscalerListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Autoscaler autoscaler in response.Items)
                {
                    // TODO: Change code below to process each `autoscaler` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(autoscaler));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";

            // Name of the Autoscaler resource.
            string autoscaler = "{MY-AUTOSCALER}";


            Data.Autoscaler requestBody = new Data.Autoscaler();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            AutoscalersResource.PatchRequest request = autoscalerService.Autoscalers.Patch(requestBody, project, zone, autoscaler);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // Project ID of Autoscaler resource.
            string project = "{MY-PROJECT}";

            // Zone name of Autoscaler resource.
            string zone = "{MY-ZONE}";

            // Name of the Autoscaler resource.
            string autoscaler = "{MY-AUTOSCALER}";


            Data.Autoscaler requestBody = new Data.Autoscaler();
            // TODO: Assign values to desired properties of the `requestBody` object.


            AutoscalersResource.UpdateRequest request = autoscalerService.Autoscalers.Update(requestBody, project, zone, autoscaler);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // project
            string project = "{MY-PROJECT}";

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
            // zone
            string zone = "{MY-ZONE}";  // ex: "us-central1-f"
=======
            string zone = "{MY-ZONE}";
>>>>>>> Add Go 3LO and API key auth support (#453)

            // operation
            string operation = "{MY-OPERATION}";


            ZoneOperationsResource.DeleteRequest request = autoscalerService.ZoneOperations.Delete(project, zone, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // project
            string project = "{MY-PROJECT}";

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
            // zone
            string zone = "{MY-ZONE}";  // ex: "us-central1-f"
=======
            string zone = "{MY-ZONE}";
>>>>>>> Add Go 3LO and API key auth support (#453)

            // operation
            string operation = "{MY-OPERATION}";


            ZoneOperationsResource.GetRequest request = autoscalerService.ZoneOperations.Get(project, zone, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // project
            string project = "{MY-PROJECT}";

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
            // zone
            string zone = "{MY-ZONE}";  // ex: "us-central1-f"

=======
            string zone = "{MY-ZONE}";
>>>>>>> Add Go 3LO and API key auth support (#453)

            ZoneOperationsResource.ListRequest request = autoscalerService.ZoneOperations.List(project, zone);

            Data.OperationList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Items)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Autoscaler.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Autoscaler.v1beta2.Data;


namespace AutoscalerSample
{
    public class AutoscalerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            AutoscalerService autoscalerService = new AutoscalerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // project
            string project = "{MY-PROJECT}";


            ZonesResource.ListRequest request = autoscalerService.Zones.List(project);

            Data.ZoneList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Zone zone in response.Items)
                {
                    // TODO: Change code below to process each `zone` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(zone));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
