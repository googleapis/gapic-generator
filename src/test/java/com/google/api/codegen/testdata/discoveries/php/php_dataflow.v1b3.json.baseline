
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `create` method:

// * The project which owns the job.
$projectId = '';


$Google_Service_Dataflow_JobBody = new Google_Service_Dataflow_Job($client);
// TODO: Assign values to desired properties of the `$Google_Service_Dataflow_JobBody` object.


$response = $service->projects_jobs->create($projectId, $Google_Service_Dataflow_JobBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The project which owns the job.
$projectId = '';

// * Identifies a single job.
$jobId = '';


$response = $service->projects_jobs->get($projectId, $jobId);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `getMetrics` method:

// * A project id.
$projectId = '';

// * The job to get messages for.
$jobId = '';


$response = $service->projects_jobs->getMetrics($projectId, $jobId);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsJobs` method:

// * The project which owns the jobs.
$projectId = '';


$optParams = array();
do {
  $response = $service->projects_jobs->listProjectsJobs($projectId, $optParams);

  foreach ($response['jobs'] as $job) {
    // TODO: Change code below to process each `job` resource:
    echo '<pre>', var_export($job, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsJobsMessages` method:

// * A project id.
$projectId = '';

// * The job to get messages about.
$jobId = '';


$optParams = array();
do {
  $response = $service->projects_jobs_messages->listProjectsJobsMessages($projectId, $jobId, $optParams);

  foreach ($response['jobMessages'] as $job_message) {
    // TODO: Change code below to process each `job_message` resource:
    echo '<pre>', var_export($job_message, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// * The project which owns the job.
$projectId = '';

// * Identifies a single job.
$jobId = '';


$Google_Service_Dataflow_JobBody = new Google_Service_Dataflow_Job($client);
// TODO: Assign values to desired properties of the `$Google_Service_Dataflow_JobBody` object.


$response = $service->projects_jobs->update($projectId, $jobId, $Google_Service_Dataflow_JobBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `lease` method:

// * Identifies the project this worker belongs to.
$projectId = '';

// * Identifies the workflow job this worker belongs to.
$jobId = '';


$Google_Service_Dataflow_LeaseWorkItemRequestBody = new Google_Service_Dataflow_LeaseWorkItemRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Dataflow_LeaseWorkItemRequestBody` object.


$response = $service->projects_jobs_workItems->lease($projectId, $jobId, $Google_Service_Dataflow_LeaseWorkItemRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `reportStatus` method:

// * The project which owns the WorkItem's job.
$projectId = '';

// * The job which the WorkItem is part of.
$jobId = '';


$Google_Service_Dataflow_ReportWorkItemStatusRequestBody = new Google_Service_Dataflow_ReportWorkItemStatusRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Dataflow_ReportWorkItemStatusRequestBody` object.


$response = $service->projects_jobs_workItems->reportStatus($projectId, $jobId, $Google_Service_Dataflow_ReportWorkItemStatusRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Dataflow service object for interacting with the API.
$service = new Google_Service_Dataflow($client);


// TODO: Change placeholders below to desired parameter values for the `workerMessages` method:

// * The project to send the WorkerMessages to.
$projectId = '';


$Google_Service_Dataflow_SendWorkerMessagesRequestBody = new Google_Service_Dataflow_SendWorkerMessagesRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_Dataflow_SendWorkerMessagesRequestBody` object.


$response = $service->projects->workerMessages($projectId, $Google_Service_Dataflow_SendWorkerMessagesRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
