
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project which owns the job.
$projectId = '{MY-PROJECT-ID}';

$postBody = new Google_Service_Dataflow_Job($client);

$response = $service->projects_jobs->create($projectId, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project which owns the job.
$projectId = '{MY-PROJECT-ID}';

// * Identifies a single job.
$jobId = '{MY-JOB-ID}';

$response = $service->projects_jobs->get($projectId, $jobId);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * A project id.
$projectId = '{MY-PROJECT-ID}';

// * The job to get messages for.
$jobId = '{MY-JOB-ID}';

$response = $service->projects_jobs->getMetrics($projectId, $jobId);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project which owns the jobs.
$projectId = '{MY-PROJECT-ID}';

$response = $service->projects_jobs->listProjectsJobs($projectId);

foreach ($response['jobs'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * A project id.
$projectId = '{MY-PROJECT-ID}';

// * The job to get messages about.
$jobId = '{MY-JOB-ID}';

$response = $service->projects_jobs_messages->listProjectsJobsMessages($projectId, $jobId);

foreach ($response['jobMessages'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project which owns the job.
$projectId = '{MY-PROJECT-ID}';

// * Identifies a single job.
$jobId = '{MY-JOB-ID}';

$postBody = new Google_Service_Dataflow_Job($client);

$response = $service->projects_jobs->update($projectId, $jobId, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * Identifies the project this worker belongs to.
$projectId = '{MY-PROJECT-ID}';

// * Identifies the workflow job this worker belongs to.
$jobId = '{MY-JOB-ID}';

$postBody = new Google_Service_Dataflow_LeaseWorkItemRequest($client);

$response = $service->projects_jobs_workItems->lease($projectId, $jobId, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project which owns the WorkItem's job.
$projectId = '{MY-PROJECT-ID}';

// * The job which the WorkItem is part of.
$jobId = '{MY-JOB-ID}';

$postBody = new Google_Service_Dataflow_ReportWorkItemStatusRequest($client);

$response = $service->projects_jobs_workItems->reportStatus($projectId, $jobId, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Dataflow API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataflow
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Dataflow service.
$service = new Google_Service_Dataflow($client);

// * The project to send the WorkerMessages to.
$projectId = '{MY-PROJECT-ID}';

$postBody = new Google_Service_Dataflow_SendWorkerMessagesRequest($client);

$response = $service->projects->workerMessages($projectId, $postBody);

