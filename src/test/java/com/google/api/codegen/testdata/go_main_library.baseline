============== file: cloud.google.com/go/library/apiv1/library_client.go ==============
// Copyright 2017, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
    "math"
    "time"

    "cloud.google.com/go/iam"
    "cloud.google.com/go/internal/version"
    "cloud.google.com/go/longrunning"
    lroauto "cloud.google.com/go/longrunning/autogen"
    gax "github.com/googleapis/gax-go"
    "golang.org/x/net/context"
    "google.golang.org/api/iterator"
    "google.golang.org/api/option"
    "google.golang.org/api/transport"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
    longrunningpb "google.golang.org/genproto/googleapis/longrunning"
    taggerpb "google.golang.org/genproto/googleapis/tagger/v1"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
)

var (
    libraryShelfPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf_id}")
    libraryBookPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf_id}/books/{book_id}")
    libraryReturnPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}/returns/{return}")
)

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
    CreateShelf []gax.CallOption
    GetShelf []gax.CallOption
    ListShelves []gax.CallOption
    DeleteShelf []gax.CallOption
    MergeShelves []gax.CallOption
    CreateBook []gax.CallOption
    PublishSeries []gax.CallOption
    GetBook []gax.CallOption
    ListBooks []gax.CallOption
    DeleteBook []gax.CallOption
    UpdateBook []gax.CallOption
    MoveBook []gax.CallOption
    ListStrings []gax.CallOption
    AddComments []gax.CallOption
    GetBookFromArchive []gax.CallOption
    GetBookFromAnywhere []gax.CallOption
    UpdateBookIndex []gax.CallOption
    StreamShelves []gax.CallOption
    StreamBooks []gax.CallOption
    DiscussBook []gax.CallOption
    MonologAboutBook []gax.CallOption
    FindRelatedBooks []gax.CallOption
    AddLabel []gax.CallOption
    GetBigBook []gax.CallOption
    GetBigNothing []gax.CallOption
    TestOptionalRequiredFlatteningParams []gax.CallOption
}

func defaultClientOptions() []option.ClientOption {
    return []option.ClientOption{
        option.WithEndpoint("library-example.googleapis.com:443"),
        option.WithScopes(DefaultAuthScopes()...),
    }
}

func defaultCallOptions() *CallOptions {
    retry := map[[2]string][]gax.CallOption{
        {"default", "idempotent"}: {
            gax.WithRetry(func() gax.Retryer {
                return gax.OnCodes([]codes.Code{
                    codes.DeadlineExceeded,
                    codes.Unavailable,
                }, gax.Backoff{
                    Initial: 100*time.Millisecond,
                    Max: 1000*time.Millisecond,
                    Multiplier: 1.2,
                })
            }),
        },
    }
    return &CallOptions{
        CreateShelf: retry[[2]string{"default", "non_idempotent"}],
        GetShelf: retry[[2]string{"default", "idempotent"}],
        ListShelves: retry[[2]string{"default", "idempotent"}],
        DeleteShelf: retry[[2]string{"default", "idempotent"}],
        MergeShelves: retry[[2]string{"default", "non_idempotent"}],
        CreateBook: retry[[2]string{"default", "non_idempotent"}],
        PublishSeries: retry[[2]string{"default", "non_idempotent"}],
        GetBook: retry[[2]string{"default", "idempotent"}],
        ListBooks: retry[[2]string{"default", "idempotent"}],
        DeleteBook: retry[[2]string{"default", "idempotent"}],
        UpdateBook: retry[[2]string{"default", "idempotent"}],
        MoveBook: retry[[2]string{"default", "non_idempotent"}],
        ListStrings: retry[[2]string{"default", "idempotent"}],
        AddComments: retry[[2]string{"default", "non_idempotent"}],
        GetBookFromArchive: retry[[2]string{"default", "idempotent"}],
        GetBookFromAnywhere: retry[[2]string{"default", "idempotent"}],
        UpdateBookIndex: retry[[2]string{"default", "idempotent"}],
        StreamShelves: retry[[2]string{"default", "idempotent"}],
        StreamBooks: retry[[2]string{"default", "idempotent"}],
        DiscussBook: retry[[2]string{"default", "non_idempotent"}],
        MonologAboutBook: retry[[2]string{"default", "non_idempotent"}],
        FindRelatedBooks: retry[[2]string{"default", "idempotent"}],
        AddLabel: retry[[2]string{"default", "non_idempotent"}],
        GetBigBook: retry[[2]string{"default", "non_idempotent"}],
        GetBigNothing: retry[[2]string{"default", "non_idempotent"}],
        TestOptionalRequiredFlatteningParams: retry[[2]string{"default", "non_idempotent"}],
    }
}

// Client is a client for interacting with Google Example Library API.
type Client struct {
    // The connection to the service.
    conn *grpc.ClientConn

    // The gRPC API client.
    client librarypb.LibraryServiceClient
    labelerClient taggerpb.LabelerClient

    // LROClient is used internally to handle longrunning operations.
    // It is exposed so that its CallOptions can be modified if required.
    // Users should not Close this client.
    LROClient *lroauto.OperationsClient

    // The call options for this service.
    CallOptions *CallOptions

    // The metadata to be sent with each request.
    xGoogHeader []string
}

// NewClient creates a new library service client.
//
// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``bookShelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `bookShelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
// This is [not a cloud link](http://www.google.com).
//
// Service comment may include special characters: <>&"`'@.
//
// Write more docs here as an offering to the Great Gopher
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
    conn, err := transport.DialGRPC(ctx, append(defaultClientOptions(), opts...)...)
    if err != nil {
        return nil, err
    }
    c := &Client {
        conn: conn,
        CallOptions: defaultCallOptions(),

        client: librarypb.NewLibraryServiceClient(conn),
        labelerClient: taggerpb.NewLabelerClient(conn),
    }
    c.SetGoogleClientInfo()

    c.LROClient, err = lroauto.NewOperationsClient(ctx, option.WithGRPCConn(conn))
    if err != nil {
        // This error "should not happen", since we are just reusing old connection
        // and never actually need to dial.
        // If this does happen, we could leak conn. However, we cannot close conn:
        // If the user invoked the function with option.WithGRPCConn,
        // we would close a connection that's still in use.
        // TODO(pongad): investigate error conditions.
        return nil, err
    }
    return c, nil
}

// Connection returns the client's connection to the API service.
func (c *Client) Connection() *grpc.ClientConn {
    return c.conn
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
    return c.conn.Close()
}

// SetGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) SetGoogleClientInfo(keyval ...string) {
    kv := append([]string{"gl-go", version.Go()}, keyval...)
    kv = append(kv, "gapic", version.Repo, "gax", gax.Version, "grpc", grpc.Version)
    c.xGoogHeader = []string{gax.XGoogHeader(kv...)}
}

// ShelfPath returns the path for the shelf resource.
func ShelfPath(shelfId string) string {
    path, err := libraryShelfPathTemplate.Render(map[string]string{
        "shelf_id": shelfId,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// BookPath returns the path for the book resource.
func BookPath(shelfId, bookId string) string {
    path, err := libraryBookPathTemplate.Render(map[string]string{
        "shelf_id": shelfId,
        "book_id": bookId,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// ReturnPath returns the path for the return resource.
func ReturnPath(shelf, book, return_ string) string {
    path, err := libraryReturnPathTemplate.Render(map[string]string{
        "shelf": shelf,
        "book": book,
        "return": return_,
    })
    if err != nil {
        panic(err)
    }
    return path
}


func (c *Client) BookIAM(book *librarypb.Book) *iam.Handle {
    return iam.InternalNewHandle(c.Connection(), book.Name)
}


// CreateShelf creates a shelf, and returns the new Shelf.
// RPC method comment may include special characters: <>&"`'@.
func (c *Client) CreateShelf(ctx context.Context, req *librarypb.CreateShelfRequest, opts ...gax.CallOption) (*librarypb.Shelf, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.CreateShelf[0:len(c.CallOptions.CreateShelf):len(c.CallOptions.CreateShelf)], opts...)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.CreateShelf(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetShelf gets a shelf.
func (c *Client) GetShelf(ctx context.Context, req *librarypb.GetShelfRequest, opts ...gax.CallOption) (*librarypb.Shelf, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetShelf[0:len(c.CallOptions.GetShelf):len(c.CallOptions.GetShelf)], opts...)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetShelf(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListShelves lists shelves.
func (c *Client) ListShelves(ctx context.Context, req *librarypb.ListShelvesRequest, opts ...gax.CallOption) *ShelfIterator {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.ListShelves[0:len(c.CallOptions.ListShelves):len(c.CallOptions.ListShelves)], opts...)
    it := &ShelfIterator{}
    it.InternalFetch = func(pageSize int, pageToken string) ([]*librarypb.Shelf, string, error) {
        var resp *librarypb.ListShelvesResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
            var err error
            resp, err = c.client.ListShelves(ctx, req, settings.GRPC...)
            return err
        }, opts...)
        if err != nil {
            return nil, "", err
        }
        return resp.Shelves, resp.NextPageToken, nil
    }
    fetch := func(pageSize int, pageToken string) (string, error) {
        items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, items...)
        return nextPageToken, nil
    }
    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
    return it
}

// DeleteShelf deletes a shelf.
func (c *Client) DeleteShelf(ctx context.Context, req *librarypb.DeleteShelfRequest, opts ...gax.CallOption) error {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.DeleteShelf[0:len(c.CallOptions.DeleteShelf):len(c.CallOptions.DeleteShelf)], opts...)
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        _, err = c.client.DeleteShelf(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    return err
}

// MergeShelves merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
func (c *Client) MergeShelves(ctx context.Context, req *librarypb.MergeShelvesRequest, opts ...gax.CallOption) (*librarypb.Shelf, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.MergeShelves[0:len(c.CallOptions.MergeShelves):len(c.CallOptions.MergeShelves)], opts...)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.MergeShelves(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// CreateBook creates a book.
func (c *Client) CreateBook(ctx context.Context, req *librarypb.CreateBookRequest, opts ...gax.CallOption) (*librarypb.Book, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.CreateBook[0:len(c.CallOptions.CreateBook):len(c.CallOptions.CreateBook)], opts...)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.CreateBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// PublishSeries creates a series of books.
func (c *Client) PublishSeries(ctx context.Context, req *librarypb.PublishSeriesRequest, opts ...gax.CallOption) (*librarypb.PublishSeriesResponse, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.PublishSeries[0:len(c.CallOptions.PublishSeries):len(c.CallOptions.PublishSeries)], opts...)
    var resp *librarypb.PublishSeriesResponse
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.PublishSeries(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetBook gets a book.
func (c *Client) GetBook(ctx context.Context, req *librarypb.GetBookRequest, opts ...gax.CallOption) (*librarypb.Book, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetBook[0:len(c.CallOptions.GetBook):len(c.CallOptions.GetBook)], opts...)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListBooks lists books in a shelf.
func (c *Client) ListBooks(ctx context.Context, req *librarypb.ListBooksRequest, opts ...gax.CallOption) *BookIterator {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.ListBooks[0:len(c.CallOptions.ListBooks):len(c.CallOptions.ListBooks)], opts...)
    it := &BookIterator{}
    it.InternalFetch = func(pageSize int, pageToken string) ([]*librarypb.Book, string, error) {
        var resp *librarypb.ListBooksResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
            var err error
            resp, err = c.client.ListBooks(ctx, req, settings.GRPC...)
            return err
        }, opts...)
        if err != nil {
            return nil, "", err
        }
        return resp.Books, resp.NextPageToken, nil
    }
    fetch := func(pageSize int, pageToken string) (string, error) {
        items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, items...)
        return nextPageToken, nil
    }
    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
    return it
}

// DeleteBook deletes a book.
func (c *Client) DeleteBook(ctx context.Context, req *librarypb.DeleteBookRequest, opts ...gax.CallOption) error {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.DeleteBook[0:len(c.CallOptions.DeleteBook):len(c.CallOptions.DeleteBook)], opts...)
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        _, err = c.client.DeleteBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    return err
}

// UpdateBook updates a book.
func (c *Client) UpdateBook(ctx context.Context, req *librarypb.UpdateBookRequest, opts ...gax.CallOption) (*librarypb.Book, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.UpdateBook[0:len(c.CallOptions.UpdateBook):len(c.CallOptions.UpdateBook)], opts...)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.UpdateBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// MoveBook moves a book to another shelf, and returns the new book.
func (c *Client) MoveBook(ctx context.Context, req *librarypb.MoveBookRequest, opts ...gax.CallOption) (*librarypb.Book, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.MoveBook[0:len(c.CallOptions.MoveBook):len(c.CallOptions.MoveBook)], opts...)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.MoveBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListStrings lists a primitive resource. To test go page streaming.
func (c *Client) ListStrings(ctx context.Context, req *librarypb.ListStringsRequest, opts ...gax.CallOption) *StringIterator {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.ListStrings[0:len(c.CallOptions.ListStrings):len(c.CallOptions.ListStrings)], opts...)
    it := &StringIterator{}
    it.InternalFetch = func(pageSize int, pageToken string) ([]string, string, error) {
        var resp *librarypb.ListStringsResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
            var err error
            resp, err = c.client.ListStrings(ctx, req, settings.GRPC...)
            return err
        }, opts...)
        if err != nil {
            return nil, "", err
        }
        return resp.Strings, resp.NextPageToken, nil
    }
    fetch := func(pageSize int, pageToken string) (string, error) {
        items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, items...)
        return nextPageToken, nil
    }
    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
    return it
}

// AddComments adds comments to a book
func (c *Client) AddComments(ctx context.Context, req *librarypb.AddCommentsRequest, opts ...gax.CallOption) error {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.AddComments[0:len(c.CallOptions.AddComments):len(c.CallOptions.AddComments)], opts...)
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        _, err = c.client.AddComments(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    return err
}

// GetBookFromArchive gets a book from an archive.
func (c *Client) GetBookFromArchive(ctx context.Context, req *librarypb.GetBookFromArchiveRequest, opts ...gax.CallOption) (*librarypb.BookFromArchive, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetBookFromArchive[0:len(c.CallOptions.GetBookFromArchive):len(c.CallOptions.GetBookFromArchive)], opts...)
    var resp *librarypb.BookFromArchive
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetBookFromArchive(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetBookFromAnywhere gets a book from a shelf or archive.
func (c *Client) GetBookFromAnywhere(ctx context.Context, req *librarypb.GetBookFromAnywhereRequest, opts ...gax.CallOption) (*librarypb.BookFromAnywhere, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetBookFromAnywhere[0:len(c.CallOptions.GetBookFromAnywhere):len(c.CallOptions.GetBookFromAnywhere)], opts...)
    var resp *librarypb.BookFromAnywhere
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetBookFromAnywhere(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// UpdateBookIndex updates the index of a book.
func (c *Client) UpdateBookIndex(ctx context.Context, req *librarypb.UpdateBookIndexRequest, opts ...gax.CallOption) error {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.UpdateBookIndex[0:len(c.CallOptions.UpdateBookIndex):len(c.CallOptions.UpdateBookIndex)], opts...)
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        _, err = c.client.UpdateBookIndex(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    return err
}

// StreamShelves test server streaming
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) StreamShelves(ctx context.Context, req *librarypb.StreamShelvesRequest, opts ...gax.CallOption) (librarypb.LibraryService_StreamShelvesClient, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.StreamShelves[0:len(c.CallOptions.StreamShelves):len(c.CallOptions.StreamShelves)], opts...)
    var resp librarypb.LibraryService_StreamShelvesClient
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.StreamShelves(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// StreamBooks test server streaming, non-paged responses.
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) StreamBooks(ctx context.Context, req *librarypb.StreamBooksRequest, opts ...gax.CallOption) (librarypb.LibraryService_StreamBooksClient, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.StreamBooks[0:len(c.CallOptions.StreamBooks):len(c.CallOptions.StreamBooks)], opts...)
    var resp librarypb.LibraryService_StreamBooksClient
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.StreamBooks(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// DiscussBook test bidi-streaming.
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) DiscussBook(ctx context.Context, opts ...gax.CallOption) (librarypb.LibraryService_DiscussBookClient, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.DiscussBook[0:len(c.CallOptions.DiscussBook):len(c.CallOptions.DiscussBook)], opts...)
    var resp librarypb.LibraryService_DiscussBookClient
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.DiscussBook(ctx, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// MonologAboutBook test client streaming.
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) MonologAboutBook(ctx context.Context, opts ...gax.CallOption) (librarypb.LibraryService_MonologAboutBookClient, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.MonologAboutBook[0:len(c.CallOptions.MonologAboutBook):len(c.CallOptions.MonologAboutBook)], opts...)
    var resp librarypb.LibraryService_MonologAboutBookClient
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.MonologAboutBook(ctx, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// FindRelatedBooks
func (c *Client) FindRelatedBooks(ctx context.Context, req *librarypb.FindRelatedBooksRequest, opts ...gax.CallOption) *StringIterator {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.FindRelatedBooks[0:len(c.CallOptions.FindRelatedBooks):len(c.CallOptions.FindRelatedBooks)], opts...)
    it := &StringIterator{}
    it.InternalFetch = func(pageSize int, pageToken string) ([]string, string, error) {
        var resp *librarypb.FindRelatedBooksResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
            var err error
            resp, err = c.client.FindRelatedBooks(ctx, req, settings.GRPC...)
            return err
        }, opts...)
        if err != nil {
            return nil, "", err
        }
        return resp.Names, resp.NextPageToken, nil
    }
    fetch := func(pageSize int, pageToken string) (string, error) {
        items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, items...)
        return nextPageToken, nil
    }
    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
    return it
}

// addLabel adds a label to the entity.
func (c *Client) addLabel(ctx context.Context, req *taggerpb.AddLabelRequest, opts ...gax.CallOption) (*taggerpb.AddLabelResponse, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.AddLabel[0:len(c.CallOptions.AddLabel):len(c.CallOptions.AddLabel)], opts...)
    var resp *taggerpb.AddLabelResponse
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.labelerClient.AddLabel(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetBigBook test long-running operations
func (c *Client) GetBigBook(ctx context.Context, req *librarypb.GetBookRequest, opts ...gax.CallOption) (*GetBigBookOperation, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetBigBook[0:len(c.CallOptions.GetBigBook):len(c.CallOptions.GetBigBook)], opts...)
    var resp *longrunningpb.Operation
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetBigBook(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return &GetBigBookOperation{
        lro: longrunning.InternalNewOperation(c.LROClient, resp),
    }, nil
}

// GetBigNothing test long-running operations with empty return type.
func (c *Client) GetBigNothing(ctx context.Context, req *librarypb.GetBookRequest, opts ...gax.CallOption) (*GetBigNothingOperation, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.GetBigNothing[0:len(c.CallOptions.GetBigNothing):len(c.CallOptions.GetBigNothing)], opts...)
    var resp *longrunningpb.Operation
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.GetBigNothing(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return &GetBigNothingOperation{
        lro: longrunning.InternalNewOperation(c.LROClient, resp),
    }, nil
}

// TestOptionalRequiredFlatteningParams test optional flattening parameters of all types
func (c *Client) TestOptionalRequiredFlatteningParams(ctx context.Context, req *librarypb.TestOptionalRequiredFlatteningParamsRequest, opts ...gax.CallOption) (*librarypb.TestOptionalRequiredFlatteningParamsResponse, error) {
    ctx = insertXGoog(ctx, c.xGoogHeader)
    opts = append(c.CallOptions.TestOptionalRequiredFlatteningParams[0:len(c.CallOptions.TestOptionalRequiredFlatteningParams):len(c.CallOptions.TestOptionalRequiredFlatteningParams)], opts...)
    var resp *librarypb.TestOptionalRequiredFlatteningParamsResponse
    err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
        var err error
        resp, err = c.client.TestOptionalRequiredFlatteningParams(ctx, req, settings.GRPC...)
        return err
    }, opts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// BookIterator manages a stream of *librarypb.Book.
type BookIterator struct {
    items    []*librarypb.Book
    pageInfo *iterator.PageInfo
    nextFunc func() error

    // InternalFetch is for use by the Google Cloud Libraries only.
    // It is not part of the stable interface of this package.
    //
    // InternalFetch returns results from a single call to the underlying RPC.
    // The number of results is no greater than pageSize.
    // If there are no more results, nextPageToken is empty and err is nil.
    InternalFetch func(pageSize int, pageToken string) (results []*librarypb.Book, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *BookIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *BookIterator) Next() (*librarypb.Book, error) {
    var item *librarypb.Book
    if err := it.nextFunc(); err != nil {
        return item, err
    }
    item = it.items[0]
    it.items = it.items[1:]
    return item, nil
}

func (it *BookIterator) bufLen() int {
    return len(it.items)
}

func (it *BookIterator) takeBuf() interface{} {
    b := it.items
    it.items = nil
    return b
}

// ShelfIterator manages a stream of *librarypb.Shelf.
type ShelfIterator struct {
    items    []*librarypb.Shelf
    pageInfo *iterator.PageInfo
    nextFunc func() error

    // InternalFetch is for use by the Google Cloud Libraries only.
    // It is not part of the stable interface of this package.
    //
    // InternalFetch returns results from a single call to the underlying RPC.
    // The number of results is no greater than pageSize.
    // If there are no more results, nextPageToken is empty and err is nil.
    InternalFetch func(pageSize int, pageToken string) (results []*librarypb.Shelf, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ShelfIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ShelfIterator) Next() (*librarypb.Shelf, error) {
    var item *librarypb.Shelf
    if err := it.nextFunc(); err != nil {
        return item, err
    }
    item = it.items[0]
    it.items = it.items[1:]
    return item, nil
}

func (it *ShelfIterator) bufLen() int {
    return len(it.items)
}

func (it *ShelfIterator) takeBuf() interface{} {
    b := it.items
    it.items = nil
    return b
}

// StringIterator manages a stream of string.
type StringIterator struct {
    items    []string
    pageInfo *iterator.PageInfo
    nextFunc func() error

    // InternalFetch is for use by the Google Cloud Libraries only.
    // It is not part of the stable interface of this package.
    //
    // InternalFetch returns results from a single call to the underlying RPC.
    // The number of results is no greater than pageSize.
    // If there are no more results, nextPageToken is empty and err is nil.
    InternalFetch func(pageSize int, pageToken string) (results []string, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *StringIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *StringIterator) Next() (string, error) {
    var item string
    if err := it.nextFunc(); err != nil {
        return item, err
    }
    item = it.items[0]
    it.items = it.items[1:]
    return item, nil
}

func (it *StringIterator) bufLen() int {
    return len(it.items)
}

func (it *StringIterator) takeBuf() interface{} {
    b := it.items
    it.items = nil
    return b
}


// GetBigBookOperation manages a long-running operation from GetBigBook.
type GetBigBookOperation struct {
    lro *longrunning.Operation
}

// GetBigBookOperation returns a new GetBigBookOperation from a given name.
// The name must be that of a previously created GetBigBookOperation, possibly from a different process.
func (c *Client) GetBigBookOperation(name string) *GetBigBookOperation {
    return &GetBigBookOperation{
        lro: longrunning.InternalNewOperation(c.LROClient, &longrunningpb.Operation{Name: name}),
    }
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *GetBigBookOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*librarypb.Book, error) {
    var resp librarypb.Book
    if err := op.lro.Wait(ctx, &resp, opts...); err != nil {
        return nil, err
    }
    return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *GetBigBookOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*librarypb.Book, error) {
    var resp librarypb.Book
    if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
        return nil, err
    }
    if !op.Done() {
        return nil, nil
    }
    return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *GetBigBookOperation) Metadata() (*librarypb.GetBigBookMetadata, error) {
    var meta librarypb.GetBigBookMetadata
    if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
        return nil, nil
    } else if err != nil {
        return nil, err
    }
    return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *GetBigBookOperation) Done() bool {
    return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *GetBigBookOperation) Name() string {
    return op.lro.Name()
}

// Cancel starts asynchronous cancellation on a long-running operation.
// The server makes a best effort to cancel the operation, but success is not guaranteed.
// Clients can use Poll or other methods to check whether the cancellation succeeded or whether the operation
// completed despite cancellation. On successful cancellation, the operation is not deleted;
// instead, op.Poll returns an error with code Canceled.
func (op *GetBigBookOperation) Cancel(ctx context.Context, opts ...gax.CallOption) error {
    return op.lro.Cancel(ctx, opts...)
}

// GetBigNothingOperation manages a long-running operation from GetBigNothing.
type GetBigNothingOperation struct {
    lro *longrunning.Operation
}

// GetBigNothingOperation returns a new GetBigNothingOperation from a given name.
// The name must be that of a previously created GetBigNothingOperation, possibly from a different process.
func (c *Client) GetBigNothingOperation(name string) *GetBigNothingOperation {
    return &GetBigNothingOperation{
        lro: longrunning.InternalNewOperation(c.LROClient, &longrunningpb.Operation{Name: name}),
    }
}

// Wait blocks until the long-running operation is completed, returning any error encountered.
//
// See documentation of Poll for error-handling information.
func (op *GetBigNothingOperation) Wait(ctx context.Context, opts ...gax.CallOption) error {
    return op.lro.Wait(ctx, nil, opts...)
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully, op.Done will return true.
func (op *GetBigNothingOperation) Poll(ctx context.Context, opts ...gax.CallOption) error {
    return op.lro.Poll(ctx, nil, opts...)
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *GetBigNothingOperation) Metadata() (*librarypb.GetBigBookMetadata, error) {
    var meta librarypb.GetBigBookMetadata
    if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
        return nil, nil
    } else if err != nil {
        return nil, err
    }
    return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *GetBigNothingOperation) Done() bool {
    return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *GetBigNothingOperation) Name() string {
    return op.lro.Name()
}


// Delete deletes a long-running operation.
// This method indicates that the client is no longer interested in the operation result.
// It does not cancel the operation.
func (op *GetBigNothingOperation) Delete(ctx context.Context, opts ...gax.CallOption) error {
    return op.lro.Delete(ctx, opts...)
}
