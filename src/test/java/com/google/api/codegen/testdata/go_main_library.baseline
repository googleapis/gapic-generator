============== file: cloud.google.com/go/library/apiv1/library_client.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
    "fmt"
    "math"
    "runtime"
    "time"

    gax "github.com/googleapis/gax-go"
    "golang.org/x/net/context"
    "google.golang.org/api/option"
    "google.golang.org/api/transport"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
    taggerpb "google.golang.org/genproto/googleapis/tagger/v1"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/metadata"
)

var (
    libraryShelfPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}")
    libraryBookPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}")
    libraryArchivedBookPathTemplate = gax.MustCompilePathTemplate("archives/{archive_path=**}/books/{book}")
)

// CallOptions contains the retry settings for each method of this client.
type CallOptions struct {
    CreateShelf []gax.CallOption
    GetShelf []gax.CallOption
    ListShelves []gax.CallOption
    DeleteShelf []gax.CallOption
    MergeShelves []gax.CallOption
    CreateBook []gax.CallOption
    PublishSeries []gax.CallOption
    GetBook []gax.CallOption
    ListBooks []gax.CallOption
    DeleteBook []gax.CallOption
    UpdateBook []gax.CallOption
    MoveBook []gax.CallOption
    ListStrings []gax.CallOption
    AddComments []gax.CallOption
    GetBookFromArchive []gax.CallOption
    UpdateBookIndex []gax.CallOption
    AddTag []gax.CallOption
}

func defaultClientOptions() []option.ClientOption {
    return []option.ClientOption{
        option.WithEndpoint("library-example.googleapis.com:443"),
        option.WithScopes(
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/library",
        ),
    }
}

func defaultRetryOptions() []gax.CallOption {
    return []gax.CallOption{
        gax.WithTimeout(30000*time.Millisecond),
        gax.WithDelayTimeoutSettings(100*time.Millisecond, 1000*time.Millisecond, 1.2),
        gax.WithRPCTimeoutSettings(300*time.Millisecond, 3000*time.Millisecond, 1.3),
    }
}

func defaultCallOptions() *CallOptions {
    withIdempotentRetryCodes := gax.WithRetryCodes([]codes.Code{
        codes.DeadlineExceeded,
        codes.Unavailable,
    })
    return &CallOptions{
        CreateShelf: defaultRetryOptions(),
        GetShelf: append(defaultRetryOptions(), withIdempotentRetryCodes),
        ListShelves: append(defaultRetryOptions(), withIdempotentRetryCodes),
        DeleteShelf: append(defaultRetryOptions(), withIdempotentRetryCodes),
        MergeShelves: defaultRetryOptions(),
        CreateBook: defaultRetryOptions(),
        PublishSeries: defaultRetryOptions(),
        GetBook: append(defaultRetryOptions(), withIdempotentRetryCodes),
        ListBooks: append(defaultRetryOptions(), withIdempotentRetryCodes),
        DeleteBook: append(defaultRetryOptions(), withIdempotentRetryCodes),
        UpdateBook: append(defaultRetryOptions(), withIdempotentRetryCodes),
        MoveBook: defaultRetryOptions(),
        ListStrings: append(defaultRetryOptions(), withIdempotentRetryCodes),
        AddComments: defaultRetryOptions(),
        GetBookFromArchive: append(defaultRetryOptions(), withIdempotentRetryCodes),
        UpdateBookIndex: append(defaultRetryOptions(), withIdempotentRetryCodes),
        AddTag: defaultRetryOptions(),
    }
}

// Client is a client for interacting with LibraryService.
type Client struct {
    // The connection to the service.
    conn *grpc.ClientConn

    // The gRPC API client.
    client librarypb.LibraryServiceClient

    // The call options for this service.
    CallOptions *CallOptions

    // The metadata to be sent with each request.
    metadata map[string][]string
}

// NewClient creates a new library service client.
//
// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``bookShelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `bookShelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
// This is [not a cloud link](http://www.google.com).
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
    conn, err := transport.DialGRPC(ctx, append(defaultClientOptions(), opts...)...)
    if err != nil {
        return nil, err
    }
    c := &Client {
        conn: conn,
        client: librarypb.NewLibraryServiceClient(conn),
        CallOptions: defaultCallOptions(),
    }
    c.SetGoogleClientInfo("gax", gax.Version)
    return c, nil
}

// Connection returns the client's connection to the API service.
func (c *Client) Connection() *grpc.ClientConn {
    return c.conn
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
    return c.conn.Close()
}

// SetGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) SetGoogleClientInfo(name, version string) {
    c.metadata = map[string][]string{
        "x-goog-api-client": {fmt.Sprintf("%s/%s %s gax/%s go/%s", name, version, gapicNameVersion, gax.Version, runtime.Version())},
    }
}


// ShelfPath returns the path for the shelf resource.
func LibraryShelfPath(shelf string) string {
    path, err := libraryShelfPathTemplate.Render(map[string]string{
        "shelf": shelf,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// BookPath returns the path for the book resource.
func LibraryBookPath(shelf string, book string) string {
    path, err := libraryBookPathTemplate.Render(map[string]string{
        "shelf": shelf,
        "book": book,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// ArchivedBookPath returns the path for the archived book resource.
func LibraryArchivedBookPath(archivePath string, book string) string {
    path, err := libraryArchivedBookPathTemplate.Render(map[string]string{
        "archive_path": archivePath,
        "book": book,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// CreateShelf creates a shelf, and returns the new Shelf.
func (c *Client) CreateShelf(ctx context.Context, req *librarypb.CreateShelfRequest) (*librarypb.Shelf, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.CreateShelf(ctx, req)
        return err
    }, c.CallOptions.CreateShelf...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// GetShelf gets a shelf.
func (c *Client) GetShelf(ctx context.Context, req *librarypb.GetShelfRequest) (*librarypb.Shelf, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.GetShelf(ctx, req)
        return err
    }, c.CallOptions.GetShelf...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// ListShelves lists shelves.
func (c *Client) ListShelves(ctx context.Context, req *librarypb.ListShelvesRequest) *ShelfIterator {
    ctx = metadata.NewContext(ctx, c.metadata)
    it := &ShelfIterator{}
    it.apiCall = func() error {
        var resp *librarypb.ListShelvesResponse
        err := gax.Invoke(ctx, func (ctx context.Context) error {
            var err error
            req.PageToken = it.nextPageToken
            resp, err = c.client.ListShelves(ctx, req)
            return err
        }, c.CallOptions.ListShelves...)
        if err != nil {
            return err
        }
        if resp.NextPageToken == "" {
            it.atLastPage = true
        }
        it.nextPageToken = resp.NextPageToken
        it.items = resp.Shelves
        return nil
    }
    return it
}


// DeleteShelf deletes a shelf.
func (c *Client) DeleteShelf(ctx context.Context, req *librarypb.DeleteShelfRequest) error {
    ctx = metadata.NewContext(ctx, c.metadata)
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        _, err = c.client.DeleteShelf(ctx, req)
        return err
    }, c.CallOptions.DeleteShelf...)
    return err
}


// MergeShelves merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
func (c *Client) MergeShelves(ctx context.Context, req *librarypb.MergeShelvesRequest) (*librarypb.Shelf, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.MergeShelves(ctx, req)
        return err
    }, c.CallOptions.MergeShelves...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// CreateBook creates a book.
func (c *Client) CreateBook(ctx context.Context, req *librarypb.CreateBookRequest) (*librarypb.Book, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.CreateBook(ctx, req)
        return err
    }, c.CallOptions.CreateBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// PublishSeries creates a series of books.
func (c *Client) PublishSeries(ctx context.Context, req *librarypb.PublishSeriesRequest) (*librarypb.PublishSeriesResponse, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.PublishSeriesResponse
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.PublishSeries(ctx, req)
        return err
    }, c.CallOptions.PublishSeries...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// GetBook gets a book.
func (c *Client) GetBook(ctx context.Context, req *librarypb.GetBookRequest) (*librarypb.Book, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.GetBook(ctx, req)
        return err
    }, c.CallOptions.GetBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// ListBooks lists books in a shelf.
func (c *Client) ListBooks(ctx context.Context, req *librarypb.ListBooksRequest) *BookIterator {
    ctx = metadata.NewContext(ctx, c.metadata)
    it := &BookIterator{}
    it.apiCall = func() error {
        var resp *librarypb.ListBooksResponse
        err := gax.Invoke(ctx, func (ctx context.Context) error {
            var err error
            req.PageToken = it.nextPageToken
            req.PageSize = it.pageSize
            resp, err = c.client.ListBooks(ctx, req)
            return err
        }, c.CallOptions.ListBooks...)
        if err != nil {
            return err
        }
        if resp.NextPageToken == "" {
            it.atLastPage = true
        }
        it.nextPageToken = resp.NextPageToken
        it.items = resp.Books
        return nil
    }
    return it
}


// DeleteBook deletes a book.
func (c *Client) DeleteBook(ctx context.Context, req *librarypb.DeleteBookRequest) error {
    ctx = metadata.NewContext(ctx, c.metadata)
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        _, err = c.client.DeleteBook(ctx, req)
        return err
    }, c.CallOptions.DeleteBook...)
    return err
}


// UpdateBook updates a book.
func (c *Client) UpdateBook(ctx context.Context, req *librarypb.UpdateBookRequest) (*librarypb.Book, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.UpdateBook(ctx, req)
        return err
    }, c.CallOptions.UpdateBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// MoveBook moves a book to another shelf, and returns the new book.
func (c *Client) MoveBook(ctx context.Context, req *librarypb.MoveBookRequest) (*librarypb.Book, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.MoveBook(ctx, req)
        return err
    }, c.CallOptions.MoveBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// ListStrings lists a primitive resource. To test go page streaming.
func (c *Client) ListStrings(ctx context.Context, req *librarypb.ListStringsRequest) *StringIterator {
    ctx = metadata.NewContext(ctx, c.metadata)
    it := &StringIterator{}
    it.apiCall = func() error {
        var resp *librarypb.ListStringsResponse
        err := gax.Invoke(ctx, func (ctx context.Context) error {
            var err error
            req.PageToken = it.nextPageToken
            req.PageSize = it.pageSize
            resp, err = c.client.ListStrings(ctx, req)
            return err
        }, c.CallOptions.ListStrings...)
        if err != nil {
            return err
        }
        if resp.NextPageToken == "" {
            it.atLastPage = true
        }
        it.nextPageToken = resp.NextPageToken
        it.items = resp.Strings
        return nil
    }
    return it
}


// AddComments adds comments to a book
func (c *Client) AddComments(ctx context.Context, req *librarypb.AddCommentsRequest) error {
    ctx = metadata.NewContext(ctx, c.metadata)
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        _, err = c.client.AddComments(ctx, req)
        return err
    }, c.CallOptions.AddComments...)
    return err
}


// GetBookFromArchive gets a book from an archive.
func (c *Client) GetBookFromArchive(ctx context.Context, req *librarypb.GetBookFromArchiveRequest) (*librarypb.Book, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.GetBookFromArchive(ctx, req)
        return err
    }, c.CallOptions.GetBookFromArchive...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// UpdateBookIndex updates the index of a book.
func (c *Client) UpdateBookIndex(ctx context.Context, req *librarypb.UpdateBookIndexRequest) error {
    ctx = metadata.NewContext(ctx, c.metadata)
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        _, err = c.client.UpdateBookIndex(ctx, req)
        return err
    }, c.CallOptions.UpdateBookIndex...)
    return err
}


// AddTag adds a tag to the book.
func (c *Client) AddTag(ctx context.Context, req *taggerpb.AddTagRequest) (*taggerpb.AddTagResponse, error) {
    ctx = metadata.NewContext(ctx, c.metadata)
    var resp *taggerpb.AddTagResponse
    err := gax.Invoke(ctx, func (ctx context.Context) error {
        var err error
        resp, err = c.client.AddTag(ctx, req)
        return err
    }, c.CallOptions.AddTag...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}



// ShelfIterator manages a stream of *librarypb.Shelf.
type ShelfIterator struct {
    // The current page data.
    items         []*librarypb.Shelf
    atLastPage    bool
    currentIndex  int
    nextPageToken string
    apiCall       func() error
}

// NextPage returns the next page of results.
//
// NextPage may return a second return value of Done along with the last page of results. After
// NextPage returns Done, all subsequent calls to NextPage will return (nil, Done).
//
// Next and NextPage should not be used with the same iterator.
func (it *ShelfIterator) NextPage() ([]*librarypb.Shelf, error) {
    if it.atLastPage {
        // We already returned Done with the last page of items. Continue to
        // return Done, but with no items.
        return nil, Done
    }
    if err := it.apiCall(); err != nil {
        return nil, err
    }
    if it.atLastPage {
        return it.items, Done
    }
    return it.items, nil
}

// Next returns the next result. Its second return value is Done if there are no more results.
// Once next returns Done, all subsequent calls will return Done.
//
// SetPageToken should not be called when using Next.
//
// Next and NextPage should not be used with the same iterator.
func (it *ShelfIterator) Next() (*librarypb.Shelf, error) {
    for it.currentIndex >= len(it.items) {
        if it.atLastPage {
            return nil, Done
        }
        if err := it.apiCall(); err != nil {
            return nil, err
        }
        it.currentIndex = 0
    }
    result := it.items[it.currentIndex]
    it.currentIndex++
    return result, nil
}

// SetPageToken sets the page token for the next call to NextPage, to resume the iteration from
// a previous point.
func (it *ShelfIterator) SetPageToken(token string) {
    it.nextPageToken = token
}

// NextPageToken returns a page token that can be used with SetPageToken to resume
// iteration from the next page. It returns the empty string if there are no more pages.
func (it *ShelfIterator) NextPageToken() string {
    return it.nextPageToken
}

// BookIterator manages a stream of *librarypb.Book.
type BookIterator struct {
    // The current page data.
    items         []*librarypb.Book
    atLastPage    bool
    currentIndex  int
    pageSize      int32
    nextPageToken string
    apiCall       func() error
}

// NextPage returns the next page of results.
// It will return at most the number of results specified by the last call to SetPageSize.
// If SetPageSize was never called or was called with a value less than 1,
// the page size is determined by the underlying service.
//
// NextPage may return a second return value of Done along with the last page of results. After
// NextPage returns Done, all subsequent calls to NextPage will return (nil, Done).
//
// Next and NextPage should not be used with the same iterator.
func (it *BookIterator) NextPage() ([]*librarypb.Book, error) {
    if it.atLastPage {
        // We already returned Done with the last page of items. Continue to
        // return Done, but with no items.
        return nil, Done
    }
    if err := it.apiCall(); err != nil {
        return nil, err
    }
    if it.atLastPage {
        return it.items, Done
    }
    return it.items, nil
}

// Next returns the next result. Its second return value is Done if there are no more results.
// Once next returns Done, all subsequent calls will return Done.
//
// Internally, Next retrieves results in bulk. You can call SetPageSize as a performance hint to
// affect how many results are retrieved in a single RPC.
//
// SetPageToken should not be called when using Next.
//
// Next and NextPage should not be used with the same iterator.
func (it *BookIterator) Next() (*librarypb.Book, error) {
    for it.currentIndex >= len(it.items) {
        if it.atLastPage {
            return nil, Done
        }
        if err := it.apiCall(); err != nil {
            return nil, err
        }
        it.currentIndex = 0
    }
    result := it.items[it.currentIndex]
    it.currentIndex++
    return result, nil
}

// PageSize returns the page size for all subsequent calls to NextPage.
func (it *BookIterator) PageSize() int {
    return int(it.pageSize)
}

// SetPageSize sets the page size for all subsequent calls to NextPage.
func (it *BookIterator) SetPageSize(pageSize int) {
    if pageSize > math.MaxInt32 {
        pageSize = math.MaxInt32
    }
    it.pageSize = int32(pageSize)
}

// SetPageToken sets the page token for the next call to NextPage, to resume the iteration from
// a previous point.
func (it *BookIterator) SetPageToken(token string) {
    it.nextPageToken = token
}

// NextPageToken returns a page token that can be used with SetPageToken to resume
// iteration from the next page. It returns the empty string if there are no more pages.
func (it *BookIterator) NextPageToken() string {
    return it.nextPageToken
}

// StringIterator manages a stream of string.
type StringIterator struct {
    // The current page data.
    items         []string
    atLastPage    bool
    currentIndex  int
    pageSize      int32
    nextPageToken string
    apiCall       func() error
}

// NextPage returns the next page of results.
// It will return at most the number of results specified by the last call to SetPageSize.
// If SetPageSize was never called or was called with a value less than 1,
// the page size is determined by the underlying service.
//
// NextPage may return a second return value of Done along with the last page of results. After
// NextPage returns Done, all subsequent calls to NextPage will return (nil, Done).
//
// Next and NextPage should not be used with the same iterator.
func (it *StringIterator) NextPage() ([]string, error) {
    if it.atLastPage {
        // We already returned Done with the last page of items. Continue to
        // return Done, but with no items.
        return nil, Done
    }
    if err := it.apiCall(); err != nil {
        return nil, err
    }
    if it.atLastPage {
        return it.items, Done
    }
    return it.items, nil
}

// Next returns the next result. Its second return value is Done if there are no more results.
// Once next returns Done, all subsequent calls will return Done.
//
// Internally, Next retrieves results in bulk. You can call SetPageSize as a performance hint to
// affect how many results are retrieved in a single RPC.
//
// SetPageToken should not be called when using Next.
//
// Next and NextPage should not be used with the same iterator.
func (it *StringIterator) Next() (string, error) {
    for it.currentIndex >= len(it.items) {
        if it.atLastPage {
            return "", Done
        }
        if err := it.apiCall(); err != nil {
            return "", err
        }
        it.currentIndex = 0
    }
    result := it.items[it.currentIndex]
    it.currentIndex++
    return result, nil
}

// PageSize returns the page size for all subsequent calls to NextPage.
func (it *StringIterator) PageSize() int {
    return int(it.pageSize)
}

// SetPageSize sets the page size for all subsequent calls to NextPage.
func (it *StringIterator) SetPageSize(pageSize int) {
    if pageSize > math.MaxInt32 {
        pageSize = math.MaxInt32
    }
    it.pageSize = int32(pageSize)
}

// SetPageToken sets the page token for the next call to NextPage, to resume the iteration from
// a previous point.
func (it *StringIterator) SetPageToken(token string) {
    it.nextPageToken = token
}

// NextPageToken returns a page token that can be used with SetPageToken to resume
// iteration from the next page. It returns the empty string if there are no more pages.
func (it *StringIterator) NextPageToken() string {
    return it.nextPageToken
}
