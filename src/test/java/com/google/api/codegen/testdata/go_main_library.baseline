============== file: cloud.google.com/go/library/apiv1/library_client.go ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
    "fmt"
    "math"
    "runtime"
    "time"

    "cloud.google.com/go/iam"
    "cloud.google.com/go/longrunning"
    gax "github.com/googleapis/gax-go"
    "golang.org/x/net/context"
    "google.golang.org/api/iterator"
    "google.golang.org/api/option"
    "google.golang.org/api/transport"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
    longrunningpb "google.golang.org/genproto/googleapis/longrunning"
    taggerpb "google.golang.org/genproto/googleapis/tagger/v1"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/metadata"
)

var (
    libraryShelfPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf_id}")
    libraryBookPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf_id}/books/{book_id}")
    libraryArchivedBookPathTemplate = gax.MustCompilePathTemplate("archives/{archive_path=**}/books/{book_id}")
    libraryReturnPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}/returns/{return}")
)

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
    CreateShelf []gax.CallOption
    GetShelf []gax.CallOption
    ListShelves []gax.CallOption
    DeleteShelf []gax.CallOption
    MergeShelves []gax.CallOption
    CreateBook []gax.CallOption
    PublishSeries []gax.CallOption
    GetBook []gax.CallOption
    ListBooks []gax.CallOption
    DeleteBook []gax.CallOption
    UpdateBook []gax.CallOption
    MoveBook []gax.CallOption
    ListStrings []gax.CallOption
    AddComments []gax.CallOption
    GetBookFromArchive []gax.CallOption
    UpdateBookIndex []gax.CallOption
    StreamShelves []gax.CallOption
    StreamBooks []gax.CallOption
    DiscussBook []gax.CallOption
    FindRelatedBooks []gax.CallOption
    AddLabel []gax.CallOption
    GetBigBook []gax.CallOption
}

func defaultClientOptions() []option.ClientOption {
    return []option.ClientOption{
        option.WithEndpoint("library-example.googleapis.com:443"),
        option.WithScopes(
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/library",
        ),
    }
}

func defaultCallOptions() *CallOptions {
    retry := map[[2]string][]gax.CallOption{
        {"default", "idempotent"}: {
            gax.WithRetry(func() gax.Retryer {
                return gax.OnCodes([]codes.Code{
                    codes.DeadlineExceeded,
                    codes.Unavailable,
                }, gax.Backoff{
                    Initial: 100*time.Millisecond,
                    Max: 1000*time.Millisecond,
                    Multiplier: 1.2,
                })
            }),
        },
    }
    return &CallOptions{
        CreateShelf: retry[[2]string{"default", "non_idempotent"}],
        GetShelf: retry[[2]string{"default", "idempotent"}],
        ListShelves: retry[[2]string{"default", "idempotent"}],
        DeleteShelf: retry[[2]string{"default", "idempotent"}],
        MergeShelves: retry[[2]string{"default", "non_idempotent"}],
        CreateBook: retry[[2]string{"default", "non_idempotent"}],
        PublishSeries: retry[[2]string{"default", "non_idempotent"}],
        GetBook: retry[[2]string{"default", "idempotent"}],
        ListBooks: retry[[2]string{"default", "idempotent"}],
        DeleteBook: retry[[2]string{"default", "idempotent"}],
        UpdateBook: retry[[2]string{"default", "idempotent"}],
        MoveBook: retry[[2]string{"default", "non_idempotent"}],
        ListStrings: retry[[2]string{"default", "idempotent"}],
        AddComments: retry[[2]string{"default", "non_idempotent"}],
        GetBookFromArchive: retry[[2]string{"default", "idempotent"}],
        UpdateBookIndex: retry[[2]string{"default", "idempotent"}],
        StreamShelves: retry[[2]string{"default", "idempotent"}],
        StreamBooks: retry[[2]string{"default", "idempotent"}],
        DiscussBook: retry[[2]string{"default", "non_idempotent"}],
        FindRelatedBooks: retry[[2]string{"default", "idempotent"}],
        AddLabel: retry[[2]string{"default", "non_idempotent"}],
        GetBigBook: retry[[2]string{"default", "non_idempotent"}],
    }
}

// Client is a client for interacting with Google Example Library API.
type Client struct {
    // The connection to the service.
    conn *grpc.ClientConn

    // The gRPC API client.
    client librarypb.LibraryServiceClient
    labelerClient taggerpb.LabelerClient

    // The call options for this service.
    CallOptions *CallOptions

    // The metadata to be sent with each request.
    metadata metadata.MD
}

// NewClient creates a new library service client.
//
// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``bookShelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `bookShelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
// This is [not a cloud link](http://www.google.com).
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
    conn, err := transport.DialGRPC(ctx, append(defaultClientOptions(), opts...)...)
    if err != nil {
        return nil, err
    }
    c := &Client {
        conn: conn,
        CallOptions: defaultCallOptions(),

        client: librarypb.NewLibraryServiceClient(conn),
        labelerClient: taggerpb.NewLabelerClient(conn),
    }
    c.SetGoogleClientInfo("gax", gax.Version)
    return c, nil
}

// Connection returns the client's connection to the API service.
func (c *Client) Connection() *grpc.ClientConn {
    return c.conn
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
    return c.conn.Close()
}

// SetGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) SetGoogleClientInfo(name, version string) {
    v := fmt.Sprintf("%s/%s %s gax/%s go/%s", name, version, gapicNameVersion, gax.Version, runtime.Version())
    c.metadata = metadata.Pairs("x-goog-api-client", v)
}

// LibraryShelfPath returns the path for the shelf resource.
func LibraryShelfPath(shelfId string) string {
    path, err := libraryShelfPathTemplate.Render(map[string]string{
        "shelf_id": shelfId,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// LibraryBookPath returns the path for the book resource.
func LibraryBookPath(shelfId, bookId string) string {
    path, err := libraryBookPathTemplate.Render(map[string]string{
        "shelf_id": shelfId,
        "book_id": bookId,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// LibraryArchivedBookPath returns the path for the archived book resource.
func LibraryArchivedBookPath(archivePath, bookId string) string {
    path, err := libraryArchivedBookPathTemplate.Render(map[string]string{
        "archive_path": archivePath,
        "book_id": bookId,
    })
    if err != nil {
        panic(err)
    }
    return path
}

// LibraryReturnPath returns the path for the return resource.
func LibraryReturnPath(shelf, book, return_ string) string {
    path, err := libraryReturnPathTemplate.Render(map[string]string{
        "shelf": shelf,
        "book": book,
        "return": return_,
    })
    if err != nil {
        panic(err)
    }
    return path
}


func (c *Client) BookIAM(book *librarypb.Book) *iam.Handle {
    return iam.InternalNewHandle(c.Connection(), book.Name)
}


// CreateShelf creates a shelf, and returns the new Shelf.
func (c *Client) CreateShelf(ctx context.Context, req *librarypb.CreateShelfRequest) (*librarypb.Shelf, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.CreateShelf(ctx, req)
        return err
    }, c.CallOptions.CreateShelf...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetShelf gets a shelf.
func (c *Client) GetShelf(ctx context.Context, req *librarypb.GetShelfRequest) (*librarypb.Shelf, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.GetShelf(ctx, req)
        return err
    }, c.CallOptions.GetShelf...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListShelves lists shelves.
func (c *Client) ListShelves(ctx context.Context, req *librarypb.ListShelvesRequest) *ShelfIterator {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    it := &ShelfIterator{}

    fetch := func(pageSize int, pageToken string) (string, error) {
        var resp *librarypb.ListShelvesResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.client.ListShelves(ctx, req)
            return err
        }, c.CallOptions.ListShelves...)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, resp.Shelves...)
        return resp.NextPageToken, nil
    }
    bufLen := func() int { return len(it.items) }
    takeBuf := func() interface{} {
        b := it.items
        it.items = nil
        return b
    }

    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, bufLen, takeBuf)
    return it
}

// DeleteShelf deletes a shelf.
func (c *Client) DeleteShelf(ctx context.Context, req *librarypb.DeleteShelfRequest) error {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        _, err = c.client.DeleteShelf(ctx, req)
        return err
    }, c.CallOptions.DeleteShelf...)
    return err
}

// MergeShelves merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
func (c *Client) MergeShelves(ctx context.Context, req *librarypb.MergeShelvesRequest) (*librarypb.Shelf, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Shelf
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.MergeShelves(ctx, req)
        return err
    }, c.CallOptions.MergeShelves...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// CreateBook creates a book.
func (c *Client) CreateBook(ctx context.Context, req *librarypb.CreateBookRequest) (*librarypb.Book, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.CreateBook(ctx, req)
        return err
    }, c.CallOptions.CreateBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// PublishSeries creates a series of books.
func (c *Client) PublishSeries(ctx context.Context, req *librarypb.PublishSeriesRequest) (*librarypb.PublishSeriesResponse, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.PublishSeriesResponse
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.PublishSeries(ctx, req)
        return err
    }, c.CallOptions.PublishSeries...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetBook gets a book.
func (c *Client) GetBook(ctx context.Context, req *librarypb.GetBookRequest) (*librarypb.Book, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.GetBook(ctx, req)
        return err
    }, c.CallOptions.GetBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListBooks lists books in a shelf.
func (c *Client) ListBooks(ctx context.Context, req *librarypb.ListBooksRequest) *BookIterator {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    it := &BookIterator{}

    fetch := func(pageSize int, pageToken string) (string, error) {
        var resp *librarypb.ListBooksResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.client.ListBooks(ctx, req)
            return err
        }, c.CallOptions.ListBooks...)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, resp.Books...)
        return resp.NextPageToken, nil
    }
    bufLen := func() int { return len(it.items) }
    takeBuf := func() interface{} {
        b := it.items
        it.items = nil
        return b
    }

    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, bufLen, takeBuf)
    return it
}

// DeleteBook deletes a book.
func (c *Client) DeleteBook(ctx context.Context, req *librarypb.DeleteBookRequest) error {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        _, err = c.client.DeleteBook(ctx, req)
        return err
    }, c.CallOptions.DeleteBook...)
    return err
}

// UpdateBook updates a book.
func (c *Client) UpdateBook(ctx context.Context, req *librarypb.UpdateBookRequest) (*librarypb.Book, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.UpdateBook(ctx, req)
        return err
    }, c.CallOptions.UpdateBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// MoveBook moves a book to another shelf, and returns the new book.
func (c *Client) MoveBook(ctx context.Context, req *librarypb.MoveBookRequest) (*librarypb.Book, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.MoveBook(ctx, req)
        return err
    }, c.CallOptions.MoveBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// ListStrings lists a primitive resource. To test go page streaming.
func (c *Client) ListStrings(ctx context.Context, req *librarypb.ListStringsRequest) *StringIterator {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    it := &StringIterator{}

    fetch := func(pageSize int, pageToken string) (string, error) {
        var resp *librarypb.ListStringsResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.client.ListStrings(ctx, req)
            return err
        }, c.CallOptions.ListStrings...)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, resp.Strings...)
        return resp.NextPageToken, nil
    }
    bufLen := func() int { return len(it.items) }
    takeBuf := func() interface{} {
        b := it.items
        it.items = nil
        return b
    }

    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, bufLen, takeBuf)
    return it
}

// AddComments adds comments to a book
func (c *Client) AddComments(ctx context.Context, req *librarypb.AddCommentsRequest) error {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        _, err = c.client.AddComments(ctx, req)
        return err
    }, c.CallOptions.AddComments...)
    return err
}

// GetBookFromArchive gets a book from an archive.
func (c *Client) GetBookFromArchive(ctx context.Context, req *librarypb.GetBookFromArchiveRequest) (*librarypb.Book, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *librarypb.Book
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.GetBookFromArchive(ctx, req)
        return err
    }, c.CallOptions.GetBookFromArchive...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// UpdateBookIndex updates the index of a book.
func (c *Client) UpdateBookIndex(ctx context.Context, req *librarypb.UpdateBookIndexRequest) error {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        _, err = c.client.UpdateBookIndex(ctx, req)
        return err
    }, c.CallOptions.UpdateBookIndex...)
    return err
}

// StreamShelves test server streaming
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) StreamShelves(ctx context.Context, req *librarypb.StreamShelvesRequest) (librarypb.LibraryService_StreamShelvesClient, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp librarypb.LibraryService_StreamShelvesClient
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.StreamShelves(ctx, req)
        return err
    }, c.CallOptions.StreamShelves...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// StreamBooks test server streaming, non-paged responses.
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) StreamBooks(ctx context.Context, req *librarypb.StreamBooksRequest) (librarypb.LibraryService_StreamBooksClient, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp librarypb.LibraryService_StreamBooksClient
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.StreamBooks(ctx, req)
        return err
    }, c.CallOptions.StreamBooks...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// DiscussBook test bidi-streaming.
// gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
func (c *Client) DiscussBook(ctx context.Context) (librarypb.LibraryService_DiscussBookClient, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp librarypb.LibraryService_DiscussBookClient
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.DiscussBook(ctx)
        return err
    }, c.CallOptions.DiscussBook...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// FindRelatedBooks
func (c *Client) FindRelatedBooks(ctx context.Context, req *librarypb.FindRelatedBooksRequest) *StringIterator {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    it := &StringIterator{}

    fetch := func(pageSize int, pageToken string) (string, error) {
        var resp *librarypb.FindRelatedBooksResponse
        req.PageToken = pageToken
        if pageSize > math.MaxInt32 {
            req.PageSize = math.MaxInt32
        } else {
            req.PageSize = int32(pageSize)
        }
        err := gax.Invoke(ctx, func(ctx context.Context) error {
            var err error
            resp, err = c.client.FindRelatedBooks(ctx, req)
            return err
        }, c.CallOptions.FindRelatedBooks...)
        if err != nil {
            return "", err
        }
        it.items = append(it.items, resp.Names...)
        return resp.NextPageToken, nil
    }
    bufLen := func() int { return len(it.items) }
    takeBuf := func() interface{} {
        b := it.items
        it.items = nil
        return b
    }

    it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, bufLen, takeBuf)
    return it
}

// addLabel adds a label to the entity.
func (c *Client) addLabel(ctx context.Context, req *taggerpb.AddLabelRequest) (*taggerpb.AddLabelResponse, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *taggerpb.AddLabelResponse
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.labelerClient.AddLabel(ctx, req)
        return err
    }, c.CallOptions.AddLabel...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}

// GetBigBook
func (c *Client) GetBigBook(ctx context.Context, req *librarypb.GetBookRequest) (*longrunning.Operation, error) {
    md, _ := metadata.FromContext(ctx)
    ctx = metadata.NewContext(ctx, metadata.Join(md, c.metadata))
    var resp *longrunningpb.Operation
    err := gax.Invoke(ctx, func(ctx context.Context) error {
        var err error
        resp, err = c.client.GetBigBook(ctx, req)
        return err
    }, c.CallOptions.GetBigBook...)
    if err != nil {
        return nil, err
    }
    return longrunning.InternalNewOperation(c.Connection(), resp), nil
}


// BookIterator manages a stream of *librarypb.Book.
type BookIterator struct {
    items    []*librarypb.Book
    pageInfo *iterator.PageInfo
    nextFunc func() error
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *BookIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *BookIterator) Next() (*librarypb.Book, error) {
    if err := it.nextFunc(); err != nil {
        return nil, err
    }
    item := it.items[0]
    it.items = it.items[1:]
    return item, nil
}

// ShelfIterator manages a stream of *librarypb.Shelf.
type ShelfIterator struct {
    items    []*librarypb.Shelf
    pageInfo *iterator.PageInfo
    nextFunc func() error
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *ShelfIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *ShelfIterator) Next() (*librarypb.Shelf, error) {
    if err := it.nextFunc(); err != nil {
        return nil, err
    }
    item := it.items[0]
    it.items = it.items[1:]
    return item, nil
}

// StringIterator manages a stream of string.
type StringIterator struct {
    items    []string
    pageInfo *iterator.PageInfo
    nextFunc func() error
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *StringIterator) PageInfo() *iterator.PageInfo {
    return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *StringIterator) Next() (string, error) {
    if err := it.nextFunc(); err != nil {
        return "", err
    }
    item := it.items[0]
    it.items = it.items[1:]
    return item, nil
}

