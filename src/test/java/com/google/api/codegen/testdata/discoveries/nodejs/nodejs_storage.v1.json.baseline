
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.bucketAccessControls.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.bucketAccessControls.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Name of a bucket.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.bucketAccessControls.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Name of a bucket.
    bucket: "",


    auth: authClient
  };

  storage.bucketAccessControls.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  storage.bucketAccessControls.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.bucketAccessControls.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Name of a bucket.
    bucket: "",


    auth: authClient
  };

  storage.buckets.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Name of a bucket.
    bucket: "",


    auth: authClient
  };

  storage.buckets.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * A valid API project identifier.
    project: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.buckets.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * A valid API project identifier.
    project: "",


    auth: authClient
  };

  var recur = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      storage.buckets.list(request, recur);
    }
  };

  storage.buckets.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // * Name of a bucket.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  storage.buckets.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Name of a bucket.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.buckets.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.channels.stop(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.defaultObjectAccessControls.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.defaultObjectAccessControls.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Name of a bucket.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.defaultObjectAccessControls.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Name of a bucket.
    bucket: "",


    auth: authClient
  };

  storage.defaultObjectAccessControls.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  storage.defaultObjectAccessControls.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Name of a bucket.
    bucket: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.defaultObjectAccessControls.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.objectAccessControls.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    auth: authClient
  };

  storage.objectAccessControls.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objectAccessControls.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    auth: authClient
  };

  storage.objectAccessControls.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  storage.objectAccessControls.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Name of a bucket.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",

    // * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    //   group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objectAccessControls.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `compose` method:

    // * Name of the bucket in which to store the new object.
    destinationBucket: "",

    // * Name of the new object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    destinationObject: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objects.compose(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `copy` method:

    // * Name of the bucket in which to find the source object.
    sourceBucket: "",

    // * Name of the source object. For information about how to URL encode object names to be path safe,
    //   see Encoding URI Path Parts.
    sourceObject: "",

    // * Name of the bucket in which to store the new object. Overrides the provided object metadata's
    //   bucket value, if any.For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    destinationBucket: "",

    // * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    //   object metadata's name value, if any.
    destinationObject: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objects.copy(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Name of the bucket in which the object resides.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    auth: authClient
  };

  storage.objects.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Name of the bucket in which the object resides.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    auth: authClient
  };

  storage.objects.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Name of the bucket in which to store the new object. Overrides the provided object metadata's
    //   bucket value, if any.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    media: {
      // TODO: Add desired media content for upload. See:
      // https://github.com/google/google-api-nodejs-client#media-uploads
      mimeType: 'text/plain',
      body: ''
    },

    auth: authClient
  };

  storage.objects.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Name of the bucket in which to look for objects.
    bucket: "",


    auth: authClient
  };

  var recur = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      storage.objects.list(request, recur);
    }
  };

  storage.objects.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // * Name of the bucket in which the object resides.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  storage.objects.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `rewrite` method:

    // * Name of the bucket in which to find the source object.
    sourceBucket: "",

    // * Name of the source object. For information about how to URL encode object names to be path safe,
    //   see Encoding URI Path Parts.
    sourceObject: "",

    // * Name of the bucket in which to store the new object. Overrides the provided object metadata's
    //   bucket value, if any.
    destinationBucket: "",

    // * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    //   object metadata's name value, if any. For information about how to URL encode object names to be
    //   path safe, see Encoding URI Path Parts.
    destinationObject: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objects.rewrite(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Name of the bucket in which the object resides.
    bucket: "",

    // * Name of the object. For information about how to URL encode object names to be path safe, see
    //   Encoding URI Path Parts.
    object: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objects.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the storage service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var storage = google.storage('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `watchAll` method:

    // * Name of the bucket in which to look for objects.
    bucket: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  storage.objects.watchAll(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
