
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.RollingUpdates.Cancel(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.RollingUpdates.Get(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  rb := replicapoolupdater.RollingUpdate{
    // TODO: Add desired fields of the request body.
  }

  resp, err := replicapoolupdaterService.RollingUpdates.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  req := replicapoolupdaterService.RollingUpdates.List(project, zone)
  if err := req.Pages(ctx, func(page *replicapoolupdater.RollingUpdateList) error {
    for _, rollingUpdate := range page.Items {
      // TODO: Change code below to process each `rollingUpdate` resource:
      fmt.Printf("%#v\n", rollingUpdate)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  req := replicapoolupdaterService.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate)
  if err := req.Pages(ctx, func(page *replicapoolupdater.InstanceUpdateList) error {
    for _, instanceUpdate := range page.Items {
      // TODO: Change code below to process each `instanceUpdate` resource:
      fmt.Printf("%#v\n", instanceUpdate)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.RollingUpdates.Pause(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.RollingUpdates.Resume(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.RollingUpdates.Rollback(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Abandon(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Commit(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Get(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  rb := replicapoolupdater.Rollout{
    // TODO: Add desired fields of the request body.
  }

  resp, err := replicapoolupdaterService.Rollout.Insert(project, zone, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.List(project, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Pause(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  rb := replicapoolupdater.RampUpRolloutRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := replicapoolupdaterService.Rollout.Rampup(project, zone, rollout, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Resume(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // The ID of the update.
  rollout := "{MY-ROLLOUT}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.Rollout.Rollback(project, zone, rollout).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the project scoping this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  // Name of the operation resource to return.
  operation := "{MY-OPERATION}"
  // TODO: Change placeholder value above.

  resp, err := replicapoolupdaterService.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  replicapoolupdaterService, err := replicapoolupdater.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the project scoping this request.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}"
  // TODO: Change placeholder value above.

  req := replicapoolupdaterService.ZoneOperations.List(project, zone)
  if err := req.Pages(ctx, func(page *replicapoolupdater.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
