
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Cancel(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Get(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Insert(project, zone, &replicapoolupdater.RollingUpdate{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.


  call := client.RollingUpdates.List(project, zone)
  if err := call.Pages(ctx, func(page *replicapoolupdater.RollingUpdateList) error {
    for _, v := range page.Items {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.


  call := client.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate)
  if err := call.Pages(ctx, func(page *replicapoolupdater.InstanceUpdateList) error {
    for _, v := range page.Items {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Pause(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Resume(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The Google Developers Console project name.
  project := "" // TODO: Update placeholder value.

  // The name of the zone in which the update's target resides.
  zone := "" // TODO: Update placeholder value.

  // The name of the update.
  rollingUpdate := "" // TODO: Update placeholder value.

  resp, err := client.RollingUpdates.Rollback(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Name of the project scoping this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.

  // Name of the operation resource to return.
  operation := "" // TODO: Update placeholder value.

  resp, err := client.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/replicapoolupdater/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := replicapoolupdater.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Name of the project scoping this request.
  project := "" // TODO: Update placeholder value.

  // Name of the zone scoping this request.
  zone := "" // TODO: Update placeholder value.


  call := client.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *replicapoolupdater.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
