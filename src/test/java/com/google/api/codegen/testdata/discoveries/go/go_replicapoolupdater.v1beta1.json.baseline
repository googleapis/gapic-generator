
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  res, err := service.RollingUpdates.Cancel(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  res, err := service.RollingUpdates.Get(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Insert` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  rollingUpdateBody := replicapoolupdater.RollingUpdate{
    // TODO: Add desired fields of the `rollingUpdateBody` variable.
  }

  res, err := service.RollingUpdates.Insert(project, zone, &rollingUpdateBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  req := service.RollingUpdates.List(project, zone)
  if err := req.Pages(ctx, func(page *replicapoolupdater.RollingUpdateList) error {
    for _, rollingUpdate := range page.Items {
      // TODO: Change code below to process each `rollingUpdate` resource:
      out, err := json.MarshalIndent(rollingUpdate, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `ListInstanceUpdates` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  req := service.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate)
  if err := req.Pages(ctx, func(page *replicapoolupdater.InstanceUpdateList) error {
    for _, instanceUpdate := range page.Items {
      // TODO: Change code below to process each `instanceUpdate` resource:
      out, err := json.MarshalIndent(instanceUpdate, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Pause` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  res, err := service.RollingUpdates.Pause(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Resume` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  res, err := service.RollingUpdates.Resume(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Rollback` method:

  // * The Google Developers Console project name.
  project := ""

  // * The name of the zone in which the update's target resides.
  zone := ""

  // * The name of the update.
  rollingUpdate := ""

  res, err := service.RollingUpdates.Rollback(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * Name of the project scoping this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  // * Name of the operation resource to return.
  operation := ""

  res, err := service.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the replicapoolupdater service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Name of the project scoping this request.
  project := ""

  // * Name of the zone scoping this request.
  zone := ""

  req := service.ZoneOperations.List(project, zone)
  if err := req.Pages(ctx, func(page *replicapoolupdater.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
