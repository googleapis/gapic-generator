
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'cancel' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  callResult, err := service.RollingUpdates.Cancel(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  callResult, err := service.RollingUpdates.Get(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insert' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""


    requestBody = &replicapoolupdater.RollingUpdate{}
  )

  callResult, err := service.RollingUpdates.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

  )

  fn := func(page *replicapoolupdater.RollingUpdateList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.RollingUpdates.List(project, zone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'listInstanceUpdates' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  fn := func(page *replicapoolupdater.InstanceUpdateList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'pause' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  callResult, err := service.RollingUpdates.Pause(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'resume' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  callResult, err := service.RollingUpdates.Resume(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'rollback' method:
  var (
    // The Google Developers Console project name.
    project = ""

    // The name of the zone in which the update's target resides.
    zone = ""

    // The name of the update.
    rollingUpdate = ""

  )

  callResult, err := service.RollingUpdates.Rollback(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Name of the project scoping this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""

    // Name of the operation resource to return.
    operation = ""

  )

  callResult, err := service.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/replicapoolupdater/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := replicapoolupdater.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Name of the project scoping this request.
    project = ""

    // Name of the zone scoping this request.
    zone = ""

  )

  fn := func(page *replicapoolupdater.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.ZoneOperations.List(project, zone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
