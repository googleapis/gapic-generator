
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  resp, err := s.RollingUpdates.Cancel(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  resp, err := s.RollingUpdates.Get(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  rollingUpdate := &replicapoolupdater.RollingUpdate{
    // TODO: Add the desired fields.
  }

  resp, err := s.RollingUpdates.Insert(project, zone, &rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  call := s.RollingUpdates.List(project, zone)
  if err := call.Pages(ctx, func(page *replicapoolupdater.RollingUpdateList) error {
    for _, rollingUpdate := range page.Items {
      // TODO: Use rollingUpdate
      fmt.Printf("%#v\n", rollingUpdate)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  call := s.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate)
  if err := call.Pages(ctx, func(page *replicapoolupdater.InstanceUpdateList) error {
    for _, instanceUpdate := range page.Items {
      // TODO: Use instanceUpdate
      fmt.Printf("%#v\n", instanceUpdate)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  resp, err := s.RollingUpdates.Pause(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  resp, err := s.RollingUpdates.Resume(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of the zone in which the update's target resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the update.
  rollingUpdate := "{MY-ROLLING-UPDATE}" // TODO: Update placeholder value(s).

  resp, err := s.RollingUpdates.Rollback(project, zone, rollingUpdate).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the project scoping this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // Name of the operation resource to return.
  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/replicapoolupdater/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, replicapoolupdater.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := replicapoolupdater.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the project scoping this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the zone scoping this request.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  call := s.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *replicapoolupdater.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      fmt.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
