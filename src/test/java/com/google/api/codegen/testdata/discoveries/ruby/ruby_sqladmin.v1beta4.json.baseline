
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_backup_run' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''

# The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
id = ''


# Perform the call
response = service.delete_backup_run(project, instance, id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_backup_run' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''

# The ID of this Backup Run.
id = ''


# Perform the call
response = service.get_backup_run(project, instance, id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_backup_runs' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_backup_runs(project, instance, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_database' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Name of the database to be deleted in the instance.
database = ''


# Perform the call
response = service.delete_database(project, instance, database)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_database' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Name of the database in the instance.
database = ''


# Perform the call
response = service.get_database(project, instance, database)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_database' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''
database_object = Google::Apis::SqladminV1beta4::Database.new


# Perform the call
response = service.insert_database(project, instance, database_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_databases' method:
# Project ID of the project for which to list Cloud SQL instances.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.list_databases(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_database' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Name of the database to be updated in the instance.
database = ''
database_object = Google::Apis::SqladminV1beta4::Database.new


# Perform the call
response = service.patch_database(project, instance, database, database_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_database' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Name of the database to be updated in the instance.
database = ''
database_object = Google::Apis::SqladminV1beta4::Database.new


# Perform the call
response = service.update_database(project, instance, database, database_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



# Perform the call
response = service.list_flags()
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'clone_instance' method:
# Project ID of the source as well as the clone Cloud SQL instance.
project = ''

# The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
instance = ''
clone_instances_request_object = Google::Apis::SqladminV1beta4::CloneInstancesRequest.new


# Perform the call
response = service.clone_instance(project, instance, clone_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_instance' method:
# Project ID of the project that contains the instance to be deleted.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.delete_instance(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'export_instance' method:
# Project ID of the project that contains the instance to be exported.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
export_instances_request_object = Google::Apis::SqladminV1beta4::ExportInstancesRequest.new


# Perform the call
response = service.export_instance(project, instance, export_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'failover_instance' method:
# ID of the project that contains the read replica.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
instances_failover_request_object = Google::Apis::SqladminV1beta4::InstancesFailoverRequest.new


# Perform the call
response = service.failover_instance(project, instance, instances_failover_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_instance' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.get_instance(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'import_instance' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
import_instances_request_object = Google::Apis::SqladminV1beta4::ImportInstancesRequest.new


# Perform the call
response = service.import_instance(project, instance, import_instances_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_instance' method:
# Project ID of the project to which the newly created Cloud SQL instances should belong.
project = ''
database_instance_object = Google::Apis::SqladminV1beta4::DatabaseInstance.new


# Perform the call
response = service.insert_instance(project, database_instance_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instances' method:
# Project ID of the project for which to list Cloud SQL instances.
project = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instances(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_instance' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
database_instance_object = Google::Apis::SqladminV1beta4::DatabaseInstance.new


# Perform the call
response = service.patch_instance(project, instance, database_instance_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'promote_instance_replica' method:
# ID of the project that contains the read replica.
project = ''

# Cloud SQL read replica instance name.
instance = ''


# Perform the call
response = service.promote_instance_replica(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'reset_instance_ssl_config' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.reset_instance_ssl_config(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'restart_instance' method:
# Project ID of the project that contains the instance to be restarted.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.restart_instance(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'restore_instance_backup' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
restore_instances_backup_request_object = Google::Apis::SqladminV1beta4::RestoreInstancesBackupRequest.new


# Perform the call
response = service.restore_instance_backup(project, instance, restore_instances_backup_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'start_instance_replica' method:
# ID of the project that contains the read replica.
project = ''

# Cloud SQL read replica instance name.
instance = ''


# Perform the call
response = service.start_instance_replica(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'stop_instance_replica' method:
# ID of the project that contains the read replica.
project = ''

# Cloud SQL read replica instance name.
instance = ''


# Perform the call
response = service.stop_instance_replica(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_instance' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
database_instance_object = Google::Apis::SqladminV1beta4::DatabaseInstance.new


# Perform the call
response = service.update_instance(project, instance, database_instance_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_operation' method:
# Project ID of the project that contains the instance.
project = ''

# Instance operation ID.
operation = ''


# Perform the call
response = service.get_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_operations' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_operations(project, instance, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_ssl_cert_ephemeral' method:
# Project ID of the Cloud SQL project.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
ssl_certs_create_ephemeral_request_object = Google::Apis::SqladminV1beta4::SslCertsCreateEphemeralRequest.new


# Perform the call
response = service.create_ssl_cert_ephemeral(project, instance, ssl_certs_create_ephemeral_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_ssl_cert' method:
# Project ID of the project that contains the instance to be deleted.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''

# Sha1 FingerPrint.
sha1_fingerprint = ''


# Perform the call
response = service.delete_ssl_cert(project, instance, sha1_fingerprint)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_ssl_cert' method:
# Project ID of the project that contains the instance.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''

# Sha1 FingerPrint.
sha1_fingerprint = ''


# Perform the call
response = service.get_ssl_cert(project, instance, sha1_fingerprint)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_ssl_cert' method:
# Project ID of the project to which the newly created Cloud SQL instances should belong.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''
insert_ssl_certs_request_object = Google::Apis::SqladminV1beta4::InsertSslCertsRequest.new


# Perform the call
response = service.insert_ssl_cert(project, instance, insert_ssl_certs_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_ssl_certs' method:
# Project ID of the project for which to list Cloud SQL instances.
project = ''

# Cloud SQL instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.list_ssl_certs(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_tiers' method:
# Project ID of the project for which to list tiers.
project = ''


# Perform the call
response = service.list_tiers(project)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_user' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Host of the user in the instance.
host = ''

# Name of the user in the instance.
name = ''


# Perform the call
response = service.delete_user(project, instance, host, name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_user' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''
user_object = Google::Apis::SqladminV1beta4::User.new


# Perform the call
response = service.insert_user(project, instance, user_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_users' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''


# Perform the call
response = service.list_users(project, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_user' method:
# Project ID of the project that contains the instance.
project = ''

# Database instance ID. This does not include the project ID.
instance = ''

# Host of the user in the instance.
host = ''

# Name of the user in the instance.
name = ''
user_object = Google::Apis::SqladminV1beta4::User.new


# Perform the call
response = service.update_user(project, instance, host, name, user_object)
