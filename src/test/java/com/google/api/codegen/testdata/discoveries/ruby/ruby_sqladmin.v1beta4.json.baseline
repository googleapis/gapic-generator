
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
id = ''  # TODO: Update placeholder value(s).

# Perform the call
response = service.delete_backup_run(project, instance, id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# The ID of this Backup Run.
id = ''  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_backup_run(project, instance, id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_backup_runs(project, instance, page_token: token)
end

items.each do |backup_run|
  # TODO: Use backup_run
  puts JSON.pretty_generate(backup_run)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Name of the database to be deleted in the instance.
database = '{MY-DATABASE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.delete_database(project, instance, database)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Name of the database in the instance.
database = '{MY-DATABASE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_database(project, instance, database)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
database_body = Google::Apis::SqladminV1beta4::Database.new

# Perform the call
response = service.insert_database(project, instance, database_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project for which to list Cloud SQL instances.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.list_databases(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Name of the database to be updated in the instance.
database = '{MY-DATABASE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members to be changed.
database_body = Google::Apis::SqladminV1beta4::Database.new

# Perform the call
response = service.patch_database(project, instance, database, database_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Name of the database to be updated in the instance.
database = '{MY-DATABASE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
database_body = Google::Apis::SqladminV1beta4::Database.new

# Perform the call
response = service.update_database(project, instance, database, database_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.list_flags()

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the source as well as the clone Cloud SQL instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
clone_instances_request_body = Google::Apis::SqladminV1beta4::CloneInstancesRequest.new

# Perform the call
response = service.clone_instance(project, instance, clone_instances_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance to be deleted.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.delete_instance(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance to be exported.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
export_instances_request_body = Google::Apis::SqladminV1beta4::ExportInstancesRequest.new

# Perform the call
response = service.export_instance(project, instance, export_instances_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# ID of the project that contains the read replica.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
instances_failover_request_body = Google::Apis::SqladminV1beta4::InstancesFailoverRequest.new

# Perform the call
response = service.failover_instance(project, instance, instances_failover_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_instance(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
import_instances_request_body = Google::Apis::SqladminV1beta4::ImportInstancesRequest.new

# Perform the call
response = service.import_instance(project, instance, import_instances_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project to which the newly created Cloud SQL instances should belong.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
database_instance_body = Google::Apis::SqladminV1beta4::DatabaseInstance.new

# Perform the call
response = service.insert_instance(project, database_instance_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project for which to list Cloud SQL instances.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instances(project, page_token: token)
end

items.each do |database_instance|
  # TODO: Use database_instance
  puts JSON.pretty_generate(database_instance)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members to be changed.
database_instance_body = Google::Apis::SqladminV1beta4::DatabaseInstance.new

# Perform the call
response = service.patch_instance(project, instance, database_instance_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# ID of the project that contains the read replica.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL read replica instance name.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.promote_instance_replica(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.reset_instance_ssl_config(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance to be restarted.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.restart_instance(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
restore_instances_backup_request_body = Google::Apis::SqladminV1beta4::RestoreInstancesBackupRequest.new

# Perform the call
response = service.restore_instance_backup(project, instance, restore_instances_backup_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# ID of the project that contains the read replica.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL read replica instance name.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.start_instance_replica(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# ID of the project that contains the read replica.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL read replica instance name.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.stop_instance_replica(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
database_instance_body = Google::Apis::SqladminV1beta4::DatabaseInstance.new

# Perform the call
response = service.update_instance(project, instance, database_instance_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Instance operation ID.
operation = '{MY-OPERATION}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_operation(project, operation)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_operations(project, instance, page_token: token)
end

items.each do |operation|
  # TODO: Use operation
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the Cloud SQL project.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
ssl_certs_create_ephemeral_request_body = Google::Apis::SqladminV1beta4::SslCertsCreateEphemeralRequest.new

# Perform the call
response = service.create_ssl_cert_ephemeral(project, instance, ssl_certs_create_ephemeral_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance to be deleted.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Sha1 FingerPrint.
sha1_fingerprint = '{MY-SHA1-FINGERPRINT}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.delete_ssl_cert(project, instance, sha1_fingerprint)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Sha1 FingerPrint.
sha1_fingerprint = '{MY-SHA1-FINGERPRINT}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_ssl_cert(project, instance, sha1_fingerprint)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project to which the newly created Cloud SQL instances should belong.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
insert_ssl_certs_request_body = Google::Apis::SqladminV1beta4::InsertSslCertsRequest.new

# Perform the call
response = service.insert_ssl_cert(project, instance, insert_ssl_certs_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project for which to list Cloud SQL instances.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Cloud SQL instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.list_ssl_certs(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project for which to list tiers.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.list_tiers(project)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Host of the user in the instance.
host = '{MY-HOST}'  # TODO: Update placeholder value(s).

# Name of the user in the instance.
name = '{MY-NAME}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.delete_user(project, instance, host, name)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
user_body = Google::Apis::SqladminV1beta4::User.new

# Perform the call
response = service.insert_user(project, instance, user_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.list_users(project, instance)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud SQL Administration API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sqladmin
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/sqladmin_v1beta4'
require 'json'

service = Google::Apis::SqladminV1beta4::SQLAdminService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Project ID of the project that contains the instance.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Database instance ID. This does not include the project ID.
instance = '{MY-INSTANCE}'  # TODO: Update placeholder value(s).

# Host of the user in the instance.
host = '{MY-HOST}'  # TODO: Update placeholder value(s).

# Name of the user in the instance.
name = '{MY-NAME}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
user_body = Google::Apis::SqladminV1beta4::User.new

# Perform the call
response = service.update_user(project, instance, host, name, user_body)

# TODO: Use response
puts JSON.pretty_generate(response)
