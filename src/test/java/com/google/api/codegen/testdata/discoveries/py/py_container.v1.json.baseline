
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

create_cluster_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().zones().clusters().create(projectId=project_id, zone=zone, body=create_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster to delete.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().delete(projectId=project_id, zone=zone, clusterId=cluster_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster to retrieve.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().get(projectId=project_id, zone=zone, clusterId=cluster_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides, or "-" for all zones.
zone = 'my-zone'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().list(projectId=project_id, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

create_node_pool_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.projects().zones().clusters().nodePools().create(projectId=project_id, zone=zone, clusterId=cluster_id, body=create_node_pool_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

# The name of the node pool to delete.
node_pool_id = 'my-node-pool-id'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().nodePools().delete(projectId=project_id, zone=zone, clusterId=cluster_id, nodePoolId=node_pool_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

# The name of the node pool.
node_pool_id = 'my-node-pool-id'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().nodePools().get(projectId=project_id, zone=zone, clusterId=cluster_id, nodePoolId=node_pool_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

request = service.projects().zones().clusters().nodePools().list(projectId=project_id, zone=zone, clusterId=cluster_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The name of the cluster to upgrade.
cluster_id = 'my-cluster-id'  # TODO: Update placeholder value.

update_cluster_request_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.projects().zones().clusters().update(projectId=project_id, zone=zone, clusterId=cluster_id, body=update_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for.
zone = 'my-zone'  # TODO: Update placeholder value.

request = service.projects().zones().getServerconfig(projectId=project_id, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = 'my-zone'  # TODO: Update placeholder value.

# The server-assigned `name` of the operation.
operation_id = 'my-operation-id'  # TODO: Update placeholder value.

request = service.projects().zones().operations().get(projectId=project_id, zone=zone, operationId=operation_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
project_id = 'my-project-id'  # TODO: Update placeholder value.

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for, or `-` for all zones.
zone = 'my-zone'  # TODO: Update placeholder value.

request = service.projects().zones().operations().list(projectId=project_id, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
