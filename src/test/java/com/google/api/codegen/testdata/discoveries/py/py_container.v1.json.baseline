
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
zone = ''

create_cluster_request = {
# TODO: Add desired entries of the 'create_cluster_request' dict
}

request = service.projects().zones().clusters().create(projectId, zone, create_cluster_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
zone = ''
# * The name of the cluster to delete.
clusterId = ''

request = service.projects().zones().clusters().delete(projectId, zone, clusterId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
zone = ''
# * The name of the cluster to retrieve.
clusterId = ''

request = service.projects().zones().clusters().get(projectId, zone, clusterId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides, or "-" for all zones.
zone = ''

request = service.projects().zones().clusters().list(projectId, zone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
zone = ''
# * The name of the cluster to upgrade.
clusterId = ''

update_cluster_request = {
# TODO: Add desired entries of the 'update_cluster_request' dict
}

request = service.projects().zones().clusters().update(projectId, zone, clusterId, update_cluster_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getServerconfig' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
zone = ''

request = service.projects().zones().getServerconfig(projectId, zone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
zone = ''
# * The server-assigned `name` of the operation.
operationId = ''

request = service.projects().zones().operations().get(projectId, zone, operationId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the container service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
projectId = ''
# * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
zone = ''

request = service.projects().zones().operations().list(projectId, zone)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
