
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'


create_cluster_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().zones().clusters().create(projectId=projectId, zone=zone, body=create_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to delete.
clusterId = '{MY-CLUSTER-ID}'


request = service.projects().zones().clusters().delete(projectId=projectId, zone=zone, clusterId=clusterId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to retrieve.
clusterId = '{MY-CLUSTER-ID}'


request = service.projects().zones().clusters().get(projectId=projectId, zone=zone, clusterId=clusterId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides, or "-" for all zones.
zone = '{MY-ZONE}'


request = service.projects().zones().clusters().list(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
clusterId = '{MY-CLUSTER-ID}'


create_node_pool_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().zones().clusters().nodePools().create(projectId=projectId, zone=zone, clusterId=clusterId, body=create_node_pool_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
clusterId = '{MY-CLUSTER-ID}'

# The name of the node pool to delete.
nodePoolId = '{MY-NODE-POOL-ID}'


request = service.projects().zones().clusters().nodePools().delete(projectId=projectId, zone=zone, clusterId=clusterId, nodePoolId=nodePoolId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
clusterId = '{MY-CLUSTER-ID}'

# The name of the node pool.
nodePoolId = '{MY-NODE-POOL-ID}'


request = service.projects().zones().clusters().nodePools().get(projectId=projectId, zone=zone, clusterId=clusterId, nodePoolId=nodePoolId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster.
clusterId = '{MY-CLUSTER-ID}'


request = service.projects().zones().clusters().nodePools().list(projectId=projectId, zone=zone, clusterId=clusterId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The name of the cluster to upgrade.
clusterId = '{MY-CLUSTER-ID}'


update_cluster_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().zones().clusters().update(projectId=projectId, zone=zone, clusterId=clusterId, body=update_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getServerconfig` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for.
zone = '{MY-ZONE}'


request = service.projects().zones().getServerconfig(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'

# The server-assigned `name` of the operation.
operationId = '{MY-OPERATION-ID}'


request = service.projects().zones().operations().get(projectId=projectId, zone=zone, operationId=operationId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The Google Developers Console [project ID or project number]
# (https://support.google.com/cloud/answer/6158840).
projectId = '{MY-PROJECT-ID}'

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for, or `-` for all zones.
zone = '{MY-ZONE}'


request = service.projects().zones().operations().list(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
