
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

create_cluster_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().zones().clusters().create(projectId=projectId, zone=zone, body=create_cluster_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the cluster to delete.
clusterId = '{MY-CLUSTER-ID}'  # TODO: Update placeholder value(s).

request = service.projects().zones().clusters().delete(projectId=projectId, zone=zone, clusterId=clusterId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the cluster to retrieve.
clusterId = '{MY-CLUSTER-ID}'  # TODO: Update placeholder value(s).

request = service.projects().zones().clusters().get(projectId=projectId, zone=zone, clusterId=clusterId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides, or "-" for all zones.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

request = service.projects().zones().clusters().list(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the cluster to upgrade.
clusterId = '{MY-CLUSTER-ID}'  # TODO: Update placeholder value(s).

update_cluster_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().zones().clusters().update(projectId=projectId, zone=zone, clusterId=clusterId, body=update_cluster_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for, or "-" for all zones.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

request = service.projects().zones().getServerconfig(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
# resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The server-assigned `name` of the operation.
operationId = '{MY-OPERATION-ID}'  # TODO: Update placeholder value(s).

request = service.projects().zones().operations().get(projectId=projectId, zone=zone, operationId=operationId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Container Engine API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/container
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('container', 'v1', credentials=credentials)

# The Google Developers Console [project ID or project number]
# (https://developers.google.com/console/help/new/#projectnumber).
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
# for, or "-" for all zones.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

request = service.projects().zones().operations().list(projectId=projectId, zone=zone)
response = request.execute()

# TODO: Use response
pprint(response)
