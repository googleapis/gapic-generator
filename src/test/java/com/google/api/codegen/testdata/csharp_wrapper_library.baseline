============== file: Google/Example/Library/V1/LibraryServiceClient.cs ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading;
using System.Threading.Tasks;

namespace Google.Example.Library.V1
{

    /// <summary>
    /// Extension methods to assist with using <see cref="LibraryServiceClient"/>.
    /// </summary>
    public static partial class LibraryServiceExtensions
    {
        /// <summary>
        /// Wrap a GRPC LibraryService client for more convenient use.
        /// </summary>
        /// <param name="grpcClient">A GRPC client to wrap.</param>
        /// <param name="settings">
        /// An optional <see cref="LibraryServiceSettings"/> to configure this wrapper.
        /// If null or not specified, then the default settings are used.
        /// </param>
        /// <returns>A <see cref="LibraryServiceClient"/> that wraps the specified GRPC client.</returns>
        public static LibraryServiceClient ToClient(
            this LibraryService.LibraryServiceClient grpcClient,
            LibraryServiceSettings settings = null
        ) => new LibraryServiceClientImpl(grpcClient, settings);
    }

    /// <summary>
    /// Settings for a LibraryService wrapper.
    /// </summary>
    public sealed partial class LibraryServiceSettings : ServiceSettingsBase
    {
        /// <summary>
        /// Get a new instance of the default <see cref="LibraryServiceSettings"/>.
        /// </summary>
        /// <returns>A new instance of the default LibraryServiceSettings.</returns>
        public static LibraryServiceSettings GetDefault() => new LibraryServiceSettings();

        /// <summary>
        /// Constructs a new LibraryServiceSettings object with default settings.
        /// </summary>
        public LibraryServiceSettings() { }

        private LibraryServiceSettings(LibraryServiceSettings existing) : base(existing)
        {
            GaxPreconditions.CheckNotNull(existing, nameof(existing));
            CreateShelfSettings = existing.CreateShelfSettings?.Clone();
            GetShelfSettings = existing.GetShelfSettings?.Clone();
            ListShelvesSettings = existing.ListShelvesSettings?.Clone();
            DeleteShelfSettings = existing.DeleteShelfSettings?.Clone();
            MergeShelvesSettings = existing.MergeShelvesSettings?.Clone();
            CreateBookSettings = existing.CreateBookSettings?.Clone();
            PublishSeriesSettings = existing.PublishSeriesSettings?.Clone();
            GetBookSettings = existing.GetBookSettings?.Clone();
            ListBooksSettings = existing.ListBooksSettings?.Clone();
            DeleteBookSettings = existing.DeleteBookSettings?.Clone();
            UpdateBookSettings = existing.UpdateBookSettings?.Clone();
            MoveBookSettings = existing.MoveBookSettings?.Clone();
            ListStringsSettings = existing.ListStringsSettings?.Clone();
            AddCommentsSettings = existing.AddCommentsSettings?.Clone();
            GetBookFromArchiveSettings = existing.GetBookFromArchiveSettings?.Clone();
            UpdateBookIndexSettings = existing.UpdateBookIndexSettings?.Clone();
        }

        /// <summary>
        /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
        /// for "Idempotent" <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <remarks>
        /// The eligible RPC <see cref="StatusCode"/>s for retry for "Idempotent" RPC methods are:
        /// <list type="bullet">
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// </remarks>
        public static Predicate<RpcException> IdempotentRetryFilter { get; } =
            RetrySettings.FilterForStatusCodes(StatusCode.DeadlineExceeded, StatusCode.Unavailable);

        /// <summary>
        /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
        /// for "NonIdempotent" <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <remarks>
        /// There are no RPC <see cref="StatusCode"/>s eligible for retry for "NonIdempotent" RPC methods.
        /// </remarks>
        public static Predicate<RpcException> NonIdempotentRetryFilter { get; } =
            RetrySettings.FilterForStatusCodes();

        /// <summary>
        /// "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <returns>The "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods.</returns>
        /// <remarks>
        /// The "Default" retry backoff for <see cref="LibraryServiceClient"/> RPC methods is defined as:
        /// <list type="bullet">
        /// <item><description>Initial delay: 100 milliseconds</description></item>
        /// <item><description>Delay multiplier: 1.2</description></item>
        /// <item><description>Maximum delay: 1000 milliseconds</description></item>
        /// </list>
        /// </remarks>
        public static BackoffSettings GetDefaultRetryBackoff() => new BackoffSettings
        {
            Delay = TimeSpan.FromMilliseconds(100),
            DelayMultiplier = 1.2,
            MaxDelay = TimeSpan.FromMilliseconds(1000),
        };

        /// <summary>
        /// "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods.
        /// </summary>
        /// <returns>The "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods.</returns>
        /// <remarks>
        /// The "Default" timeout backoff for <see cref="LibraryServiceClient"/> RPC methods is defined as:
        /// <list type="bullet">
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Maximum timeout: 3000 milliseconds</description></item>
        /// </list>
        /// </remarks>
        public static BackoffSettings GetDefaultTimeoutBackoff() => new BackoffSettings
        {
            Delay = TimeSpan.FromMilliseconds(300),
            DelayMultiplier = 1.3,
            MaxDelay = TimeSpan.FromMilliseconds(3000),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.CreateShelf"/> and <see cref="LibraryServiceClient.CreateShelfAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.CreateShelf"/> and
        /// <see cref="LibraryServiceClient.CreateShelfAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings CreateShelfSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.GetShelf"/> and <see cref="LibraryServiceClient.GetShelfAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.GetShelf"/> and
        /// <see cref="LibraryServiceClient.GetShelfAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetShelfSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.ListShelves"/> and <see cref="LibraryServiceClient.ListShelvesAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.ListShelves"/> and
        /// <see cref="LibraryServiceClient.ListShelvesAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListShelvesSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.DeleteShelf"/> and <see cref="LibraryServiceClient.DeleteShelfAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.DeleteShelf"/> and
        /// <see cref="LibraryServiceClient.DeleteShelfAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings DeleteShelfSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.MergeShelves"/> and <see cref="LibraryServiceClient.MergeShelvesAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.MergeShelves"/> and
        /// <see cref="LibraryServiceClient.MergeShelvesAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings MergeShelvesSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.CreateBook"/> and <see cref="LibraryServiceClient.CreateBookAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.CreateBook"/> and
        /// <see cref="LibraryServiceClient.CreateBookAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings CreateBookSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.PublishSeries"/> and <see cref="LibraryServiceClient.PublishSeriesAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.PublishSeries"/> and
        /// <see cref="LibraryServiceClient.PublishSeriesAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings PublishSeriesSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.GetBook"/> and <see cref="LibraryServiceClient.GetBookAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.GetBook"/> and
        /// <see cref="LibraryServiceClient.GetBookAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBookSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.ListBooks"/> and <see cref="LibraryServiceClient.ListBooksAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.ListBooks"/> and
        /// <see cref="LibraryServiceClient.ListBooksAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListBooksSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.DeleteBook"/> and <see cref="LibraryServiceClient.DeleteBookAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.DeleteBook"/> and
        /// <see cref="LibraryServiceClient.DeleteBookAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings DeleteBookSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.UpdateBook"/> and <see cref="LibraryServiceClient.UpdateBookAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.UpdateBook"/> and
        /// <see cref="LibraryServiceClient.UpdateBookAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings UpdateBookSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.MoveBook"/> and <see cref="LibraryServiceClient.MoveBookAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.MoveBook"/> and
        /// <see cref="LibraryServiceClient.MoveBookAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings MoveBookSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.ListStrings"/> and <see cref="LibraryServiceClient.ListStringsAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.ListStrings"/> and
        /// <see cref="LibraryServiceClient.ListStringsAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings ListStringsSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.AddComments"/> and <see cref="LibraryServiceClient.AddCommentsAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.AddComments"/> and
        /// <see cref="LibraryServiceClient.AddCommentsAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description>No status codes</description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings AddCommentsSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = NonIdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.GetBookFromArchive"/> and <see cref="LibraryServiceClient.GetBookFromArchiveAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.GetBookFromArchive"/> and
        /// <see cref="LibraryServiceClient.GetBookFromArchiveAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings GetBookFromArchiveSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };

        /// <summary>
        /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
        /// <see cref="LibraryServiceClient.UpdateBookIndex"/> and <see cref="LibraryServiceClient.UpdateBookIndexAsync"/>.
        /// </summary>
        /// <remarks>
        /// The default <see cref="LibraryServiceClient.UpdateBookIndex"/> and
        /// <see cref="LibraryServiceClient.UpdateBookIndexAsync"/> <see cref="RetrySettings"/> are:
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 100 milliseconds</description></item>
        /// <item><description>Retry delay multiplier: 1.2</description></item>
        /// <item><description>Retry maximum delay: 1000 milliseconds</description></item>
        /// <item><description>Initial timeout: 300 milliseconds</description></item>
        /// <item><description>Timeout multiplier: 1.3</description></item>
        /// <item><description>Timeout maximum delay: 3000 milliseconds</description></item>
        /// </list>
        /// Retry will be attempted on the following response status codes:
        /// <list>
        /// <item><description><see cref="StatusCode.DeadlineExceeded"/></description></item>
        /// <item><description><see cref="StatusCode.Unavailable"/></description></item>
        /// </list>
        /// Default RPC expiration is 30000 milliseconds.
        /// </remarks>
        public CallSettings UpdateBookIndexSettings { get; set; } = new CallSettings
        {
            Timing = CallTiming.FromRetry(new RetrySettings
            {
                RetryBackoff = GetDefaultRetryBackoff(),
                TimeoutBackoff = GetDefaultTimeoutBackoff(),
                RetryFilter = IdempotentRetryFilter,
                TotalExpiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds(30000)),
            }),
        };


        /// <summary>
        /// Creates a deep clone of this object, with all the same property values.
        /// </summary>
        /// <returns>A deep clone of this set of LibraryService settings.</returns>
        public LibraryServiceSettings Clone() => new LibraryServiceSettings(this);
    }

    /// <summary>
    /// LibraryService client wrapper, for convenient use.
    /// </summary>
    public abstract partial class LibraryServiceClient
    {
        private static readonly ChannelPool s_channelPool = new ChannelPool();

        /// <summary>
        /// The default endpoint for the LibraryService service, which is a host of "library-example.googleapis.com" and a port of 443.
        /// </summary>
        public static ServiceEndpoint DefaultEndpoint { get; } = new ServiceEndpoint("library-example.googleapis.com", 443);

        /// <summary>
        /// The default LibraryService scopes
        /// </summary>
        /// <remarks>
        /// The default LibraryService scopes are:
        /// <list type="bullet">
        /// <item><description>"https://www.googleapis.com/auth/library"</description></item>
        /// <item><description>"https://www.googleapis.com/auth/cloud-platform"</description></item>
        /// </list>
        /// </remarks>
        public static IReadOnlyList<string> DefaultScopes { get; } = new ReadOnlyCollection<string>(new[] {
            "https://www.googleapis.com/auth/library",
            "https://www.googleapis.com/auth/cloud-platform",
        });

        /// <summary>
        /// Path template for a shelf resource. Parameters:
        /// <list type="bullet">
        /// <item><description>shelf</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate ShelfTemplate { get; } = new PathTemplate("shelves/{shelf}");

        /// <summary>
        /// Creates a shelf resource name from its component IDs.
        /// </summary>
        /// <param name="shelfId">The shelf ID.</param>
        /// <returns>The full shelf resource name.</returns>
        public static string FormatShelfName(string shelfId) => ShelfTemplate.Expand(shelfId);

        /// <summary>
        /// Path template for a book resource. Parameters:
        /// <list type="bullet">
        /// <item><description>shelf</description></item>
        /// <item><description>book</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate BookTemplate { get; } = new PathTemplate("shelves/{shelf}/books/{book}");

        /// <summary>
        /// Creates a book resource name from its component IDs.
        /// </summary>
        /// <param name="shelfId">The shelf ID.</param>
        /// <param name="bookId">The book ID.</param>
        /// <returns>The full book resource name.</returns>
        public static string FormatBookName(string shelfId, string bookId) => BookTemplate.Expand(shelfId, bookId);

        /// <summary>
        /// Path template for a archivedBook resource. Parameters:
        /// <list type="bullet">
        /// <item><description>archive_path</description></item>
        /// <item><description>book</description></item>
        /// </list>
        /// </summary>
        public static PathTemplate ArchivedBookTemplate { get; } = new PathTemplate("archives/{archive_path=**}/books/{book}");

        /// <summary>
        /// Creates a archivedBook resource name from its component IDs.
        /// </summary>
        /// <param name="archive_pathId">The archive_path ID.</param>
        /// <param name="bookId">The book ID.</param>
        /// <returns>The full archivedBook resource name.</returns>
        public static string FormatArchivedBookName(string archive_pathId, string bookId) => ArchivedBookTemplate.Expand(archive_pathId, bookId);

        // Note: we could have parameterless overloads of Create and CreateAsync,
        // documented to just use the default endpoint, settings and credentials.
        // Pros:
        // - Might be more reassuring on first use
        // - Allows method group conversions
        // Con: overloads!

        /// <summary>
        /// Asynchronously creates a <see cref="LibraryServiceClient"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The task representing the created <see cref="LibraryServiceClient"/>.</returns>
        public static async Task<LibraryServiceClient> CreateAsync(ServiceEndpoint endpoint = null, LibraryServiceSettings settings = null)
        {
            Channel channel = await s_channelPool.GetChannelAsync(endpoint ?? DefaultEndpoint).ConfigureAwait(false);
            return Create(channel, settings);
        }

        /// <summary>
        /// Synchronously creates a <see cref="LibraryServiceClient"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The created <see cref="LibraryServiceClient"/>.</returns>
        public static LibraryServiceClient Create(ServiceEndpoint endpoint = null, LibraryServiceSettings settings = null)
        {
            Channel channel = s_channelPool.GetChannel(endpoint ?? DefaultEndpoint);
            return Create(channel, settings);
        }

        /// <summary>
        /// Creates a <see cref="LibraryServiceClient"/> which uses the specified channel for remote operations.
        /// </summary>
        /// <param name="channel">The <see cref="Channel"/> for remote operations. Must not be null.</param>
        /// <param name="settings">Optional <see cref="LibraryServiceSettings"/>.</param>
        /// <returns>The created <see cref="LibraryServiceClient"/>.</returns>
        public static LibraryServiceClient Create(Channel channel, LibraryServiceSettings settings = null)
        {
            GaxPreconditions.CheckNotNull(channel, nameof(channel));
            LibraryService.LibraryServiceClient grpcClient = new LibraryService.LibraryServiceClient(channel);
            return new LibraryServiceClientImpl(grpcClient, settings);
        }

        /// <summary>
        /// Shuts down any channels automatically created by <see cref="Create(ServiceEndpoint, LibraryServiceSettings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, LibraryServiceSettings)"/>. Channels which weren't automatically
        /// created are not affected.
        /// </summary>
        /// <remarks>After calling this method, further calls to <see cref="Create(ServiceEndpoint, LibraryServiceSettings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, LibraryServiceSettings)"/> will create new channels, which could
        /// in turn be shut down by another call to this method.</remarks>
        /// <returns>A task representing the asynchronous shutdown operation.</returns>
        public static Task ShutdownDefaultChannelsAsync() => s_channelPool.ShutdownChannelsAsync();

        /// <summary>
        /// The underlying GRPC LibraryService client.
        /// </summary>
        public virtual LibraryService.LibraryServiceClient GrpcClient
        {
            get { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">The shelf to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">The shelf to create.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CancellationToken cancellationToken) => CreateShelfAsync(
                shelf,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">The shelf to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Shelf CreateShelf(
            Shelf shelf,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Shelf GetShelf(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                message,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Shelf GetShelf(
            string name,
            SomeMessage message,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="stringBuilder"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="stringBuilder"></param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CancellationToken cancellationToken) => GetShelfAsync(
                name,
                message,
                stringBuilder,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="stringBuilder"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Shelf GetShelf(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of Shelf resources.</returns>
        public virtual IPagedAsyncEnumerable<ListShelvesResponse, Shelf> ListShelvesAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of Shelf resources.</returns>
        public virtual IPagedEnumerable<ListShelvesResponse, Shelf> ListShelves(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task DeleteShelfAsync(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to delete.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task DeleteShelfAsync(
            string name,
            CancellationToken cancellationToken) => DeleteShelfAsync(
                name,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteShelf(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">The name of the shelf we're adding books to.</param>
        /// <param name="otherShelfName">The name of the shelf we're removing books from and deleting.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> MergeShelvesAsync(
            string name,
            string otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">The name of the shelf we're adding books to.</param>
        /// <param name="otherShelfName">The name of the shelf we're removing books from and deleting.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Shelf> MergeShelvesAsync(
            string name,
            string otherShelfName,
            CancellationToken cancellationToken) => MergeShelvesAsync(
                name,
                otherShelfName,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">The name of the shelf we're adding books to.</param>
        /// <param name="otherShelfName">The name of the shelf we're removing books from and deleting.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Shelf MergeShelves(
            string name,
            string otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">The name of the shelf in which the book is created.</param>
        /// <param name="book">The book to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> CreateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">The name of the shelf in which the book is created.</param>
        /// <param name="book">The book to create.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> CreateBookAsync(
            string name,
            Book book,
            CancellationToken cancellationToken) => CreateBookAsync(
                name,
                book,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">The name of the shelf in which the book is created.</param>
        /// <param name="book">The book to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book CreateBook(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">The shelf in which the series is created.</param>
        /// <param name="books">The books to publish in the series.</param>
        /// <param name="edition">The edition of the series</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">The shelf in which the series is created.</param>
        /// <param name="books">The books to publish in the series.</param>
        /// <param name="edition">The edition of the series</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CancellationToken cancellationToken) => PublishSeriesAsync(
                shelf,
                books,
                edition,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">The shelf in which the series is created.</param>
        /// <param name="books">The books to publish in the series.</param>
        /// <param name="edition">The edition of the series</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual PublishSeriesResponse PublishSeries(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> GetBookAsync(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> GetBookAsync(
            string name,
            CancellationToken cancellationToken) => GetBookAsync(
                name,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book GetBook(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf whose books we'd like to list.</param>
        /// <param name="filter">To test python built-in wrapping.</param>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of Book resources.</returns>
        public virtual IPagedAsyncEnumerable<ListBooksResponse, Book> ListBooksAsync(
            string name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf whose books we'd like to list.</param>
        /// <param name="filter">To test python built-in wrapping.</param>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of Book resources.</returns>
        public virtual IPagedEnumerable<ListBooksResponse, Book> ListBooks(
            string name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">The name of the book to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task DeleteBookAsync(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">The name of the book to delete.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task DeleteBookAsync(
            string name,
            CancellationToken cancellationToken) => DeleteBookAsync(
                name,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">The name of the book to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteBook(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> UpdateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> UpdateBookAsync(
            string name,
            Book book,
            CancellationToken cancellationToken) => UpdateBookAsync(
                name,
                book,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book UpdateBook(
            string name,
            Book book,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="updateMask">A field mask to apply, rendered as an HTTP parameter.</param>
        /// <param name="physicalMask">To test Python import clash resolution.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> UpdateBookAsync(
            string name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="updateMask">A field mask to apply, rendered as an HTTP parameter.</param>
        /// <param name="physicalMask">To test Python import clash resolution.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> UpdateBookAsync(
            string name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CancellationToken cancellationToken) => UpdateBookAsync(
                name,
                book,
                updateMask,
                physicalMask,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="updateMask">A field mask to apply, rendered as an HTTP parameter.</param>
        /// <param name="physicalMask">To test Python import clash resolution.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book UpdateBook(
            string name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">The name of the book to move.</param>
        /// <param name="otherShelfName">The name of the destination shelf.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> MoveBookAsync(
            string name,
            string otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">The name of the book to move.</param>
        /// <param name="otherShelfName">The name of the destination shelf.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> MoveBookAsync(
            string name,
            string otherShelfName,
            CancellationToken cancellationToken) => MoveBookAsync(
                name,
                otherShelfName,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">The name of the book to move.</param>
        /// <param name="otherShelfName">The name of the destination shelf.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book MoveBook(
            string name,
            string otherShelfName,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of string resources.</returns>
        public virtual IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of string resources.</returns>
        public virtual IPagedEnumerable<ListStringsResponse, string> ListStrings(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name"></param>
        /// <param name="comments"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name"></param>
        /// <param name="comments"></param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CancellationToken cancellationToken) => AddCommentsAsync(
                name,
                comments,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name"></param>
        /// <param name="comments"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void AddComments(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> GetBookFromArchiveAsync(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task<Book> GetBookFromArchiveAsync(
            string name,
            CancellationToken cancellationToken) => GetBookFromArchiveAsync(
                name,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Book GetBookFromArchive(
            string name,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="indexName">The name of the index for the book</param>
        /// <param name="indexMap">The index to update the book with</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task UpdateBookIndexAsync(
            string name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="indexName">The name of the index for the book</param>
        /// <param name="indexMap">The index to update the book with</param>
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual Task UpdateBookIndexAsync(
            string name,
            string indexName,
            IDictionary<string, string> indexMap,
            CancellationToken cancellationToken) => UpdateBookIndexAsync(
                name,
                indexName,
                indexMap,
                new CallSettings { CancellationToken = cancellationToken });

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="indexName">The name of the index for the book</param>
        /// <param name="indexMap">The index to update the book with</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void UpdateBookIndex(
            string name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null)
        {
            throw new NotImplementedException();
        }

    }

    public sealed partial class LibraryServiceClientImpl : LibraryServiceClient
    {
        private readonly ClientHelper _clientHelper;
        private readonly ApiCall<CreateShelfRequest, Shelf> _callCreateShelf;
        private readonly ApiCall<GetShelfRequest, Shelf> _callGetShelf;
        private readonly ApiCall<ListShelvesRequest, ListShelvesResponse> _callListShelves;
        private readonly ApiCall<DeleteShelfRequest, Empty> _callDeleteShelf;
        private readonly ApiCall<MergeShelvesRequest, Shelf> _callMergeShelves;
        private readonly ApiCall<CreateBookRequest, Book> _callCreateBook;
        private readonly ApiCall<PublishSeriesRequest, PublishSeriesResponse> _callPublishSeries;
        private readonly ApiCall<GetBookRequest, Book> _callGetBook;
        private readonly ApiCall<ListBooksRequest, ListBooksResponse> _callListBooks;
        private readonly ApiCall<DeleteBookRequest, Empty> _callDeleteBook;
        private readonly ApiCall<UpdateBookRequest, Book> _callUpdateBook;
        private readonly ApiCall<MoveBookRequest, Book> _callMoveBook;
        private readonly ApiCall<ListStringsRequest, ListStringsResponse> _callListStrings;
        private readonly ApiCall<AddCommentsRequest, Empty> _callAddComments;
        private readonly ApiCall<GetBookFromArchiveRequest, Book> _callGetBookFromArchive;
        private readonly ApiCall<UpdateBookIndexRequest, Empty> _callUpdateBookIndex;

        public LibraryServiceClientImpl(LibraryService.LibraryServiceClient grpcClient, LibraryServiceSettings settings)
        {
            this.GrpcClient = grpcClient;
            LibraryServiceSettings effectiveSettings = settings ?? LibraryServiceSettings.GetDefault();
            _clientHelper = new ClientHelper(effectiveSettings);
            _callCreateShelf = _clientHelper.BuildApiCall<CreateShelfRequest, Shelf>(
                GrpcClient.CreateShelfAsync, GrpcClient.CreateShelf, effectiveSettings.CreateShelfSettings);
            _callGetShelf = _clientHelper.BuildApiCall<GetShelfRequest, Shelf>(
                GrpcClient.GetShelfAsync, GrpcClient.GetShelf, effectiveSettings.GetShelfSettings);
            _callListShelves = _clientHelper.BuildApiCall<ListShelvesRequest, ListShelvesResponse>(
                GrpcClient.ListShelvesAsync, GrpcClient.ListShelves, effectiveSettings.ListShelvesSettings);
            _callDeleteShelf = _clientHelper.BuildApiCall<DeleteShelfRequest, Empty>(
                GrpcClient.DeleteShelfAsync, GrpcClient.DeleteShelf, effectiveSettings.DeleteShelfSettings);
            _callMergeShelves = _clientHelper.BuildApiCall<MergeShelvesRequest, Shelf>(
                GrpcClient.MergeShelvesAsync, GrpcClient.MergeShelves, effectiveSettings.MergeShelvesSettings);
            _callCreateBook = _clientHelper.BuildApiCall<CreateBookRequest, Book>(
                GrpcClient.CreateBookAsync, GrpcClient.CreateBook, effectiveSettings.CreateBookSettings);
            _callPublishSeries = _clientHelper.BuildApiCall<PublishSeriesRequest, PublishSeriesResponse>(
                GrpcClient.PublishSeriesAsync, GrpcClient.PublishSeries, effectiveSettings.PublishSeriesSettings);
            _callGetBook = _clientHelper.BuildApiCall<GetBookRequest, Book>(
                GrpcClient.GetBookAsync, GrpcClient.GetBook, effectiveSettings.GetBookSettings);
            _callListBooks = _clientHelper.BuildApiCall<ListBooksRequest, ListBooksResponse>(
                GrpcClient.ListBooksAsync, GrpcClient.ListBooks, effectiveSettings.ListBooksSettings);
            _callDeleteBook = _clientHelper.BuildApiCall<DeleteBookRequest, Empty>(
                GrpcClient.DeleteBookAsync, GrpcClient.DeleteBook, effectiveSettings.DeleteBookSettings);
            _callUpdateBook = _clientHelper.BuildApiCall<UpdateBookRequest, Book>(
                GrpcClient.UpdateBookAsync, GrpcClient.UpdateBook, effectiveSettings.UpdateBookSettings);
            _callMoveBook = _clientHelper.BuildApiCall<MoveBookRequest, Book>(
                GrpcClient.MoveBookAsync, GrpcClient.MoveBook, effectiveSettings.MoveBookSettings);
            _callListStrings = _clientHelper.BuildApiCall<ListStringsRequest, ListStringsResponse>(
                GrpcClient.ListStringsAsync, GrpcClient.ListStrings, effectiveSettings.ListStringsSettings);
            _callAddComments = _clientHelper.BuildApiCall<AddCommentsRequest, Empty>(
                GrpcClient.AddCommentsAsync, GrpcClient.AddComments, effectiveSettings.AddCommentsSettings);
            _callGetBookFromArchive = _clientHelper.BuildApiCall<GetBookFromArchiveRequest, Book>(
                GrpcClient.GetBookFromArchiveAsync, GrpcClient.GetBookFromArchive, effectiveSettings.GetBookFromArchiveSettings);
            _callUpdateBookIndex = _clientHelper.BuildApiCall<UpdateBookIndexRequest, Empty>(
                GrpcClient.UpdateBookIndexAsync, GrpcClient.UpdateBookIndex, effectiveSettings.UpdateBookIndexSettings);
        }

        public override LibraryService.LibraryServiceClient GrpcClient { get; }

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">The shelf to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Shelf> CreateShelfAsync(
            Shelf shelf,
            CallSettings callSettings = null) => _callCreateShelf.Async(
                new CreateShelfRequest
                {
                    Shelf = shelf,
                },
                callSettings);

        /// <summary>
        /// Creates a shelf, and returns the new Shelf.
        /// </summary>
        /// <param name="shelf">The shelf to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Shelf CreateShelf(
            Shelf shelf,
            CallSettings callSettings = null) => _callCreateShelf.Sync(
                new CreateShelfRequest
                {
                    Shelf = shelf,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Shelf> GetShelfAsync(
            string name,
            CallSettings callSettings = null) => _callGetShelf.Async(
                new GetShelfRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Shelf GetShelf(
            string name,
            CallSettings callSettings = null) => _callGetShelf.Sync(
                new GetShelfRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            CallSettings callSettings = null) => _callGetShelf.Async(
                new GetShelfRequest
                {
                    Name = name,
                    Message = message,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Shelf GetShelf(
            string name,
            SomeMessage message,
            CallSettings callSettings = null) => _callGetShelf.Sync(
                new GetShelfRequest
                {
                    Name = name,
                    Message = message,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="stringBuilder"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Shelf> GetShelfAsync(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null) => _callGetShelf.Async(
                new GetShelfRequest
                {
                    Name = name,
                    Message = message,
                    StringBuilder = stringBuilder,
                },
                callSettings);

        /// <summary>
        /// Gets a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to retrieve.</param>
        /// <param name="message">Field to verify that message-type query parameter gets flattened.</param>
        /// <param name="stringBuilder"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Shelf GetShelf(
            string name,
            SomeMessage message,
            StringBuilder stringBuilder,
            CallSettings callSettings = null) => _callGetShelf.Sync(
                new GetShelfRequest
                {
                    Name = name,
                    Message = message,
                    StringBuilder = stringBuilder,
                },
                callSettings);

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of Shelf resources.</returns>
        public override IPagedAsyncEnumerable<ListShelvesResponse, Shelf> ListShelvesAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedAsyncEnumerable<ListShelvesRequest, ListShelvesResponse, Shelf>(
                _callListShelves,
                new ListShelvesRequest
                {
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Lists shelves.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of Shelf resources.</returns>
        public override IPagedEnumerable<ListShelvesResponse, Shelf> ListShelves(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedEnumerable<ListShelvesRequest, ListShelvesResponse, Shelf>(
                _callListShelves,
                new ListShelvesRequest
                {
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task DeleteShelfAsync(
            string name,
            CallSettings callSettings = null) => _callDeleteShelf.Async(
                new DeleteShelfRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Deletes a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteShelf(
            string name,
            CallSettings callSettings = null) => _callDeleteShelf.Sync(
                new DeleteShelfRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">The name of the shelf we're adding books to.</param>
        /// <param name="otherShelfName">The name of the shelf we're removing books from and deleting.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Shelf> MergeShelvesAsync(
            string name,
            string otherShelfName,
            CallSettings callSettings = null) => _callMergeShelves.Async(
                new MergeShelvesRequest
                {
                    Name = name,
                    OtherShelfName = otherShelfName,
                },
                callSettings);

        /// <summary>
        /// Merges two shelves by adding all books from the shelf named
        /// `other_shelf_name` to shelf `name`, and deletes
        /// `other_shelf_name`. Returns the updated shelf.
        /// </summary>
        /// <param name="name">The name of the shelf we're adding books to.</param>
        /// <param name="otherShelfName">The name of the shelf we're removing books from and deleting.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Shelf MergeShelves(
            string name,
            string otherShelfName,
            CallSettings callSettings = null) => _callMergeShelves.Sync(
                new MergeShelvesRequest
                {
                    Name = name,
                    OtherShelfName = otherShelfName,
                },
                callSettings);

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">The name of the shelf in which the book is created.</param>
        /// <param name="book">The book to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> CreateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null) => _callCreateBook.Async(
                new CreateBookRequest
                {
                    Name = name,
                    Book = book,
                },
                callSettings);

        /// <summary>
        /// Creates a book.
        /// </summary>
        /// <param name="name">The name of the shelf in which the book is created.</param>
        /// <param name="book">The book to create.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book CreateBook(
            string name,
            Book book,
            CallSettings callSettings = null) => _callCreateBook.Sync(
                new CreateBookRequest
                {
                    Name = name,
                    Book = book,
                },
                callSettings);

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">The shelf in which the series is created.</param>
        /// <param name="books">The books to publish in the series.</param>
        /// <param name="edition">The edition of the series</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<PublishSeriesResponse> PublishSeriesAsync(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null) => _callPublishSeries.Async(
                new PublishSeriesRequest
                {
                    Shelf = shelf,
                    Books = { books },
                    Edition = edition,
                },
                callSettings);

        /// <summary>
        /// Creates a series of books.
        /// </summary>
        /// <param name="shelf">The shelf in which the series is created.</param>
        /// <param name="books">The books to publish in the series.</param>
        /// <param name="edition">The edition of the series</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override PublishSeriesResponse PublishSeries(
            Shelf shelf,
            IEnumerable<Book> books,
            uint edition,
            CallSettings callSettings = null) => _callPublishSeries.Sync(
                new PublishSeriesRequest
                {
                    Shelf = shelf,
                    Books = { books },
                    Edition = edition,
                },
                callSettings);

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> GetBookAsync(
            string name,
            CallSettings callSettings = null) => _callGetBook.Async(
                new GetBookRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Gets a book.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book GetBook(
            string name,
            CallSettings callSettings = null) => _callGetBook.Sync(
                new GetBookRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf whose books we'd like to list.</param>
        /// <param name="filter">To test python built-in wrapping.</param>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of Book resources.</returns>
        public override IPagedAsyncEnumerable<ListBooksResponse, Book> ListBooksAsync(
            string name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedAsyncEnumerable<ListBooksRequest, ListBooksResponse, Book>(
                _callListBooks,
                new ListBooksRequest
                {
                    Name = name,
                    Filter = filter,
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Lists books in a shelf.
        /// </summary>
        /// <param name="name">The name of the shelf whose books we'd like to list.</param>
        /// <param name="filter">To test python built-in wrapping.</param>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of Book resources.</returns>
        public override IPagedEnumerable<ListBooksResponse, Book> ListBooks(
            string name,
            string filter,
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedEnumerable<ListBooksRequest, ListBooksResponse, Book>(
                _callListBooks,
                new ListBooksRequest
                {
                    Name = name,
                    Filter = filter,
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">The name of the book to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task DeleteBookAsync(
            string name,
            CallSettings callSettings = null) => _callDeleteBook.Async(
                new DeleteBookRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Deletes a book.
        /// </summary>
        /// <param name="name">The name of the book to delete.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteBook(
            string name,
            CallSettings callSettings = null) => _callDeleteBook.Sync(
                new DeleteBookRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> UpdateBookAsync(
            string name,
            Book book,
            CallSettings callSettings = null) => _callUpdateBook.Async(
                new UpdateBookRequest
                {
                    Name = name,
                    Book = book,
                },
                callSettings);

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book UpdateBook(
            string name,
            Book book,
            CallSettings callSettings = null) => _callUpdateBook.Sync(
                new UpdateBookRequest
                {
                    Name = name,
                    Book = book,
                },
                callSettings);

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="updateMask">A field mask to apply, rendered as an HTTP parameter.</param>
        /// <param name="physicalMask">To test Python import clash resolution.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> UpdateBookAsync(
            string name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null) => _callUpdateBook.Async(
                new UpdateBookRequest
                {
                    Name = name,
                    Book = book,
                    UpdateMask = updateMask,
                    PhysicalMask = physicalMask,
                },
                callSettings);

        /// <summary>
        /// Updates a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="book">The book to update with.</param>
        /// <param name="updateMask">A field mask to apply, rendered as an HTTP parameter.</param>
        /// <param name="physicalMask">To test Python import clash resolution.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book UpdateBook(
            string name,
            Book book,
            FieldMask updateMask,
            FieldMask physicalMask,
            CallSettings callSettings = null) => _callUpdateBook.Sync(
                new UpdateBookRequest
                {
                    Name = name,
                    Book = book,
                    UpdateMask = updateMask,
                    PhysicalMask = physicalMask,
                },
                callSettings);

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">The name of the book to move.</param>
        /// <param name="otherShelfName">The name of the destination shelf.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> MoveBookAsync(
            string name,
            string otherShelfName,
            CallSettings callSettings = null) => _callMoveBook.Async(
                new MoveBookRequest
                {
                    Name = name,
                    OtherShelfName = otherShelfName,
                },
                callSettings);

        /// <summary>
        /// Moves a book to another shelf, and returns the new book.
        /// </summary>
        /// <param name="name">The name of the book to move.</param>
        /// <param name="otherShelfName">The name of the destination shelf.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book MoveBook(
            string name,
            string otherShelfName,
            CallSettings callSettings = null) => _callMoveBook.Sync(
                new MoveBookRequest
                {
                    Name = name,
                    OtherShelfName = otherShelfName,
                },
                callSettings);

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of string resources.</returns>
        public override IPagedAsyncEnumerable<ListStringsResponse, string> ListStringsAsync(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedAsyncEnumerable<ListStringsRequest, ListStringsResponse, string>(
                _callListStrings,
                new ListStringsRequest
                {
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Lists a primitive resource. To test go page streaming.
        /// </summary>
        /// <param name="pageToken">The token returned from the previous request.
        /// A value of <c>null</c> or an empty string retrieves the first page.</param>
        /// <param name="pageSize">The size of page to request.
        /// The response will not be larger than this, but may be smaller.
        /// A value of <c>null</c> or 0 uses a server-defined page size.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of string resources.</returns>
        public override IPagedEnumerable<ListStringsResponse, string> ListStrings(
            string pageToken = null,
            int? pageSize = null,
            CallSettings callSettings = null) => new PagedEnumerable<ListStringsRequest, ListStringsResponse, string>(
                _callListStrings,
                new ListStringsRequest
                {
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name"></param>
        /// <param name="comments"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task AddCommentsAsync(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null) => _callAddComments.Async(
                new AddCommentsRequest
                {
                    Name = name,
                    Comments = { comments },
                },
                callSettings);

        /// <summary>
        /// Adds comments to a book
        /// </summary>
        /// <param name="name"></param>
        /// <param name="comments"></param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void AddComments(
            string name,
            IEnumerable<Comment> comments,
            CallSettings callSettings = null) => _callAddComments.Sync(
                new AddCommentsRequest
                {
                    Name = name,
                    Comments = { comments },
                },
                callSettings);

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task<Book> GetBookFromArchiveAsync(
            string name,
            CallSettings callSettings = null) => _callGetBookFromArchive.Async(
                new GetBookFromArchiveRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Gets a book from an archive.
        /// </summary>
        /// <param name="name">The name of the book to retrieve.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Book GetBookFromArchive(
            string name,
            CallSettings callSettings = null) => _callGetBookFromArchive.Sync(
                new GetBookFromArchiveRequest
                {
                    Name = name,
                },
                callSettings);

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="indexName">The name of the index for the book</param>
        /// <param name="indexMap">The index to update the book with</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override Task UpdateBookIndexAsync(
            string name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null) => _callUpdateBookIndex.Async(
                new UpdateBookIndexRequest
                {
                    Name = name,
                    IndexName = indexName,
                    IndexMap = { indexMap },
                },
                callSettings);

        /// <summary>
        /// Updates the index of a book.
        /// </summary>
        /// <param name="name">The name of the book to update.</param>
        /// <param name="indexName">The name of the index for the book</param>
        /// <param name="indexMap">The index to update the book with</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void UpdateBookIndex(
            string name,
            string indexName,
            IDictionary<string, string> indexMap,
            CallSettings callSettings = null) => _callUpdateBookIndex.Sync(
                new UpdateBookIndexRequest
                {
                    Name = name,
                    IndexName = indexName,
                    IndexMap = { indexMap },
                },
                callSettings);

    }

    // Partial classes to enable page-streaming

    public partial class ListShelvesRequest : IPageRequest { }
    public partial class ListShelvesResponse : IPageResponse<Shelf>
    {
        public IEnumerator<Shelf> GetEnumerator() => Shelves.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListBooksRequest : IPageRequest { }
    public partial class ListBooksResponse : IPageResponse<Book>
    {
        public IEnumerator<Book> GetEnumerator() => Books.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListStringsRequest : IPageRequest { }
    public partial class ListStringsResponse : IPageResponse<string>
    {
        public IEnumerator<string> GetEnumerator() => Strings.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

}
