
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  allocateIdsRequest := &datastore.AllocateIdsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.AllocateIds(datasetId, &allocateIdsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  beginTransactionRequest := &datastore.BeginTransactionRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.BeginTransaction(datasetId, &beginTransactionRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  commitRequest := &datastore.CommitRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.Commit(datasetId, &commitRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  lookupRequest := &datastore.LookupRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.Lookup(datasetId, &lookupRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  rollbackRequest := &datastore.RollbackRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.Rollback(datasetId, &rollbackRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := datastore.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the dataset.
  datasetId := "{MY-DATASET-ID}" // TODO: Update placeholder value(s).

  runQueryRequest := &datastore.RunQueryRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Datasets.RunQuery(datasetId, &runQueryRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
