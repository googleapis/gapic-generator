
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.AllocateIds(datasetId, &datastore.AllocateIdsRequest{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.BeginTransaction(datasetId, &datastore.BeginTransactionRequest{
                                             // TODO: Fill required fields.
                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.Commit(datasetId, &datastore.CommitRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.Lookup(datasetId, &datastore.LookupRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.Rollback(datasetId, &datastore.RollbackRequest{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/datastore/v1beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := datastore.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the dataset.
  datasetId := "" // TODO: Update placeholder value.

  resp, err := c.Datasets.RunQuery(datasetId, &datastore.RunQueryRequest{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
