
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `AllocateIds` method:

  // * Identifies the dataset.
  datasetId := ""

  allocateIdsRequestBody := datastore.AllocateIdsRequest{
    // TODO: Add desired fields of the `allocateIdsRequestBody` variable.
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  res, err := service.Datasets.AllocateIds(datasetId, &allocateIdsRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
>>>>>>> Update discovery sample gen across languages.

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  // TODO: Change placeholders below to desired parameter values for the `BeginTransaction` method:

  // * Identifies the dataset.
  datasetId := ""
>>>>>>> Update discovery sample gen across languages.

  beginTransactionRequestBody := datastore.BeginTransactionRequest{
    // TODO: Add desired fields of the `beginTransactionRequestBody` variable.
  }

  res, err := service.Datasets.BeginTransaction(datasetId, &beginTransactionRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  // TODO: Change placeholders below to desired parameter values for the `Commit` method:

  // * Identifies the dataset.
  datasetId := ""

  commitRequestBody := datastore.CommitRequest{
    // TODO: Add desired fields of the `commitRequestBody` variable.
  }

  res, err := service.Datasets.Commit(datasetId, &commitRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
>>>>>>> Update discovery sample gen across languages.

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Lookup` method:

  // * Identifies the dataset.
  datasetId := ""

  lookupRequestBody := datastore.LookupRequest{
    // TODO: Add desired fields of the `lookupRequestBody` variable.
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  res, err := service.Datasets.Lookup(datasetId, &lookupRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
>>>>>>> Update discovery sample gen across languages.

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  // TODO: Change placeholders below to desired parameter values for the `Rollback` method:

  // * Identifies the dataset.
  datasetId := ""
>>>>>>> Update discovery sample gen across languages.

  rollbackRequestBody := datastore.RollbackRequest{
    // TODO: Add desired fields of the `rollbackRequestBody` variable.
  }

  res, err := service.Datasets.Rollback(datasetId, &rollbackRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/datastore/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the datastore service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := datastore.New(client)
  if err != nil {
    log.Fatal(err)
  }

<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
  // Identifies the dataset.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"
=======
  // TODO: Change placeholders below to desired parameter values for the `RunQuery` method:

  // * Identifies the dataset.
  datasetId := ""

  runQueryRequestBody := datastore.RunQueryRequest{
    // TODO: Add desired fields of the `runQueryRequestBody` variable.
  }

  res, err := service.Datasets.RunQuery(datasetId, &runQueryRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
>>>>>>> Update discovery sample gen across languages.

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
