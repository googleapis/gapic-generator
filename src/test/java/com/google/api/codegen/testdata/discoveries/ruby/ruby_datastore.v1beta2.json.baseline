
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
allocate_ids_request_body = Google::Apis::DatastoreV1beta2::AllocateIdsRequest.new

# Perform the call
response = service.allocate_dataset_ids(dataset_id, allocate_ids_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
begin_transaction_request_body = Google::Apis::DatastoreV1beta2::BeginTransactionRequest.new

# Perform the call
response = service.begin_dataset_transaction(dataset_id, begin_transaction_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
commit_request_body = Google::Apis::DatastoreV1beta2::CommitRequest.new

# Perform the call
response = service.commit_dataset(dataset_id, commit_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
lookup_request_body = Google::Apis::DatastoreV1beta2::LookupRequest.new

# Perform the call
response = service.lookup_dataset(dataset_id, lookup_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
rollback_request_body = Google::Apis::DatastoreV1beta2::RollbackRequest.new

# Perform the call
response = service.rollback_dataset(dataset_id, rollback_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Datastore API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/datastore
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/datastore_v1beta2'
require 'json'

service = Google::Apis::DatastoreV1beta2::DatastoreService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Identifies the dataset.
dataset_id = '{MY-DATASET-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
run_query_request_body = Google::Apis::DatastoreV1beta2::RunQueryRequest.new

# Perform the call
response = service.run_dataset_query(dataset_id, run_query_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
