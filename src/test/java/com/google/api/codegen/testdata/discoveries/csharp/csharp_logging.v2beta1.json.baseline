
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // Required. The resource name of the log to delete.  Example:
            // `"projects/my-project/logs/syslog"`.
            string logName = "billingAccounts/{MY-BILLINGACCOUNT}/logs/{MY-LOG}";


            BillingAccountsResource.LogsResource.DeleteRequest request = loggingService.BillingAccounts.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });

            Data.ListLogEntriesRequest requestBody = new Data.ListLogEntriesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            EntriesResource.ListRequest request = loggingService.Entries.List(requestBody);

            Data.ListLogEntriesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Entries == null)
                {
                    continue;
                }
                foreach (Data.LogEntry logEntry in response.Entries)
                {
                    // TODO: Change code below to process each `logEntry` resource:
                    Console.WriteLine(logEntry);
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });

            Data.WriteLogEntriesRequest requestBody = new Data.WriteLogEntriesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            EntriesResource.WriteRequest request = loggingService.Entries.Write(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.WriteLogEntriesResponse response = request.Execute();
            // Data.WriteLogEntriesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });

            MonitoredResourceDescriptorsResource.ListRequest request = loggingService.MonitoredResourceDescriptors.List();

            Data.ListMonitoredResourceDescriptorsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ResourceDescriptors == null)
                {
                    continue;
                }
                foreach (Data.MonitoredResourceDescriptor monitoredResourceDescriptor in response.ResourceDescriptors)
                {
                    // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
                    Console.WriteLine(monitoredResourceDescriptor);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // Required. The resource name of the log to delete.  Example:
            // `"projects/my-project/logs/syslog"`.
            string logName = "organizations/{MY-ORGANIZATION}/logs/{MY-LOG}";


            OrganizationsResource.LogsResource.DeleteRequest request = loggingService.Organizations.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // Required. The resource name of the log to delete.  Example:
            // `"projects/my-project/logs/syslog"`.
            string logName = "projects/{MY-PROJECT}/logs/{MY-LOG}";


            ProjectsResource.LogsResource.DeleteRequest request = loggingService.Projects.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Create` method:

            // The resource name of the project in which to create the metric.
            // Example: `"projects/my-project-id"`.
            // The new metric must be provided in the request.
            string parent = "projects/{MY-PROJECT}";


            Data.LogMetric requestBody = new Data.LogMetric();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.MetricsResource.CreateRequest request = loggingService.Projects.Metrics.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // The resource name of the metric to delete.
            // Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";


            ProjectsResource.MetricsResource.DeleteRequest request = loggingService.Projects.Metrics.Delete(metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // The resource name of the desired metric.
            // Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";


            ProjectsResource.MetricsResource.GetRequest request = loggingService.Projects.Metrics.Get(metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // Required. The resource name containing the metrics.
            // Example: `"projects/my-project-id"`.
            string parent = "projects/{MY-PROJECT}";


            ProjectsResource.MetricsResource.ListRequest request = loggingService.Projects.Metrics.List(parent);

            Data.ListLogMetricsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.LogMetric logMetric in response.Metrics)
                {
                    // TODO: Change code below to process each `logMetric` resource:
                    Console.WriteLine(logMetric);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // The resource name of the metric to update.
            // Example: `"projects/my-project-id/metrics/my-metric-id"`.
            // The updated metric must be provided in the request and have the
            // same identifier that is specified in `metricName`.
            // If the metric does not exist, it is created.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";


            Data.LogMetric requestBody = new Data.LogMetric();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.MetricsResource.UpdateRequest request = loggingService.Projects.Metrics.Update(requestBody, metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Create` method:

            // Required. The resource in which to create the sink.
            // Example: `"projects/my-project-id"`.
            // The new sink must be provided in the request.
            string parent = "projects/{MY-PROJECT}";


            Data.LogSink requestBody = new Data.LogSink();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SinksResource.CreateRequest request = loggingService.Projects.Sinks.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Delete` method:

            // Required. The resource name of the sink to delete, including the parent
            // resource and the sink identifier.  Example:
            // `"projects/my-project-id/sinks/my-sink-id"`.  It is an error if the sink
            // does not exist.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";


            ProjectsResource.SinksResource.DeleteRequest request = loggingService.Projects.Sinks.Delete(sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Get` method:

            // Required. The resource name of the sink to return.
            // Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";


            ProjectsResource.SinksResource.GetRequest request = loggingService.Projects.Sinks.Get(sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // Required. The cloud resource containing the sinks.
            // Example: `"projects/my-logging-project"`.
            string parent = "projects/{MY-PROJECT}";


            ProjectsResource.SinksResource.ListRequest request = loggingService.Projects.Sinks.List(parent);

            Data.ListSinksResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Sinks == null)
                {
                    continue;
                }
                foreach (Data.LogSink logSink in response.Sinks)
                {
                    // TODO: Change code below to process each `logSink` resource:
                    Console.WriteLine(logSink);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-LoggingSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Update` method:

            // Required. The resource name of the sink to update, including the parent
            // resource and the sink identifier.  If the sink does not exist, this method
            // creates the sink.  Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";


            Data.LogSink requestBody = new Data.LogSink();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.SinksResource.UpdateRequest request = loggingService.Projects.Sinks.Update(requestBody, sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
