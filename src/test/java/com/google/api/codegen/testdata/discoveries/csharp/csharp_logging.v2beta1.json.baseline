
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Assign values to the desired properties.
            Data.ListLogEntriesRequest requestBody = new Data.ListLogEntriesRequest();

            EntriesResource.ListRequest request = loggingService.Entries.List(requestBody);

            Data.ListLogEntriesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Entries == null)
                {
                    continue;
                }
                foreach (Data.LogEntry logEntry in response.Entries)
                {
                    // TODO: Use logEntry
                    Console.WriteLine(new JavaScriptSerializer().Serialize(logEntry));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Assign values to the desired properties.
            Data.WriteLogEntriesRequest requestBody = new Data.WriteLogEntriesRequest();

            EntriesResource.WriteRequest request = loggingService.Entries.Write(requestBody);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.WriteLogEntriesResponse response = request.Execute();
            // Data.WriteLogEntriesResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            MonitoredResourceDescriptorsResource.ListRequest request = loggingService.MonitoredResourceDescriptors.List();

            Data.ListMonitoredResourceDescriptorsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ResourceDescriptors == null)
                {
                    continue;
                }
                foreach (Data.MonitoredResourceDescriptor monitoredResourceDescriptor in response.ResourceDescriptors)
                {
                    // TODO: Use monitoredResourceDescriptor
                    Console.WriteLine(new JavaScriptSerializer().Serialize(monitoredResourceDescriptor));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
            string logName = "projects/{MY-PROJECT}/logs/{MY-LOG}"; // TODO: Update placeholder value(s).

            ProjectsResource.LogsResource.DeleteRequest request = loggingService.Projects.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
            // The new metric must be provided in the request.
            string projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.LogMetric requestBody = new Data.LogMetric();

            ProjectsResource.MetricsResource.CreateRequest request = loggingService.Projects.Metrics.Create(requestBody, projectName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

            ProjectsResource.MetricsResource.DeleteRequest request = loggingService.Projects.Metrics.Delete(metricName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

            ProjectsResource.MetricsResource.GetRequest request = loggingService.Projects.Metrics.Get(metricName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Required. The resource name of the project containing the metrics. Example:
            // `"projects/my-project-id"`.
            string projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

            ProjectsResource.MetricsResource.ListRequest request = loggingService.Projects.Metrics.List(projectName);

            Data.ListLogMetricsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.LogMetric logMetric in response.Metrics)
                {
                    // TODO: Use logMetric
                    Console.WriteLine(new JavaScriptSerializer().Serialize(logMetric));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            // The updated metric must be provided in the request and have the same identifier that is specified in
            // `metricName`. If the metric does not exist, it is created.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.LogMetric requestBody = new Data.LogMetric();

            ProjectsResource.MetricsResource.UpdateRequest request = loggingService.Projects.Metrics.Update(requestBody, metricName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
            // The new sink must be provided in the request.
            string projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.LogSink requestBody = new Data.LogSink();

            ProjectsResource.SinksResource.CreateRequest request = loggingService.Projects.Sinks.Create(requestBody, projectName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

            ProjectsResource.SinksResource.DeleteRequest request = loggingService.Projects.Sinks.Delete(sinkName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

            ProjectsResource.SinksResource.GetRequest request = loggingService.Projects.Sinks.Get(sinkName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Required. The resource name of the project containing the sinks. Example:
            // `"projects/my-logging-project"`, `"projects/01234567890"`.
            string projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

            ProjectsResource.SinksResource.ListRequest request = loggingService.Projects.Sinks.List(projectName);

            Data.ListSinksResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Sinks == null)
                {
                    continue;
                }
                foreach (Data.LogSink logSink in response.Sinks)
                {
                    // TODO: Use logSink
                    Console.WriteLine(new JavaScriptSerializer().Serialize(logSink));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Logging.v2beta1.Data;


namespace LoggingSample
{
    public class LoggingServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
            // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
            // If the sink does not exist, it is created.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.LogSink requestBody = new Data.LogSink();

            ProjectsResource.SinksResource.UpdateRequest request = loggingService.Projects.Sinks.Update(requestBody, sinkName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
