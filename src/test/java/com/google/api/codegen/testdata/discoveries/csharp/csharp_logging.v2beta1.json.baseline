
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // TODO Add code to assign values to properties of 'content'.
            Data.ListLogEntriesRequest content = new Data.ListLogEntriesRequest();

            EntriesResource.ListRequest request = loggingService.Entries.List(content);
            Data.ListLogEntriesResponse response;
            do
            {
                response = request.Execute();
                if (response.Entries == null)
                {
                    continue;
                }
                foreach (Data.LogEntry item in response.Entries)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListLogEntriesResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Write() method:

            // TODO Add code to assign values to properties of 'content'.
            Data.WriteLogEntriesRequest content = new Data.WriteLogEntriesRequest();

            EntriesResource.WriteRequest request = loggingService.Entries.Write(content);
            Data.WriteLogEntriesResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.WriteLogEntriesResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            MonitoredResourceDescriptorsResource.ListRequest request = loggingService.MonitoredResourceDescriptors.List();
            Data.ListMonitoredResourceDescriptorsResponse response;
            do
            {
                response = request.Execute();
                if (response.ResourceDescriptors == null)
                {
                    continue;
                }
                foreach (Data.MonitoredResourceDescriptor item in response.ResourceDescriptors)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListMonitoredResourceDescriptorsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
            string logName = "projects/{MY-PROJECT}/logs/{MY-LOG}";

            ProjectsResource.LogsResource.DeleteRequest request = loggingService.Projects.Logs.Delete(logName);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:

            // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
            // The new metric must be provided in the request.
            string projectName = "projects/{MY-PROJECT}";

            // TODO Add code to assign values to properties of 'content'.
            Data.LogMetric content = new Data.LogMetric();

            ProjectsResource.MetricsResource.CreateRequest request = loggingService.Projects.Metrics.Create(content, projectName);
            Data.LogMetric response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogMetric response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";

            ProjectsResource.MetricsResource.DeleteRequest request = loggingService.Projects.Metrics.Delete(metricName);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";

            ProjectsResource.MetricsResource.GetRequest request = loggingService.Projects.Metrics.Get(metricName);
            Data.LogMetric response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogMetric response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Required. The resource name of the project containing the metrics. Example:
            // `"projects/my-project-id"`.
            string projectName = "projects/{MY-PROJECT}";

            ProjectsResource.MetricsResource.ListRequest request = loggingService.Projects.Metrics.List(projectName);
            Data.ListLogMetricsResponse response;
            do
            {
                response = request.Execute();
                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.LogMetric item in response.Metrics)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListLogMetricsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
            // The updated metric must be provided in the request and have the same identifier that is specified in
            // `metricName`. If the metric does not exist, it is created.
            string metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}";

            // TODO Add code to assign values to properties of 'content'.
            Data.LogMetric content = new Data.LogMetric();

            ProjectsResource.MetricsResource.UpdateRequest request = loggingService.Projects.Metrics.Update(content, metricName);
            Data.LogMetric response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogMetric response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:

            // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
            // The new sink must be provided in the request.
            string projectName = "projects/{MY-PROJECT}";

            // TODO Add code to assign values to properties of 'content'.
            Data.LogSink content = new Data.LogSink();

            ProjectsResource.SinksResource.CreateRequest request = loggingService.Projects.Sinks.Create(content, projectName);
            Data.LogSink response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogSink response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";

            ProjectsResource.SinksResource.DeleteRequest request = loggingService.Projects.Sinks.Delete(sinkName);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";

            ProjectsResource.SinksResource.GetRequest request = loggingService.Projects.Sinks.Get(sinkName);
            Data.LogSink response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogSink response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Required. The resource name of the project containing the sinks. Example:
            // `"projects/my-logging-project"`, `"projects/01234567890"`.
            string projectName = "projects/{MY-PROJECT}";

            ProjectsResource.SinksResource.ListRequest request = loggingService.Projects.Sinks.List(projectName);
            Data.ListSinksResponse response;
            do
            {
                response = request.Execute();
                if (response.Sinks == null)
                {
                    continue;
                }
                foreach (Data.LogSink item in response.Sinks)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListSinksResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
            // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
            // If the sink does not exist, it is created.
            string sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}";

            // TODO Add code to assign values to properties of 'content'.
            Data.LogSink content = new Data.LogSink();

            ProjectsResource.SinksResource.UpdateRequest request = loggingService.Projects.Sinks.Update(content, sinkName);
            Data.LogSink response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.LogSink response = await request.ExecuteAsync();
        }
    }
}
