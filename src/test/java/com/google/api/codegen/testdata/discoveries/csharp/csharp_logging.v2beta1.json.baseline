
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name of the log to delete:
            // "projects/[PROJECT_ID]/logs/[LOG_ID]"
            // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
            // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
            // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
            // information about log names, see LogEntry.
            string logName = "billingAccounts/my-billing-account/logs/my-log";  // TODO: Update placeholder value.

            BillingAccountsResource.LogsResource.DeleteRequest request = loggingService.BillingAccounts.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name that owns the logs:
            // "projects/[PROJECT_ID]"
            // "organizations/[ORGANIZATION_ID]"
            string parent = "billingAccounts/my-billing-account";  // TODO: Update placeholder value.

            BillingAccountsResource.LogsResource.ListRequest request = loggingService.BillingAccounts.Logs.List(parent);

            Data.ListLogsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.LogNames == null)
                {
                    continue;
                }
                foreach (string item in response.LogNames)
                {
                    // TODO: Change code below to process each `item` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(item));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // TODO: Assign values to desired properties of `requestBody`:
            Data.ListLogEntriesRequest requestBody = new Data.ListLogEntriesRequest();

            EntriesResource.ListRequest request = loggingService.Entries.List(requestBody);

            Data.ListLogEntriesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Entries == null)
                {
                    continue;
                }
                foreach (Data.LogEntry logEntry in response.Entries)
                {
                    // TODO: Change code below to process each `logEntry` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(logEntry));
                }
                requestBody.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // TODO: Assign values to desired properties of `requestBody`:
            Data.WriteLogEntriesRequest requestBody = new Data.WriteLogEntriesRequest();

            EntriesResource.WriteRequest request = loggingService.Entries.Write(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.WriteLogEntriesResponse response = request.Execute();
            // Data.WriteLogEntriesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            MonitoredResourceDescriptorsResource.ListRequest request = loggingService.MonitoredResourceDescriptors.List();

            Data.ListMonitoredResourceDescriptorsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.ResourceDescriptors == null)
                {
                    continue;
                }
                foreach (Data.MonitoredResourceDescriptor monitoredResourceDescriptor in response.ResourceDescriptors)
                {
                    // TODO: Change code below to process each `monitoredResourceDescriptor` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(monitoredResourceDescriptor));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name of the log to delete:
            // "projects/[PROJECT_ID]/logs/[LOG_ID]"
            // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
            // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
            // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
            // information about log names, see LogEntry.
            string logName = "organizations/my-organization/logs/my-log";  // TODO: Update placeholder value.

            OrganizationsResource.LogsResource.DeleteRequest request = loggingService.Organizations.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name that owns the logs:
            // "projects/[PROJECT_ID]"
            // "organizations/[ORGANIZATION_ID]"
            string parent = "organizations/my-organization";  // TODO: Update placeholder value.

            OrganizationsResource.LogsResource.ListRequest request = loggingService.Organizations.Logs.List(parent);

            Data.ListLogsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.LogNames == null)
                {
                    continue;
                }
                foreach (string item in response.LogNames)
                {
                    // TODO: Change code below to process each `item` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(item));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name of the log to delete:
            // "projects/[PROJECT_ID]/logs/[LOG_ID]"
            // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
            // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
            // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
            // information about log names, see LogEntry.
            string logName = "projects/my-project/logs/my-log";  // TODO: Update placeholder value.

            ProjectsResource.LogsResource.DeleteRequest request = loggingService.Projects.Logs.Delete(logName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource name that owns the logs:
            // "projects/[PROJECT_ID]"
            // "organizations/[ORGANIZATION_ID]"
            string parent = "projects/my-project";  // TODO: Update placeholder value.

            ProjectsResource.LogsResource.ListRequest request = loggingService.Projects.Logs.List(parent);

            Data.ListLogsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.LogNames == null)
                {
                    continue;
                }
                foreach (string item in response.LogNames)
                {
                    // TODO: Change code below to process each `item` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(item));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // The resource name of the project in which to create the metric:
            // "projects/[PROJECT_ID]"
            // The new metric must be provided in the request.
            string parent = "projects/my-project";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.LogMetric requestBody = new Data.LogMetric();

            ProjectsResource.MetricsResource.CreateRequest request = loggingService.Projects.Metrics.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // The resource name of the metric to delete:
            // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
            string metricName = "projects/my-project/metrics/my-metric";  // TODO: Update placeholder value.

            ProjectsResource.MetricsResource.DeleteRequest request = loggingService.Projects.Metrics.Delete(metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // The resource name of the desired metric:
            // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
            string metricName = "projects/my-project/metrics/my-metric";  // TODO: Update placeholder value.

            ProjectsResource.MetricsResource.GetRequest request = loggingService.Projects.Metrics.Get(metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The name of the project containing the metrics:
            // "projects/[PROJECT_ID]"
            string parent = "projects/my-project";  // TODO: Update placeholder value.

            ProjectsResource.MetricsResource.ListRequest request = loggingService.Projects.Metrics.List(parent);

            Data.ListLogMetricsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Metrics == null)
                {
                    continue;
                }
                foreach (Data.LogMetric logMetric in response.Metrics)
                {
                    // TODO: Change code below to process each `logMetric` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(logMetric));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // The resource name of the metric to update:
            // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
            // The updated metric must be provided in the request and it's name field must be the same as
            // [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
            string metricName = "projects/my-project/metrics/my-metric";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.LogMetric requestBody = new Data.LogMetric();

            ProjectsResource.MetricsResource.UpdateRequest request = loggingService.Projects.Metrics.Update(requestBody, metricName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogMetric response = request.Execute();
            // Data.LogMetric response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The resource in which to create the sink:
            // "projects/[PROJECT_ID]"
            // "organizations/[ORGANIZATION_ID]"
            // Examples: "projects/my-logging-project", "organizations/123456789".
            string parent = "projects/my-project";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.LogSink requestBody = new Data.LogSink();

            ProjectsResource.SinksResource.CreateRequest request = loggingService.Projects.Sinks.Create(requestBody, parent);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System.Threading.Tasks;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The full resource name of the sink to delete, including the parent resource and the sink
            // identifier:
            // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
            // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
            // It is an error if the sink does not exist. Example: "projects/my-project-id/sinks/my-sink-id". It
            // is an error if the sink does not exist.
            string sinkName = "projects/my-project/sinks/my-sink";  // TODO: Update placeholder value.

            ProjectsResource.SinksResource.DeleteRequest request = loggingService.Projects.Sinks.Delete(sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The parent resource name of the sink:
            // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
            // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
            // Example: "projects/my-project-id/sinks/my-sink-id".
            string sinkName = "projects/my-project/sinks/my-sink";  // TODO: Update placeholder value.

            ProjectsResource.SinksResource.GetRequest request = loggingService.Projects.Sinks.Get(sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The parent resource whose sinks are to be listed. Examples:
            // "projects/my-logging-project", "organizations/123456789".
            string parent = "projects/my-project";  // TODO: Update placeholder value.

            ProjectsResource.SinksResource.ListRequest request = loggingService.Projects.Sinks.List(parent);

            Data.ListSinksResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Sinks == null)
                {
                    continue;
                }
                foreach (Data.LogSink logSink in response.Sinks)
                {
                    // TODO: Change code below to process each `logSink` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(logSink));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Logging.v2beta1;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Logging.v2beta1.Data;

namespace LoggingSample
{
    public class LoggingExample
    {
        public static void Main(string[] args)
        {
            LoggingService loggingService = new LoggingService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-LoggingSample/0.1",
            });

            // Required. The full resource name of the sink to update, including the parent resource and the sink
            // identifier:
            // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
            // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
            // Example: "projects/my-project-id/sinks/my-sink-id".
            string sinkName = "projects/my-project/sinks/my-sink";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.LogSink requestBody = new Data.LogSink();

            ProjectsResource.SinksResource.UpdateRequest request = loggingService.Projects.Sinks.Update(requestBody, sinkName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LogSink response = request.Execute();
            // Data.LogSink response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
