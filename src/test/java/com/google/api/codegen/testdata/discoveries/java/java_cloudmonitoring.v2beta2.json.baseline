
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.MetricDescriptor;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project id. The value can be the numeric project ID or string-based project name.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    MetricDescriptor requestBody = new MetricDescriptor();


    CloudMonitoring.MetricDescriptors.Create request = cloudmonitoringService.metricDescriptors().create(project, requestBody);
    MetricDescriptor response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.DeleteMetricDescriptorResponse;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project ID to which the metric belongs.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // Name of the metric.
    String metric = "{MY-METRIC}"; // TODO: Update placeholder value(s).

    CloudMonitoring.MetricDescriptors.Delete request = cloudmonitoringService.metricDescriptors().delete(project, metric);
    DeleteMetricDescriptorResponse response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListMetricDescriptorsResponse;
import com.google.api.services.cloudmonitoring.model.MetricDescriptor;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project id. The value can be the numeric project ID or string-based project name.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    CloudMonitoring.MetricDescriptors.List request = cloudmonitoringService.metricDescriptors().list(project);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListMetricDescriptorsResponse response;
    do {
      response = request.execute();
      if (response.getMetrics() == null)
        continue;

      for (MetricDescriptor metricDescriptor : response.getMetrics()) {
        // TODO: Use metricDescriptor
        System.out.println(gson.toJson(new JsonParser().parse(metricDescriptor.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListTimeseriesResponse;
import com.google.api.services.cloudmonitoring.model.Timeseries;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    String metric = "{MY-METRIC}"; // TODO: Update placeholder value(s).

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    String youngest = "{MY-YOUNGEST}"; // TODO: Update placeholder value(s).

    CloudMonitoring.Timeseries.List request = cloudmonitoringService.timeseries().list(project, metric, youngest);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListTimeseriesResponse response;
    do {
      response = request.execute();
      if (response.getTimeseries() == null)
        continue;

      for (Timeseries timeseries : response.getTimeseries()) {
        // TODO: Use timeseries
        System.out.println(gson.toJson(new JsonParser().parse(timeseries.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.WriteTimeseriesRequest;
import com.google.api.services.cloudmonitoring.model.WriteTimeseriesResponse;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project ID. The value can be the numeric project ID or string-based project name.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    WriteTimeseriesRequest requestBody = new WriteTimeseriesRequest();


    CloudMonitoring.Timeseries.Write request = cloudmonitoringService.timeseries().write(project, requestBody);
    WriteTimeseriesResponse response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListTimeseriesDescriptorsResponse;
import com.google.api.services.cloudmonitoring.model.TimeseriesDescriptor;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudMonitoringExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    CloudMonitoring cloudmonitoringService = new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    String project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    String metric = "{MY-METRIC}"; // TODO: Update placeholder value(s).

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    String youngest = "{MY-YOUNGEST}"; // TODO: Update placeholder value(s).

    CloudMonitoring.TimeseriesDescriptors.List request = cloudmonitoringService.timeseriesDescriptors().list(project, metric, youngest);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListTimeseriesDescriptorsResponse response;
    do {
      response = request.execute();
      if (response.getTimeseries() == null)
        continue;

      for (TimeseriesDescriptor timeseriesDescriptor : response.getTimeseries()) {
        // TODO: Use timeseriesDescriptor
        System.out.println(gson.toJson(new JsonParser().parse(timeseriesDescriptor.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
