
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.MetricDescriptor;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project id. The value can be the numeric project ID or string-based project name.
    String project = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    MetricDescriptor requestBody = new MetricDescriptor();

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.MetricDescriptors.Create request = cloudMonitoringService.metricDescriptors().create(project, requestBody);

    MetricDescriptor response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.DeleteMetricDescriptorResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID to which the metric belongs.
    String project = "";  // TODO: Update placeholder value.

    // Name of the metric.
    String metric = "";  // TODO: Update placeholder value.

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.MetricDescriptors.Delete request = cloudMonitoringService.metricDescriptors().delete(project, metric);

    DeleteMetricDescriptorResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListMetricDescriptorsResponse;
import com.google.api.services.cloudmonitoring.model.MetricDescriptor;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project id. The value can be the numeric project ID or string-based project name.
    String project = "";  // TODO: Update placeholder value.

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.MetricDescriptors.List request = cloudMonitoringService.metricDescriptors().list(project);

    ListMetricDescriptorsResponse response;
    do {
      response = request.execute();
      if (response.getMetrics() == null) {
        continue;
      }
      for (MetricDescriptor metricDescriptor : response.getMetrics()) {
        // TODO: Change code below to process each `metricDescriptor` resource:
        System.out.println(metricDescriptor);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListTimeseriesResponse;
import com.google.api.services.cloudmonitoring.model.Timeseries;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    String project = "";  // TODO: Update placeholder value.

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    String metric = "";  // TODO: Update placeholder value.

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    String youngest = "";  // TODO: Update placeholder value.

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.Timeseries.List request = cloudMonitoringService.timeseries().list(project, metric, youngest);

    ListTimeseriesResponse response;
    do {
      response = request.execute();
      if (response.getTimeseries() == null) {
        continue;
      }
      for (Timeseries timeseries : response.getTimeseries()) {
        // TODO: Change code below to process each `timeseries` resource:
        System.out.println(timeseries);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.WriteTimeseriesRequest;
import com.google.api.services.cloudmonitoring.model.WriteTimeseriesResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID. The value can be the numeric project ID or string-based project name.
    String project = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    WriteTimeseriesRequest requestBody = new WriteTimeseriesRequest();

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.Timeseries.Write request = cloudMonitoringService.timeseries().write(project, requestBody);

    WriteTimeseriesResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudmonitoring/v2beta2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudmonitoring.CloudMonitoring;
import com.google.api.services.cloudmonitoring.model.ListTimeseriesDescriptorsResponse;
import com.google.api.services.cloudmonitoring.model.TimeseriesDescriptor;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudMonitoringExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    String project = "";  // TODO: Update placeholder value.

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    String metric = "";  // TODO: Update placeholder value.

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    String youngest = "";  // TODO: Update placeholder value.

    CloudMonitoring cloudMonitoringService = createCloudMonitoringService();
    CloudMonitoring.TimeseriesDescriptors.List request = cloudMonitoringService.timeseriesDescriptors().list(project, metric, youngest);

    ListTimeseriesDescriptorsResponse response;
    do {
      response = request.execute();
      if (response.getTimeseries() == null) {
        continue;
      }
      for (TimeseriesDescriptor timeseriesDescriptor : response.getTimeseries()) {
        // TODO: Change code below to process each `timeseriesDescriptor` resource:
        System.out.println(timeseriesDescriptor);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static CloudMonitoring createCloudMonitoringService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new CloudMonitoring.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-CloudMonitoringSample/0.1")
        .build();
  }
}
