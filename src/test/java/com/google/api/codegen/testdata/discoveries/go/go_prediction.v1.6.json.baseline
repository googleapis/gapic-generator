
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The name of a hosted model.
  // TODO: Update placeholder value.
  hostedModelName := "{MY-HOSTED-MODEL-NAME}"

  resp, err := c.Hostedmodels.Predict(project, hostedModelName, &prediction.Input{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The unique name for the predictive model.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  resp, err := c.Trainedmodels.Analyze(project, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The unique name for the predictive model.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  if err := c.Trainedmodels.Delete(project, id).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The unique name for the predictive model.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  resp, err := c.Trainedmodels.Get(project, id).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  resp, err := c.Trainedmodels.Insert(project, &prediction.Insert{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/devstorage.full_control
  //   https://www.googleapis.com/auth/devstorage.read_only
  //   https://www.googleapis.com/auth/devstorage.read_write
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  call := c.Trainedmodels.List(project)
  if err := call.Pages(ctx, func(page *prediction.List) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The unique name for the predictive model.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  resp, err := c.Trainedmodels.Predict(project, id, &prediction.Input{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "errors"
  "net/http"

  "golang.org/x/net/context"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  hc, err := getClient(ctx)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := prediction.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project associated with the model.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // The unique name for the predictive model.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  resp, err := c.Trainedmodels.Update(project, id, &prediction.Update{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}

func getClient(ctx Context) (*http.Client, error) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return nil, errors.New("Not implemented")
}
