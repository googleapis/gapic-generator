
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The name of a hosted model.
  hostedModelName := "{MY-HOSTED-MODEL-NAME}"
  // TODO: Change placeholder value above.

  rb := prediction.Input{
    // TODO: Add desired fields of the request body.
  }

  resp, err := predictionService.Hostedmodels.Predict(project, hostedModelName, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The unique name for the predictive model.
  id := "{MY-ID}"
  // TODO: Change placeholder value above.

  resp, err := predictionService.Trainedmodels.Analyze(project, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The unique name for the predictive model.
  id := "{MY-ID}"
  // TODO: Change placeholder value above.

  if err := predictionService.Trainedmodels.Delete(project, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The unique name for the predictive model.
  id := "{MY-ID}"
  // TODO: Change placeholder value above.

  resp, err := predictionService.Trainedmodels.Get(project, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := prediction.Insert{
    // TODO: Add desired fields of the request body.
  }

  resp, err := predictionService.Trainedmodels.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := predictionService.Trainedmodels.List(project)
  if err := req.Pages(ctx, func(page *prediction.List) error {
    for _, insert2 := range page.Items {
      // TODO: Change code below to process each `insert2` resource:
      fmt.Printf("%#v\n", insert2)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The unique name for the predictive model.
  id := "{MY-ID}"
  // TODO: Change placeholder value above.

  rb := prediction.Input{
    // TODO: Add desired fields of the request body.
  }

  resp, err := predictionService.Trainedmodels.Predict(project, id, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, prediction.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  predictionService, err := prediction.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  // The unique name for the predictive model.
  id := "{MY-ID}"
  // TODO: Change placeholder value above.

  rb := prediction.Update{
    // TODO: Add desired fields of the request body.
  }

  resp, err := predictionService.Trainedmodels.Update(project, id, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
