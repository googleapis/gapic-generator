
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'predict' method:
  var (
    // The project associated with the model.
    project = ""

    // The name of a hosted model.
    hostedModelName = ""


    requestBody = &prediction.Input{}
  )

  callResult, err := client.Hostedmodels.Predict(project, hostedModelName, requestBody).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'analyze' method:
  var (
    // The project associated with the model.
    project = ""

    // The unique name for the predictive model.
    id = ""

  )

  callResult, err := client.Trainedmodels.Analyze(project, id).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'delete' method:
  var (
    // The project associated with the model.
    project = ""

    // The unique name for the predictive model.
    id = ""

  )

  if err = client.Trainedmodels.Delete(project, id).Context(ctx).Do(); err != nil {
    _ = err // Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // The project associated with the model.
    project = ""

    // The unique name for the predictive model.
    id = ""

  )

  callResult, err := client.Trainedmodels.Get(project, id).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insert' method:
  var (
    // The project associated with the model.
    project = ""


    requestBody = &prediction.Insert{}
  )

  callResult, err := client.Trainedmodels.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // The project associated with the model.
    project = ""

  )

  fn := func(page *prediction.List) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Trainedmodels.List(project).Pages(ctx, fn); err != nil {
    _ = err // Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'predict' method:
  var (
    // The project associated with the model.
    project = ""

    // The unique name for the predictive model.
    id = ""


    requestBody = &prediction.Input{}
  )

  callResult, err := client.Trainedmodels.Predict(project, id, requestBody).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/prediction/v1.6'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    _ = err // Handle error.
  }
  client, err := prediction.New(httpClient)
  if err != nil {
    _ = err // Handle error.
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'update' method:
  var (
    // The project associated with the model.
    project = ""

    // The unique name for the predictive model.
    id = ""


    requestBody = &prediction.Update{}
  )

  callResult, err := client.Trainedmodels.Update(project, id, requestBody).Context(ctx).Do()
  if err != nil {
    _ = err // Handle error.
  }
  // doThingsWith(callResult)
  _ = callResult
}
