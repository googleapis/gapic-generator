
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The name of a hosted model.
  hostedModelName := "{MY-HOSTED-MODEL-NAME}" // TODO: Update placeholder value(s).

  input := &prediction.Input{
    // TODO: Add the desired fields.
  }

  resp, err := s.Hostedmodels.Predict(project, hostedModelName, &input).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The unique name for the predictive model.
  id := "{MY-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Trainedmodels.Analyze(project, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The unique name for the predictive model.
  id := "{MY-ID}" // TODO: Update placeholder value(s).

  if err := s.Trainedmodels.Delete(project, id).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The unique name for the predictive model.
  id := "{MY-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Trainedmodels.Get(project, id).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.DevstorageFullControlScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  insert := &prediction.Insert{
    // TODO: Add the desired fields.
  }

  resp, err := s.Trainedmodels.Insert(project, &insert).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Trainedmodels.List(project)
  if err := call.Pages(ctx, func(page *prediction.List) error {
    for _, insert2 := range page.Items {
      // TODO: Use insert2
      fmt.Printf("%#v\n", insert2)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The unique name for the predictive model.
  id := "{MY-ID}" // TODO: Update placeholder value(s).

  input := &prediction.Input{
    // TODO: Add the desired fields.
  }

  resp, err := s.Trainedmodels.Predict(project, id, &input).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/prediction/v1.6"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, prediction.PredictionScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := prediction.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project associated with the model.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // The unique name for the predictive model.
  id := "{MY-ID}" // TODO: Update placeholder value(s).

  update := &prediction.Update{
    // TODO: Add the desired fields.
  }

  resp, err := s.Trainedmodels.Update(project, id, &update).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
