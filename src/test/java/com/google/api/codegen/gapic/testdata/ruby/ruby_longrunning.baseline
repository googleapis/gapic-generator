============== file: .gitignore ==============
Gemfile.lock
coverage/*
doc/*
pkg/*
html/*
jsondoc/*

# Ignore YARD stuffs
.yardoc

# IDE settings
.idea
*.iml

============== file: .rubocop.yml ==============
AllCops:
  Exclude:
    - "google.gemspec"
    - "lib/google/**/*"
    - "Rakefile"
    - "test/**/*"
    - "acceptance/**/*"

Documentation:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes
Style/MethodDefParentheses:
  EnforcedStyle: require_no_parentheses

============== file: .yardopts ==============
--no-private
--title=Google Long Running Operations API
--exclude _pb\.rb$
--markup markdown
--markup-provider redcarpet

./lib/**/*.rb
-
README.md

============== file: CHANGELOG.md ==============
# Release History

============== file: Gemfile ==============
source "https://rubygems.org"

gemspec

gem "gcloud-jsondoc",
    git: "https://github.com/GoogleCloudPlatform/google-cloud-ruby.git",
    branch: "gcloud-jsondoc"

# WORKAROUND: builds are having problems since the release of 3.0.0
# pin to the last known good version
gem "public_suffix", "~> 2.0"
gem "rake", "~> 11.0"

============== file: LICENSE ==============
                            Apache License
                           Version 2.0, January 2004
                        https://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

============== file: README.md ==============
# Ruby Client for Google Long Running Operations API ([GA](https://github.com/GoogleCloudPlatform/google-cloud-ruby#versioning))

[Google Long Running Operations API][Product Documentation]:

- [Client Library Documentation][]
- [Product Documentation][]

## Quick Start
In order to use this library, you first need to go through the following
steps:

1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
2. [Enable billing for your project.](https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project)
3. [Enable the Google Long Running Operations API.](https://console.cloud.google.com/apis/library/longrunning.googleapis.com)
4. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud/master/guides/authentication)

### Installation
```
$ gem install google
```

### Preview
#### OperationsClient
```rb
require "google/longrunning"

operations_client = Google::Longrunning.new
name = "my-name"
filter = project_id

# Iterate over all results.
operations_client.list_operations(name, filter).each do |element|
  # Process element.
end

# Or iterate over results one page at a time.
operations_client.list_operations(name, filter).each_page do |page|
  # Process each page at a time.
  page.each do |element|
    # Process element.
  end
end
```

### Next Steps
- Read the [Client Library Documentation][] for Google Long Running Operations API
  to see other available methods on the client.
- Read the [Google Long Running Operations API Product documentation][Product Documentation]
  to learn more about the product and see How-to Guides.
- View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-ruby/blob/master/README.md)
  to see the full list of Cloud APIs that we cover.

[Client Library Documentation]: https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google/latest/google/longrunning
[Product Documentation]: https://cloud.google.com/longrunning

## Enabling Logging

To enable logging for this library, set the logger for the underlying [gRPC](https://github.com/grpc/grpc/tree/master/src/ruby) library.
The logger that you set may be a Ruby stdlib [`Logger`](https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html) as shown below,
or a [`Google::Cloud::Logging::Logger`](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger)
that will write logs to [Stackdriver Logging](https://cloud.google.com/logging/). See [grpc/logconfig.rb](https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb)
and the gRPC [spec_helper.rb](https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb) for additional information.

Configuring a Ruby stdlib logger:

```ruby
require "logger"

module MyLogger
  LOGGER = Logger.new $stderr, level: Logger::WARN
  def logger
    LOGGER
  end
end

# Define a gRPC module-level logger method before grpc/logconfig.rb loads.
module GRPC
  extend MyLogger
end
```

## Supported Ruby Versions

This library is supported on Ruby 2.3+.

Google provides official support for Ruby versions that are actively supported
by Ruby Core—that is, Ruby versions that are either in normal maintenance or
in security maintenance, and not end of life. Currently, this means Ruby 2.3
and later. Older versions of Ruby _may_ still work, but are unsupported and not
recommended. See https://www.ruby-lang.org/en/downloads/branches/ for details
about the Ruby support schedule.

============== file: Rakefile ==============
# Copyright 2020 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/setup"
require "bundler/gem_tasks"

require "rubocop/rake_task"
RuboCop::RakeTask.new

desc "Run tests."
task :test do
  $LOAD_PATH.unshift "lib", "test"
  Dir.glob("test/**/*test.rb")
    .reject { |file| file.include? "smoke_test" }
    .each { |file| require_relative file }
end

namespace :test do
  desc "Runs tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task["test"].invoke
  end
end

desc "Runs the smoke tests."
task :smoke_test do

  $LOAD_PATH.unshift "lib", "smoke_test"
  Dir.glob("acceptance/**/*smoke_test.rb").each { |file| require_relative file }
end

namespace :smoke_test do
  desc "Runs smoke tests with coverage."
  task :coverage do
    require "simplecov"
    SimpleCov.start do
      command_name "google"
      track_files "lib/**/*.rb"
      add_filter "test/"
    end

    Rake::Task["smoke_test"].invoke
  end
end

# Acceptance tests
desc "Run the google acceptance tests."
task :acceptance, :project, :keyfile do |t, args|
  project = args[:project]
  project ||=
    ENV["GOOGLE_TEST_PROJECT"] ||
    ENV["GCLOUD_TEST_PROJECT"]
  keyfile = args[:keyfile]
  keyfile ||=
    ENV["GOOGLE_TEST_KEYFILE"] ||
    ENV["GCLOUD_TEST_KEYFILE"]
  if keyfile
    keyfile = File.read keyfile
  else
    keyfile ||=
      ENV["GOOGLE_TEST_KEYFILE_JSON"] ||
      ENV["GCLOUD_TEST_KEYFILE_JSON"]
  end
  if project.nil? || keyfile.nil?
    fail "You must provide a project and keyfile. e.g. rake acceptance[test123, /path/to/keyfile.json] or GOOGLE_TEST_PROJECT=test123 GOOGLE_TEST_KEYFILE=/path/to/keyfile.json rake acceptance"
  end
  require "google/longrunning/credentials"
  (Google::Auth::Credentials::PATH_ENV_VARS +
   Google::Auth::Credentials::JSON_ENV_VARS).each do |path|
    ENV[path] = nil
  end
  ENV["GOOGLE_PROJECT"] = project
  ENV["GOOGLE_TEST_PROJECT"] = project
  ENV["GOOGLE_KEYFILE_JSON"] = keyfile

  Rake::Task["acceptance:run"].invoke
end

namespace :acceptance do
  task :run do
    Rake::Task["smoke_test"].invoke
  end

  desc "Run acceptance tests with coverage."
  task :coverage do
  end

  desc "Run acceptance cleanup."
  task :cleanup do
  end
end

require "yard"
require "yard/rake/yardoc_task"
YARD::Rake::YardocTask.new

desc "Generates JSON output from google .yardoc"
task :jsondoc => :yard do
  require "rubygems"
  require "gcloud/jsondoc"

  registry = YARD::Registry.load! ".yardoc"

  toc_config = {
    documents: [
      {
        type: "toc",
        title: "Google::Longrunning::DataTypes",
        modules: [
          {
            title: "Google::Longrunning",
            include: ["google/longrunning"]
          },
          {
            title: "Google::Protobuf",
            include: ["google/protobuf"]
          },
          {
            title: "Google::Rpc",
            include: ["google/rpc"]
          }
        ]
      }
    ]
  }

  generator = Gcloud::Jsondoc::Generator.new registry,
                                             "google",
                                             generate: toc_config
  rm_rf "jsondoc", verbose: true
  generator.write_to "jsondoc"
  cp ["docs/toc.json"], "jsondoc", verbose: true
end

desc "Run yard-doctest example tests."
task :doctest do
  puts "The google gem does not have doctest tests."
end

desc "Run the CI build"
task :ci do
  header "BUILDING google"
  header "google rubocop", "*"
  sh "bundle exec rake rubocop"
  header "google jsondoc", "*"
  sh "bundle exec rake jsondoc"
  header "google doctest", "*"
  sh "bundle exec rake doctest"
  header "google test", "*"
  sh "bundle exec rake test"
end

namespace :ci do
  desc "Run the CI build, with acceptance tests."
  task :acceptance do
    Rake::Task["ci"].invoke
    header "google acceptance", "*"
    sh "bundle exec rake acceptance -v"
  end
  task :a do
    # This is a handy shortcut to save typing
    Rake::Task["ci:acceptance"].invoke
  end
end

task :default => :test

def header str, token = "#"
  line_length = str.length + 8
  puts ""
  puts token * line_length
  puts "#{token * 3} #{str} #{token * 3}"
  puts token * line_length
  puts ""
end

============== file: acceptance/google/longrunning/operations_smoke_test.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# AUTO GENERATED BY GAPIC

require "minitest/autorun"
require "minitest/spec"

require "google/longrunning"

describe "OperationsSmokeTest" do
  it "runs one smoke test with list_operations" do
    unless ENV["GOOGLE_TEST_PROJECT"]
      fail "GOOGLE_TEST_PROJECT environment variable must be defined"
    end
    project_id = ENV["GOOGLE_TEST_PROJECT"].freeze

    operations_client = Google::Longrunning.new
    name = "my-name"
    filter = project_id

    # Iterate over all results.
    operations_client.list_operations(name, filter).each do |element|
      # Process element.
    end

    # Or iterate over results one page at a time.
    operations_client.list_operations(name, filter).each_page do |page|
      # Process each page at a time.
      page.each do |element|
        # Process element.
      end
    end
  end
end

============== file: google.gemspec ==============
# -*- ruby -*-
# encoding: utf-8

Gem::Specification.new do |gem|
  gem.name          = "google"
  gem.version       = "0.1.0"

  gem.authors       = ["Google LLC"]
  gem.email         = "googleapis-packages@google.com"
  gem.description   = "google is the official library for Google Long Running Operations API."
  gem.summary       = "API Client library for Google Long Running Operations API"
  gem.homepage      = "https://github.com/googleapis/googleapis"
  gem.license       = "Apache-2.0"

  gem.platform      = Gem::Platform::RUBY

  gem.files         = `git ls-files -- lib/*`.split("\n") +
                      ["README.md", "LICENSE", ".yardopts"]
  gem.require_paths = ["lib"]

  gem.required_ruby_version = ">= 2.0.0"

  gem.add_dependency "google-gax", "~> 1.3"

  gem.add_development_dependency "minitest", "~> 5.10"
  gem.add_development_dependency "redcarpet", "~> 3.0"
  gem.add_development_dependency "rubocop", "~> 0.50.0"
  gem.add_development_dependency "simplecov", "~> 0.9"
  gem.add_development_dependency "yard", "~> 0.9"
end

============== file: lib/google/longrunning.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "google/longrunning/operations_client"

module Google
  # rubocop:disable LineLength

  ##
  # # Ruby Client for Google Long Running Operations API ([GA](https://github.com/GoogleCloudPlatform/google-cloud-ruby#versioning))
  #
  # [Google Long Running Operations API][Product Documentation]:
  #
  # - [Product Documentation][]
  #
  # ## Quick Start
  # In order to use this library, you first need to go through the following
  # steps:
  #
  # 1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
  # 2. [Enable billing for your project.](https://cloud.google.com/billing/docs/how-to/modify-project#enable_billing_for_a_project)
  # 3. [Enable the Google Long Running Operations API.](https://console.cloud.google.com/apis/library/longrunning.googleapis.com)
  # 4. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud/master/guides/authentication)
  #
  # ### Installation
  # ```
  # $ gem install google
  # ```
  #
  # ### Preview
  # #### OperationsClient
  # ```rb
  # require "google/longrunning"
  #
  # operations_client = Google::Longrunning.new
  # name = "my-name"
  # filter = project_id
  #
  # # Iterate over all results.
  # operations_client.list_operations(name, filter).each do |element|
  #   # Process element.
  # end
  #
  # # Or iterate over results one page at a time.
  # operations_client.list_operations(name, filter).each_page do |page|
  #   # Process each page at a time.
  #   page.each do |element|
  #     # Process element.
  #   end
  # end
  # ```
  #
  # ### Next Steps
  # - Read the [Google Long Running Operations API Product documentation][Product Documentation]
  #   to learn more about the product and see How-to Guides.
  # - View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-ruby/blob/master/README.md)
  #   to see the full list of Cloud APIs that we cover.
  #
  # [Product Documentation]: https://cloud.google.com/longrunning
  #
  # ## Enabling Logging
  #
  # To enable logging for this library, set the logger for the underlying [gRPC](https://github.com/grpc/grpc/tree/master/src/ruby) library.
  # The logger that you set may be a Ruby stdlib [`Logger`](https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html) as shown below,
  # or a [`Google::Cloud::Logging::Logger`](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger)
  # that will write logs to [Stackdriver Logging](https://cloud.google.com/logging/). See [grpc/logconfig.rb](https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb)
  # and the gRPC [spec_helper.rb](https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb) for additional information.
  #
  # Configuring a Ruby stdlib logger:
  #
  # ```ruby
  # require "logger"
  #
  # module MyLogger
  #   LOGGER = Logger.new $stderr, level: Logger::WARN
  #   def logger
  #     LOGGER
  #   end
  # end
  #
  # # Define a gRPC module-level logger method before grpc/logconfig.rb loads.
  # module GRPC
  #   extend MyLogger
  # end
  # ```
  #
  module Longrunning
    # rubocop:enable LineLength

    ##
    # Manages long-running operations with an API service.
    #
    # When an API method normally takes long time to complete, it can be designed
    # to return {Google::Longrunning::Operation Operation} to the client, and the client can use this
    # interface to receive the real response asynchronously by polling the
    # operation resource, or pass the operation resource to another API (such as
    # Google Cloud Pub/Sub API) to receive the response.  Any API service that
    # returns long-running operations should implement the `Operations` interface
    # so developers can have a consistent client experience.
    #
    # @param credentials [Google::Auth::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
    #   Provides the means for authenticating requests made by the client. This parameter can
    #   be many types.
    #   A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
    #   authenticating requests made by this client.
    #   A `String` will be treated as the path to the keyfile to be used for the construction of
    #   credentials for this client.
    #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
    #   credentials for this client.
    #   A `GRPC::Core::Channel` will be used to make calls through.
    #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
    #   should already be composed with a `GRPC::Core::CallCredentials` object.
    #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
    #   metadata for requests, generally, to give OAuth credentials.
    # @param scopes [Array<String>]
    #   The OAuth scopes for this service. This parameter is ignored if
    #   an updater_proc is supplied.
    # @param client_config [Hash]
    #   A Hash for call options for each method. See
    #   Google::Gax#construct_settings for the structure of
    #   this data. Falls back to the default config if not specified
    #   or the specified config is missing data points.
    # @param timeout [Numeric]
    #   The default timeout, in seconds, for calls made through this client.
    # @param metadata [Hash]
    #   Default metadata to be sent with each request. This can be overridden on a per call basis.
    # @param exception_transformer [Proc]
    #   An optional proc that intercepts any exceptions raised during an API call to inject
    #   custom error handling.
    def self.new \
        credentials: nil,
        scopes: nil,
        client_config: nil,
        timeout: nil,
        metadata: nil,
        exception_transformer: nil,
        lib_name: nil,
        lib_version: nil
      kwargs = {
        credentials: credentials,
        scopes: scopes,
        client_config: client_config,
        timeout: timeout,
        metadata: metadata,
        exception_transformer: exception_transformer,
        lib_name: lib_name,
        lib_version: lib_version
      }.select { |_, v| v != nil }
      Google::Longrunning::OperationsClient.new(**kwargs)
    end
  end
end

============== file: lib/google/longrunning/doc/google/protobuf/any.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Google
  module Protobuf
    # `Any` contains an arbitrary serialized protocol buffer message along with a
    # URL that describes the type of the serialized message.
    #
    # Protobuf library provides support to pack/unpack Any values in the form
    # of utility functions or additional generated methods of the Any type.
    #
    # Example 1: Pack and unpack a message in C++.
    #
    #     Foo foo = ...;
    #     Any any;
    #     any.PackFrom(foo);
    #     ...
    #     if (any.UnpackTo(&foo)) {
    #       ...
    #     }
    #
    # Example 2: Pack and unpack a message in Java.
    #
    #     Foo foo = ...;
    #     Any any = Any.pack(foo);
    #     ...
    #     if (any.is(Foo.class)) {
    #       foo = any.unpack(Foo.class);
    #     }
    #
    #  Example 3: Pack and unpack a message in Python.
    #
    #     foo = Foo(...)
    #     any = Any()
    #     any.Pack(foo)
    #     ...
    #     if any.Is(Foo.DESCRIPTOR):
    #       any.Unpack(foo)
    #       ...
    #
    #  Example 4: Pack and unpack a message in Go
    #
    #      foo := &pb.Foo{...}
    #      any, err := ptypes.MarshalAny(foo)
    #      ...
    #      foo := &pb.Foo{}
    #      if err := ptypes.UnmarshalAny(any, foo); err != nil {
    #        ...
    #      }
    #
    # The pack methods provided by protobuf library will by default use
    # 'type.googleapis.com/full.type.name' as the type URL and the unpack
    # methods only use the fully qualified type name after the last '/'
    # in the type URL, for example "foo.bar.com/x/y.z" will yield type
    # name "y.z".
    #
    #
    # = JSON
    #
    # The JSON representation of an `Any` value uses the regular
    # representation of the deserialized, embedded message, with an
    # additional field `@type` which contains the type URL. Example:
    #
    #     package google.profile;
    #     message Person {
    #       string first_name = 1;
    #       string last_name = 2;
    #     }
    #
    #     {
    #       "@type": "type.googleapis.com/google.profile.Person",
    #       "firstName": <string>,
    #       "lastName": <string>
    #     }
    #
    # If the embedded message type is well-known and has a custom JSON
    # representation, that representation will be embedded adding a field
    # `value` which holds the custom JSON in addition to the `@type`
    # field. Example (for message {Google::Protobuf::Duration}):
    #
    #     {
    #       "@type": "type.googleapis.com/google.protobuf.Duration",
    #       "value": "1.212s"
    #     }
    # @!attribute [rw] type_url
    #   @return [String]
    #     A URL/resource name that uniquely identifies the type of the serialized
    #     protocol buffer message. This string must contain at least
    #     one "/" character. The last segment of the URL's path must represent
    #     the fully qualified name of the type (as in
    #     `path/google.protobuf.Duration`). The name should be in a canonical form
    #     (e.g., leading "." is not accepted).
    #
    #     In practice, teams usually precompile into the binary all types that they
    #     expect it to use in the context of Any. However, for URLs which use the
    #     scheme `http`, `https`, or no scheme, one can optionally set up a type
    #     server that maps type URLs to message definitions as follows:
    #
    #     * If no scheme is provided, `https` is assumed.
    #     * An HTTP GET on the URL must yield a {Google::Protobuf::Type}
    #       value in binary format, or produce an error.
    #     * Applications are allowed to cache lookup results based on the
    #       URL, or have them precompiled into a binary to avoid any
    #       lookup. Therefore, binary compatibility needs to be preserved
    #       on changes to types. (Use versioned type names to manage
    #       breaking changes.)
    #
    #     Note: this functionality is not currently available in the official
    #     protobuf release, and it is not used for type URLs beginning with
    #     type.googleapis.com.
    #
    #     Schemes other than `http`, `https` (or the empty scheme) might be
    #     used with implementation specific semantics.
    # @!attribute [rw] value
    #   @return [String]
    #     Must be a valid serialized protocol buffer of the above specified type.
    class Any; end
  end
end
============== file: lib/google/longrunning/doc/google/protobuf/empty.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Google
  module Protobuf
    # A generic empty message that you can re-use to avoid defining duplicated
    # empty messages in your APIs. A typical example is to use it as the request
    # or the response type of an API method. For instance:
    #
    #     service Foo {
    #       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
    #     }
    #
    # The JSON representation for `Empty` is empty JSON object `{}`.
    class Empty; end
  end
end
============== file: lib/google/longrunning/doc/google/rpc/status.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Google
  module Rpc
    # The `Status` type defines a logical error model that is suitable for
    # different programming environments, including REST APIs and RPC APIs. It is
    # used by [gRPC](https://github.com/grpc). The error model is designed to be:
    #
    # * Simple to use and understand for most users
    # * Flexible enough to meet unexpected needs
    #
    # = Overview
    #
    # The `Status` message contains three pieces of data: error code, error
    # message, and error details. The error code should be an enum value of
    # {Google::Rpc::Code}, but it may accept additional error codes
    # if needed.  The error message should be a developer-facing English message
    # that helps developers *understand* and *resolve* the error. If a localized
    # user-facing error message is needed, put the localized message in the error
    # details or localize it in the client. The optional error details may contain
    # arbitrary information about the error. There is a predefined set of error
    # detail types in the package `google.rpc` that can be used for common error
    # conditions.
    #
    # = Language mapping
    #
    # The `Status` message is the logical representation of the error model, but it
    # is not necessarily the actual wire format. When the `Status` message is
    # exposed in different client libraries and different wire protocols, it can be
    # mapped differently. For example, it will likely be mapped to some exceptions
    # in Java, but more likely mapped to some error codes in C.
    #
    # = Other uses
    #
    # The error model and the `Status` message can be used in a variety of
    # environments, either with or without APIs, to provide a
    # consistent developer experience across different environments.
    #
    # Example uses of this error model include:
    #
    # * Partial errors. If a service needs to return partial errors to the client,
    #   it may embed the `Status` in the normal response to indicate the partial
    #   errors.
    #
    # * Workflow errors. A typical workflow has multiple steps. Each step may
    #   have a `Status` message for error reporting.
    #
    # * Batch operations. If a client uses batch request and batch response, the
    #   `Status` message should be used directly inside batch response, one for
    #   each error sub-response.
    #
    # * Asynchronous operations. If an API call embeds asynchronous operation
    #   results in its response, the status of those operations should be
    #   represented directly using the `Status` message.
    #
    # * Logging. If some API errors are stored in logs, the message `Status` could
    #   be used directly after any stripping needed for security/privacy reasons.
    # @!attribute [rw] code
    #   @return [Integer]
    #     The status code, which should be an enum value of
    #     {Google::Rpc::Code}.
    # @!attribute [rw] message
    #   @return [String]
    #     A developer-facing error message, which should be in English. Any
    #     user-facing error message should be localized and sent in the
    #     {Google::Rpc::Status#details} field, or localized
    #     by the client.
    # @!attribute [rw] details
    #   @return [Array<Google::Protobuf::Any>]
    #     A list of messages that carry the error details.  There is a common set of
    #     message types for APIs to use.
    class Status; end
  end
end
============== file: lib/google/longrunning/doc/longrunning.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

module Google
  module Longrunning
    # This resource represents a long-running operation that is the result of a
    # network API call.
    # @!attribute [rw] name
    #   @return [String]
    #     The server-assigned name, which is only unique within the same service that
    #     originally returns it. If you use the default HTTP mapping, the
    #     `name` should have the format of `operations/some/unique/name`.
    # @!attribute [rw] metadata
    #   @return [Google::Protobuf::Any]
    #     Service-specific metadata associated with the operation.  It typically
    #     contains progress information and common metadata such as create time.
    #     Some services might not provide such metadata.  Any method that returns a
    #     long-running operation should document the metadata type, if any.
    # @!attribute [rw] done
    #   @return [true, false]
    #     If the value is `false`, it means the operation is still in progress.
    #     If true, the operation is completed, and either `error` or `response` is
    #     available.
    # @!attribute [rw] error
    #   @return [Google::Rpc::Status]
    #     The error result of the operation in case of failure or cancellation.
    # @!attribute [rw] response
    #   @return [Google::Protobuf::Any]
    #     The normal response of the operation in case of success.  If the original
    #     method returns no data on success, such as `Delete`, the response is
    #     `google.protobuf.Empty`.  If the original method is standard
    #     `Get`/`Create`/`Update`, the response should be the resource.  For other
    #     methods, the response should have the type `XxxResponse`, where `Xxx`
    #     is the original method name.  For example, if the original method name
    #     is `TakeSnapshot()`, the inferred response type is
    #     `TakeSnapshotResponse`.
    class Operation; end

    # The request message for {Google::Longrunning::Operations::GetOperation Operations::GetOperation}.
    # @!attribute [rw] name
    #   @return [String]
    #     The name of the operation resource.
    class GetOperationRequest; end

    # The request message for {Google::Longrunning::Operations::ListOperations Operations::ListOperations}.
    # @!attribute [rw] name
    #   @return [String]
    #     The name of the operation collection.
    # @!attribute [rw] filter
    #   @return [String]
    #     The standard list filter.
    # @!attribute [rw] page_size
    #   @return [Integer]
    #     The standard list page size.
    # @!attribute [rw] page_token
    #   @return [String]
    #     The standard list page token.
    class ListOperationsRequest; end

    # The response message for {Google::Longrunning::Operations::ListOperations Operations::ListOperations}.
    # @!attribute [rw] operations
    #   @return [Array<Google::Longrunning::Operation>]
    #     A list of operations that matches the specified filter in the request.
    # @!attribute [rw] next_page_token
    #   @return [String]
    #     The standard List next-page token.
    class ListOperationsResponse; end

    # The request message for {Google::Longrunning::Operations::CancelOperation Operations::CancelOperation}.
    # @!attribute [rw] name
    #   @return [String]
    #     The name of the operation resource to be cancelled.
    class CancelOperationRequest; end

    # The request message for {Google::Longrunning::Operations::DeleteOperation Operations::DeleteOperation}.
    # @!attribute [rw] name
    #   @return [String]
    #     The name of the operation resource to be deleted.
    class DeleteOperationRequest; end
  end
end
============== file: lib/google/longrunning/operations_client.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/googleapis/googleapis/blob/master/longrunning.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google
# engineers.

require "json"
require "pathname"

require "google/gax"
require "googleauth"

require "longrunning_pb"

module Google
  module Longrunning
    # Manages long-running operations with an API service.
    #
    # When an API method normally takes long time to complete, it can be designed
    # to return {Google::Longrunning::Operation Operation} to the client, and the client can use this
    # interface to receive the real response asynchronously by polling the
    # operation resource, or pass the operation resource to another API (such as
    # Google Cloud Pub/Sub API) to receive the response.  Any API service that
    # returns long-running operations should implement the `Operations` interface
    # so developers can have a consistent client experience.
    #
    # @!attribute [r] operations_stub
    #   @return [Google::Longrunning::Operations::Stub]
    class OperationsClient
      attr_reader :operations_stub

      # The default address of the service.
      SERVICE_ADDRESS = "longrunning.googleapis.com".freeze

      # The default port of the service.
      DEFAULT_SERVICE_PORT = 443

      # The default set of gRPC interceptors.
      GRPC_INTERCEPTORS = []

      DEFAULT_TIMEOUT = 30

      PAGE_DESCRIPTORS = {
        "list_operations" => Google::Gax::PageDescriptor.new(
          "page_token",
          "next_page_token",
          "operations")
      }.freeze

      private_constant :PAGE_DESCRIPTORS

      # The scopes needed to make gRPC calls to all of the methods defined in
      # this service.
      ALL_SCOPES = [
      ].freeze


      # @param credentials [Google::Auth::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
      #   Provides the means for authenticating requests made by the client. This parameter can
      #   be many types.
      #   A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
      #   authenticating requests made by this client.
      #   A `String` will be treated as the path to the keyfile to be used for the construction of
      #   credentials for this client.
      #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
      #   credentials for this client.
      #   A `GRPC::Core::Channel` will be used to make calls through.
      #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
      #   should already be composed with a `GRPC::Core::CallCredentials` object.
      #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
      #   metadata for requests, generally, to give OAuth credentials.
      # @param scopes [Array<String>]
      #   The OAuth scopes for this service. This parameter is ignored if
      #   an updater_proc is supplied.
      # @param client_config [Hash]
      #   A Hash for call options for each method. See
      #   Google::Gax#construct_settings for the structure of
      #   this data. Falls back to the default config if not specified
      #   or the specified config is missing data points.
      # @param timeout [Numeric]
      #   The default timeout, in seconds, for calls made through this client.
      # @param metadata [Hash]
      #   Default metadata to be sent with each request. This can be overridden on a per call basis.
      # @param exception_transformer [Proc]
      #   An optional proc that intercepts any exceptions raised during an API call to inject
      #   custom error handling.
      def initialize \
          credentials: nil,
          scopes: ALL_SCOPES,
          client_config: {},
          timeout: DEFAULT_TIMEOUT,
          metadata: nil,
          exception_transformer: nil,
          lib_name: nil,
          lib_version: ""
        # These require statements are intentionally placed here to initialize
        # the gRPC module only when it's required.
        # See https://github.com/googleapis/toolkit/issues/446
        require "google/gax/grpc"
        require "longrunning_services_pb"

        credentials ||= Google::Auth::Credentials.default(scopes: scopes)

        if credentials.is_a?(String) || credentials.is_a?(Hash)
          updater_proc = Google::Auth::Credentials.new(credentials).updater_proc
        end
        if credentials.is_a?(GRPC::Core::Channel)
          channel = credentials
        end
        if credentials.is_a?(GRPC::Core::ChannelCredentials)
          chan_creds = credentials
        end
        if credentials.is_a?(Proc)
          updater_proc = credentials
        end
        if credentials.is_a?(Google::Auth::Credentials)
          updater_proc = credentials.updater_proc
        end

        package_version = Gem.loaded_specs['google-gax'].version.version

        google_api_client = "gl-ruby/#{RUBY_VERSION}"
        google_api_client << " #{lib_name}/#{lib_version}" if lib_name
        google_api_client << " gapic/#{package_version} gax/#{Google::Gax::VERSION}"
        google_api_client << " grpc/#{GRPC::VERSION}"
        google_api_client.freeze

        headers = { :"x-goog-api-client" => google_api_client }
        if credentials.respond_to?(:quota_project_id) && credentials.quota_project_id
          headers[:"x-goog-user-project"] = credentials.quota_project_id
        end
        headers.merge!(metadata) unless metadata.nil?
        client_config_file = Pathname.new(__dir__).join(
          "operations_client_config.json"
        )
        defaults = client_config_file.open do |f|
          Google::Gax.construct_settings(
            "google.longrunning.Operations",
            JSON.parse(f.read),
            client_config,
            Google::Gax::Grpc::STATUS_CODE_NAMES,
            timeout,
            page_descriptors: PAGE_DESCRIPTORS,
            errors: Google::Gax::Grpc::API_ERRORS,
            metadata: headers
          )
        end

        # Allow overriding the service path/port in subclasses.
        service_path = self.class::SERVICE_ADDRESS
        port = self.class::DEFAULT_SERVICE_PORT
        interceptors = self.class::GRPC_INTERCEPTORS
        @operations_stub = Google::Gax::Grpc.create_stub(
          service_path,
          port,
          chan_creds: chan_creds,
          channel: channel,
          updater_proc: updater_proc,
          scopes: scopes,
          interceptors: interceptors,
          &Google::Longrunning::Operations::Stub.method(:new)
        )

        @get_operation = Google::Gax.create_api_call(
          @operations_stub.method(:get_operation),
          defaults["get_operation"],
          exception_transformer: exception_transformer,
          params_extractor: proc do |request|
            {'name' => request.name}
          end
        )
        @list_operations = Google::Gax.create_api_call(
          @operations_stub.method(:list_operations),
          defaults["list_operations"],
          exception_transformer: exception_transformer,
          params_extractor: proc do |request|
            {'name' => request.name}
          end
        )
        @cancel_operation = Google::Gax.create_api_call(
          @operations_stub.method(:cancel_operation),
          defaults["cancel_operation"],
          exception_transformer: exception_transformer,
          params_extractor: proc do |request|
            {'name' => request.name}
          end
        )
        @delete_operation = Google::Gax.create_api_call(
          @operations_stub.method(:delete_operation),
          defaults["delete_operation"],
          exception_transformer: exception_transformer,
          params_extractor: proc do |request|
            {'name' => request.name}
          end
        )
      end

      # Service calls

      # Gets the latest state of a long-running operation.  Clients can use this
      # method to poll the operation result at intervals as recommended by the API
      # service.
      #
      # @param name [String]
      #   The name of the operation resource.
      # @param options [Google::Gax::CallOptions]
      #   Overrides the default settings for this call, e.g, timeout,
      #   retries, etc.
      # @yield [result, operation] Access the result along with the RPC operation
      # @yieldparam result [Google::Longrunning::Operation]
      # @yieldparam operation [GRPC::ActiveCall::Operation]
      # @return [Google::Longrunning::Operation]
      # @raise [Google::Gax::GaxError] if the RPC is aborted.
      # @example
      #   require "google/longrunning"
      #
      #   operations_client = Google::Longrunning.new
      #
      #   # TODO: Initialize `name`:
      #   name = ''
      #   response = operations_client.get_operation(name)

      def get_operation \
          name,
          options: nil,
          &block
        req = {
          name: name
        }.delete_if { |_, v| v.nil? }
        req = Google::Gax::to_proto(req, Google::Longrunning::GetOperationRequest)
        @get_operation.call(req, options, &block)
      end

      # Lists operations that match the specified filter in the request. If the
      # server doesn't support this method, it returns `UNIMPLEMENTED`.
      #
      # NOTE: the `name` binding below allows API services to override the binding
      # to use different resource name schemes, such as `users/*/operations`.
      #
      # @param name [String]
      #   The name of the operation collection.
      # @param filter [String]
      #   The standard list filter.
      # @param page_size [Integer]
      #   The maximum number of resources contained in the underlying API
      #   response. If page streaming is performed per-resource, this
      #   parameter does not affect the return value. If page streaming is
      #   performed per-page, this determines the maximum number of
      #   resources in a page.
      # @param options [Google::Gax::CallOptions]
      #   Overrides the default settings for this call, e.g, timeout,
      #   retries, etc.
      # @yield [result, operation] Access the result along with the RPC operation
      # @yieldparam result [Google::Gax::PagedEnumerable<Google::Longrunning::Operation>]
      # @yieldparam operation [GRPC::ActiveCall::Operation]
      # @return [Google::Gax::PagedEnumerable<Google::Longrunning::Operation>]
      #   An enumerable of Google::Longrunning::Operation instances.
      #   See Google::Gax::PagedEnumerable documentation for other
      #   operations such as per-page iteration or access to the response
      #   object.
      # @raise [Google::Gax::GaxError] if the RPC is aborted.
      # @example
      #   require "google/longrunning"
      #
      #   operations_client = Google::Longrunning.new
      #
      #   # TODO: Initialize `name`:
      #   name = ''
      #
      #   # TODO: Initialize `filter`:
      #   filter = ''
      #
      #   # Iterate over all results.
      #   operations_client.list_operations(name, filter).each do |element|
      #     # Process element.
      #   end
      #
      #   # Or iterate over results one page at a time.
      #   operations_client.list_operations(name, filter).each_page do |page|
      #     # Process each page at a time.
      #     page.each do |element|
      #       # Process element.
      #     end
      #   end

      def list_operations \
          name,
          filter,
          page_size: nil,
          options: nil,
          &block
        req = {
          name: name,
          filter: filter,
          page_size: page_size
        }.delete_if { |_, v| v.nil? }
        req = Google::Gax::to_proto(req, Google::Longrunning::ListOperationsRequest)
        @list_operations.call(req, options, &block)
      end

      # Starts asynchronous cancellation on a long-running operation.  The server
      # makes a best effort to cancel the operation, but success is not
      # guaranteed.  If the server doesn't support this method, it returns
      # `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      # {Google::Longrunning::Operations::GetOperation Operations::GetOperation} or
      # other methods to check whether the cancellation succeeded or whether the
      # operation completed despite cancellation. On successful cancellation,
      # the operation is not deleted; instead, it becomes an operation with
      # an {Google::Longrunning::Operation#error Operation#error} value with a {Google::Rpc::Status#code} of 1,
      # corresponding to `Code.CANCELLED`.
      #
      # @param name [String]
      #   The name of the operation resource to be cancelled.
      # @param options [Google::Gax::CallOptions]
      #   Overrides the default settings for this call, e.g, timeout,
      #   retries, etc.
      # @yield [result, operation] Access the result along with the RPC operation
      # @yieldparam result []
      # @yieldparam operation [GRPC::ActiveCall::Operation]
      # @raise [Google::Gax::GaxError] if the RPC is aborted.
      # @example
      #   require "google/longrunning"
      #
      #   operations_client = Google::Longrunning.new
      #
      #   # TODO: Initialize `name`:
      #   name = ''
      #   operations_client.cancel_operation(name)

      def cancel_operation \
          name,
          options: nil,
          &block
        req = {
          name: name
        }.delete_if { |_, v| v.nil? }
        req = Google::Gax::to_proto(req, Google::Longrunning::CancelOperationRequest)
        @cancel_operation.call(req, options, &block)
        nil
      end

      # Deletes a long-running operation. This method indicates that the client is
      # no longer interested in the operation result. It does not cancel the
      # operation. If the server doesn't support this method, it returns
      # `google.rpc.Code.UNIMPLEMENTED`.
      #
      # @param name [String]
      #   The name of the operation resource to be deleted.
      # @param options [Google::Gax::CallOptions]
      #   Overrides the default settings for this call, e.g, timeout,
      #   retries, etc.
      # @yield [result, operation] Access the result along with the RPC operation
      # @yieldparam result []
      # @yieldparam operation [GRPC::ActiveCall::Operation]
      # @raise [Google::Gax::GaxError] if the RPC is aborted.
      # @example
      #   require "google/longrunning"
      #
      #   operations_client = Google::Longrunning.new
      #
      #   # TODO: Initialize `name`:
      #   name = ''
      #   operations_client.delete_operation(name)

      def delete_operation \
          name,
          options: nil,
          &block
        req = {
          name: name
        }.delete_if { |_, v| v.nil? }
        req = Google::Gax::to_proto(req, Google::Longrunning::DeleteOperationRequest)
        @delete_operation.call(req, options, &block)
        nil
      end
    end
  end
end

============== file: lib/google/longrunning/operations_client_config.json ==============
{
  "interfaces": {
    "google.longrunning.Operations": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.3,
          "max_retry_delay_millis": 60000,
          "initial_rpc_timeout_millis": 90000,
          "rpc_timeout_multiplier": 1.0,
          "max_rpc_timeout_millis": 90000,
          "total_timeout_millis": 600000
        }
      },
      "methods": {
        "GetOperation": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListOperations": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "CancelOperation": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteOperation": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: test/google/longrunning/operations_client_test.rb ==============
# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "minitest/autorun"
require "minitest/spec"

require "googleauth"
require "google/gax"

require "google/longrunning"
require "google/longrunning/operations_client"
require "longrunning_services_pb"

class CustomTestError_v1 < StandardError; end

# Mock for the GRPC::ClientStub class.
class MockGrpcClientStub_v1

  # @param expected_symbol [Symbol] the symbol of the grpc method to be mocked.
  # @param mock_method [Proc] The method that is being mocked.
  def initialize(expected_symbol, mock_method)
    @expected_symbol = expected_symbol
    @mock_method = mock_method
  end

  # This overrides the Object#method method to return the mocked method when the mocked method
  # is being requested. For methods that aren't being tested, this method returns a proc that
  # will raise an error when called. This is to assure that only the mocked grpc method is being
  # called.
  #
  # @param symbol [Symbol] The symbol of the method being requested.
  # @return [Proc] The proc of the requested method. If the requested method is not being mocked
  #   the proc returned will raise when called.
  def method(symbol)
    return @mock_method if symbol == @expected_symbol

    # The requested method is not being tested, raise if it called.
    proc do
      raise "The method #{symbol} was unexpectedly called during the " \
        "test for #{@expected_symbol}."
    end
  end
end

class MockOperationsCredentials_longrunning < Google::Auth::Credentials
  def initialize(method_name)
    @method_name = method_name
  end

  def updater_proc
    proc do
      raise "The method `#{@method_name}` was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

describe Google::Longrunning::OperationsClient do

  describe 'get_operation' do
    custom_error = CustomTestError_v1.new "Custom test error for Google::Longrunning::OperationsClient#get_operation."

    it 'invokes get_operation without error' do
      # Create request parameters
      name = ''

      # Create expected grpc response
      name_2 = "name2-1052831874"
      done = true
      expected_response = { name: name_2, done: done }
      expected_response = Google::Gax::to_proto(expected_response, Google::Longrunning::Operation)

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::GetOperationRequest, request)
        assert_equal(name, request.name)
        OpenStruct.new(execute: expected_response)
      end
      mock_stub = MockGrpcClientStub_v1.new(:get_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("get_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.get_operation(name)

          # Verify the response
          assert_equal(expected_response, response)

          # Call method with block
          client.get_operation(name) do |response, operation|
            # Verify the response
            assert_equal(expected_response, response)
            refute_nil(operation)
          end
        end
      end
    end

    it 'invokes get_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::GetOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub_v1.new(:get_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("get_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError, CustomTestError_v1 do
            client.get_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'list_operations' do
    custom_error = CustomTestError_v1.new "Custom test error for Google::Longrunning::OperationsClient#list_operations."

    it 'invokes list_operations without error' do
      # Create request parameters
      name = ''
      filter = ''

      # Create expected grpc response
      next_page_token = ""
      operations_element = {}
      operations = [operations_element]
      expected_response = { next_page_token: next_page_token, operations: operations }
      expected_response = Google::Gax::to_proto(expected_response, Google::Longrunning::ListOperationsResponse)

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::ListOperationsRequest, request)
        assert_equal(name, request.name)
        assert_equal(filter, request.filter)
        OpenStruct.new(execute: expected_response)
      end
      mock_stub = MockGrpcClientStub_v1.new(:list_operations, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("list_operations")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.list_operations(name, filter)

          # Verify the response
          assert(response.instance_of?(Google::Gax::PagedEnumerable))
          assert_equal(expected_response, response.page.response)
          assert_nil(response.next_page)
          assert_equal(expected_response.operations.to_a, response.to_a)
        end
      end
    end

    it 'invokes list_operations with error' do
      # Create request parameters
      name = ''
      filter = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::ListOperationsRequest, request)
        assert_equal(name, request.name)
        assert_equal(filter, request.filter)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub_v1.new(:list_operations, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("list_operations")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError, CustomTestError_v1 do
            client.list_operations(name, filter)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'cancel_operation' do
    custom_error = CustomTestError_v1.new "Custom test error for Google::Longrunning::OperationsClient#cancel_operation."

    it 'invokes cancel_operation without error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::CancelOperationRequest, request)
        assert_equal(name, request.name)
        OpenStruct.new(execute: nil)
      end
      mock_stub = MockGrpcClientStub_v1.new(:cancel_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("cancel_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.cancel_operation(name)

          # Verify the response
          assert_nil(response)

          # Call method with block
          client.cancel_operation(name) do |response, operation|
            # Verify the response
            assert_nil(response)
            refute_nil(operation)
          end
        end
      end
    end

    it 'invokes cancel_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::CancelOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub_v1.new(:cancel_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("cancel_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError, CustomTestError_v1 do
            client.cancel_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'delete_operation' do
    custom_error = CustomTestError_v1.new "Custom test error for Google::Longrunning::OperationsClient#delete_operation."

    it 'invokes delete_operation without error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::DeleteOperationRequest, request)
        assert_equal(name, request.name)
        OpenStruct.new(execute: nil)
      end
      mock_stub = MockGrpcClientStub_v1.new(:delete_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("delete_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.delete_operation(name)

          # Verify the response
          assert_nil(response)

          # Call method with block
          client.delete_operation(name) do |response, operation|
            # Verify the response
            assert_nil(response)
            refute_nil(operation)
          end
        end
      end
    end

    it 'invokes delete_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::DeleteOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub_v1.new(:delete_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockOperationsCredentials_longrunning.new("delete_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Auth::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError, CustomTestError_v1 do
            client.delete_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end
end
