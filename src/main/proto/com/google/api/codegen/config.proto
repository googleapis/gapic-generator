syntax = "proto3";

package com.google.api.codegen;

option java_multiple_files = true;
option java_outer_classname = "ConfigProtoDesc";
option java_package = "com.google.api.codegen";

// `ConfigProto` specifies the configuration of code generation for
// GAPIC. The user provides it via a YAML file; this message here
// represents the schema for this file.
//
// Example of a YAML configuration:
//
//     type: com.google.api.codegen.ConfigProto
//     generator:
//       factory: com.google.api.codegen.gapic.MainGapicProviderFactory
//       id: java
//     interfaces:
//     - name: google.example.library.v1.LibraryService
//       collections:
//       - name_pattern: shelves/{shelf}
//         entity_name: shelf
//       - name_pattern: shelves/{shelf}/books/{book}
//         entity_name: book
//         ...
//       retry_codes_def:
//       - name: idempotent
//         retry_codes:
//         ...
//       - name: non_idempotent
//         retry_codes:
//       retry_params_def:
//       - name: default
//         ...
//       methods:
//       - name: PublishBooks
//         request_object_method: true
//         flattening:
//           groups:
//           - parameters:
//             - name
//           - parameters:
//             - name
//             - version
//         page_streaming:
//           request:
//             token_field: page_token
//           response:
//             token_field: next_page_token
//             resources_field: books
//         batching:
//           thresholds:
//             element_count_threshold: 5
//             request_byte_threshold: 16384
//           batch_descriptor:
//             batched_field: pictures
//             request_discriminator_fields:
//             - album
//             - labels
//             subresponse_field: pic_id
//         retry_codes_name: idempotent
//         retry_params_name: default
//         request_object_method: true
//         field_name_patterns:
//           name: book
//         header_request_params:
//           - name
//       - name: GetBook
//       ...
//     ...
message ConfigProto {
  // The settings of generated code in a specific language.
  map<string, LanguageSettingsProto> language_settings = 4;

  // The language of the generated code.
  string language = 5;

  // The configuration to create the providers.
  GeneratorProto generator = 6;

  // The configuration for the license header to put on generated files.
  LicenseHeaderProto license_header = 7;

  // A list of API interface configurations.
  repeated InterfaceConfigProto interfaces = 10;

  // A list of resource name collection configs. This must be consistent with
  // collections defined in the interfaces.
  repeated CollectionConfigProto collections = 15;

  // A list of resource name oneof configs.
  repeated CollectionOneofProto collection_oneofs = 16;

  repeated FixedResourceNameValueProto fixed_resource_name_values = 17;

  // A list of message resource name configurations.
  repeated ResourceNameMessageConfigProto resource_name_generation = 20;

  // A required field to specify the version of GAPIC config schema.
  // It is versioned using Semantic Versioning 2.0.0 (semver) and follows the
  // semver specification. Currently, the only valid value is "1.0.0".
  string config_schema_version = 21;
}

message LanguageSettingsProto {
  // Package name used for the language.
  string package_name = 1;

  // Location of the domain layer, if any, that the user should use
  // instead of the generated client.
  string domain_layer_location = 2;

  // Set the interface name to be used when generating GAPIC code for
  // particular interfaces. Keys are fully qualified interface names;
  // values are unqualified interface names (to specify the package/namespace,
  // use the package_name setting).
  map<string, string> interface_names = 4;

  // Overrides ConfigProto::license_header.
  LicenseHeaderProto license_header_override = 5;

  // The release level of the client in the language
  ReleaseLevel release_level = 6;
}

// ReleaseLevel indicates the stage of development of a piece of code and
// relatedly what the promises are on quality.
// ALPHA: Not feature complete, expect breaking changes
// BETA: Feature complete, minimal breaking changes
// GA: General availability, no breaking changes without major version bump
enum ReleaseLevel {
  UNSET_RELEASE_LEVEL = 0;
  ALPHA = 1;
  BETA = 2;
  GA = 3;
  DEPRECATED = 4;
}

message LicenseHeaderProto {
  // The file containing the copyright line(s).
  string copyright_file = 1;

  // The file containing the raw license header without any copyright line(s).
  string license_file = 2;
}

message GeneratorProto {
  // The fully qualified name of the Java class of the codegen
  // provider factory. Must be provided.
  string factory = 1;

  // The id to pass to the provider factory for the set of providers
  // to create.
  string id = 2;
}

message InterfaceConfigProto {
  // The fully qualified name of the API interface.
  string name = 1;

  // Language specific documentation. Injected after proto docs.
  map<string, string> lang_doc = 2;

  // Configuration of smoke test.
  SmokeTestConfigProto smoke_test = 5;

  // A list of resource collection configurations.
  repeated CollectionConfigProto collections = 10;

  // A list of method configurations.
  repeated MethodConfigProto methods = 20;

  // Definition for retryable codes
  repeated RetryCodesDefinitionProto retry_codes_def = 30;

  // Definition for retry/backoff parameters
  repeated RetryParamsDefinitionProto retry_params_def = 31;

  ExperimentalFeatures experimental_features = 40;

  // Params that are always required to construct an instance of the
  // API wrapper class.
  repeated string required_constructor_params = 50;
}

message SmokeTestConfigProto {
  // The name of the method used in the smoke test.
  string method = 1;

  // A list describing the name and the value of the init fields.
  repeated string init_fields = 2;

  // The name of the flattening config to use.
  string flattening_group_name = 3;
}

message CollectionConfigProto {
  // A pattern to describe the names of the resources of this
  // collection, using the platform's conventions for URI patterns. A
  // generator may use this to generate methods to compose and
  // decompose such names. The pattern should use named placeholders
  // as in `shelves/{shelf}/books/{book}`; those will be taken as
  // hints for the parameter names of the generated methods.  If
  // empty, no name methods are generated.
  string name_pattern = 1;

  // Name to be used as a basis for generated methods and classes.
  string entity_name = 2;
}

message CollectionOneofProto {
  // Name to be used as a basis for generated methods and classes.
  string oneof_name = 1;

  // A list of the entity names of the CollectionConfigs to be included in the
  // oneof collection.
  repeated string collection_names = 2;
}

message FixedResourceNameValueProto {
  // Name to be used as a basis for generated methods and classes.
  string entity_name = 1;

  // The fixed, unformatted string value accepted by this configuration.
  string fixed_value = 2;
}

// `MethodConfigProto` describes the generator configuration for a method.
message MethodConfigProto {
  // The fully qualified name of the method.
  string name = 1;

  // Specifies the configuration for parameter flattening.
  FlatteningConfigProto flattening = 2;

  // Specifies the configuration for paging.
  PageStreamingConfigProto page_streaming = 3;

  // Specifies the configuration for gRPC-streaming responses.
  // Note that this is for configuring paged gRPC-streaming responses.
  // Some method can be gRPC-streaming even if this field does not exist.
  PageStreamingConfigProto grpc_streaming = 13;

  // Specifies the configuration for retryable codes.
  // The name must be defined in InterfaceConfigProto::retry_codes_def.
  string retry_codes_name = 4;

  // Specifies the configuration for retry/backoff parameters.
  // The name must be defined in InterfaceConfigProto::retry_params_def.
  string retry_params_name = 5;

  // Specifies the default timeout for a non-retrying call. If the call is
  // retrying, refer to `retry_params_name` instead.
  uint64 timeout_millis = 11;

  // Specifies the configuration for batching.
  BatchingConfigProto batching = 6;

  // Turns on or off the generation of a method whose sole parameter is
  // a request object. Not all languages will generate this method.
  bool request_object_method = 7;

  // Fields that are always required for a request to be valid.
  repeated string required_fields = 8;

  // Maps the field name of the request type to entity_name of CollectionConfigProto.
  // It is used to specify the string pattern that the field must follow.
  map<string, string> field_name_patterns = 9;

  // Specifies complex structure fields that need to be initialized by the sample code for
  // the sample to be usable.
  repeated string sample_code_init_fields = 10;

  // Route calls through a different gRPC interface than the one this method
  // is contained in. This specifically supports the Pub/Sub IAM hack to route
  // IAM methods to IamPolicy for Pub/Sub.
  string reroute_to_grpc_interface = 12;

  // Specifies the list of the method's input message fields (including nested
  // ones, using the dot notation), which should be url-encoded in
  // "x-goog-request-params" header
  repeated string header_request_params = 14;

  repeated SurfaceTreatmentProto surface_treatments = 20;

  // Set the resource name treatment for fields
  ResourceNameTreatment resource_name_treatment = 15;

  // Long-running settings.
  LongRunningConfigProto long_running = 30;

}

// `FlatteningConfigProto` describes the parameter groups for which a
// generator should produce method overloads which allow a client to
// directly pass request message fields as method parameters.  This
// information may or may not be used, depending on the target
// language.
message FlatteningConfigProto {
  // Specifies a list of flattening groups.
  repeated FlatteningGroupProto groups = 1;
}

// `FlatteningGroupProto` represents a list of parameters to be flattened.
message FlatteningGroupProto {
  // The list of parameters to include in this flattening group. Each
  // parameter must be a field of the request message.
  repeated string parameters = 1;

  // An optional name for the flattening group, which must be unique within
  // the method config.
  string flattening_group_name = 2;

  // Map flattening parameters listed in parameters field to a resource name
  // treatment. This is used to override the resource_name_treament setting in
  // MethodConfigProto.
  map<string, ResourceNameTreatment> parameter_resource_name_treatment = 3;
}

// The ResourceNameTreatment enum can be used to specify how to treat the
// resource name formats defined in the field_name_patterns
// and response_field_name_patterns fields.
// UNSET: default value
// NONE: the collection configs will not be used by the generated code.
// VALIDATE: string fields will be validated by the client against the
// specified resource name formats.
// STATIC_TYPES: the client will use generated types for resource names.
enum ResourceNameTreatment {
  UNSET_TREATMENT = 0;
  NONE = 1;
  VALIDATE = 2;
  STATIC_TYPES = 3;
}

// `PageStreamingConfigProto` describes information for generating a method which
// transforms a paging list rpc into a stream of resources.
message PageStreamingConfigProto {
  // Specifies request information of the list method.
  PageStreamingRequestProto request = 1;

  // Specifies response information of the list method.
  PageStreamingResponseProto response = 2;
}

// `PageStreamingRequestProto` defines which fields match the paging pattern in
// the request.
message PageStreamingRequestProto {
  // The name of the field in the request containing the page token.
  string token_field = 1;

  // Optional. The name of the field, if present, specifying the maximum number
  // of elements to be returned in the response.
  string page_size_field = 2;
}

// `PageStreamingResponseProto` defines which fields match the paging pattern in
// the response.
message PageStreamingResponseProto {
  // The name of the field in the response containing the next page
  // token.
  string token_field = 1;

  // The name of the field in the response containing the list of
  // resources belonging to the page.
  string resources_field = 2;
}

// `RetryConfigDefinitionProto` specifies, by name,
// GRPC codes that a method should consider retryable.
message RetryCodesDefinitionProto {
  string name = 1;
  repeated string retry_codes = 2;
}

// `RetryParamsDefinitionProto` specifies, by name,
// the backoff behavior of a method when retrying.
message RetryParamsDefinitionProto {
  string name = 1;

  uint64 initial_retry_delay_millis = 2;
  double retry_delay_multiplier = 3;
  uint64 max_retry_delay_millis = 4;

  uint64 initial_rpc_timeout_millis = 5;
  double rpc_timeout_multiplier = 6;
  uint64 max_rpc_timeout_millis = 7;

  uint64 total_timeout_millis = 8;
}

// `BatchingConfigProto` defines the batching configuration for an API method.
message BatchingConfigProto {
  // The thresholds which trigger a batched request to be sent.
  BatchingSettingsProto thresholds = 1;

  // The request and response fields used in batching.
  BatchingDescriptorProto batch_descriptor = 2;
}

// `BatchingSettingsProto` specifies a set of batching thresholds, each of
// which acts as a trigger to send a batch of messages as a request. At least
// one threshold must be positive nonzero.
message BatchingSettingsProto {
  // The number of elements of a field collected into a batch which, if
  // exceeded, causes the batch to be sent.
  uint32 element_count_threshold = 1;

  // The aggregated size of the batched field which, if exceeded, causes the
  // batch to be sent. This size is computed by aggregating the sizes of the
  // request field to be batched, not of the entire request message.
  uint64 request_byte_threshold = 2;

  // The duration, in milliseconds, after which a batch should be sent,
  // starting from the addition of the first message to that batch.
  uint64 delay_threshold_millis = 3;

  // The maximum number of elements collected in a batch that could be accepted by server.
  uint32 element_count_limit = 4;

  // The maximum size of the request that could be accepted by server.
  uint32 request_byte_limit = 5;

  uint32 flow_control_element_limit = 6;

  uint32 flow_control_byte_limit = 7;

  FlowControlLimitExceededBehaviorProto flow_control_limit_exceeded_behavior = 8;
}

enum FlowControlLimitExceededBehaviorProto {
  UNSET_BEHAVIOR = 0;
  THROW_EXCEPTION = 1;
  BLOCK = 2;
  IGNORE = 3;
}

// `BatchingDescriptorProto` specifies the fields of the request message to be
// used for batching, and, optionally, the fields of the response message to be
// used for demultiplexing.
message BatchingDescriptorProto {
  // The repeated field in the request message to be aggregated by batching.
  string batched_field = 1;

  // A list of the fields in the request message. Two requests will be batched
  // together only if the values of every field specified in
  // `request_discriminator_fields` is equal between the two requests.
  repeated string discriminator_fields = 2;

  // Optional. When present, indicates the field in the response message to be
  // used to demultiplex the response into multiple response messages, in
  // correspondence with the multiple request messages originally batched
  // together.
  string subresponse_field = 3;
}

// `ResourceNameMessageConfigProto` specifies the fields of a message that
// support a resource name type.
message ResourceNameMessageConfigProto {
  // The simple name of the message.
  string message_name = 1;

  // A list of field simple names and corresponding entity names, as defined in
  // the collection configs.
  map<string, string> field_entity_map = 2;
}

// ExperimentalFeatures contain special-case features that,
// for lack of similar problems, we don't quite know how to properly
// expose as a config.
// Configs defined here should eventually be replaced with more general ones.
message ExperimentalFeatures {
  repeated IamResourceProto iam_resources = 1;
}

// IamResourceProto describes an IAM resource, since client libraries might want to
// integrate with external helpers.
// It is experimental: We should find a general way to integrate with external code.
message IamResourceProto {
  // Fully qualified name of resource types. Eg, google.example.library.v1.Book.
  string type = 1;

  // The field containing the resource name.
  string field = 2;
}

// SurfaceTreatmentProto describes treatments to the code generation
// that are expected to be different for each language.
message SurfaceTreatmentProto {
  // The languages affected by this treatment.
  repeated string include_languages = 1;

  // The visibility of the surface.
  VisibilityProto visibility = 2;

  // Whether the method is deprecated.
  ReleaseLevel release_level = 3;
}

enum VisibilityProto {
  UNSET_VISIBILITY = 0;
  PUBLIC = 1;
  PACKAGE = 2;
  PRIVATE = 3;
  DISABLED = 4;
}

// LongRunningProto describes settings to use when generating API methods
// that use the long-running operation pattern.
message LongRunningConfigProto {
  // The fully-qualified type that is returned from an Operation when it is
  // complete.
  string return_type = 1;

  // The fully-qualified type of the metadata of an Operation.
  string metadata_type = 2;

  // Whether or not the server implements delete.
  bool implements_delete = 3;

  // Whether or not the server implements cancel.
  bool implements_cancel = 4;

  // Initial delay after which first poll request will be made.
  uint64 initial_poll_delay_millis = 5;

  // Multiplier to gradually increase delay between subsequent polls until it
  // reaches max_poll_delay_millis.
  double poll_delay_multiplier = 6;

  // Maximum time between two subsequent poll requests.
  uint64 max_poll_delay_millis = 7;

  // Total polling timeout.
  uint64 total_poll_timeout_millis = 8;
}
