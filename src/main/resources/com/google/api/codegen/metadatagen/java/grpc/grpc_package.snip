@snippet generate(metadata)
  buildscript {
    repositories {
      mavenCentral()
    }
    dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7' }
  }

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'com.google.protobuf'

  description = 'GRPC library for {@metadata.identifier}'
  group = "com.google.api.grpc"
  version = "{@metadata.packageVersionBound.lower}"
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories {
    mavenCentral()
    mavenLocal()
  }

  dependencies {
    compile "com.google.protobuf:protobuf-java:{@metadata.protoVersionBound.lower}"
    compile "com.google.api:api-common:{@metadata.apiCommonVersionBound.lower}"
    compile "io.grpc:grpc-stub:{@metadata.grpcVersionBound.lower}"
    compile "io.grpc:grpc-protobuf:{@metadata.grpcVersionBound.lower}"
    @join dependency : metadata.protoPackageDependencies
      compile "com.google.api.grpc:{@dependency.name}:{@dependency.versionBound.lower}"
    @end
  }

  ext {
    packageName = '{@metadata.identifier}'
  }

  @switch metadata.packageType
  @case "GRPC_CLIENT"
    ext.locateGapicPluginMethod = { ->
      def outstream = new ByteArrayOutputStream()
      exec {
        commandLine 'which', 'gapic_plugin.py'
        standardOutput = outstream
      }
      return outstream.toString().trim()
    }
  @default
  @end

  protobuf {
    protoc {
      // The version of protoc must match protobuf-java. If you don't depend on
      // protobuf-java directly, you will be transitively depending on the
      // protobuf-java version that grpc depends on.
      artifact = "com.google.protobuf:protoc:{@metadata.protoVersionBound.lower}"
    }
    plugins {
      grpc {
        artifact = 'io.grpc:protoc-gen-grpc-java:{@metadata.grpcVersionBound.lower}'
      }
      @switch metadata.packageType
        @case "GRPC_CLIENT"
          gapic {
            path = locateGapicPluginMethod()
          }
      @default
      @end
    }
    generateProtoTasks {
      all()*.plugins {
        grpc {
          outputSubDir = 'java'
        }
        @switch metadata.packageType
        @case "GRPC_CLIENT"
          gapic {
            outputSubDir = 'java'
            option '{@metadata.gapicConfigName}'
          }
        @default
        @end
      }
    }
  }

  sourceSets {
    main {
      java {
        srcDir 'build/generated/source/proto/main/java'
      }
    }
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  signing {
    required false
    sign configurations.archives
  }

  if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: ossrhUsername, password: ossrhPassword)
          }

          pom.project {
            name "com.google.api.grpc:{@metadata.identifier}"
            description project.description
            url '{@metadata.homepage}'
            scm {
              url '{@metadata.homepage}'
              connection 'scm:git:{@metadata.homepage}'
            }

            licenses {
              license {
                name '{@metadata.licenseName}'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }

            developers {
              developer {
                id '{@metadata.author}'
                name '{@metadata.author}'
                email '{@metadata.email}'
                url '{@metadata.homepage}'
                organization 'Google, Inc.'
                organizationUrl 'https://www.google.com'
              }
            }
          }
        }
      }
    }
  } else {
    task failUploadArchives << {
      throw new GradleException("uploadArchives needs ossrhUsername and ossrhPassword "
        + "to be set. They can be set inside your ~/.gradle/gradle.properties file.")
    }
    tasks.uploadArchives.dependsOn(failUploadArchives)
  }

  task checkOutGhPages {
    if (!new File('tmp_gh-pages').exists()) {
      exec {
        commandLine 'git', 'clone', '--branch', 'gh-pages',
            '--single-branch', 'https://github.com/googleapis/googleapis/', 'tmp_gh-pages'
      }
    }
  }

  task copyFilesToGhPages {
    dependsOn 'checkOutGhPages'
    dependsOn 'javadoc'
    doLast {
      def newSiteDirPath = "tmp_gh-pages/java/${packageName}/${project.version}/apidocs/"
      new File(newSiteDirPath).mkdirs()
      copy {
        from 'build/docs/javadoc'
        into newSiteDirPath
      }
    }
  }

  task createApiDocsRedirect {
    dependsOn 'copyFilesToGhPages'
    doLast {
      def outputContent = new File('templates/apidocs_index.html.template').text
      outputContent = outputContent.replace('{{siteVersion}}', project.version)
      outputContent = outputContent.replace('{{packageName}}', packageName)
      new File("tmp_gh-pages/java/${packageName}/apidocs").mkdirs()
      new File("tmp_gh-pages/java/${packageName}/apidocs/index.html").write(outputContent)
      exec {
        workingDir 'tmp_gh-pages/'
        commandLine 'git', 'add', '.'
      }
      exec {
        workingDir 'tmp_gh-pages/'
        commandLine 'git', 'commit', '-m', "Regenerating docs for ${packageName} ${project.version}"
      }
      println 'New docs have been generated under tmp_gh-pages and have been committed;'
      println 'Next they just need to be pushed with "git push".'
    }
  }

  // Regenerates the gh-pages branch under tmp_gh-pages, which must be committed separately
  task updateDocsWithCurrentVersion {
    dependsOn 'createApiDocsRedirect'
  }
@end
