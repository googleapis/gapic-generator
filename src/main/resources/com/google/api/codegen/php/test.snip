@extends "php/common.snip"
@extends "php/method_sample.snip"

@snippet generate(apiTest)
    <?php
    {@licenseSection()}

    namespace {@apiTest.fileHeader.packageName};

    @join import : apiTest.fileHeader.imports
      @switch import.type
      @case "SimpleImport"
        use {@import.fullName};
      @case "AliasedImport"
        use {@import.fullName} as {@import.nickname};
      @default
        $unhandledCase: {@import.type.toString}$
      @end
    @end

    @join serviceImpl : apiTest.serviceImpls
      class {@serviceImpl.name} extends {@serviceImpl.grpcClassName}
      {
        use MockStubTrait;
      }
    @end

    @join testClass : apiTest.testClasses
      class {@testClass.name} extends TestCase
      {   
          @join test : testClass.testCases
            {@testCase(test)}
    
          @end
      }
    @end
@end

@private testCase(test)
  @switch test.grpcStreamingType
  @case "NonStreaming"
    @switch test.clientMethodType
    @case "OptionalArrayMethod"
      {@optionalArrayTestCase(test)}
    @case "PagedOptionalArrayMethod"
      $unhandled case: {@test.clientMethodType.toString}$
      # { @ pagedOptionalArrayTestCase(test)}
    @default
      $unhandled case: {@test.clientMethodType.toString}$
    @end
  @default
    $unhandled case: {@test.grpcStreamingType.toString}$
  @end
@end

@private optionalArrayTestCase(test)
  /**
   * @@test
   */
  public function {@test.name}()
  {   
      $grpcCredentialsHelper = new GrpcCredentialsHelper([]);
      $createGrpcStub = function ($hostname, $opts) {
          return new {@test.mockGrpcStubTypeName}($hostname, $opts);
      };
      $grpcStub = $grpcCredentialsHelper->createStub(
          $createGrpcStub,
          {@test.serviceConstructorName}::SERVICE_ADDRESS,
          {@test.serviceConstructorName}::DEFAULT_SERVICE_PORT
      );
      $client = new {@test.serviceConstructorName}(['{@test.createStubFunctionName}' =>
          function ($hostname, $opts) use ($grpcStub) {
              return $grpcStub;
          },
      ]);
      
      $this->assertTrue($grpcStub->isExhausted());
      
      @if test.hasReturnValue
        // Mock response
        {@initCode(test.mockResponse.initCode)}
        $grpcStub->addResponse($expectedResponse);
        
      @end
      // Mock request
      {@initCode(test.initCode)}
      
      @if test.hasReturnValue
        $response = $client->{@test.clientMethodName}({@sampleMethodCallArgList(test.initCode.fieldSettings)});
      @else
        $client->{@test.clientMethodName}({@sampleMethodCallArgList(test.initCode.fieldSettings)});
      @end
      {@unarySuccessAsserts(test)}
      
      $this->assertTrue($grpcStub->isExhausted());
  }
@end

@private unarySuccessAsserts(test)
  $actualRequests = $grpcStub->getReceivedCalls();
  $this->assertSame(1, count($actualRequests));
  list($actualFuncCall, $actualRequestObject) = $actualRequests[0]; 
  $this->assertSame('{@test.grpcMethodName}', explode('/', $actualFuncCall)[2]);

  @join assert : test.asserts
    @if assert.hasExpectedValueTransformFunction
      $this->assertEquals({@assert.expectedValueTransformFunction}(\
        ${@assert.expectedValueIdentifier}), \
        $actualRequestObject->{@assert.actualValueGetter}());
    @else
      $this->assertEquals(${@assert.expectedValueIdentifier}, \
        $actualRequestObject->{@assert.actualValueGetter}());
    @end
  @end
  
  @if test.hasReturnValue
    $this->assertEquals($expectedResponse, $response);
  @end
@end
