@snippet generate(class)
  <?php
  /* 
   * BEFORE RUNNING:
   * ---------------
   * 1. If not already done, enable the {@class.apiTitle}
   *    and check the quota for your project at
   *    https://console.developers.google.com/apis/api/{@class.apiName}
   @switch class.auth.type
   @case "APPLICATION_DEFAULT_CREDENTIALS"
     * 2. This sample uses Application Default Credentials for authentication.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk and run
     *    `gcloud beta auth application-default login`.
     *    For more information, see
     *    https://developers.google.com/identity/protocols/application-default-credentials
     * 3. Install the PHP client library with Composer. Check installation
     *    instructions at https://github.com/google/google-api-php-client.
   @default
     * 2. Install the PHP client library with Composer. Check installation
     *    instructions at https://github.com/google/google-api-php-client.
   @end
   */

  // Autoload Composer.
  require_once __DIR__ . '/vendor/autoload.php';

  @switch class.auth.type
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    ${@class.clientVarName} = new Google_Client();
    ${@class.clientVarName}->setApplicationName('{@class.appName}');
    ${@class.clientVarName}->useApplicationDefaultCredentials();
    ${@class.clientVarName}->addScope('https://www.googleapis.com/auth/cloud-platform');
  @case "OAUTH_3L"
    ${@class.clientVarName} = getClient();
  @default
    ${@class.clientVarName} = new Google_Client();
    ${@class.clientVarName}->setApplicationName('{@class.appName}');
    ${@class.clientVarName}->setDeveloperKey('');  // TODO: Update placeholder with desired API key.
  @end

  ${@class.serviceVarName} = new {@class.serviceTypeName}(${@class.clientVarName});

  @join field : class.fields if class.fields
    @if field.description
      @join line : util.getDocLines(field.description, 100)
        // {@line}
      @end


    @end
    ${@field.name} = {@field.defaultValue};  // TODO: Update placeholder value.
    @if field.example
      // {@field.example}
    @end

  @end
  @if class.hasRequestBody
    @if class.methodVerb == "PATCH"
      // TODO: Assign values to desired properties of `{@class.requestBodyVarName}`. Only assigned
      // properties will be changed:
    @else
      // TODO: Assign values to desired properties of `{@class.requestBodyVarName}`:
    @end

    ${@class.requestBodyVarName} = new {@class.requestBodyTypeName}();

  @end
  @if class.hasMediaUpload
    // TODO: Add desired media content for upload. For more information, see
    // https://developers.google.com/api-client-library/php/guide/media_upload

  @end
  @if class.optParamsVarName
    ${@class.optParamsVarName} = [];
  @end
  @if class.hasMediaDownload

    // TODO: To download media content, use:
    //
    // ${@class.optParamsVarName}['alt'] = 'media';

  @end
  @if class.isPageStreaming
    do {
      ${@class.responseVarName} = ${@class.serviceVarName}->{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)});

      @if class.pageStreaming.isResourceRepeated
        @if class.pageStreaming.isResourceMap
          foreach (${@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'] as ${@class.pageStreaming.resourceKeyVarName} => ${@class.pageStreaming.resourceValueVarName}) {
            // TODO: Change code below to process each ({@class.pageStreaming.resourceKeyVarName} => {@class.pageStreaming.resourceValueVarName}) element:
            echo '<pre>', ${@class.pageStreaming.resourceKeyVarName}, ' => ', var_export(${@class.pageStreaming.resourceValueVarName}, true), '</pre>', "\n";
          }
        @else
          foreach (${@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'] as ${@class.pageStreaming.resourceVarName}) {
            // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
            echo '<pre>', var_export(${@class.pageStreaming.resourceVarName}, true), '</pre>', "\n";
          }
        @end
      @else
        // TODO: Change code below to process each `{@class.responseVarName}['{@class.pageStreaming.resourceFieldName}']` resource:
        echo '<pre>', var_export(${@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'], true), '</pre>', "\n";
      @end

      ${@class.optParamsVarName()}['pageToken'] = ${@class.responseVarName}->getNextPageToken();
    } while (${@class.optParamsVarName}['pageToken']);
  @else
    @if class.hasResponse
      ${@class.responseVarName} = ${@class.serviceVarName}->{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)});

      // TODO: Change code below to process the `{@class.responseVarName}` object:
      echo '<pre>', var_export(${@class.responseVarName}, true), '</pre>', "\n";
    @else
      ${@class.serviceVarName}->{@callChain(class.methodNameComponents)}({@paramList(class.fieldVarNames)});
    @end
  @end
  @if class.auth.type == "OAUTH_3L"

    {@getClientFunc(class)}
  @end
  ?>
@end

@private getClientFunc(class)
  function getClient() {
    // TODO: Change placeholder below to generate authentication credentials. See
    // {@class.auth.instructionsUrl}
    //
    @if class.auth.isScopesSingular
      // Authorize using the following scope:
    @else
      // Authorize using one of the following scopes:
    @end
    @join scope : class.auth.scopes
      //   '{@scope}'
    @end
    return null;
  }
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "->"
    {@resource}
  @end
@end

@private paramList(fieldVarNames)
  @join fieldVarName : fieldVarNames on ", "
    ${@fieldVarName}
  @end
@end
