@extends "php/common.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
    try {
        ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}();
        {@initCode(apiMethod.initCode)}
        {@coreSampleCode}
    } finally {
        if (isset(${@apiMethod.apiVariableName})) {
            ${@apiMethod.apiVariableName}->close();
        }
    }
@end

@snippet sampleCode(apiMethod)
    @if apiMethod.isLongRunningOperation
        {@longRunningMethodSampleCode(apiMethod)}
    @else
      @switch apiMethod.type.toString
      @case "OptionalArrayMethod"
          {@methodSampleCode(apiMethod)}
      @case "PagedOptionalArrayMethod"
          {@pagedMethodSampleCode(apiMethod)}
      @default
          $unhandledCase: {@apiMethod.type.toString}$
      @end
    @end
@end

@private methodSampleCode(apiMethod)
    @if apiMethod.hasReturnValue
        $response = {@methodCallSampleCode(apiMethod)};
    @else
        {@methodCallSampleCode(apiMethod)};
    @end
@end

@private pagedMethodSampleCode(apiMethod)
    // Iterate through all elements
    $pagedResponse = {@methodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iterateAllElements() as $element) {
        // doSomethingWith($element);
    }

    // OR iterate over pages of elements, with the maximum page size set to 5
    $pagedResponse = {@pageSizeMethodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iteratePages() as $page) {
        foreach ($page as $element) {
            // doSomethingWith($element);
        }
    }
@end

@private longRunningMethodSampleCode(apiMethod)
    $operationResponse = {@methodCallSampleCode(apiMethod)};
    $operationResponse->pollUntilComplete();
    if ($operationResponse->operationSucceeded()) {
      @if apiMethod.longRunningView.isEmptyOperation
          // operation succeeded and returns no value
      @else
          $result = $operationResponse->getResult();
          // doSomethingWith($result)
      @end
    } else {
      $error = $operationResponse->getError();
      // handleError($error)
    }
@end

@private methodCallSampleCode(apiMethod)
    ${@apiMethod.apiVariableName}->{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private pageSizeMethodCallSampleCode(apiMethod)
    @if apiMethod.hasRequestParameters
        ${@apiMethod.apiVariableName}->{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)}, ['pageSize' => 5])
    @else
        ${@apiMethod.apiVariableName}->{@apiMethod.name}(['pageSize' => 5])
    @end
@end

@snippet sampleMethodCallArgList(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        ${@fieldSetting.identifier}
    @end
@end

@snippet initCode(initCodeSpec)
    @join line : initCodeSpec.lines
        @switch line.lineType.toString
        @case "StructureInitLine"
            {@initLineStructure(line)}
        @case "ListInitLine"
            {@initLineList(line)}
        @case "MapInitLine"
            {@initLineMap(line)}
        @case "SimpleInitLine"
            {@initLineSimple(line)}
        @default
            $unhandledCase: {@line.lineType.toString}$
        @end
    @end
@end

@private initLineStructure(line)
    ${@line.identifier} = new {@line.typeName}();
    @join fieldSetting : line.fieldSettings
        @if fieldSetting.isMap
            foreach (${@fieldSetting.identifier} as $key => $value) {
                ${@line.identifier}->{@fieldSetting.fieldAddFunction}((new {@fieldSetting.elementTypeName}())->setKey($key)->setValue($value));
            }
        @else
            @if fieldSetting.isArray
                foreach (${@fieldSetting.identifier} as $elem) {
                    ${@line.identifier}->{@fieldSetting.fieldAddFunction}($elem);
                }
            @else
                ${@line.identifier}->{@fieldSetting.fieldSetFunction}(${@fieldSetting.identifier});
            @end
        @end
    @end
@end

@private initLineList(line)
    ${@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
    @join arg : args on ", "
        ${@arg}
    @end
@end

@private initLineMap(line)
    ${@line.identifier} = [{@keyVarList(line.initEntries)}];
@end

@private keyVarList(mapEntries)
    @join mapEntry : mapEntries
        {@mapEntry.key} => ${@mapEntry.valueString},
    @end
@end

@private initLineSimple(line)
    ${@line.identifier} = {@renderInitValue(line.initValue)};
@end

@private renderInitValue(initValue)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        {@initValue.apiWrapperName}::{@initValue.formatFunctionName}({@argList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end
