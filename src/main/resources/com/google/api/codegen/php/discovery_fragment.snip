@snippet generateFilename(method)
  {@method.getName}.frag.php
@end

@snippet generateClass(method, body, imports)
  @let api = context.getApi, \
       apiName = api.getName, \
       serviceTitle = context.getService.getTitle
    <?php
    /*
     * BEFORE RUNNING:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle}
     *    and check the quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}
     @if context.getApiaryConfig.getAuthType.toString == "APPLICATION_DEFAULT_CREDENTIALS"
     * 2. This sample uses Application Default Credentials for authentication.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk/ and run
     *    'gcloud beta auth application-default login'
     * 3. Install the PHP client library with Composer. Check installation
     *    instructions at https://github.com/google/google-api-php-client.
     @else 
     * 2. Install the PHP client library with Composer. Check installation
     *    instructions at https://github.com/google/google-api-php-client.
     @end
     */

    // Autoload Composer.
    require_once __DIR__ . '/vendor/autoload.php';
    @if context.php.hasImports

      @join import : imports
        use {@import};
      @end
    @end
    @if context.getApiaryConfig.getAuthType.toString == "OAUTH_3L"

      function getClient() {
        // TODO: Implement this function to get authentication credentials.
        @let authInstructionsUrl = context.getApiaryConfig.getAuthInstructionsUrl
          @if authInstructionsUrl
            // See {@authInstructionsUrl}
          @end
        @end
        @if context.getApiaryConfig.hasAuthScopes(method.getName)
          // Authorize using one of the following scopes in order to use this method:
          @join scope : context.getApiaryConfig.getAuthScopes.get(method.getName)
            //   {@scope}
          @end
        @end
        return null;
      }
    @end

    {@body}

  @end
@end

@snippet generateBody(method)
  @let apiName = context.getSimpleApiName, \
       serviceName = context.getServiceClassName, \
       params = context.getFlatMethodParams(method)
    // Create a new client.
    @switch context.getApiaryConfig.getAuthType.toString
    @case "APPLICATION_DEFAULT_CREDENTIALS"
      $client = new Google_Client();
      $client->setApplicationName('Client Sample Application');
      $client->useApplicationDefaultCredentials();
      $client->addScope('https://www.googleapis.com/auth/cloud-platform');
    @case "OAUTH_3L"
      $client = getClient();
    @default
      $client = new Google_Client();
      $client->setApplicationName('Client Sample Application');
      // TODO: Replace '{MY-API-KEY}'
      $client->setDeveloperKey('{MY-API-KEY}')
    @end

    // Create a new {@apiName} service.
    $service = new {@serviceName}($client);
    {@initialization(method, params)}

    @if context.isPageStreaming(method)
      {@iterableCall(method, params)}
    @else
      {@compactCall(method, params)}
    @end
  @end
@end

@private initialization(method, params)
  @let methodName = context.getMethodName(method), \
       apiaryConfig = context.getApiaryConfig, \
       signatureType = apiaryConfig.getType(method.getRequestTypeUrl)
    @join param : params
      @let paramField = context.getField(signatureType, param), \
           paramValue = context.typeDefaultValue(signatureType, paramField), \
           paramDescription = apiaryConfig.getDescription(signatureType.getName, param)

        {@description(paramDescription)}
        ${@param} = {@paramValue};
      @end
    @end

    @if context.hasRequestField(method)

      $postBody = new {@context.getRequestClassName(method)}($client);
    @end
  @end
@end

@private iterableCall(method, params)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    $response = $service->{@methodPath(resourcesPath)}->{@methodName}({@arguments(method)});

    @let responseTypeRef = context.getApiaryConfig.getType(method.getResponseTypeUrl), \
         resourceField = context.getFirstRepeatedField(responseTypeRef), \
         resourceName = resourceField.getName
      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let entrySet = context.getApiaryConfig.getType(resourceField.getTypeUrl), \
             keyName = context.getField(entrySet, "key").getName, \
             valueName = context.getField(entrySet, "value").getName
          foreach ($response['{@resourceName}']  as ${@keyName} => ${@valueName}) {
            // TODO: Add code here to process ${@keyName} => ${@valueName}
          }
        @end
      @else
        foreach ($response['{@resourceName}'] as $element) {
          // TODO: Add code here to process the element.
        }
      @end
    @end
  @end
@end

@private compactCall(method, params)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    $response = $service->{@methodPath(resourcesPath)}->{@methodName}({@arguments(method)});
  @end
@end

@private arguments(method)
  @join argument : context.getFlatMethodParamsWithRequest(method) on ", "
    ${@argument}
  @end
@end

@private methodPath(resourcePath)
  @join r : resourcePath on "_"
    {@r}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description, 100)
    // {@line}
  @end
@end
