@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.php
@end

@snippet generateClass(method, body, imports)
  @let api = context.getApi, \
       apiName = api.getName, \
       serviceTitle = context.getService.getTitle, \
       authType = context.getApiaryConfig.getAuthType
    <?php
    /*
     * BEFORE RUNNING:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle}
     *    and check the quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}
     @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
       * 2. This sample uses Application Default Credentials for authentication.
       *    If not already done, install the gcloud CLI from
       *    https://cloud.google.com/sdk/ and run
       *    `gcloud beta auth application-default login`
       * 3. Install the PHP client library with Composer. Check installation
       *    instructions at https://github.com/google/google-api-php-client.
     @else
       * 2. Install the PHP client library with Composer. Check installation
       *    instructions at https://github.com/google/google-api-php-client.
     @end

    // Autoload Composer.
    require_once __DIR__ . '/vendor/autoload.php';
    @if context.php.hasImports

      @join import : imports
        use {@import};
      @end
    @end

    {@body}
    ?>
  @end
@end

@snippet generateBody(method)
  @let apiName = context.getSimpleApiName, \
       serviceName = context.getServiceClassName, \
       apiaryConfig = context.getApiaryConfig, \
       authType = apiaryConfig.getAuthType
    @switch authType
    @case "APPLICATION_DEFAULT_CREDENTIALS"
      // Use Application Default Credentials for authentication when running locally.
      // For more information, see:
      // https://developers.google.com/identity/protocols/application-default-credentials
      $client = new Google_Client();
      $client->setApplicationName('Google Cloud Platform Sample');
      $client->useApplicationDefaultCredentials();
      $client->addScope('https://www.googleapis.com/auth/cloud-platform');
    @case "OAUTH_3L"
      $client = getClient();
    @default
      $client = new Google_Client();
      $client->setApplicationName('Google Cloud Platform Sample');

      // {@TODO()} Change placeholder below to desired API key:
      $client->setDeveloperKey('{MY-API-KEY}')
    @end
    {@BREAK}
    $service = new {@serviceName}($client);

    {@initialize(method)}
    @if context.isPageStreaming(method)
      {@iterableCall(method)}
    @else
      {@compactCall(method)}
    @end
    @if authType == "OAUTH_3L"

      function getClient() {
        // {@TODO()} Change placeholder below to get authentication credentials.
        @let authInstructionsUrl = apiaryConfig.getAuthInstructionsUrl
          @if authInstructionsUrl
            // See: {@authInstructionsUrl}
          @end
        @end
        @if context.hasAuthScopes(method)
          @let methodName = context.getMethodName(method)
            //
            // To use the `{@methodName}` method, authorize using one of the following scopes:
            @join scope : context.getAuthScopes(method)
              //   {@scope}
            @end
          @end
        @end
        return null;
      }
    @end
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params

      // {@TODO()} Change placeholders below to desired parameter values for the `{@methodName}` method:

      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramSample = context.getDefaultSample(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          @if paramSample
            ${@param} = {@paramValue};  // {@paramSample}
          @else
            ${@param} = {@paramValue};
          @end

        @end
      @end

    @end
  @end
  @if context.hasRequestField(method)

    ${@requestBodyName()} = new {@context.getRequestClassName(method)}($client);
    @if context.isPatch(method)
      // {@TODO()} Assign values to desired properties of the `{@requestBodyName()}` object to be changed.
    @else
      // {@TODO()} Assign values to desired properties of the `{@requestBodyName()}` object.
    @end


  @end
@end

@private iterableCall(method)
  @let responseTypeRef = context.getApiaryConfig.getType(method.getResponseTypeUrl), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = resourceField.getName
    ${@optParamsName()} = array();
    @if context.hasMediaUpload(method)
      {@mediaUpload()}

    @end
    do {
      ${@responseName()} = {@methodCall(method)};

      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let keyName = context.keyTypeName(resourceField), \
             valueName = context.valueTypeName(resourceField)
          foreach (${@responseName()}['{@resources}'] as ${@keyName} => ${@valueName}) {
            // {@TODO()} Change code below to process each (${@keyName} => ${@valueName}) element:
            {@printEntry(keyName, valueName)}
          }
        @end
      @else
        @let resourceName = context.elementTypeName(resourceField)
          foreach (${@responseName()}['{@resources}'] as ${@resourceName}) {
            // {@TODO()} Change code below to process each `{@resourceName}` resource:
            {@print(resourceName)}
          }
        @end
      @end

      ${@optParamsName()}['pageToken'] = ${@responseName()}->getNextPageToken();
    } while (${@optParamsName()}['pageToken']);
  @end
@end

@private compactCall(method)
  @if context.hasMediaUpload(method)
    {@mediaUpload()}



  @end
  @if context.isResponseEmpty(method)
    {@methodCall(method)};
  @else
    ${@responseName()} = {@methodCall(method)};

    // {@TODO()} Change code below to process the `{@responseName()}` object:
    {@print(responseName())}
  @end
@end

@private mediaUpload()
  // {@TODO()} Add desired media content for upload. For more information, see:
  // https://developers.google.com/api-client-library/php/guide/media_upload
@end

@private methodCall(method)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    $service->{@methodPath(resourcesPath)}->{@methodName}({@arguments(method)})
  @end
@end

@private arguments(method)
  @let pathArgs = pathArguments(method)
    @if context.isPageStreaming(method)
      @if pathArgs
        {@pathArgs}, ${@optParamsName()}
      @else
        ${@optParamsName()}
      @end
    @else
      {@pathArgs}
    @end
  @end
@end

@private pathArguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(params)}, ${@requestBodyName()}
      @else
        ${@requestBodyName()}
      @end
    @else
      {@argumentList(params)}
    @end
  @end
@end

@private optParamsName()
  optParams
@end

@private requestBodyName()
  requestBody
@end

@private responseName()
  response
@end

@private methodPath(resourcePath)
  @join r : resourcePath on "_"
    {@r}
  @end
@end

@private argumentList(arguments)
  @join argument : arguments on ", "
    ${@argument}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end

@private print(element)
  echo '<pre>', var_export(${@element}, true), '</pre>', "\n";
@end

@private printEntry(key, value)
  echo '<pre>', ${@key}, ' => ', var_export(${@value}, true), '</pre>', "\n";
@end
