@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.php
@end

@snippet generateClass(method, body, imports)
  @let api = context.getApi, \
       apiName = api.getName, \
       serviceTitle = context.getService.getTitle
    <?php
    /*
     * BEFORE RUNNING:
     * ---------------
     * 1. If not already done, enable the {@serviceTitle}
     *    and check the quota for your project at
     *    https://console.developers.google.com/apis/api/{@apiName}
     * 2. This sample uses Application Default Credentials for authentication.
     *    If not already done, install the gcloud CLI from
     *    https://cloud.google.com/sdk/ and run
     *    `gcloud beta auth application-default login`
     * 3. Install the PHP client library with Composer. Check installation
     *    instructions at https://github.com/google/google-api-php-client.
     */

    // Autoload Composer.
    require_once __DIR__ . '/vendor/autoload.php';
    @if context.php.hasImports

      @join import : imports
        use {@import};
      @end
    @end

    {@body}
  @end
@end

@snippet generateBody(method)
  @let apiName = context.getSimpleApiName, \
       serviceName = context.getServiceClassName
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    $client = new Google_Client();
    $client->setApplicationName('Google Cloud Platform Sample');
    $client->useApplicationDefaultCredentials();
    $client->addScope('https://www.googleapis.com/auth/cloud-platform');

    $service = new {@serviceName}($client);

    {@initialize(method)}
    @if context.isPageStreaming(method)
      {@iterableCall(method)}
    @else
      {@compactCall(method)}
    @end
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method)
    @if params
      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          ${@param} = {@paramValue}; // {@TODO()} Update placeholder value(s).

        @end
      @end

    @end
  @end
  @if context.hasRequestField(method)

    @if context.isPatch(method)
      // {@TODO()} Assign values to the desired properties to be changed.
    @else
      // {@TODO()} Assign values to the desired properties.
    @end
    ${@requestBodyName(method)} = new {@context.getRequestClassName(method)}($client);

  @end
@end

@private iterableCall(method)
  @let responseTypeRef = context.getApiaryConfig.getType(method.getResponseTypeUrl), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = resourceField.getName
    ${@optParamsName()} = array();
    do {
      ${@responseName()} = {@request(method)};

      @if context.isMapField(responseTypeRef, resourceField.getName)
        @let keyName = context.keyTypeName(resourceField), \
             valueName = context.valueTypeName(resourceField)
          foreach (${@responseName()}['{@resources}'] as ${@keyName} => ${@valueName}) {
            // {@TODO()} Use ${@keyName}, ${@valueName}
            {@printEntry(keyName, valueName)}
          }
        @end
      @else
        @let resourceName = context.elementTypeName(resourceField)
          foreach (${@responseName()}['{@resources}'] as ${@resourceName}) {
            // {@TODO()} Use {@resourceName}
            {@print(resourceName)}
          }
        @end
      @end

      ${@optParamsName()}['pageToken'] = ${@responseName()}->getNextPageToken();
    } while (${@optParamsName()}['pageToken']);
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    {@request(method)};
  @else
    ${@responseName()} = {@request(method)};

    // {@TODO()} Use ${@responseName()}
    {@print(responseName())}
  @end
@end

@private request(method)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    $service->{@methodPath(resourcesPath)}->{@methodName}({@arguments(method)})
  @end
@end

@private arguments(method)
  @let pathArgs = pathArguments(method)
    @if context.isPageStreaming(method)
      @if pathArgs
        {@pathArgs}, ${@optParamsName()}
      @else
        ${@optParamsName()}
      @end
    @else
      {@pathArgs}
    @end
  @end
@end

@private pathArguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(params)}, ${@requestBodyName(method)}
      @else
        ${@requestBodyName(method)}
      @end
    @else
      {@argumentList(params)}
    @end
  @end
@end

@private optParamsName()
  optParams
@end

@private requestBodyName(method)
  postBody
@end

@private responseName()
  response
@end

@private methodPath(resourcePath)
  @join r : resourcePath on "_"
    {@r}
  @end
@end

@private argumentList(arguments)
  @join argument : arguments on ", "
    ${@argument}
  @end
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end

@private print(element)
  echo '<pre>', var_export(${@element}, true), '</pre>', "\n";
@end

@private printEntry(key, value)
  echo '<pre>', ${@key}, ' => ', var_export(${@value}, true), '</pre>', "\n";
@end
