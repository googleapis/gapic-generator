@extends "php/common.snip"
@extends "php/method_sample.snip"

@snippet generate(xapiClass)
    {@renderFileHeader(xapiClass.fileHeader, generatedCodeWarning(xapiClass))}

    {@serviceDoc(xapiClass)}
    class {@xapiClass.name}
    {
        {@constants(xapiClass)}
        {@statics(xapiClass)}
        {@members(xapiClass)}
        {@staticFunctions(xapiClass)}
        {@functions(xapiClass)}
        {@constructor(xapiClass)}
        {@apiMethods(xapiClass)}
        {@cleanupSection(xapiClass)}
    }
@end

@private generatedCodeWarning(xapiClass)
    /*
     * GENERATED CODE WARNING
     * This file was generated from the file
     * https://github.com/google/googleapis/blob/master/{@xapiClass.protoFilename}
     * and updates to that file get reflected here through a refresh process.
     *
     * EXPERIMENTAL: this client library class has not yet been declared beta. This class may change
     * more frequently than those which have been declared beta or 1.0, including changes which break
     * backwards compatibility.
     *
     * @@experimental
     */
@end

@private serviceDoc(xapiClass)
    @let coreSampleCode = sampleCode(xapiClass.doc.exampleApiMethod), \
         decoratedSampleCode = decorateSampleCode(xapiClass, xapiClass.doc.exampleApiMethod, coreSampleCode)
        {@renderServiceDoc(xapiClass.doc, decoratedSampleCode, xapiClass.hasFormatOrParseResourceFunctions)}
    @end
@end

@private renderServiceDoc(xapiClassDoc, exampleMethodSampleCode, hasFormatOrParseResourceFunctions)
    /**
     * Service Description: {@xapiClassDoc.firstLine}
    @if xapiClassDoc.remainingLines
        @join commentLine : xapiClassDoc.remainingLines
            {@""} * {@commentLine}
        @end
    @end
     *
     * EXPERIMENTAL: this client library class has not yet been declared beta. This class may change
     * more frequently than those which have been declared beta or 1.0, including changes which break
     * backwards compatibility.
     *
     * This class provides the ability to make remote calls to the backing service through method
     * calls that map to API methods. Sample code to get started:
     *
     * ```
    @join sampleLine : util.getDocLines(exampleMethodSampleCode)
        {@""} * {@sampleLine}
    @end
     * ```
     *
    @if hasFormatOrParseResourceFunctions
        {@""} * Many parameters require resource names to be formatted in a particular way. To assist
         * with these names, this class includes a format method for each type of name, and additionally
         * a parse method to extract the individual identifiers contained within names that are
         * returned.
    @end
     * @@experimental
     */
@end

@private constants(xapiClass)
    @if xapiClass.hasDefaultServiceAddress
        /**
         * The default address of the service.
         */
        const SERVICE_ADDRESS = '{@xapiClass.serviceAddress}';

    @end

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = {@xapiClass.servicePort};

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The code generator version, to be included in the agent header.
     */
    const CODEGEN_VERSION = '{@xapiClass.toolkitVersion}';
    {@""}
@end

@private statics(xapiClass)
    @join pathTemplate : xapiClass.pathTemplates
        private static ${@pathTemplate.name};
    @end
    {@BREAK}
@end

@private members(xapiClass)
    private $grpcCredentialsHelper;
    @join stub : xapiClass.stubs
        private ${@stub.name};
    @end
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
    @if xapiClass.hasLongRunningOperations
        private $operationsClient;
    @end
    {@""}
@end

@private staticFunctions(xapiClass)
    @join function : xapiClass.formatResourceFunctions
        {@formatResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.parseResourceFunctions
        {@parseResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.pathTemplateGetterFunctions
        {@pathTemplateGetterFunction(function)}
    @end
    {@pageStreamingDescriptorFunction(xapiClass)}
    {@longRunningDescriptorFunction(xapiClass)}
    {@grpcStreamingDescriptorFunction(xapiClass)}
    {@gapicVersionFunction()}
@end

@private formatResourceFunction(function)
    /**
     * Formats a string containing the fully-qualified path to represent
     * a {@function.entityName} resource.
     *
    @join param : function.resourceIdParams
        {@""} * @@param string ${@param.name}
    @end
     * @@return string The formatted {@function.entityName} resource.
     * @@experimental
     */
    public static function {@function.name}(\
            {@formatResourceFunctionParams(function.resourceIdParams)})
    {
        return self::{@function.pathTemplateGetterName}()->render([
            {@pathTemplateArgs(function.resourceIdParams)},
        ]);
    }
    {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
    @join param : resourceIdParams on ", "
        ${@param.name}
    @end
@end

@private pathTemplateArgs(resourceIdParams)
    @join param : resourceIdParams on ",".add(BREAK)
        '{@param.templateKey}' => ${@param.name}
    @end
@end

@private parseResourceFunction(function)
    /**
     * Parses the {@function.outputResourceId} from the given fully-qualified path which
     * represents a {@function.entityName} resource.
     *
     * @@param string ${@function.entityNameParamName} The fully-qualified {@function.entityName} resource.
     * @@return string The extracted {@function.outputResourceId} value.
     * @@experimental
     */
    public static function {@function.name}(${@function.entityNameParamName})
    {
        return self::{@function.pathTemplateGetterName}()\
            ->match(${@function.entityNameParamName})['{@function.outputResourceId}'];
    }
    {@""}
@end

@private pathTemplateGetterFunction(function)
    private static function {@function.name}()
    {
        if (self::${@function.pathTemplateName} == null) {
            self::${@function.pathTemplateName} = new PathTemplate('{@function.pattern}');
        }

        return self::${@function.pathTemplateName};
    }
    {@""}
@end

@private pageStreamingDescriptorFunction(xapiClass)
    @if xapiClass.hasPageStreamingMethods
        private static function getPageStreamingDescriptors()
        {
            @join descriptor : xapiClass.pageStreamingDescriptors
                ${@descriptor.varName} =
                        new PageStreamingDescriptor([
                            'requestPageTokenField' => '{@descriptor.requestTokenFieldName}',
                            @if descriptor.requestHasPageSizeField
                                'requestPageSizeField' => '{@descriptor.requestPageSizeFieldName}',
                            @end
                            'responsePageTokenField' => '{@descriptor.responseTokenFieldName}',
                            'resourceField' => '{@descriptor.resourcesFieldName}',
                        ]);
            @end

            $pageStreamingDescriptors = [
                @join descriptor : xapiClass.pageStreamingDescriptors
                    '{@descriptor.methodName}' => ${@descriptor.varName},
                @end
            ];

            return $pageStreamingDescriptors;
        }
        {@""}
    @end
@end

@private longRunningDescriptorFunction(xapiClass)
    @if xapiClass.hasLongRunningOperations
        private static function getLongRunningDescriptors()
        {
            return [
                @join descriptor : xapiClass.longRunningDescriptors
                    '{@descriptor.methodName}' => [
                        'operationReturnType' => '{@descriptor.operationPayloadTypeName}',
                        'metadataReturnType' => '{@descriptor.metadataTypeName}',
                    ],
                @end
            ];
        }
        {@""}
    @end
@end

@private grpcStreamingDescriptorFunction(xapiClass)
    @if xapiClass.hasGrpcStreamingMethods
        private static function getGrpcStreamingDescriptors()
        {
            return [
                @join descriptor : xapiClass.grpcStreamingDescriptors
                    '{@descriptor.methodName}' => [
                        'grpcStreamingType' => '{@descriptor.grpcStreamingType}',
                        @if descriptor.hasGrpcResourcesField
                            'resourcesField' => '{@descriptor.grpcResourcesField}',
                        @end
                    ],
                @end
            ];
        }
        {@""}
    @end
@end

@private gapicVersionFunction()
    private static function getGapicVersion()
    {
        if (file_exists(__DIR__ . "/../VERSION")) {
          return trim(file_get_contents(__DIR__ . "/../VERSION"));
        } elseif (class_exists('\Google\Cloud\ServiceBuilder')) {
          return \Google\Cloud\ServiceBuilder::VERSION;
        } else {
          return;
        }
    }
    {@""}
@end

@private functions(xapiClass)
    @if xapiClass.hasLongRunningOperations
        /**
         * Return an OperationsClient object with the same endpoint as $this.
         *
         * @@return \Google\GAX\LongRunning\OperationsClient
         * @@experimental
         */
        public function getOperationsClient()
        {
            return $this->operationsClient;
        }

        /**
         * Resume an existing long running operation that was previously started
         * by a long running API method. If $methodName is not provided, or does
         * not match a long running API method, then the operation can still be
         * resumed, but the OperationResponse object will not deserialize the
         * final response.
         *
         * @@param string $operationName The name of the long running operation
         * @@param string $methodName The name of the method used to start the operation
         * @@return \Google\GAX\OperationResponse
         * @@experimental
         */
        public function resumeOperation($operationName, $methodName = null)
        {
            $lroDescriptors = {@xapiClass.name}::getLongRunningDescriptors();
            if (!is_null($methodName) && array_key_exists($methodName, $lroDescriptors)) {
                $options = $lroDescriptors[$methodName];
            } else {
                $options = [];
            }
            $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
            $operation->reload();
            return $operation;
        }
    @end
    {@""}
@end

@private constructor(xapiClass)

    // TODO(garrettjones): add channel (when supported in gRPC)
    /**
     * Constructor.
     *
     * @@param array $options {
     @if xapiClass.hasMissingDefaultOptions
         *     Required. Options for configuring the service API wrapper. Those options
         *     that must be provided are marked as Required.
     @else
         *     Optional. Options for configuring the service API wrapper.
     @end
     *
     @if xapiClass.hasDefaultServiceAddress
         *     @@type string $serviceAddress The domain name of the API remote host.
         *                                  Default '{@xapiClass.serviceAddress}'.
     @else
         *     @@type string $serviceAddress Required. The domain name of the API remote host.
     @end
     *     @@type mixed $port The port on which to connect to the remote host. Default {@xapiClass.servicePort}.
     *     @@type \Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           \Grpc\ChannelCredentials::createSsl()
     @if xapiClass.hasDefaultServiceScopes
         *     @@type array $scopes A string array of scopes to use when acquiring credentials.
         *                         Default the scopes for the {@xapiClass.serviceTitle}.
     @else
         *     @@type array $scopes Required. A string array of scopes to use when acquiring credentials.
     @end
     *     @@type array $retryingOverride
     *           An associative array of string => RetryOptions, where the keys
     *           are method names (e.g. 'createFoo'), that overrides default retrying
     *           settings. A value of null indicates that the method in question should
     *           not retry.
     *     @@type int $timeoutMillis The timeout in milliseconds to use for calls
     *                              that don't use retries. For calls that use retries,
     *                              set the timeout in RetryOptions.
     *                              Default: 30000 (30 seconds)
     *     @@type \Google\Auth\CredentialsLoader $credentialsLoader
     *                              A CredentialsLoader object created using the
     *                              Google\Auth library.
     * }
     @if xapiClass.hasMissingDefaultOptions
         * @@throws ValidationException Throws a ValidationException if required arguments are missing
         *                             from the $options array.
     @end
     * @@experimental
     */
    public function __construct($options = [])
    {
        @if xapiClass.missingDefaultServiceAddress
            if (!array_key_exists('serviceAddress', $options)) {
                throw new ValidationException("The 'serviceAddress' option must be provided.");
            }
        @end
        @if xapiClass.missingDefaultServiceScopes
            if (!array_key_exists('scopes', $options)) {
                throw new ValidationException("The 'scopes' option must be provided.");
            }
        @end
        $defaultOptions = [
            @if xapiClass.hasDefaultServiceAddress
                'serviceAddress' => self::SERVICE_ADDRESS,
            @end
            'port' => self::DEFAULT_SERVICE_PORT,
            @if xapiClass.hasDefaultServiceScopes
                'scopes' => [
                    @join scope : {@xapiClass.authScopes}
                        '{@scope}',
                    @end
                ],
            @end
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'libName' => null,
            'libVersion' => null,
        ];
        $options = array_merge($defaultOptions, $options);

        @if xapiClass.hasLongRunningOperations
            if (array_key_exists('operationsClient', $options)) {
                $this->operationsClient = $options['operationsClient'];
            } else {
                $operationsClientOptions = $options;
                unset($operationsClientOptions['timeoutMillis']);
                unset($operationsClientOptions['retryingOverride']);
                $this->operationsClient = new OperationsClient($operationsClientOptions);
            }
        @end

        $gapicVersion = $options['libVersion'] ?: self::getGapicVersion();

        $headerDescriptor = new AgentHeaderDescriptor([
            'libName' => $options['libName'],
            'libVersion' => $options['libVersion'],
            'gapicVersion' => $gapicVersion,
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            @join methodKey : xapiClass.methodKeys
                '{@methodKey}' => $defaultDescriptors,
            @end
        ];
        @if xapiClass.hasPageStreamingMethods
            $pageStreamingDescriptors = self::getPageStreamingDescriptors();
            foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
                $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
            }
        @end
        @if xapiClass.hasLongRunningOperations
            $longRunningDescriptors = self::getLongRunningDescriptors();
            foreach ($longRunningDescriptors as $method => $longRunningDescriptor) {
                $this->descriptors[$method]['longRunningDescriptor'] = $longRunningDescriptor + ['operationsClient' => $this->operationsClient];
            }
        @end
        @if xapiClass.hasGrpcStreamingMethods
            $grpcStreamingDescriptors = self::getGrpcStreamingDescriptors();
            foreach ($grpcStreamingDescriptors as $method => $grpcStreamingDescriptor) {
                $this->descriptors[$method]['grpcStreamingDescriptor'] = $grpcStreamingDescriptor;
            }
        @end

        $clientConfigJsonString = file_get_contents(__DIR__ . '/{@xapiClass.clientConfigPath}');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('{@xapiClass.interfaceKey}',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $createStubOptions = [];
        if (array_key_exists('sslCreds', $options)) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $grpcCredentialsHelperOptions = array_diff_key($options, $defaultOptions);
        $this->grpcCredentialsHelper = new GrpcCredentialsHelper($this->scopes, $grpcCredentialsHelperOptions);

        @join stub : xapiClass.stubs
            ${@stub.createStubFunctionName} = function ($hostname, $opts) {
                return new {@stub.grpcClientTypeName}($hostname, $opts);
            };
            if (array_key_exists('{@stub.createStubFunctionName}', $options)) {
                ${@stub.createStubFunctionName} = $options['{@stub.createStubFunctionName}'];
            }
            $this->{@stub.name} = $this->grpcCredentialsHelper->createStub(
                ${@stub.createStubFunctionName},
                $options['serviceAddress'],
                $options['port'],
                $createStubOptions);
        @end
    }
    {@""}
@end

@private apiMethods(xapiClass)
    @join apiMethod : xapiClass.apiMethods
        @let coreSampleCode = sampleCode(apiMethod)
            {@methodDoc(apiMethod.doc, decorateSampleCode(xapiClass, apiMethod, coreSampleCode))}
        @end
        public function {@apiMethod.name}({@paramList(apiMethod.methodParams)})
        {
            @if apiMethod.isSingularRequestMethod
                $request = new {@apiMethod.requestTypeName}();
                @join param : apiMethod.requiredRequestObjectParams
                    {@setRequiredFieldCall(param)}
                @end
                @join param : apiMethod.optionalRequestObjectParams
                    {@setOptionalFieldCall(param)}
                @end

            @end
            $mergedSettings = $this->defaultCallSettings['{@apiMethod.key}']->merge(
                new CallSettings($optionalArgs));
            $callable = ApiCallable::createApiCall(
                $this->{@apiMethod.stubName}, '{@apiMethod.grpcMethodName}', $mergedSettings, $this->descriptors['{@apiMethod.key}']);

            return $callable(
                @if apiMethod.isSingularRequestMethod
                    $request,
                @else
                    null,
                @end
                [],
                ['call_credentials_callback' => $this->createCredentialsCallback()]);
        }
        {@""}
    @end
@end

@private paramList(params)
    @join param : params on ", "
        @if param.defaultValue
            ${@param.name} = {@param.defaultValue}
        @else
            ${@param.name}
        @end
    @end
@end

@private setRequiredFieldCall(param)
    @if param.isMap
        foreach (${@param.name} as $key => $value) {
            $request->{@param.addCallName}((new {@param.elementTypeName}())->setKey($key)->setValue($value));
        }
    @else
        @if param.isArray
            foreach (${@param.name} as $elem) {
                $request->{@param.addCallName}($elem);
            }
        @else
            $request->{@param.setCallName}(${@param.name});
        @end
    @end
@end

@private setOptionalFieldCall(param)
    if (isset($optionalArgs['{@param.name}'])) {
        @if param.isMap
            foreach ($optionalArgs['{@param.name}'] as $key => $value) {
                $request->{@param.addCallName}((new {@param.elementTypeName}())->setKey($key)->setValue($value));
            }
        @else
            @if param.isArray
                foreach ($optionalArgs['{@param.name}'] as $elem) {
                    $request->{@param.addCallName}($elem);
                }
            @else
                $request->{@param.setCallName}($optionalArgs['{@param.name}']);
            @end
        @end
    }
@end

@private methodDoc(apiMethodDoc, methodSampleCode)
    /**
    @if apiMethodDoc.mainDocLines
        @join commentLine : apiMethodDoc.mainDocLines
            {@""} * {@commentLine}
        @end
    @else
        {@""} *
    @end
     *
     * Sample code:
     * ```
    @join sampleLine : util.getDocLines(methodSampleCode)
        {@""} * {@sampleLine}
    @end
     * ```
    @if apiMethodDoc.paramDocs
        {@""} *
        @join doc : apiMethodDoc.paramDocs
            {@paramDoc(doc)}
        @end
    @end
    @if apiMethodDoc.returnTypeName
        {@""} *
         * @@return {@apiMethodDoc.returnTypeName}
    @end
     *
     * @@throws \Google\GAX\ApiException if the remote call fails
     * @@experimental
     */
    {@""}
@end

@private paramDoc(doc)
    @switch doc.type
    @case "SimpleParamDocView"
        {@simpleParamDoc(doc)}
    @case "MapParamDocView"
        {@mapParamDoc(doc)}
    @default
        $unhandledCase: {@doc.type}$
    @end
@end

@private simpleParamDoc(doc)
    @if doc.lines
        {@""} * @@param {@doc.typeName} ${@doc.paramName} {@doc.firstLine}
        @if doc.remainingLines
            @join commentLine : doc.remainingLines
                {@""} * {@commentLine}
            @end
        @end
    @else
        {@""} * @@param {@doc.typeName} ${@doc.paramName}
    @end
@end

@private mapParamDoc(doc)
    {@""} * @@param {@doc.typeName} ${@doc.paramName} {
     *     {@doc.firstLine}
    @if doc.remainingLines
        @join commentLine : doc.remainingLines
            {@""} *     {@commentLine}
        @end
    @end
    @if doc.arrayKeyDocs
        @join simpleParamDoc : doc.arrayKeyDocs
            {@""} *     @@type {@simpleParamDoc.typeName} ${@simpleParamDoc.paramName}
            @if simpleParamDoc.lines
                {@""} *          {@simpleParamDoc.firstLine}
                @if simpleParamDoc.remainingLines
                    @join commentLine : simpleParamDoc.remainingLines
                        {@""} *          {@commentLine}
                    @end
                @end
            @end
        @end
    @end
     * }
@end

@private cleanupSection(xapiClass)
    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     * @@experimental
     */
    public function close()
    {
        @join stub : xapiClass.stubs
            $this->{@stub.name}->close();
        @end
    }

    private function createCredentialsCallback()
    {
        return $this->grpcCredentialsHelper->createCallCredentialsCallback();
    }
@end
