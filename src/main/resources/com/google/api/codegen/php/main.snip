@extends "../common.snip"
@extends "method_sample.snip"

@snippet generateFilename(service)
    {@context.getApiWrapperName(service)}.php
@end

@snippet generateClass(service, body, imports)
    <?php
    {@licenseSection(service)}

    namespace {@context.getApiConfig.getPackageName};

    @join import : imports
        use {@import};
    @end
    {@body}
@end

@private licenseSection(service)
  /*
   * Copyright 2016 Google Inc. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   * in compliance with the License. You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under the License
   * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   * or implied. See the License for the specific language governing permissions and limitations under
   * the License.
   */

  /*
   * GENERATED CODE WARNING
   * This file was generated from the file
   * https://github.com/google/googleapis/blob/master/{@service.getFile().getSimpleName()}
   * and updates to that file get reflected here through a refresh process.
   */
@end

@snippet generateBody(service)
    {@alwaysImport()}
    /**
    {@docLinesFromStr(serviceDocString(service))}
     *
     * This class provides the ability to make remote calls to the backing service through method
     * calls that map to API methods. Sample code to get started:
     *
     * ```
    {@createMethodSampleDoc(service, context.getFirstMethod(service))}
     * ```
     *
     * Many parameters require resource names to be formatted in a particular way. To assist
     * with these names, this class includes a format method for each type of name, and additionally
     * a parse method to extract the individual identifiers contained within names that are
     * returned.
     */
    class {@context.getApiWrapperName(service)}
    {
        {@constants(service)}

        {@statics(service)}

        {@members(service)}

        {@staticFunctions(service)}

        {@constructor(service)}

        {@apiMethods(service)}

        {@cleanupSection()}
    }

@end

@private alwaysImport() fill
    {@context.addImport("Google\GAX\AgentHeaderDescriptor")}
    {@context.addImport("Google\GAX\ApiCallable")}
    {@context.addImport("Google\GAX\CallSettings")}
    {@context.addImport("Google\GAX\GrpcBootstrap")}
    {@context.addImport("Google\GAX\GrpcConstants")}
    {@context.addImport("Google\GAX\PathTemplate")}
@end

@private serviceDocString(protoElement)
  Service Description: {@context.getDescription(protoElement)}
@end

@private constants(service)
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()};

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';
@end

@private statics(service)
    {@pathTemplateConstants(service)}
@end

@private pathTemplateConstants(service)
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        private static ${@pathTemplateConstantName(collectionConfig)};
    @end
@end

@private pathTemplateFunctionName(collectionConfig)
    get{@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}NameTemplate
@end

@private pathTemplateConstantName(collectionConfig)
    {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)}NameTemplate
@end

@private members(service)
    private $grpcBootstrap;
    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
@end

@private staticFunctions(service)
    {@resourceFunctions(service)}
    {@pageStreamingDescriptorFunction(service)}
@end

@private pageStreamingDescriptorFunction(service)
    @let interfaceConfig = context.getApiConfig.getInterfaceConfig(service)
        private static function getPageStreamingDescriptors()
        {
            @join method : context.messages.filterPageStreamingMethods(interfaceConfig, service.getMethods)
                @let dummy = context.addImport("Google\GAX\PageStreamingDescriptor"), \
                     methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
                     pageStreaming = interfaceConfig.getMethodConfig(method).getPageStreaming()
                ${@methodName}PageStreamingDescriptor =
                        new PageStreamingDescriptor([
                            'requestPageTokenField' => '{@pageStreaming.getRequestTokenField.getSimpleName}',
                            'responsePageTokenField' => '{@pageStreaming.getResponseTokenField.getSimpleName}',
                            'resourceField' => '{@pageStreaming.getResourcesField.getSimpleName}',
                        ]);
                @end
            @end

            $pageStreamingDescriptors = [
                @join method : context.messages.filterPageStreamingMethods(interfaceConfig, service.getMethods)
                    @let methodName = context.upperCamelToLowerCamel(method.getSimpleName)
                        '{@methodName}' => ${@methodName}PageStreamingDescriptor,
                    @end
                @end
            ];

            return $pageStreamingDescriptors;
        }
    @end
@end

@private resourceFunctions(service)
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        {@formatResourceFunction(collectionConfig)}
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        {@parseResourceFunction(collectionConfig)}
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        {@pathTemplateFunction(collectionConfig)}
    @end
@end

@private formatResourceFunction(collectionConfig)
    /**
     * Formats a string containing the fully-qualified path to represent
     * a {@collectionConfig.getEntityName} resource.
     */
    public static function {@formatResourceFunctionName(collectionConfig)}(\
          {@formatResourceFunctionParams(collectionConfig)})
    {
        return self::{@pathTemplateFunctionName(collectionConfig)}()->render([
            {@pathTemplateArgs(collectionConfig)},
        ]);
    }

@end

@private formatResourceFunctionName(collectionConfig)
    format{@resourceName(collectionConfig)}
@end

@private formatResourceFunctionParams(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() on ", "
        ${@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private pathTemplateArgs(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() vertical on ", "
        '{@param}' => ${@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private parseResourceFunction(collectionConfig)
    @join subField : collectionConfig.getNameTemplate.vars()
        @let fieldPath = context.upperCamelToLowerCamel(resourceName(collectionConfig))
            /**
             * Parses the {@subField} from the given fully-qualified path which
             * represents a {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)} resource.
             */
            public static function \
                    parse{@context.lowerUnderscoreToUpperCamel(subField)}From{@resourceName(collectionConfig)}(\
                    ${@fieldPath})
            {
                return self::{@pathTemplateFunctionName(collectionConfig)}()->match(${@fieldPath})['{@subField}'];
            }

        @end
    @end
@end

@private resourceName(collectionConfig)
    {@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}Name
@end

@private pathTemplateFunction(collectionConfig)
    private static function {@pathTemplateFunctionName(collectionConfig)}()
    {
        if (self::${@pathTemplateConstantName(collectionConfig)} == null) {
            self::${@pathTemplateConstantName(collectionConfig)} = new PathTemplate('{@collectionConfig.getNamePattern}');
        }

        return self::${@pathTemplateConstantName(collectionConfig)};
    }

@end

@private constructor(service)
    @let className = context.getApiWrapperName(service), \
         jsonBaseName = {@context.upperCamelToLowerUnderscore(service.getSimpleName)}, \
         grpcClientName = context.getGrpcClientName(service)
        // TODO(garrettjones): add channel (when supported in gRPC)
        /**
         * Constructor.
         *
         * @@param array $options {
         *     Optional. Options for configuring the service API wrapper.
         *
         *     @@var string $serviceAddress The domain name of the API remote host.
         *                                  Default '{@context.getServiceConfig.getServiceAddress(service)}'.
         *     @@var mixed $port The port on which to connect to the remote host. Default {@context.getServiceConfig.getServicePort()}.
         *     @@var Grpc\ChannelCredentials $sslCreds
         *           A `ChannelCredentials` for use with an SSL-enabled channel.
         *           Default: a credentials object returned from
         *           Grpc\ChannelCredentials::createSsl()
         *     @@var array $scopes A string array of scopes to use when acquiring credentials.
         *                         Default the scopes for the {@context.getServiceConfig.getTitle(service)}.
         *     @@var array $retryingOverride
         *           An associative array of string => RetryOptions, where the keys
         *           are method names (e.g. 'createFoo'), that overrides default retrying
         *           settings. A value of null indicates that the method in question should
         *           not retry.
         *     @@var int $timeoutMillis The timeout in milliseconds to use for calls
         *                              that don't use retries. For calls that use retries,
         *                              set the timeout in RetryOptions.
         *                              Default: 30000 (30 seconds)
         *     @@var string $appName The codename of the calling service. Default 'gax'.
         *     @@var string $appVersion The version of the calling service.
         *                              Default: the current version of GAX.
         * }
         */
        public function __construct($options = [])
        {
            $defaultScopes = [
                @join scope : context.getServiceConfig.getAuthScopes(service)
                    '{@scope}',
                @end
            ];
            $defaultOptions = [
                'serviceAddress' => self::SERVICE_ADDRESS,
                'port' => self::DEFAULT_SERVICE_PORT,
                'scopes' => $defaultScopes,
                'retryingOverride' => null,
                'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
                'appName' => 'gax',
                'appVersion' => self::_GAX_VERSION,
            ];
            $options = array_merge($defaultOptions, $options);

            $headerDescriptor = new AgentHeaderDescriptor([
                'clientName' => $options['appName'],
                'clientVersion' => $options['appVersion'],
                'codeGenName' => self::_CODEGEN_NAME,
                'codeGenVersion' => self::_CODEGEN_VERSION,
                'gaxVersion' => self::_GAX_VERSION,
                'phpVersion' => phpversion(),
            ]);

            $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
            $this->descriptors = [
                @join method : service.getMethods
                    '{@context.upperCamelToLowerCamel(method.getSimpleName)}' => $defaultDescriptors,
                @end
            ];
            $pageStreamingDescriptors = self::getPageStreamingDescriptors();
            foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
                $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
            }

            // TODO load the client config in a more package-friendly way
            $clientConfigJsonString = file_get_contents('./resources/{@jsonBaseName}_client_config.json');
            $clientConfig = json_decode($clientConfigJsonString, true);
            $this->defaultCallSettings =
                    CallSettings::load('{@context.getServiceName(service)}',
                                       $clientConfig,
                                       $options['retryingOverride'],
                                       GrpcConstants::getStatusCodeNames(),
                                       $options['timeoutMillis']);

            $this->scopes = $options['scopes'];

            $generatedCreateStub = function ($hostname, $opts) {
                return new {@grpcClientName}($hostname, $opts);
            };
            $createStubOptions = [];
            if (!empty($options['sslCreds'])) {
                $createStubOptions['sslCreds'] = $options['sslCreds'];
            }
            $this->grpcBootstrap = GrpcBootstrap::defaultInstance();
            $this->stub = $this->grpcBootstrap->createStub(
                $generatedCreateStub,
                $options['serviceAddress'],
                $options['port'],
                $createStubOptions);
        }
    @end
@end

@private apiMethods(service)
    @join method : service.getMethods on BREAK.add(BREAK)
        @let callableConstant = context.upperCamelToUpperUnderscore(method.getSimpleName), \
             methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
             inTypeName = context.typeName(method.getInputType), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             requiredFields = methodConfig.getRequiredFields(), \
             optionalFields = methodConfig.getOptionalFields()
            {@methodDoc(service, method)}
            public function {@methodName}({@apiMethodParams(requiredFields)}{@commonParams(requiredFields)})
            {
                {@requestObjectCreation(inTypeName, requiredFields, optionalFields)}

                $mergedSettings = $this->defaultCallSettings['{@methodName}']->merge(
                    new CallSettings($callSettings));
                $callable = ApiCallable::createApiCall(
                    $this->stub, '{@method.getSimpleName}', $mergedSettings, $this->descriptors['{@methodName}']);

                return $callable(
                    $request,
                    [],
                    ['call_credentials_callback' => $this->createCredentialsCallback()]);
            }
        @end
    @end
@end

@private apiMethodParams(requiredFields)
    @join field : requiredFields on ", "
        @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
            ${@paramName}
        @end
    @end
@end

@private commonParams(requiredFields)
    @if requiredFields
        , $optionalArgs = [], $callSettings = []
    @else
        $optionalArgs = [], $callSettings = []
    @end
@end

@private requestObjectCreation(inTypeName, requiredFields, optionalFields)
    $request = new {@inTypeName}();
    @join field : requiredFields
        {@setRequiredFieldCall(field)}
    @end
    @join field : optionalFields
        {@setOptionalFieldCall(field)}
    @end
@end

@private setRequiredFieldCall(field)
    @let paramUpperCamel = context.lowerUnderscoreToUpperCamel(field.getSimpleName), \
         paramLowerCamel = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
        @if field.getType.isMap
            @let fullyQualifiedEntryName = context.fullyQualifiedName(field.getType), \
                  entryName = context.getTypeName(fullyQualifiedEntryName)
                foreach (${@paramLowerCamel} as $key => $value) {
                    $request->add{@paramUpperCamel}((new {@entryName}())->setKey($key)->setValue($value));
                }
            @end
        @else
            @if field.isRepeated
                foreach (${@paramLowerCamel} as $elem) {
                    $request->add{@paramUpperCamel}($elem);
                }
            @else
                $request->set{@paramUpperCamel}(${@paramLowerCamel});
            @end
        @end
     @end
@end

@private setOptionalFieldCall(field)
    @let paramUpperCamel = context.lowerUnderscoreToUpperCamel(field.getSimpleName), \
         paramLowerCamel = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
        if (isset($optionalArgs['{@paramLowerCamel}'])) {
            @if field.getType.isMap
                // TODO make this work
                putAll...
            @else
                @if field.isRepeated
                    foreach ($optionalArgs['{@paramLowerCamel}'] as $elem) {
                        $request->add{@paramUpperCamel}($elem);
                    }
                @else
                    $request->set{@paramUpperCamel}($optionalArgs['{@paramLowerCamel}']);
                @end
            @end
        }
     @end
@end

@private methodDoc(service, method)
    /**
    {@docLinesFromStr(context.getDescription(method))}
     *
     * Sample code:
     * ```
    {@createMethodSampleDoc(service, method)}
     * ```
    {@requiredArgsDoc(service, method)}
    {@optionalArgsDoc(service, method)}
     * @@param array $callSettings {
     *    Optional.
     *    @@var Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeout is ignored.
     *    @@var int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
    {@docReturnLine(service, method)}
     * @@throws Google\GAX\ApiException if the remote call fails
     */
@end

@private createMethodSampleDoc(service, method)
    @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
            ApiName = context.getApiWrapperName(service), \
            apiName = context.upperCamelToLowerCamel(ApiName), \
            methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
            requiredFields = methodConfig.getRequiredFields()
        {@docLinesFromStr(methodSampleDoc(context.newPhpDocConfigBuilder()\
                .setApiName(ApiName) \
                .setMethodName(methodName) \
                .setFieldInitCode(context, service, method, requiredFields) \
                .setPagedVariant(methodConfig.isPageStreaming) \
                .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
                .build()))}
    @end
@end

@snippet docLinesFromStr(str)
    @join commentLine : context.php.getDocLines(str)
        {@commentLine}
    @end
@end

@private requiredArgsDoc(service, method)
    {@""} *
    @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method)
        @join param : methodConfig.getRequiredFields()
            @join commentLine : context.php.getDocLinesWithPrefix(context.getDescription(param), requiredParamDocLinePrefix(param))
                {@commentLine}
            @end
        @end
    @end
@end

@private requiredParamDocLinePrefix(param)
    @@param {@context.typeName(param.getType)} ${@context.lowerUnderscoreToLowerCamel(param.getSimpleName)} {@""}
@end

@private optionalArgsDoc(service, method)
    @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         optionalFields = methodConfig.getOptionalFields()
        @if optionalFields
            {@""} * @@param array $optionalArgs {
             *     Optional.
            @join param : optionalFields
                @if isPageSizeField(param, methodConfig)
                    {@""} *     @@var int ${@context.lowerUnderscoreToLowerCamel(methodConfig.getPageStreaming.getPageSizeField.getSimpleName)}
                     *           The maximum number of resources contained in the underlying API
                     *           response. If page streaming is performed per-resource, this
                     *           parameter does not affect the return value. If page streaming is
                     *           performed per-page, this determines the maximum number of
                     *           resources in a page.
                @else
                    @join commentLine : context.php.getDocLinesWithPrefixes(context.getDescription(param), optionalParamDocLinePrefix(param), "          ")
                        {@commentLine}
                    @end
                @end
            @end
             * }
        @else
            {@""} * @@param array $optionalArgs {
             *     Optional. There are no optional parameters for this method yet;
             *               this $optionalArgs parameter reserves a spot for future ones.
             * }
        @end
    @end
@end

@private isPageSizeField(param, methodConfig)
    @if methodConfig.isPageStreaming
        @if methodConfig.getPageStreaming.hasPageSizeField
            @if param.equals(methodConfig.getPageStreaming.getPageSizeField)
                TRUE
            @end
        @end
    @end
@end

@private optionalParamDocLinePrefix(param)
    {@""}    @@var {@context.typeName(param.getType)} ${@context.lowerUnderscoreToLowerCamel(param.getSimpleName)} {@""}
@end

@private docReturnLine(service, method)
    @let qualifiedOutTypeName = context.fullyQualifiedName(method.getOutputType), \
         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         isPageStreaming = methodConfig.isPageStreaming
        @if not(context.messages.isEmptyType(method.getOutputType))
            {@""} *
            @if isPageStreaming
                {@""} * @@return Google\GAX\PageAccessor
            @else
                {@""} * @@return {@qualifiedOutTypeName}
            @end

        @end
    @end
     *
@end

@private cleanupSection()
    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        $this->stub->close();
    }

    private function createCredentialsCallback()
    {
        return $this->grpcBootstrap->createCallCredentialsCallback($this->scopes);
    }
@end
