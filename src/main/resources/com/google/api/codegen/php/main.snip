@snippet generateFilename(service)
    {@context.getApiWrapperName(service)}.php
@end

@snippet generateClass(service, body, imports)
    <?php
    {@licenseSection(service)}

    namespace {@context.getApiConfig.getPackageName};

    @join import : imports
        use {@import};
    @end

    {@body}
@end

@private licenseSection(service)
  /*
   * Copyright 2016 Google Inc. All Rights Reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   * in compliance with the License. You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software distributed under the License
   * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   * or implied. See the License for the specific language governing permissions and limitations under
   * the License.
   */

  /*
   * GENERATED CODE WARNING
   * This file was generated from the file
   * https://github.com/google/googleapis/blob/master/{@service.getFile().getSimpleName()}
   * and updates to that file get reflected here through a refresh process.
   */
@end

@snippet generateBody(service)
    {@alwaysImport()}

    // TODO service doc
    class {@context.getApiWrapperName(service)}
    {
        {@constants(service)}

        {@statics(service)}

        {@members(service)}

        {@staticFunctions(service)}

        {@constructor(service)}

        {@apiMethods(service)}

        {@cleanupSection()}
    }

    {@context.getApiWrapperName(service)}::initClass();

@end

@private alwaysImport() fill
    {@context.addImport("\Google\GAX\AgentHeaderDescriptor")}
    {@context.addImport("\Google\GAX\ApiCallable")}
    {@context.addImport("\Google\GAX\CallSettings")}
    {@context.addImport("\Google\GAX\GrpcBootstrap")}
    {@context.addImport("\Google\GAX\GrpcConstants")}
    {@context.addImport("\Google\GAX\PathTemplate")}
    {@context.addImport("\RuntimeException")}
@end

@private constants(service)
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()};

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';
@end

@private statics(service)
    private static $grpcBootstrap;
    {@pathTemplateConstants(service)}
    private static $pageStreamingDescriptors;
@end

@private pathTemplateConstants(service)
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        private static ${@pathTemplateConstantName(collectionConfig)};
    @end
@end

@private pathTemplateConstantName(collectionConfig)
    {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)}NameTemplate
@end

@private members(service)
    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
@end

@private staticFunctions(service)
    {@initClassFunction(service)}

    {@resourceFunctions(service)}
@end

@private initClassFunction(service)
    /**
     * This should not be called outside of the implementation file.
     */
    static function initClass()
    {
        if (!empty(self::$grpcBootstrap)) {
            throw new RuntimeException("PublisherApi::initClass called more than once");
        }

        self::$grpcBootstrap = GrpcBootstrap::defaultInstance();

        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
            self::${@pathTemplateConstantName(collectionConfig)} = new PathTemplate("{@collectionConfig.getNamePattern}");
        @end

        {@pageStreamingVariables(service)}
    }
@end

@private pageStreamingVariables(service)
    @let interfaceConfig = context.getApiConfig.getInterfaceConfig(service)
        @join method : context.messages.filterPageStreamingMethods(interfaceConfig, service.getMethods)
            @let dummy = context.addImport("\Google\GAX\PageStreamingDescriptor"), \
                 methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
                 pageStreaming = interfaceConfig.getMethodConfig(method).getPageStreaming()
            ${@methodName}PageStreamingDescriptor =
                    new PageStreamingDescriptor([
                        'requestPageTokenField' => '{@pageStreaming.getRequestTokenField.getSimpleName}',
                        'responsePageTokenField' => '{@pageStreaming.getResponseTokenField.getSimpleName}',
                        'resourceField' => '{@pageStreaming.getResourcesField.getSimpleName}']);
            @end
        @end

        self::$pageStreamingDescriptors = [
            @join method : context.messages.filterPageStreamingMethods(interfaceConfig, service.getMethods) on {@","}.add(BREAK)
                @let methodName = context.upperCamelToLowerCamel(method.getSimpleName)
                    '{@methodName}' => ${@methodName}PageStreamingDescriptor
                @end
            @end
        ];
    @end
@end

@private resourceFunctions(service)
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        {@formatResourceFunction(collectionConfig)}
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        {@parseResourceFunction(collectionConfig)}
    @end
@end

@private formatResourceFunction(collectionConfig)
    /**
     * Formats a string containing the fully-qualified path to represent
     * a {@collectionConfig.getEntityName} resource.
     */
    public static function {@formatResourceFunctionName(collectionConfig)}(\
          {@formatResourceFunctionParams(collectionConfig)})
    {
        return self::${@pathTemplateConstantName(collectionConfig)}->render([
            {@pathTemplateArgs(collectionConfig)}]);
    }

@end

@private formatResourceFunctionName(collectionConfig)
    format{@resourceName(collectionConfig)}
@end

@private formatResourceFunctionParams(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() on ", "
        ${@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private pathTemplateArgs(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() vertical on ", "
        '{@param}' => ${@context.lowerUnderscoreToLowerCamel(param)}
    @end
@end

@private parseResourceFunction(collectionConfig)
    @join subField : collectionConfig.getNameTemplate.vars()
        @let fieldPath = context.upperCamelToLowerCamel(resourceName(collectionConfig))
            /**
             * Parses the {@subField} from the given fully-qualified path which
             * represents a {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)} resource.
             */
            public static function \
                    parse{@context.lowerUnderscoreToUpperCamel(subField)}From{@resourceName(collectionConfig)}(\
                    ${@fieldPath})
            {
                return self::${@pathTemplateConstantName(collectionConfig)}->match(${@fieldPath})['{@subField}'];
            }

        @end
    @end
@end

@private resourceName(collectionConfig)
    {@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}Name
@end

@private constructor(service)
    @let className = context.getApiWrapperName(service), \
         jsonBaseName = {@context.upperCamelToLowerUnderscore(service.getSimpleName)}
        // TODO(garrettjones): add channel (when supported in gRPC)
        /**
         * Constructor.
         *
         * @@param array $options {
         *     Optional. Options for configuring the service API wrapper.
         *
         *     @@type string $serviceAddress The domain name of the API remote host.
         *                                  Default '{@context.getServiceConfig.getServiceAddress(service)}'.
         *     @@type mixed $port The port on which to connect to the remote host. Default {@context.getServiceConfig.getServicePort()}.
         *     @@type \Grpc\ChannelCredentials $sslCreds
         *           A `ChannelCredentials` for use with an SSL-enabled channel.
         *           Default: a credentials object returned from
         *           \Grpc\ChannelCredentials::createSsl()
         *     @@type array $scopes A string array of scopes to use when acquiring credentials.
         *                         Default the scopes for {@context.getServiceTitle(service)}.
         *     @@type array $retryingOverride
         *           An associative array of string => RetryOptions, where the keys
         *           are method names (e.g. 'createFoo'), that overrides default retrying
         *           settings. A value of null indicates that the method in question should
         *           not retry.
         *     @@type int $timeoutMillis The timeout in milliseconds to use for calls
         *                              that don't use retries. For calls that use retries,
         *                              set the timeout in RetryOptions.
         *                              Default: 30000 (30 seconds)
         *     @@type string $appName The codename of the calling service. Default 'gax'.
         *     @@type string $appVersion The version of the calling service.
         *                              Default: the current version of GAX.
         * }
         */
        public function __construct($options = [])
        {
            $defaultScopes = [
                @join scope : context.getServiceConfig.getAuthScopes(service) on {@","}.add(BREAK)
                    '{@scope}'
                @end
            ];
            $defaultOptions = [
                'serviceAddress' => self::SERVICE_ADDRESS,
                'port' => self::DEFAULT_SERVICE_PORT,
                'scopes' => $defaultScopes,
                'retryingOverride' => null,
                'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
                'appName' => 'gax',
                'appVersion' => self::_GAX_VERSION];
            $options = array_merge($defaultOptions, $options);

            $headerDescriptor = new AgentHeaderDescriptor([
                'clientName' => $options['appName'],
                'clientVersion' => $options['appVersion'],
                'codeGenName' => self::_CODEGEN_NAME,
                'codeGenVersion' => self::_CODEGEN_VERSION,
                'gaxVersion' => self::_GAX_VERSION,
                'phpVersion' => phpversion(),
            ]);

            $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
            $this->descriptors = [
                'default' => $defaultDescriptors
            ];
            foreach (self::$pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
                $descriptors = $defaultDescriptors;
                $descriptors['pageStreamingDescriptor'] = $pageStreamingDescriptor;
                $this->descriptors[$method] = $descriptors;
            }

            // TODO load the client config in a more package-friendly way
            $clientConfigJsonString = file_get_contents('./resources/{@jsonBaseName}_client_config.json');
            $clientConfig = json_decode($clientConfigJsonString, true);
            $this->defaultCallSettings =
                    CallSettings::load('{@context.getServiceName(service)}',
                                       $clientConfig,
                                       $options['retryingOverride'],
                                       GrpcConstants::getStatusCodeNames(),
                                       $options['timeoutMillis']);

            $this->scopes = $options['scopes'];

            $generatedCreateStub = function($hostname, $opts) {
                return new {@service.getSimpleName}Client($hostname, $opts);
            };
            $createStubOptions = [];
            if (!empty($options['sslCreds'])) {
                $createStubOptions['sslCreds'] = $options['sslCreds'];
            }
            $this->stub = self::$grpcBootstrap->createStub(
                $generatedCreateStub,
                $options['serviceAddress'],
                $options['port'],
                $createStubOptions);
        }

    @end
@end

@private apiMethods(service)
    // API methods here

    // TODO
@end

@private cleanupSection()
    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        $this->stub->close();
    }

    private function createCredentialsCallback()
    {
        return self::$grpcBootstrap->createCallCredentialsCallback($this->scopes);
    }
@end
