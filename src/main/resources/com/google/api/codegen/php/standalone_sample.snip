@extends "php/common.snip"

@snippet generate(sampleFile)
    {@standaloneSample(sampleFile, sampleFile.libraryMethod, sampleFile.libraryMethod.samples.get(0))}
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSampleCall
@snippet standaloneSample(sampleFile, apiMethod, sample)
    <?php
    {@license(sampleFile.fileHeader)}

    /*
     * DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")
     */

    // [START {@sample.regionTag}]
    require {@sampleFile.extraInfo.autoloadPath};

    @if sample.sampleInitCode.importSection.appImports
        {@importList(sample.sampleInitCode.importSection.appImports)}

    @end
    @if not(sample.sampleFunctionDoc.isEmpty)
        {@processDoc(sample.sampleFunctionDoc)}
    @end
    function {@sample.sampleFunctionName}({@formalArgs(sample.sampleInitCode.argDefaultParams)})
    {
        // [START {@sample.regionTag}_core]

        @if sampleFile.extraInfo.hasMissingDefaultOptions
            $options = [
                @if sampleFile.extraInfo.missingDefaultServiceAddress
                    'serviceAddress' => 'my-service-address',
                @end
                @if sampleFile.extraInfo.missingDefaultServiceScopes
                    'credentialsConfig' => [
                        'scopes' => ['my-service-scope'],
                    ],
                @end
                ];
            ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}($options);

        @else
            ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}();

        @end
        @if sample.sampleInitCode.lines
            {@sampleInitCode(sample.sampleInitCode, apiMethod.apiVariableName)}

        @end
        try {
            @switch sample.callingForm
            @case "LongRunningRequest"
                {@longRunningSampleCode(sample, apiMethod)}
            @case "LongRunningRequestAsync"
                {@longRunningAsyncSampleCode(sample, apiMethod)}
            @case "Request"
                {@requestSampleCode(sample, apiMethod)}
            @case "RequestPaged"
                {@pagedSampleCode(sample, apiMethod)}
            @case "RequestPagedAll"
                {@pagedAllSampleCode(sample, apiMethod)}
            @case "RequestStreamingBidi"
                {@bidiStreamingSampleCode(sample, apiMethod)}
            @case "RequestStreamingBidiAsync"
                {@bidiStreamingAsyncSampleCode(sample, apiMethod)}
            @case "RequestStreamingClient"
                {@clientStreamingSampleCode(sample, apiMethod)}
            @case "RequestStreamingClientAsync"
                {@clientStreamingAsyncSampleCode(sample, apiMethod)}
            @case "RequestStreamingServer"
                {@serverStreamingSampleCode(sample, apiMethod)}
            @default
                $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
            @end
        } finally {
            @if sampleFile.extraInfo.hasMissingDefaultOptions
                if (isset(${@apiMethod.apiVariableName})) {
                    ${@apiMethod.apiVariableName}->close();
                }
            @else
                ${@apiMethod.apiVariableName}->close();
            @end
        }

        // [END {@sample.regionTag}_core]
    }
    // [END {@sample.regionTag}]
    {@processCliArguments(sample)}
    {@sample.sampleFunctionName}({@formalArgs(sample.sampleInitCode.argDefaultParams)});
@end

@private processDoc(doc)
  @if doc.paramDocLines.isEmpty
    @if doc.mainDocLines.size.toString == "1"
      /** {@doc.mainDocLines.get(0)} */
    @end
  @else
    /**
    @if doc.mainDocLines.size
      @join line : @doc.mainDocLines
        {@""} * {@line}
      @end

      {@""} *
    @end
    @join paramDoc : doc.paramDocLines
      @join line : paramDoc
        {@""} * {@line}
      @end
    @end
    {@""} */
  @end
@end

@private processCliArguments(sample)
    @if sample.sampleInitCode.argDefaultParams.size

        {@optsArray(sample.sampleInitCode.argDefaultParams)}
        {@defaultOptionsArray(sample.sampleInitCode.argDefaultParams)}
        $options = getopt('', $opts);
        $options += $defaultOptions;

        @if sample.sampleInitCode.argDefaultParams
            @join param : sample.sampleInitCode.argDefaultParams
                {@variable(param.identifier)} = $options['{@param.cliFlagName}'];
            @end


        @end
    @end
@end

@private formalArgs(sampleArgs)
  @join param : sampleArgs on ", "
    {@variable(@param.identifier)}
  @end
@end

@private optsArray(sampleArgs)
    $opts = [
        @join param : sampleArgs
            '{@param.cliFlagName}::',
        @end
    ];

@end

@private defaultOptionsArray(sampleArgs)
    $defaultOptions = [
        @join param : sampleArgs
            '{@param.cliFlagName}' => {@renderInitValue(param.initValue, param.identifier)},
        @end
    ];

@end

@private methodCallSampleCode(apiMethod)
    @if apiMethod.isSingularRequestMethod
        ${@apiMethod.apiVariableName}->{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode)})
    @else
        ${@apiMethod.apiVariableName}->{@apiMethod.name}()
    @end
@end

@private longRunningSampleCode(sample, apiMethod)
    $operationResponse = {@methodCallSampleCode(apiMethod)};
    $operationResponse->pollUntilComplete();
    if ($operationResponse->operationSucceeded()) {
        @if apiMethod.longRunningView.isEmptyOperation
            // operation succeeded and returns no value
        @else
            $response = $operationResponse->getResult();
            @if sample.outputs
                {@processResponse(sample)}
            @end
        @end
    } else {
        $error = $operationResponse->getError();
        // handleError($error)
    }
@end

@private longRunningAsyncSampleCode(sample, apiMethod)
    // start the operation, keep the operation name, and resume later
    $operationResponse = {@methodCallSampleCode(apiMethod)};
    $operationName = $operationResponse->getName();
    // ... do other work
    $newOperationResponse = ${@apiMethod.apiVariableName}->resumeOperation($operationName, '{@apiMethod.name}');
    while (!$newOperationResponse->isDone()) {
        // ... do other work
        $newOperationResponse->reload();
    }
    if ($newOperationResponse->operationSucceeded()) {
        @if apiMethod.longRunningView.isEmptyOperation
            // operation succeeded and returns no value
        @else
            $response = $newOperationResponse->getResult();
            @if sample.outputs
                {@processResponse(sample)}
            @end
        @end
    } else {
      $error = $newOperationResponse->getError();
      // handleError($error)
    }
@end

@private requestSampleCode(sample, apiMethod)
    @if apiMethod.hasReturnValue
        $response = {@methodCallSampleCode(apiMethod)};

    @else
        {@methodCallSampleCode(apiMethod)};

    @end
    @if sample.outputs
        {@processResponse(sample)}
    @end
@end

@private pagedSampleCode(sample, apiMethod)
    // Iterate over pages of elements
    $pagedResponse = {@methodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iteratePages() as $page) {
        foreach ($page as $responseItem) {
            {@processResponse(sample)}
        }
    }
@end

@private pagedAllSampleCode(sample, apiMethod)
    // Iterate through all elements
    $pagedResponse = {@methodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iterateAllElements() as $responseItem) {
        {@processResponse(sample)}
    }
@end

@private clientStreamingSampleCode(sample, apiMethod)
    // Write data to server and wait for a response
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    $response = $stream->writeAllAndReadResponse($requests);
    @if sample.outputs
        {@processResponse(sample)}
    @end
@end

@private clientStreamingAsyncSampleCode(sample, apiMethod)
    // Write data as it becomes available, then wait for a response
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($requests as $request) {
        $stream->write($request);
    }
    $response = $stream->readResponse();
    @if sample.outputs
        {@processResponse(sample)}
    @end
@end

@private serverStreamingSampleCode(sample, apiMethod)
    // Read all responses until the stream is complete
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($stream->readAll() as $responseItem) {
        {@processResponse(sample)}
    }
@end

@private bidiStreamingSampleCode(sample, apiMethod)
    // Write all requests to the server, then read all responses until the
    // stream is complete
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    $stream->writeAll($requests);
    foreach ($stream->closeWriteAndReadAll() as $responseItem) {
        {@processResponse(sample)}
    }
@end

@private bidiStreamingAsyncSampleCode(sample, apiMethod)
    // Write requests individually, making read() calls if
    // required. Call closeWrite() once writes are complete, and read the
    // remaining responses from the server.
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($requests as $request) {
        $stream->write($request);
        // if required, read a single response from the stream
        $responseItem = $stream->read();
        {@processResponse(sample)}
    }
    $stream->closeWrite();
    $responseItem = $stream->read();
    while (!is_null($responseItem)) {
        {@processResponse(sample)}
        $responseItem = $stream->read();
    }
@end

@private sampleInitCode(sampleInitCode, apiVariableName)
    @if sampleInitCode.argDefaultLines
        @join line : util.pretty(initCodeLines(sampleInitCode.argDefaultLines, apiVariableName))
          // {@line}
        @end


    @end
    {@initCodeLinesWithDescriptions(sampleInitCode.lines, apiVariableName)}
@end

@private initCodeLinesWithDescriptions(lines, apiVariableName)
    @join line : lines
        @if line.descriptions

            {@toComments(line.descriptions)}

        @end
        {@initCodeLine(line, apiVariableName)}
    @end
@end

@private initCodeLines(lines, apiVariableName)
    @join line : lines
        {@initCodeLine(line, apiVariableName)}
    @end
@end

@private initCodeLine(line, apiVariableName)
    @switch line.lineType
    @case "StructureInitLine"
        {@initLineStructure(line)}
    @case "ListInitLine"
        {@initLineList(line)}
    @case "MapInitLine"
        {@initLineMap(line)}
    @case "SimpleInitLine"
        {@initLineSimple(line, apiVariableName)}
    @case "ReadFileInitLine"
        {@initLineReadFile(line, apiVariableName)}
    @default
        $unhandledCase: {@line.lineType}$
    @end
@end

@private sampleMethodCallArgList(sampleInitCode)
    @join fieldSetting : sampleInitCode.requiredFieldSettings on ", "
        ${@fieldSetting.identifier}
    @end
    @if sampleInitCode.optionalFieldSettings
        @if sampleInitCode.requiredFieldSettings
            ,{@" "}
        @end
        {@optionalField(sampleInitCode.optionalFieldSettings)}
    @end
@end

@private optionalField(fieldSettings)
    [{@optionalFieldEntries(fieldSettings)}]
@end

@private optionalFieldEntries(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        '{@fieldSetting.fieldName}' => ${@fieldSetting.identifier}
    @end
@end

@private initLineStructure(line)
    ${@line.identifier} = new {@line.typeName}();
    @join fieldSetting : line.fieldSettings
        ${@line.identifier}->{@fieldSetting.fieldSetFunction}(${@fieldSetting.identifier});
    @end
@end

@private initLineList(line)
    ${@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@private varList(args)
    @join arg : args on ", "
        ${@arg}
    @end
@end

@private initLineMap(line)
    ${@line.identifier} = [{@keyVarList(line.initEntries)}];
@end

@private keyVarList(mapEntries)
    @join mapEntry : mapEntries on ","
        {@mapEntry.key} => ${@mapEntry.valueString}
    @end
@end

@private initLineSimple(line, apiVariableName)
    ${@line.identifier} = {@renderInitValue(line.initValue, apiVariableName)};
@end

@private initLineReadFile(line, apiVariableName)
    {@variable(line.identifier)} = file_get_contents({@renderInitValue(line.fileName, apiVariableName)});
@end

@private renderInitValue(initValue, apiVariableName)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        ${@apiVariableName}->{@initValue.formatFunctionName}({@argList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end

@private processResponse(sample)
    {@processOutputViews(sample.outputs)}
@end

@private processOutputViews(outputViews)
    @join view : outputViews on BREAK
        @switch view.kind
        @case "COMMENT"
            {@processCommentView(view)}
        @case "DEFINE"
            {@processDefineView(view)}
        @case "ARRAY_LOOP"
            {@processArrayLoopView(view)}
        @case "MAP_LOOP"
            {@processMapLoopView(view)}
        @case "PRINT"
            {@processPrintView(view)}
        @case "WRITE_FILE"
            {@processWriteFileView(view)}
        @default
            $unhandledResponseForm: {@view}
        @end
    @end
@end

@private processPrintView(view)
    @if not(view.interpolatedString.args.size)
        printf("{@view.interpolatedString.format}" . PHP_EOL);
    @else
        printf("{@view.interpolatedString.format}" . PHP_EOL, {@commaSeparatedFields(view.interpolatedString.args)});
    @end
@end

@private processCommentView(view)
    {@toComments(view.lines)}
@end

@private processArrayLoopView(view)
    foreach ({@variableField(view.collection)} as {@variable(view.variableName)}) {
        {@processOutputViews(view.body)}
    }
@end

@private processMapLoopView(view)
    @if and(@view.keyVariableName, @view.valueVariableName)
        foreach ({@variableField(view.map)} as ${@view.keyVariableName} => ${@view.valueVariableName}) {

    @else
        @if @view.keyVariableName
            foreach (array_keys({@variableField(view.map)}) as ${@view.keyVariableName}) {

        @else
            @if @view.valueVariableName
                foreach ({@variableField(view.map)} as ${@view.valueVariableName}) {

            @else
                $unhandledMapLoopView: {@view}
            @end
        @end
    @end
        {@processOutputViews(view.body)}
    }

@end

@private processDefineView(view)
    {@variable(view.variableName)} = {@variableField(view.reference)};
@end

@private processWriteFileView(view)
    file_put_contents({@stringFormattedFileName(view.fileName)}, {@variableField(view.contents)});
@end

@private stringFormattedFileName(fileName)
    @if fileName.args.isEmpty
        '{@fileName.format}'
    @else
        sprintf('{@fileName.format}', {@commaSeparatedFields(fileName.args)})
    @end
@end

@private commaSeparatedFields(args)
    @join arg : args on ", "
        # FIXME(hzyi): print enums directly will just get us an int
        # Fix this by creating a mapping between enums and meaningful display names
        # until https://github.com/protocolbuffers/protobuf/pull/4534 is merged
        {@arg}
    @end
@end

@private variableField(arg)
    {@variable(arg.variable)}{@accessor(arg.accessors)}
@end

@private variable(var)
    ${@var}
@end

@private accessor(accessors)
    @join field : accessors on ""
        {@field}
    @end
@end
