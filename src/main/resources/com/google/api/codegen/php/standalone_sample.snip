@extends "php/common.snip"

@snippet generate(sampleFile)
    //// [ This is an auto-generated sample file produced by the gapic-generator. Sample name: "{@sampleFile.className}" ]
    //// STUB standalone sample "{@sampleFile.className}" /////

    // FIXME: Insert here set-up comments that we never want to display in cloudsite. These are seen by users perusing the samples directly in the repository.

    @let apiMethod = sampleFile.libraryMethod
        @let sample = apiMethod.samples.get(0)
        // [START {@sample.regionTag}]

        // FIXME: Insert here boilerplate code not directly related to the method call itself.
    
        //      calling form: "{@sample.callingForm.toString}"
        //        region tag: "{@sample.regionTag}"
        //         className: "{@sampleFile.className}"
        //          valueSet: "{@sample.valueSet.id}" ("{@sample.valueSet.title}")
        //       description: "{@sample.valueSet.description}"
        //        {@sample.valueSet.parameters}
        //      apiMethod "{@apiMethod.name}" of type "{@apiMethod.type}"

        // [START {@sample.regionTag}_core]

        // FIXME: Insert here code to prepare the request fields, make the call, process the response.

        /*
        {@standaloneSample(sampleFile, apiMethod, sample)}
        */
        // [END {@sample.regionTag}_core]

        // FIXME: Insert here clean-up code.
             
        // [END {@sample.regionTag}]
        @end
    @end
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSampleCall
@snippet standaloneSample(sampleFile, apiMethod, sample)
    @if sample.initCode.importSection.appImports
        {@importList(sample.initCode.importSection.appImports)}


    @end
    @if sampleFile.extraInfo.hasMissingDefaultOptions
        $options = [
            @if sampleFile.extraInfo.missingDefaultServiceAddress
                'serviceAddress' => 'my-service-address',
            @end
            @if sampleFile.extraInfo.missingDefaultServiceScopes
                'credentialsConfig' => [
                    'scopes' => ['my-service-scope'],
                ],
            @end
            ];
        ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}($options);


    @else
        ${@apiMethod.apiVariableName} = new {@apiMethod.apiClassName}();


    @end
    @if sample.initCode.lines
        {@initCode(sample.initCode, apiMethod.apiVariableName)}


    @end
    try {
        @switch sample.callingForm
        @case "LongRunningRequest"
            {@longRunningSampleCode(apiMethod)}
        @case "LongRunningRequestAsync"
            {@longRunningAsyncSampleCode(apiMethod)}
        @case "Request"
            {@requestSampleCode(apiMethod)}
        @case "RequestPaged"
            {@pagedSampleCode(apiMethod)}
        @case "RequestPagedAll"
            {@pagedAllSampleCode(apiMethod)}
        @case "RequestStreamingBidi"
            {@bidiStreamingSampleCode(apiMethod)}
        @case "RequestStreamingBidiAsync"
            {@bidiStreamingAsyncSampleCode(apiMethod)}
        @case "RequestStreamingClient"
            {@clientStreamingSampleCode(apiMethod)}
        @case "RequestStreamingClientAsync"
            {@clientStreamingAsyncSampleCode(apiMethod)}
        @case "RequestStreamingServer"
            {@serverStreamingSampleCode(apiMethod)}
        @default
            $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
        @end
    } finally {
        @if sampleFile.extraInfo.hasMissingDefaultOptions
            if (isset(${@apiMethod.apiVariableName})) {
                ${@apiMethod.apiVariableName}->close();
            }
        @else
            ${@apiMethod.apiVariableName}->close();
        @end
    }
@end

@private methodCallSampleCode(apiMethod)
    @if apiMethod.isSingularRequestMethod
        ${@apiMethod.apiVariableName}->{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode)})
    @else
        ${@apiMethod.apiVariableName}->{@apiMethod.name}()
    @end
@end

@private longRunningSampleCode(apiMethod)
    $operationResponse = {@methodCallSampleCode(apiMethod)};
    $operationResponse->pollUntilComplete();
    if ($operationResponse->operationSucceeded()) {
        @if apiMethod.longRunningView.isEmptyOperation
            // operation succeeded and returns no value
        @else
            $result = $operationResponse->getResult();
            // doSomethingWith($result)
        @end
    } else {
        $error = $operationResponse->getError();
        // handleError($error)
    }
@end

@private longRunningAsyncSampleCode(apiMethod)
    // start the operation, keep the operation name, and resume later
    $operationResponse = {@methodCallSampleCode(apiMethod)};
    $operationName = $operationResponse->getName();
    // ... do other work
    $newOperationResponse = ${@apiMethod.apiVariableName}->resumeOperation($operationName, '{@apiMethod.name}');
    while (!$newOperationResponse->isDone()) {
        // ... do other work
        $newOperationResponse->reload();
    }
    if ($newOperationResponse->operationSucceeded()) {
      @if apiMethod.longRunningView.isEmptyOperation
          // operation succeeded and returns no value
      @else
          $result = $newOperationResponse->getResult();
          // doSomethingWith($result)
      @end
    } else {
      $error = $newOperationResponse->getError();
      // handleError($error)
    }
@end

@private requestSampleCode(apiMethod)
    @if apiMethod.hasReturnValue
        $response = {@methodCallSampleCode(apiMethod)};
    @else
        {@methodCallSampleCode(apiMethod)};
    @end
@end

@private pagedSampleCode(apiMethod)
    // Iterate over pages of elements
    $pagedResponse = {@methodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iteratePages() as $page) {
        foreach ($page as $element) {
            // doSomethingWith($element);
        }
    }
@end

@private pagedAllSampleCode(apiMethod)
    // Iterate through all elements
    $pagedResponse = {@methodCallSampleCode(apiMethod)};
    foreach ($pagedResponse->iterateAllElements() as $element) {
        // doSomethingWith($element);
    }
@end

@private clientStreamingSampleCode(apiMethod)
    // Write data to server and wait for a response
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    $result = $stream->writeAllAndReadResponse($requests);
    // doSomethingWith($result)
@end

@private clientStreamingAsyncSampleCode(apiMethod)
    // Write data as it becomes available, then wait for a response
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($requests as $request) {
        $stream->write($request);
    }
    $result = $stream->readResponse();
    // doSomethingWith($result)
@end

@private serverStreamingSampleCode(apiMethod)
    // Read all responses until the stream is complete
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($stream->readAll() as $element) {
        // doSomethingWith($element);
    }
@end

@private bidiStreamingSampleCode(apiMethod)
    // Write all requests to the server, then read all responses until the
    // stream is complete
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    $stream->writeAll($requests);
    foreach ($stream->closeWriteAndReadAll() as $element) {
        // doSomethingWith($element);
    }
@end

@private bidiStreamingAsyncSampleCode(apiMethod)
    // Write requests individually, making read() calls if
    // required. Call closeWrite() once writes are complete, and read the
    // remaining responses from the server.
    $requests = [$request];
    $stream = {@methodCallSampleCode(apiMethod)};
    foreach ($requests as $request) {
        $stream->write($request);
        // if required, read a single response from the stream
        $element = $stream->read();
        // doSomethingWith($element)
    }
    $stream->closeWrite();
    $element = $stream->read();
    while (!is_null($element)) {
        // doSomethingWith($element)
        $element = $stream->read();
    }
@end

@private initCode(initCode, apiVariableName)
    @if initCode.argDefaultLines
        @join line : util.pretty(initCodeLines(initCode.argDefaultLines, apiVariableName))
          // {@line}
        @end


    @end
    {@initCodeLines(initCode.lines, apiVariableName)}
@end

@private initCodeLines(lines, apiVariableName)
    @join line : lines
        @switch line.lineType
        @case "StructureInitLine"
            {@initLineStructure(line)}
        @case "ListInitLine"
            {@initLineList(line)}
        @case "MapInitLine"
            {@initLineMap(line)}
        @case "SimpleInitLine"
            {@initLineSimple(line, apiVariableName)}
        @default
            $unhandledCase: {@line.lineType}$
        @end
    @end
@end

@private sampleMethodCallArgList(initCode)
    @join fieldSetting : initCode.requiredFieldSettings on ", "
        ${@fieldSetting.identifier}
    @end
    @if initCode.optionalFieldSettings
        @if initCode.requiredFieldSettings
            ,{@" "}
        @end
        {@optionalField(initCode.optionalFieldSettings)}
    @end
@end

@snippet optionalField(fieldSettings)
    [{@optionalFieldEntries(fieldSettings)}]
@end

@snippet optionalFieldEntries(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        '{@fieldSetting.fieldName}' => ${@fieldSetting.identifier}
    @end
@end

@private initLineStructure(line)
    ${@line.identifier} = new {@line.typeName}();
    @join fieldSetting : line.fieldSettings
        ${@line.identifier}->{@fieldSetting.fieldSetFunction}(${@fieldSetting.identifier});
    @end
@end

@private initLineList(line)
    ${@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
    @join arg : args on ", "
        ${@arg}
    @end
@end

@private initLineMap(line)
    ${@line.identifier} = [{@keyVarList(line.initEntries)}];
@end

@private keyVarList(mapEntries)
    @join mapEntry : mapEntries on ","
        {@mapEntry.key} => ${@mapEntry.valueString}
    @end
@end

@private initLineSimple(line, apiVariableName)
    ${@line.identifier} = {@renderInitValue(line.initValue, apiVariableName)};
@end

@private renderInitValue(initValue, apiVariableName)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        ${@apiVariableName}->{@initValue.formatFunctionName}({@argList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end
