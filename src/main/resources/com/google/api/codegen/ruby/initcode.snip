@snippet initCode(initCodeSpec)
  @join line : initCodeSpec.lines
    @switch line.lineType.toString
    @case "StructureInitLine"
      {@initLineStructure(line)}
    @case "ListInitLine"
      {@initLineList(line)}
    @case "MapInitLine"
      {@initLineMap(line)}
    @case "SimpleInitLine"
      {@initLineSimple(line)}
    @default
      $unhandledCase: {@line.lineType.toString}$
    @end
  @end
@end

@private initLineStructure(line)
  {@line.identifier} = {@line.typeName}.new
  @join fieldSetting : line.fieldSettings
    {@line.identifier}.{@fieldSetting.fieldSetFunction} = {@fieldSetting.identifier}
  @end
@end

@private initLineList(line)
  {@line.identifier} = [{@varList(line.elementIdentifiers)}]
@end

@private varList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end

@private initLineMap(line)
  {@line.identifier} = { {@keyVarList(line.initEntries)} }
@end

@private keyVarList(mapEntries)
  @join mapEntry : mapEntries on ", "
    {@mapEntry.key} => {@mapEntry.valueString}
  @end
@end

@private initLineSimple(line)
  {@line.identifier} = {@renderInitValue(line.initValue)}
@end

@private renderInitValue(initValue)
  @switch initValue.type
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    {@initValue.apiWrapperName}.{@initValue.formatFunctionName}\
      ({@varList(initValue.formatArgs)})
  @default
    $unhandledCase: {@initValue.type}$
  @end
@end
