@snippet sampleCode(sampleView)
  require "{@sampleView.importFilename}"

  {@sampleView.clientVariable} = {@sampleView.clientName}.new
  @if sampleView.lines
    @join line : sampleView.lines
      {@initLine(line)}
    @end

  @end
  @switch sampleView.methodType
  @case "OptionalArrayMethod"
      {@simpleSampleCode(sampleView)}
  @case "PagedOptionalArrayMethod"
      {@pagedSampleCode(sampleView)}
  @case "LongRunningOptionalArrayMethod"
      {@lroSampleCode(sampleView)}
  @default
      {@unhandledCase()}
  @end
@end

@private initLine(line)
  @switch line.type
  @case "StructureInitLine"
    @switch line.fields.size.toString
    @case "1"
      {@line.identifier} = { {@fieldList(line.fields)} }
    @case "2"
      {@line.identifier} = { {@fieldList(line.fields)} }
    @default
      {@line.identifier} = {
        {@multilineFieldList(line.fields)}
      }
    @end
  @case "ListInitLine"
    {@line.identifier} = [{@varList(line.elements)}]
  @case "MapInitLine"
    {@line.identifier} = { {@keyVarList(line.entries)} }
  @case "SimpleInitLine"
    @if line.docLines

      {@toComments(line.docLines)}

    @end
    {@line.identifier} = {@simpleInitValue(line)}
  @default
    {@unhandledCase()}
  @end
@end

@private multilineFieldList(fields)
  @join field : fields on ",".add(BREAK)
    {@field.name}: {@field.identifier}
  @end
@end

@private varList(args)
  @join arg : args on ", "
    {@util.wrapReserved(arg)}
  @end
@end

@private keyVarList(entries)
  @join entry : entries on ", "
    {@entry.getKey} => {@entry.getValue}
  @end
@end

@private simpleInitValue(line)
  @if line.hasFormattedValue
    {@line.clientName}.{@line.functionName}({@varList(line.formatArgs)})
  @else
    {@line.value}
  @end
@end

@private simpleSampleCode(sampleView)
  @switch sampleView.grpcStreaming.type
    @case "NonStreaming"
      @if sampleView.hasEmptyReturn
        {@methodCallSampleCode(sampleView)}
      @else
        response = {@methodCallSampleCode(sampleView)}
      @end
    @case "ServerStreaming"
      {@methodCallSampleCode(sampleView)}.each do |element|
        @# Process element.
      end
    @case "ClientStreaming"
      requests = [request]
      @if sampleView.hasEmptyReturn
        {@sampleView.clientVariable}.{@sampleView.methodName}(requests)
      @else
        response = {@sampleView.clientVariable}.{@sampleView.methodName}(requests)
      @end
    @case "BidiStreaming"
      requests = [request]
      {@sampleView.clientVariable}.{@sampleView.methodName}(requests).each do |element|
        @# Process element.
      end
  @end
@end

@private pagedSampleCode(sampleView)

  @# Iterate over all results.
  {@methodCallSampleCode(sampleView)}.each do |element|
    @# Process element.
  end

  @# Or iterate over results one page at a time.
  {@methodCallSampleCode(sampleView)}.each_page do |page|
    @# Process each page at a time.
    page.each do |element|
      @# Process element.
    end
  end
@end

@private lroSampleCode(sampleView)

  @# Register a callback during the method call.
  operation = {@methodCallSampleCode(sampleView)} do |op|
    raise op.results.message if op.error?
    op_results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Or use the return value to register a callback.
  operation.on_done do |op|
    raise op.results.message if op.error?
    op_results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Manually reload the operation.
  operation.reload!

  @# Or block until the operation completes, triggering callbacks on
  @# completion.
  operation.wait_until_done!
@end

@private methodCallSampleCode(sampleView)
  @if sampleView.fields
    {@sampleView.clientVariable}.{@sampleView.methodName}(\
      {@fieldList(sampleView.fields)})
  @else
    {@sampleView.clientVariable}.{@sampleView.methodName}
  @end
@end

@private fieldList(fields)
  @join field : fields on ", "
    @if field.isRequired
      {@util.wrapReserved(field.identifier)}
    @else
      {@field.name}: {@util.wrapReserved(field.identifier)}
    @end
  @end
@end
