@extends "ruby/initcode.snip"

@snippet sampleCode(apiMethod)
  @@example
  @let lines = util.getDocLines(sampleCodeWithVersionImport(apiMethod))
    @join line : lines
      {@""}  {@line}
    @end
  @end
@end

@snippet sampleCodeWithVersionImport(apiMethod)
  require "{@apiMethod.initCode.versionIndexFileImportName}"

  {@versionedClientSampleCode(apiMethod)}
@end

@snippet sampleCodeWithTopLevelImport(apiMethod)
  require "{@apiMethod.initCode.topLevelIndexFileImportName}"

  {@topLevelClientSampleCode(apiMethod)}
@end

@snippet versionedClientSampleCode(apiMethod)
  {@apiMethod.apiVariableName} = {@apiMethod.versionAliasedApiClassName}.new
  {@sampleCodeCore(apiMethod)}
@end

@snippet topLevelClientSampleCode(apiMethod)
  {@apiMethod.apiVariableName} = {@apiMethod.topLevelAliasedApiClassName}.new
  {@sampleCodeCore(apiMethod)}
@end

@snippet sampleCodeCore(apiMethod)
  @if apiMethod.initCode.lines
    {@initCode(apiMethod.initCode)}

  @end
  @if apiMethod.isLongRunningOperation
    {@longRunningMethodSampleCode(apiMethod)}
  @else
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
      {@optionalArrayMethodSampleCode(apiMethod)}
    @case "PagedOptionalArrayMethod"
      {@pagedOptionalArrayMethodSampleCode(apiMethod)}
    @default
      $unhandledCase: {@apiMethod.type.toString}$
    @end
  @end
@end

@private longRunningMethodSampleCode(apiMethod)

  @# Register a callback during the method call.
  operation = {@methodCallSampleCode(apiMethod)} do |op|
    raise op.results.message if op.error?
    op_results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Or use the return value to register a callback.
  operation.on_done do |op|
    raise op.results.message if op.error?
    op_results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Manually reload the operation.
  operation.reload!

  @# Or block until the operation completes, triggering callbacks on
  @# completion.
  operation.wait_until_done!
@end

@private optionalArrayMethodSampleCode(apiMethod)
  @switch apiMethod.grpcStreamingType.toString
    @case "NonStreaming"
        {@optionalArrayMethodSampleCodeNonStreaming(apiMethod)}
    @case "ServerStreaming"
        {@optionalArrayMethodSampleCodeServerStreaming(apiMethod)}
    @case "ClientStreaming"
        {@optionalArrayMethodSampleCodeClientStreaming(apiMethod)}
    @case "BidiStreaming"
        {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod)}
  @end
@end

@private optionalArrayMethodSampleCodeNonStreaming(apiMethod)
  @if apiMethod.hasReturnValue
    response = {@methodCallSampleCode(apiMethod)}
  @else
    {@methodCallSampleCode(apiMethod)}
  @end
@end

@private optionalArrayMethodSampleCodeServerStreaming(apiMethod)
  {@methodCallSampleCode(apiMethod)}.each do |element|
    @# Process element.
  end
@end

@private optionalArrayMethodSampleCodeClientStreaming(apiMethod)
  requests = [request]
  @if apiMethod.hasReturnValue
    response = {@apiMethod.apiVariableName}.{@apiMethod.name}(requests)
  @else
    {@apiMethod.apiVariableName}.{@apiMethod.name}(requests)
  @end
@end

@private optionalArrayMethodSampleCodeBidiStreaming(apiMethod)
  requests = [request]
  {@apiMethod.apiVariableName}.{@apiMethod.name}(requests).each do |element|
    @# Process element.
  end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod)

  @# Iterate over all results.
  {@methodCallSampleCode(apiMethod)}.each do |element|
    @# Process element.
  end

  @# Or iterate over results one page at a time.
  {@methodCallSampleCode(apiMethod)}.each_page do |page|
    @# Process each page at a time.
    page.each do |element|
      @# Process element.
    end
  end
@end

@private methodCallSampleCode(apiMethod)
  @if apiMethod.initCode.fieldSettings
    {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod.initCode)})
  @else
    {@apiMethod.apiVariableName}.{@apiMethod.name}
  @end
@end

@snippet sampleMethodCallArgList(initCode)
    @join fieldSetting : initCode.requiredFieldSettings on ", "
        {@fieldSetting.identifier}
    @end
    @if initCode.optionalFieldSettings
        @if initCode.requiredFieldSettings
            ,{@" "}
        @end
        @join fieldSetting : initCode.optionalFieldSettings on ", "
            {@fieldSetting.fieldName}: {@fieldSetting.identifier}
        @end
    @end
@end
