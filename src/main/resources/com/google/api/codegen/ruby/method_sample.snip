@extends "ruby/common.snip"

@snippet sampleCode(apiMethod)
  @@example
  @let lines = util.getDocLines(sampleCode_(apiMethod))
    @join line : lines
      {@""}  {@line}
    @end
  @end
@end

@snippet sampleCode_(apiMethod)
  require "{@apiMethod.initCode.apiFileName}"

  @join alias : apiMethod.initCode.imports
    {@alias.nickname} = {@alias.fullName}
  @end

  {@apiMethod.apiVariableName} = {@apiMethod.apiClassName}.new
  @if apiMethod.initCode.lines
    {@initCode(apiMethod.initCode)}
  @end
  @if apiMethod.isLongrunningOperation
    {@longRunningMethodSampleCode(apiMethod)}
  @else
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
      {@optionalArrayMethodSampleCode(apiMethod)}
    @case "PagedOptionalArrayMethod"
      {@pagedOptionalArrayMethodSampleCode(apiMethod)}
    @default
      $unhandledCase: {@apiMethod.type.toString}$
    @end
  @end
@end

@private longRunningMethodSampleCode(apiMethod)

  @# Register a callback during the method call.
  operation = {@methodCallSampleCode(apiMethod)} do |op|
    raise op.results.message if op.error?
    results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Or use the return value to register a callback.
  operation.on_done do |op|
    raise op.results.message if op.error?
    results = op.results
    @# Process the results.

    metadata = op.metadata
    @# Process the metadata.
  end

  @# Manually reload the operation.
  operation.reload!

  @# Or block until the operation completes, triggering callbacks on
  @# completion.
  operation.wait_until_done!
@end

@private optionalArrayMethodSampleCode(apiMethod)
  @switch apiMethod.grpcStreamingType.toString
    @case "NonStreaming"
        {@optionalArrayMethodSampleCodeNonStreaming(apiMethod)}
    @case "ServerStreaming"
        {@optionalArrayMethodSampleCodeServerStreaming(apiMethod)}
    @case "ClientStreaming"
        {@optionalArrayMethodSampleCodeClientStreaming(apiMethod)}
    @case "BidiStreaming"
        {@optionalArrayMethodSampleCodeBidiStreaming(apiMethod)}
  @end
@end

@private optionalArrayMethodSampleCodeNonStreaming(apiMethod)
  @if apiMethod.hasReturnValue
    response = {@methodCallSampleCode(apiMethod)}
  @else
    {@methodCallSampleCode(apiMethod)}
  @end
@end

@private optionalArrayMethodSampleCodeServerStreaming(apiMethod)
  {@methodCallSampleCode(apiMethod)}.each do |element|
    @# Process element.
  end
@end

@private optionalArrayMethodSampleCodeClientStreaming(apiMethod)
  requests = [request]
  @if apiMethod.hasReturnValue
    response = {@apiMethod.apiVariableName}.{@apiMethod.name}(requests)
  @else
    {@apiMethod.apiVariableName}.{@apiMethod.name}(requests)
  @end
@end

@private optionalArrayMethodSampleCodeBidiStreaming(apiMethod)
  requests = [request]
  {@apiMethod.apiVariableName}.{@apiMethod.name}(requests).each do |element|
    @# Process element.
  end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod)

  @# Iterate over all results.
  {@methodCallSampleCode(apiMethod)}.each do |element|
    @# Process element.
  end

  @# Or iterate over results one page at a time.
  {@methodCallSampleCode(apiMethod)}.each_page do |page|
    @# Process each page at a time.
    page.each do |element|
      @# Process element.
    end
  end
@end

@private methodCallSampleCode(apiMethod)
  @let fieldSettings = apiMethod.initCode.fieldSettings
    @if fieldSettings
      {@apiMethod.apiVariableName}.{@apiMethod.name}\
        ({@sampleMethodCallArgList(fieldSettings)})
    @else
      {@apiMethod.apiVariableName}.{@apiMethod.name}
    @end
  @end
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end

@private initCode(initCodeSpec)
  @join line : initCodeSpec.lines
    @switch line.lineType.toString
    @case "StructureInitLine"
      {@initLineStructure(line)}
    @case "ListInitLine"
      {@initLineList(line)}
    @case "MapInitLine"
      {@initLineMap(line)}
    @case "SimpleInitLine"
      {@initLineSimple(line)}
    @default
      $unhandledCase: {@line.lineType.toString}$
    @end
  @end
@end

@private initLineStructure(line)
  {@line.identifier} = {@line.typeName}.new
  @join fieldSetting : line.fieldSettings
    {@line.identifier}.{@fieldSetting.fieldSetFunction} = {@fieldSetting.identifier}
  @end
@end

@private initLineList(line)
  {@line.identifier} = [{@varList(line.elementIdentifiers)}]
@end

@snippet varList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end

@private initLineMap(line)
  {@line.identifier} = { {@keyVarList(line.initEntries)} }
@end

@private keyVarList(mapEntries)
  @join mapEntry : mapEntries on ", "
    {@mapEntry.key} => {@mapEntry.valueString}
  @end
@end

@private initLineSimple(line)
  {@line.identifier} = {@renderInitValue(line.initValue)}
@end

@private renderInitValue(initValue)
  @switch initValue.type
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    {@initValue.apiWrapperName}.{@initValue.formatFunctionName}\
      ({@varList(initValue.formatArgs)})
  @default
    $unhandledCase: {@initValue.type}$
  @end
@end
