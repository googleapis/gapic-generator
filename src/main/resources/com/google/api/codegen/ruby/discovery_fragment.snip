@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.rb
@end

@snippet generateClass(method)
  @let apiName = context.getApi.getName, \
       ApiName = context.lowerCamelToUpperCamel(apiName), \
       apiVersion = context.getApiVersion, \
       ApiVersion = context.lowerCamelToUpperCamel(apiVersion), \
       apiaryConfig = context.getApiaryConfig, \
       authType = apiaryConfig.getAuthType
    @# BEFORE RUNNING:
    @# ---------------
    @# 1. If not already done, enable the {@context.getService.getTitle}
    @#    and check the quota for your project at
    @#    https://console.developers.google.com/apis/api/{@context.getApi.getName}
    @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
      @# 2. This sample uses Application Default Credentials for authentication.
      @#    If not already done, install the gcloud CLI from
      @#    https://cloud.google.com/sdk/ and run
      @#    `gcloud beta auth application-default login`
      @# 3. Install the Ruby client library and Application Default Credentials
      @#    library by running `gem install google-api-client` and
      @#    `gem install googleauth`
    @else
      @# 2. Install the Ruby client library by running `gem install google-api-client`
    @end
    require 'googleauth'
    require 'google/apis/{@apiName}_{@apiVersion}'
    require 'json'

    service = Google::Apis::{@ApiName}{@ApiVersion}::{@context.getServiceName}Service.new

    @switch authType
    @case "APPLICATION_DEFAULT_CREDENTIALS"
      @# Use Application Default Credentials for authentication when running locally.
      @# For more information, see:
      @# https://developers.google.com/identity/protocols/application-default-credentials
      service.authorization = {@"\"}
          Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])
    @case "OAUTH_3L"
      @# {@TODO()} Change placeholder below to get authentication credentials.
      @let authInstructionsUrl = apiaryConfig.getAuthInstructionsUrl
        @if authInstructionsUrl
          @# See: {@authInstructionsUrl}
        @end
      @end
      @if context.hasAuthScopes(method)
        @let methodName = context.getMethodName(method)
          @#
          @# To use the `{@methodName}` method, authorize using one of the following scopes:
          @join scope : context.getAuthScopes(method)
            @#   {@scope}
          @end
        @end
      @end
      service.authorization = nil
    @case "API_KEY"
      @# {@TODO()} Change placeholder below to desired API key:
      service.key = '{MY-API-KEY}'
    @end
    {@BREAK}
  @end
  {@initialize(method)}
  @# Perform the call
  @if context.isPageStreaming(method)
    {@iterableCall(method)}
  @else
    {@compactCall(method)}
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
       signatureType = context.getApiaryConfig.getType(method.getRequestTypeUrl), \
       params = context.getFlatMethodParams(method), \
       apiName = context.getApi.getName, \
       ApiName = context.lowerCamelToUpperCamel(apiName), \
       apiVersion = context.getApiVersion, \
       ApiVersion = context.lowerCamelToUpperCamel(apiVersion)
    @if params

      @if context.isSingleton(params)
        @# {@TODO()} Change placeholder below to desired parameter value for the `{@methodName}` method:
      @else
        @# {@TODO()} Change placeholders below to desired parameter values for the `{@methodName}` method:
      @end

      @join param : params
        @let paramField = context.getField(signatureType, param), \
             paramValue = context.typeDefaultValue(signatureType, paramField), \
             paramSample = context.getDefaultSample(signatureType, paramField), \
             paramDescription = context.getDescription(signatureType.getName, param)
          {@description(paramDescription)}
          @if paramSample
            {@context.getParamName(method, param)} = {@paramValue}  @# {@paramSample}
          @else
            {@context.getParamName(method, param)} = {@paramValue}
          @end

        @end
      @end

    @end
    @if context.hasRequestField(method)

      @let requestBodyType = context.lowerUnderscoreToUpperCamel(context.getRequestTypeName(method))
        {@requestBodyName()} = \
            Google::Apis::{@ApiName}{@ApiVersion}::{@requestBodyType}.new
        @if context.isPatch(method)
          @# {@TODO()} Assign values to desired members of the `{@requestBodyName()}` object to be changed.
        @else
          @# {@TODO()} Assign values to desired members of the `{@requestBodyName()}` object.
        @end

      @end

    @end
    @if context.hasMediaUpload(method)

      @# {@TODO()} Add desired media content for upload. For more information, see:
      @# https://github.com/google/google-api-ruby-client#basic-usage
      @# https://github.com/google/google-api-ruby-client#media


    @end
    @if context.hasMediaDownload(method)

      @# {@TODO()} Specify destination to download media content, if desired. For more information, see:
      @# https://github.com/google/google-api-ruby-client#basic-usage
      @# https://github.com/google/google-api-ruby-client#media


    @end
  @end
@end

@private compactCall(method)
  @if context.isResponseEmpty(method)
    {@methodCall(method)}
  @else
    {@responseName()} = {@methodCall(method)}

    @# {@TODO()} Change code below to process the `{@responseName()}` object:
    {@print(responseName())}
  @end
@end

@private iterableCall(method)
  @let methodName = context.getMethodName(method), \
       responseType = method.getResponseTypeUrl, \
       responseTypeRef = context.getApiaryConfig.getType(responseType), \
       resourceField = context.getFirstRepeatedField(responseTypeRef), \
       resources = resourceField.getName
    {@resources} = service.fetch_all(items: :{@resources}) do |token|
      service.{@methodName}({@arguments(method)}, page_token: token)
    end

    @if context.isMapField(responseTypeRef, resourceField.getName)
      @let keyName = context.keyTypeName(resourceField), \
           valueName = context.valueTypeName(resourceField)
        {@resources}.each do |{@keyName}, {@valueName}|
          @# {@TODO()} Change code below to process each ({@keyName}, {@valueName}) pair:
          {@printEntry(keyName, valueName)}
        end
      @end
    @else
      @let resourceName = context.elementTypeName(resourceField)
        {@resources}.each do |{@resourceName}|
          @# {@TODO()} Change code below to process each `{@resourceName}` resource:
          {@print(resourceName)}
        end
      @end
    @end
  @end
@end

@private methodCall(method)
  service.{@context.getMethodName(method)}({@arguments(method)})
@end

@private arguments(method)
  @let params = context.getFlatMethodParams(method)
    @if context.hasRequestField(method)
      @if params
        {@argumentList(method, params)}, {@requestBodyName()}
      @else
        {@requestBodyName()}
      @end
    @else
      {@argumentList(method, params)}
    @end
  @end
@end

@private argumentList(method, params)
  @join param : params on ", "
    {@context.getParamName(method, param)}
  @end
@end

@private requestBodyName()
  request_body
@end

@private responseName()
  response
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    @# {@line}
  @end
@end

@private printEntry(key, value)
  puts String({@key}) << " => " << JSON.pretty_generate({@value})
@end

@private print(element)
  puts JSON.pretty_generate({@element})
@end
