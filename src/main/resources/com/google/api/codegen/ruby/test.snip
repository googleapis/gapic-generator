@extends "ruby/method_sample.snip"
@extends "ruby/common.snip"
@extends "ruby/initcode.snip"

@snippet generate(apiTest)
  {@header(apiTest.fileHeader)}

  {@helpers()}

  @join testClass : apiTest.testClasses
    describe {@testClass.apiClassName} do
      error = CustomError.new "Test error"
      @join test : testClass.testCases

        describe '{@test.clientMethodName}' do

          @if {@aliasSection(test.initCode.importSection)}
            {@aliasSection(test.mockResponse.initCode.importSection)}

          @end
          {@testCase(test)}

          {@errorTestCase(test)}
        end
      @end
    end
  @end
@end

@private header(fileHeader)
  {@license(fileHeader)}

  {@importList(fileHeader.importSection.standardImports)}

  {@importList(fileHeader.importSection.appImports)}
@end

@private helpers()
  class CustomError < StandardError; end

  class MockGrpcStub
    def initialize(expected_symbol, mock_method)
      @@expected_symbol = expected_symbol
      @@mock_method = mock_method
    end

    def method(symbol)
      return @@mock_method if symbol === @@expected_symbol
      proc do
        raise "The method #{symbol} was unexpectedly called."
      end
    end
  end
@end

@private testCase(test)
  @switch test.grpcStreamingType
  @case "NonStreaming"
    @switch test.clientMethodType
    @case "RequestObjectMethod"
      {@requestObjectTestCase(test)}
    @case "PagedRequestObjectMethod"
    @case "OperationCallableMethod"
    @default
      $unhandled case: {@test.clientMethodType.toString}$
    @end
  @case "ServerStreaming"
  @case "BidiStreaming"
  @default
    $unhandled case: {@test.grpcStreamingType.toString}$
  @end
@end

@private requestObjectTestCase(test)
  it 'invokes {@test.clientMethodName} without error' do
    @# Create request parameters and expected request
    {@initCode(test.initCode)}
    @if test.hasReturnValue

      @# Create expected grpc response
      {@initCode(test.mockResponse.initCode)}
    @end

    @# Mock Grpc layer
    {@mockUnaryRequest(test)}
    mock_stub = MockGrpcStub.new(:{@test.clientMethodName}, mock_method)

    {@test.grpcStubTypeName}.stub(:new, mock_stub) do
      client = {@test.serviceConstructorName}.new

      @# Call method
      {@methodCallWithResponse(test)}

      @# Verify the response
      @if test.hasReturnValue
        assert_equal(expected_response, response)
      @else
        assert_nil(response)
      @end
    end
  end
@end

@private errorTestCase(test)
  it 'invokes {@test.clientMethodName} with error' do
    @# Create request parameters and expected request
    {@initCode(test.initCode)}

    @# Mock Grpc layer
    {@mockUnaryError(test)}
    mock_stub = MockGrpcStub.new(:{@test.clientMethodName}, mock_method)

    {@test.grpcStubTypeName}.stub(:new, mock_stub) do
      client = {@test.serviceConstructorName}.new

      @# Call method
      err = assert_raises Google::Gax::GaxError do
        {@methodCall(test)}
      end

      @# Verify the GaxError wrapped the error raised.
      assert_match(error.message, err.message)
    end
  end
@end

@private mockUnaryRequest(test)
  mock_method = proc do |request|
    @if requestAsserts(test)
      {@requestAsserts(test)}
    @end
    @if test.hasReturnValue
      expected_response
    @else
      nil
    @end
  end
@end

@private mockUnaryError(test)
  mock_method = proc do |request|
    {@requestAsserts(test)}
    raise error
  end
@end

@private requestAsserts(test)
   @join assert : test.asserts
     assert_equal(\
       {@expectedValue(assert)}, \
       request.{@assert.actualValueGetter})
   @end
@end

@private expectedValue(assert)
  @if assert.hasEnumTypeName
    {@assert.enumTypeName}.lookup({@assert.expectedValueIdentifier})
  @else
    {@assert.expectedValueIdentifier}
  @end
@end

@private methodCallWithResponse(test)
  @if @test.initCode.hasManyFieldSettings
    response = client.{@test.clientMethodName}(
      {@multilineArgList(test.initCode.fieldSettings)}
    )
  @else
    response = client.{@test.clientMethodName}({@argList(test.initCode.fieldSettings)})
  @end
@end

@private methodCall(test)
  @if @test.initCode.hasManyFieldSettings
    client.{@test.clientMethodName}(
      {@multilineArgList(test.initCode.fieldSettings)}
    )
  @else
    client.{@test.clientMethodName}({@argList(test.initCode.fieldSettings)})
  @end
@end

@private argList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end

@private multilineArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ",".add(BREAK)
    {@fieldSetting.identifier}
  @end
@end
