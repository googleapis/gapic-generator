@snippet generate(class)
  @# BEFORE RUNNING:
  @# ---------------
  @# 1. If not already done, enable the {@class.apiTitle}
  @#    and check the quota for your project at
  @#    https://console.developers.google.com/apis/api/{@class.apiName}
  @switch class.auth.type
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    @# 2. This sample uses Application Default Credentials for authentication.
    @#    If not already done, install the gcloud CLI from
    @#    https://cloud.google.com/sdk and run
    @#    `gcloud beta auth application-default login`.
    @#    For more information, see
    @#    https://developers.google.com/identity/protocols/application-default-credentials
    @# 3. Install the Ruby client library and Application Default Credentials
    @#    library by running `gem install google-api-client` and
    @#    `gem install googleauth`
  @default
    @# 2. Install the Ruby client library by running `gem install google-api-client`
  @end

  @if class.auth.type == "APPLICATION_DEFAULT_CREDENTIALS"
    require 'googleauth'
  @end
  require '{@class.serviceRequirePath}'

  {@class.serviceVarName} = {@class.serviceTypeNamespace}::{@class.serviceTypeName}.new

  @switch class.auth.type
  @case "NONE"
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    {@class.serviceVarName}.authorization = {@"\"}
        Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

  @case "OAUTH_3L"
    @# TODO: Change placeholder below to generate authentication credentials. See
    @# {@class.auth.instructionsUrl}
    @#
    @if class.auth.isScopesSingular
      @# Authorize using the following scope:
    @else
      @# Authorize using one of the following scopes:
    @end
    @join scope : class.auth.scopes
      @#   '{@scope}'
    @end
    {@class.serviceVarName}.authorization = nil

  @case "API_KEY"
    {@class.serviceVarName}.key = ''  @# TODO: Update placeholder with desired API key.

  @end
  @join field : class.requiredFields if class.requiredFields
    {@field(field)}

  @end
  @join field : class.optionalFields if class.optionalFields
    {@field(field)}

  @end
  @if class.hasRequestBody
    @if class.requestBodyFields
      @join field : class.requestBodyFields
        {@field(field)}

      @end


    @end
    @switch class.methodVerb
    @case "PATCH"
      @# TODO: Assign values to desired members of `{@class.requestBodyVarName}`. Only assigned
      @# members will be changed:
    @case "PUT"
      @# TODO: Assign values to desired members of `{@class.requestBodyVarName}`. All existing
      @# members will be replaced:
    @default
      @# TODO: Assign values to desired members of `{@class.requestBodyVarName}`:
    @end

    {@class.requestBodyVarName} = {@class.serviceTypeNamespace}::{@class.requestBodyTypeName}.new
    @join field : class.requestBodyFields if class.requestBodyFields
      {@class.requestBodyVarName}.{@field.setterFuncName} = {@field.name};
    @end

  @end
  @if class.hasMediaUpload
    @# TODO: Add desired media content for upload. For more information, see
    @# https://github.com/google/google-api-ruby-client#basic-usage
    @# https://github.com/google/google-api-ruby-client#media

  @end
  @if class.hasMediaDownload
    @# TODO: Specify destination to download media content, if desired. For more information, see
    @# https://github.com/google/google-api-ruby-client#basic-usage
    @# https://github.com/google/google-api-ruby-client#media

  @end
  @if class.isPageStreaming
    {@class.pageStreaming.pageVarName} = {@class.serviceVarName}.fetch_all{@fetchParams(class)} do |token|
      @if class.pageStreaming.isResourceSetterInRequestBody
        {@class.requestBodyVarName}.{@class.pageStreaming.pageTokenName} = token
        {@methodCall(class)}({@paramList(class.methodCallFieldVarNames)})
      @else
        @if class.methodCallFieldVarNames
          {@methodCall(class)}({@paramList(class.methodCallFieldVarNames)}, {@class.pageStreaming.pageTokenName}: token)
        @else
          {@methodCall(class)}({@class.pageStreaming.pageTokenName}: token)
        @end
      @end
    end

    @if class.pageStreaming.isResourceMap
      {@class.pageStreaming.pageVarName}.each do |{@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName}|
        @# TODO: Change code below to process each ({@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.resourceValueVarName}) pair:
        puts String({@class.pageStreaming.resourceKeyVarName}) + " => " + {@class.pageStreaming.resourceValueVarName}.to_json
      end
    @else
      # We don't handle non-repeated page streaming resources separately in Ruby
      # because the fetch_all treats them correctly.
      {@class.pageStreaming.pageVarName}.each do |{@class.pageStreaming.resourceVarName}|
        @# TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
        puts {@class.pageStreaming.resourceVarName}.to_json
      end
    @end
  @else
    @if class.hasResponse
      {@class.responseVarName} = {@methodCall(class)}({@paramList(class.methodCallFieldVarNames)})

      @# TODO: Change code below to process the `{@class.responseVarName}` object:
      puts {@class.responseVarName}.to_json
    @else
      {@methodCall(class)}({@paramList(class.methodCallFieldVarNames)})
    @end
  @end
@end

@private field(field)
  @if field.description
    @join line : util.getDocLines(field.description, 100)
      @# {@line}
    @end


  @end
  {@field.name} = {@field.defaultValue}  @# TODO: Update placeholder value.
  @if field.example
    @# {@field.example}
  @end
@end

@private methodCall(class)
  {@class.serviceVarName}.{@callChain(class.methodNameComponents)}
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end

@private paramList(params)
  @join param : params on ", "
    {@param}
  @end
@end

@private paramGroup(paramsList, param)
  @if paramsList
    @if param
      ({@paramsList}, {@param})
    @else
      ({@paramsList})
    @end
  @else
    @if param
      ({@param})
    @end
  @end
@end

@private namedParam(name, value)
  @if value
    {@name}: :{@value}
  @end
@end

@private fetchParams(class)
  {@paramGroup( \
      namedParam("items", class.pageStreaming.resourceFieldName), \
      namedParam("response_page_token", class.pageStreaming.nextPageTokenName) \
      )}
@end
