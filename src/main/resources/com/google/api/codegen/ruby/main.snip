@extends "ruby/common.snip"

@snippet generateFilename(service)
  {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.rb
@end

@snippet generateClass(service)
  {@licenseSection(service)}

  {@importSection(service)}

  {@serviceClass(service)}
@end

@private licenseSection(service)
  @# Copyright 2016 Google Inc. All rights reserved.
  @#
  @# Licensed under the Apache License, Version 2.0 (the "License");
  @# you may not use this file except in compliance with the License.
  @# You may obtain a copy of the License at
  @#
  @# http://www.apache.org/licenses/LICENSE-2.0
  @#
  @# Unless required by applicable law or agreed to in writing, software
  @# distributed under the License is distributed on an "AS IS" BASIS,
  @# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  @# See the License for the specific language governing permissions and
  @# limitations under the License.
  @#
  @# EDITING INSTRUCTIONS
  @# This file was generated from the file
  @# https://github.com/googleapis/googleapis/blob/master/{@service.getFile().getSimpleName()},
  @# and updates to that file get reflected here through a refresh process.
  @# For the short term, the refresh process will only be runnable by Google
  @# engineers.
  @#
  @# The only allowed edits are to method and file documentation. A 3-way
  @# merge preserves those additions if the generated source changes.
@end

@private importSection(service)
  require 'json'
  require 'pathname'

  require 'google/gax'
  require '{@context.getGrpcFilename(service)}'
@end

@private serviceClass(service)
  @let body = serviceClassBody(service)
    {@module(context.getApiModules().iterator, body) }
  @end
@end

@private serviceClassBody(service)
  @let path_templates = {@pathTemplateSection(service)}, \
       documentation = {@comments(context.defaultComments(service))}
    @if documentation
      {@documentation}
      @#

    @end
    @# @@!attribute [r] stub
    @#   @@return [{@context.rubyTypeNameForProtoElement(service)}::Stub]
    class {@context.getApiWrapperName(service)}
      attr_reader :stub

      {@constantSection(service)}
      @if path_templates
        {@path_templates}
      @end

      {@initMethodSection(service)}

      {@serviceMethodsSection(service)}
    end
  @end
@end

@private constantSection(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    @# The default address of the service.
    SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}'.freeze

    @# The default port of the service.
    DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()}

    CODE_GEN_NAME_VERSION = 'gapic/0.1.0'.freeze

    DEFAULT_TIMEOUT = 30
    @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)

      PAGE_DESCRIPTORS = {
        @join method : context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods) on {@", "}.add(BREAK)
          @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
               requestToken = pageStreaming.getRequestTokenField().getSimpleName(), \
               responseToken = pageStreaming.getResponseTokenField().getSimpleName(), \
               resources = pageStreaming.getResourcesField().getSimpleName(), \
               methodName = context.upperCamelToLowerUnderscore(method.getSimpleName)
            '{@methodName}' => Google::Gax::PageDescriptor.new(
              '{@requestToken}',
              '{@responseToken}',
              '{@resources}')
          @end
        @end
      }.freeze

      private_constant :PAGE_DESCRIPTORS
    @end
    @if context.messages.filterBundlingMethods(ifaceConfig, service.getMethods)

      BUNDLE_DESCRIPTORS = {
        @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
          @join method : context.messages.filterBundlingMethods(ifaceConfig, service.getMethods) on {@", "}.add(BREAK)
            @let bundling = ifaceConfig.getMethodConfig(method).getBundling(), \
                 methodName = context.upperCamelToLowerUnderscore(method.getSimpleName)
              '{@methodName}' => Google::Gax::BundleDescriptor.new(
                {@bundleDescriptorBody(bundling, method)})
            @end
          @end
        @end
      }.freeze

      private_constant :BUNDLE_DESCRIPTORS
    @end

    @# The scopes needed to make gRPC calls to all of the methods defined in
    @# this service.
    ALL_SCOPES = [
      @join auth_scope : context.getServiceConfig.getAuthScopes(service) on ",".add(BREAK)
        '{@auth_scope}'
      @end
    ].freeze
  @end
@end

@private constructDefaults(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
       jsonBaseName = {@context.upperCamelToLowerUnderscore(service.getSimpleName)}
    client_config_file = Pathname.new(__dir__).join(
      '{@jsonBaseName}_client_config.json'
    )
    defaults = client_config_file.open do |f|
      @if or(context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods), \
             context.messages.filterBundlingMethods(ifaceConfig, service.getMethods))
        Google::Gax.construct_settings(
          '{@service.getFullName}',
          JSON.parse(f.read),
          client_config,
          Google::Gax::Grpc::STATUS_CODE_NAMES,
          timeout,
          @if context.messages.filterBundlingMethods(ifaceConfig, service.getMethods)
            @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)
              bundle_descriptors: BUNDLE_DESCRIPTORS,
            @else
              bundle_descriptors: BUNDLE_DESCRIPTORS,
            @end
          @end
          @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)
            page_descriptors: PAGE_DESCRIPTORS,
          @end
          errors: Google::Gax::Grpc::API_ERRORS,
          kwargs: headers
        )
      @else
        Google::Gax.construct_settings(
          '{@service.getFullName}',
          JSON.parse(f.read),
          client_config,
          Google::Gax::Grpc::STATUS_CODE_NAMES,
          timeout,
          errors: Google::Gax::Grpc::API_ERRORS,
          kwargs: headers
        )
      @end
    end
  @end
@end

@private initMethodSection(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    @# @@param service_path [String]
    @#   The domain name of the API remote host.
    @# @@param port [Integer]
    @#   The port on which to connect to the remote host.
    @# @@param channel [Channel]
    @#   A Channel object through which to make calls.
    @# @@param chan_creds [Grpc::ChannelCredentials]
    @#   A ChannelCredentials for the setting up the RPC client.
    @# @@param client_config[Hash]
    @#   A Hash for call options for each method. See
    @#   Google::Gax#construct_settings for the structure of
    @#   this data. Falls back to the default config if not specified
    @#   or the specified config is missing data points.
    @# @@param timeout [Numeric]
    @#   The default timeout, in seconds, for calls made through this client.
    @# @@param app_name [String]
    @#   The codename of the calling service.
    @# @@param app_version [String]
    @#   The version of the calling service.
    def initialize(
      service_path: SERVICE_ADDRESS,
      port: DEFAULT_SERVICE_PORT,
      channel: nil,
      chan_creds: nil,
      scopes: ALL_SCOPES,
      client_config: {},
      timeout: DEFAULT_TIMEOUT,
      app_name: 'gax',
      app_version: Google::Gax::VERSION
    )
      google_api_client = "#{app_name}/#{app_version} " @\
        "#{CODE_GEN_NAME_VERSION} ruby/#{RUBY_VERSION}".freeze
      headers = { :'x-goog-api-client' => google_api_client }
      {@constructDefaults(service)}
      @@stub = Google::Gax::Grpc.create_stub(
        service_path,
        port,
        chan_creds: chan_creds,
        channel: channel,
        scopes: scopes,
        &{@context.rubyTypeNameForProtoElement(service)}::Stub.method(:new)
      )

      @join method : service.getMethods
        @let methodName = context.upperCamelToLowerUnderscore(method.getSimpleName())
          @@{@methodName} = Google::Gax.create_api_call(
            @@stub.method(:{@methodName}),
            defaults['{@methodName}']
          )
        @end
      @end
    end
  @end
@end

@private bundleDescriptorBody(bundling, method)
  @let bundledField = bundling.getBundledField().getSimpleName(), \
       discriminatorFields = bundling.getDiscriminatorFields()
    @if {@bundling.hasSubresponseField}
      '{@bundledField}',
      [
        @join fieldSelector : bundling.getDiscriminatorFields() on {@","}.add(BREAK)
          '{@fieldSelector.getParamName}'
        @end
      ],
      subresponse_field: '{@bundling.getSubresponseField().getSimpleName()}'
    @else
      '{@bundledField}',
      [
        @join fieldSelector : bundling.getDiscriminatorFields() on {@","}.add(BREAK)
          '{@fieldSelector.getParamName}'
        @end
      ]
    @end
  @end
@end

@private pathTemplateName(collectionConfig)
    {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getEntityName)}_PATH_TEMPLATE
@end

@private pathTemplateSection(service)
  @if context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

      {@pathTemplateName(collectionConfig)} = Google::Gax::PathTemplate.new(
        '{@collectionConfig.getNamePattern}'
      )

      private_constant :{@pathTemplateName(collectionConfig)}
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

      {@createResourceFunction(collectionConfig)}
    @end
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

        {@createMatchFunctions(collectionConfig)}
    @end
  @end
@end

@private createResourceFunction(collectionConfig)
  @# Returns a fully-qualified {@collectionConfig.getEntityName} resource name string.
  @join param : collectionConfig.getNameTemplate.vars()
    @# @@param {@param} [String]
  @end
  @# @@return [String]
  def self.{@collectionConfig.getEntityName}_path({@createResourceFunctionParams(collectionConfig)})
    {@pathTemplateName(collectionConfig)}.render(
      {@createRenderDictionary(collectionConfig)}
    )
  end
@end

@private createResourceFunctionParams(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    {@param}
  @end
@end

@private createRenderDictionary(collectionConfig)
  @join param: collectionConfig.getNameTemplate.vars() on {@","}.add(BREAK)
    :'{@param}' => {@param}
  @end
@end

@private createMatchFunctions(collectionConfig)
  @join subField : collectionConfig.getNameTemplate.vars() on BREAK.add(BREAK)
    @let fieldPath = resourceName(collectionConfig)
      @# Parses the {@subField} from a {@collectionConfig.getEntityName} resource.
      @# @@param {@fieldPath} [String]
      @# @@return [String]
      def self.match_{@subField}_from_{@fieldPath}({@fieldPath})
        {@pathTemplateName(collectionConfig)}.match({@fieldPath})['{@subField}']
      end
    @end
  @end
@end

@private resourceName(collectionConfig)
  {@collectionConfig.getEntityName}_name
@end
@private comments(commentLines)
  @join comment : commentLines
    @# {@comment}
  @end
@end

@private serviceMethodsSection(service)
  @# Service calls
  @join method : service.getMethods

    {@flattenedMethod(service, method)}
  @end
@end

@private flattenedMethod(service, method)
  @let methodName = context.upperCamelToLowerUnderscore(method.getSimpleName()), \
       inputTypeName = context.rubyTypeName(method.getInputType()), \
       documentation = comments(context.methodComments(method)), \
       methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       requiredParams = methodConfig.getRequiredFields(), \
       optionalParams = methodConfig.getOptionalFields()
    @if documentation
      {@documentation}
    @end

    @if or(requiredParams, optionalParams)
      def {@methodName}(
        @if requiredParams
          @if optionalParams
            {@requiredParameterNames(requiredParams)},
            {@optionalParameterValues(optionalParams)},
          @else
            {@requiredParameterNames(requiredParams)},
          @end
        @else
          {@optionalParameterValues(optionalParams)},
        @end
        options: nil
      )
        @if requiredParams
          req = {@inputTypeName}.new(
            {@namedParameters(requiredParams)}
          )
        @else
          req = {@inputTypeName}.new
        @end
        @join field : optionalParams
          @let paramName = context.wrapIfKeywordOrBuiltIn(field.getSimpleName())
            req.{@field.getSimpleName()} = {@paramName} unless {@paramName}.nil?
          @end
        @end
        @@{@methodName}.call(req, options)
      end
    @else
      def {@methodName}(options: nil)
        req = {@inputTypeName}.new
        @@{@methodName}.call(req, options)
      end
    @end
  @end
@end

@private requiredParameterNames(params)
  @join field : params on ",".add(BREAK)
    {@context.wrapIfKeywordOrBuiltIn({@field.getSimpleName()})}
  @end
@end

@private optionalParameterValues(params)
  @join field : params on ",".add(BREAK)
    {@context.wrapIfKeywordOrBuiltIn(field.getSimpleName)}: nil
  @end
@end

@private namedParameters(params)
  @join field : params on ",".add(BREAK)
    @let paramName = {@field.getSimpleName()}
      {@paramName}: {@context.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
     @end
  @end
@end
