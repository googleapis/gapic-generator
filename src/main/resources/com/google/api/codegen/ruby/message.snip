@extends "ruby/common.snip"

@snippet generate(doc)
  {@license(doc.fileHeader)}

  {@renderDoc(doc.fileHeader.modules.iterator, doc) }

@end

@private renderDoc(moduleNames, doc)
  @if moduleNames.hasNext
    @let moduleName = moduleNames.next
      @if moduleNames.hasNext
      @else
        @##
        @# The `{@doc.packageName}` module provides the following types:
        @#
        @# Class | Description
        @# ----- | -----------
        @join child : doc.elementDocs
          @# {@child.fullyQualifiedType} | {@child.firstLine}
        @end
        @#

      @end
      module {@moduleName}
        {@renderDoc(moduleNames, doc)}
      end
    @end
  @else
    {@documentChildren(doc)}
  @end
@end

@private documentMessage(doc)
  @if doc.lines
    {@toComments(doc.lines)}

  @end
  @if doc.properties
    {@propertyComments(doc.properties)}

  @end
  @if doc.elementDocs
    class {@doc.name}
      {@documentChildren(doc)}
    end
  @else
    class {@doc.name}; end
  @end
@end

@private propertyComments(properties)
  @join prop : properties
    @# @@!attribute [rw] {@prop.paramName}
    @#   @@return [{@prop.typeName}]
    @join line : prop.lines
      @#     {@line}
    @end
  @end
@end

# This documentation actually defines constants, that means loading this documentation
# files cause warnings of redefining constants.
# TODO: add/modify special YARD tag of defining constants, instead of actually defining
# constants in Ruby code.
@private documentEnum(doc)
  @if doc.lines
    {@toComments(doc.lines)}

  @end
  module {@doc.name}
    @join value : doc.values on BREAK.add(BREAK)
      @if value.lines
        {@toComments(value.lines)}

      @end
      {@value.name} = {@value.number}
    @end
  end
@end

@private documentChildren(doc)
  @join child : doc.elementDocs on BREAK.add(BREAK)
    {@documentElement(child)}
  @end
@end

@private documentElement(doc)
  @switch doc.type
  @case "GrpcMessageDocView"
    {@documentMessage(doc)}
  @case "GrpcEnumDocView"
    {@documentEnum(doc)}
  @default
    {@unhandledCase()}
  @end
@end

@private toComments(commentLines)
  @join comment : commentLines
    @# {@comment}
  @end
@end
