@extends "readme.snip"
@extends "ruby/common.snip"
@extends "ruby/method_sample.snip"

@snippet generate(doc)
  @let body = documentChildren(doc)
    {@license(doc.fileHeader)}

    {@modules(doc.modules.iterator, body) }
  @end

@end

@private modules(iterator, content)
  @let module = iterator.next
    @switch module.type
    @case "TocModuleView"
      {@tocModule(module, iterator, content)}
    @case "ReadmeMetadataView"
      {@readmeModule(module, iterator, content)}
    @case "SimpleModuleView"
      {@simpleModule(module, iterator, content)}
    @end
  @end
@end

@private tocModule(module, iterator, content)
  @##
  @# # {@module.fullName} Contents
  @#
  @# | Class | Description |
  @# | ----- | ----------- |
  @join class : module.contents
    @# | [{@class.name}][] | {@class.description} |
  @end
  @#
  @join class : module.contents
    @# [{@class.name}]: {@class.link}
  @end
  @#
  {@simpleModule(module, iterator, content)}
@end

@private readmeModule(module, iterator, content)
  @# rubocop:disable LineLength

  @##
  {@toComments(util.getDocLines(generateReadme(module)))}
  @#
  {@simpleModule(module, iterator, content)}
@end

@private generateReadme(metadata)
  {@readme(metadata, exampleMethods(metadata.exampleMethods), installationLines(metadata))}

  {@loggingText()}
@end

@private exampleMethods(methods)
  @join method : methods on BREAK
    @#### {@method.apiClassName}
    ```rb
    {@sampleCodeWithTopLevelImport(method)}
    ```
  @end
@end

@private simpleModule(module, iterator, content)
  module {@module.moduleName}
    @if iterator.hasNext
      {@modules(iterator, content)}
    @else
      {@content}
    @end
  end
@end

@private documentMessage(doc)
  @if doc.lines
    {@toComments(doc.lines)}

  @end
  @if doc.properties
    {@propertyComments(doc.properties)}

  @end
  @if doc.elementDocs
    class {@doc.name}
      {@documentChildren(doc)}
    end
  @else
    class {@doc.name}; end
  @end
@end

@private propertyComments(properties)
  @join prop : properties
    @# @@!attribute [rw] {@prop.paramName}
    @#   @@return [{@prop.typeName}]
    @join line : prop.lines
      @#     {@line}
    @end
  @end
@end

# This documentation actually defines constants, that means loading this documentation
# files cause warnings of redefining constants.
# TODO: add/modify special YARD tag of defining constants, instead of actually defining
# constants in Ruby code.
@private documentEnum(doc)
  @if doc.lines
    {@toComments(doc.lines)}

  @end
  module {@doc.name}
    @join value : doc.values on BREAK.add(BREAK)
      @if value.lines
        {@toComments(value.lines)}

      @end
      {@value.name} = {@value.number}
    @end
  end
@end

@private documentChildren(doc)
  @join child : doc.elementDocs on BREAK.add(BREAK)
    {@documentElement(child)}
  @end
@end

@private documentElement(doc)
  @switch doc.type
  @case "GrpcMessageDocView"
    {@documentMessage(doc)}
  @case "GrpcEnumDocView"
    {@documentEnum(doc)}
  @default
    {@unhandledCase()}
  @end
@end
