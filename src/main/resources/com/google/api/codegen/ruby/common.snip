@extends "common.snip"

@snippet license(fileHeader)
  {@toComments(fileHeader.copyrightLines)}
  @#
  {@toComments(fileHeader.licenseLines)}
@end

@snippet module(moduleNames, content)
  @if moduleNames.hasNext
    module {@moduleNames.next}
      {@module(moduleNames, content)}
    end
  @else
    {@ content}
  @end
@end

@snippet toComments(commentLines)
  {@toComments(commentLines, util.toInt(1))}
@end

@snippet toComments(commentLines, indentWidth)
  @join comment : commentLines
    @#{@util.padding(indentWidth)}{@comment}
  @end
@end

@snippet importList(imports)
  @join import : imports
    require "{@import.moduleName}"
  @end
@end

@snippet initMethodComments()
  @@param credentials [Google::Auth::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
    Provides the means for authenticating requests made by the client. This parameter can
    be many types.
    A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
    authenticating requests made by this client.
    A `String` will be treated as the path to the keyfile to be used for the construction of
    credentials for this client.
    A `Hash` will be treated as the contents of a keyfile to be used for the construction of
    credentials for this client.
    A `GRPC::Core::Channel` will be used to make calls through.
    A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
    should already be composed with a `GRPC::Core::CallCredentials` object.
    A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
    metadata for requests, generally, to give OAuth credentials.
  @@param scopes [Array<String>]
    The OAuth scopes for this service. This parameter is ignored if
    an updater_proc is supplied.
  @@param client_config [Hash]
    A Hash for call options for each method. See
    Google::Gax#construct_settings for the structure of
    this data. Falls back to the default config if not specified
    or the specified config is missing data points.
  @@param timeout [Numeric]
    The default timeout, in seconds, for calls made through this client.
  @@param metadata [Hash]
    Default metadata to be sent with each request. This can be overridden on a per call basis.
  @@param exception_transformer [Proc]
    An optional proc that intercepts any exceptions raised during an API call to inject
    custom error handling.
@end

@snippet installationLines(metadata)
  $ gem install {@metadata.identifier}
@end

@snippet loggingText()
  @## Enabling Logging

  To enable logging for this library, set the logger for the underlying [gRPC](https://github.com/grpc/grpc/tree/master/src/ruby) library.
  The logger that you set may be a Ruby stdlib [`Logger`](https://ruby-doc.org/stdlib-2.5.0/libdoc/logger/rdoc/Logger.html) as shown below,
  or a [`Google::Cloud::Logging::Logger`](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud-logging/latest/google/cloud/logging/logger)
  that will write logs to [Stackdriver Logging](https://cloud.google.com/logging/). See [grpc/logconfig.rb](https://github.com/grpc/grpc/blob/master/src/ruby/lib/grpc/logconfig.rb)
  and the gRPC [spec_helper.rb](https://github.com/grpc/grpc/blob/master/src/ruby/spec/spec_helper.rb) for additional information.

  Configuring a Ruby stdlib logger:

  ```ruby
  require "logger"

  module MyLogger
    LOGGER = Logger.new $stderr, level: Logger::WARN
    def logger
      LOGGER
    end
  end

  @# Define a gRPC module-level logger method before grpc/logconfig.rb loads.
  module GRPC
    extend MyLogger
  end
  ```
@end

@snippet versionText()
  @## Supported Ruby Versions

  This library is supported on Ruby 2.0+.

  However, Ruby 2.3 or later is strongly recommended, as earlier releases have
  reached or are nearing end-of-life. After June 1, 2018, Google will provide
  official support only for Ruby versions that are considered current and
  supported by Ruby Core (that is, Ruby versions that are either in normal
  maintenance or in security maintenance).
  See https://www.ruby-lang.org/en/downloads/branches/ for further details.
@end