@extends "nodejs/method_sample.snip"
@extends "nodejs/common.snip"

@snippet generate(apiTest)
  /*
   {@copyright()}
   */

  {@header(apiTest)}

  @join testClass : apiTest.testClasses
    describe('{@testClass.apiClassName}', function() {
      @join test : testClass.testCases
        {@testCase(test, apiTest.apiWrapperModuleName)}

      @end
    });
  @end

  {@helpers(apiTest)}

@end

@private header(apiTest)
  var assert = require('assert');
  @if apiTest.fileHeader.hasVersion
    var {@apiTest.apiWrapperModuleName} = require('../src/').{@apiTest.fileHeader.version}();
  @else
    var {@apiTest.apiWrapperModuleName} = require('../src/')();
  @end
  @if apiTest.hasGrpcStreaming
    var through2 = require('through2');
  @end

  var FAKE_STATUS_CODE = 1;
  var error = new Error();
  error.code = FAKE_STATUS_CODE;
@end

@private helpers(apiTest)
  function mockSimpleGrpcMethod(expectedRequest, response, error) {
    return function(actualRequest, options, callback) {
      assert.deepStrictEqual(actualRequest, expectedRequest);
      if (error) {
        callback(error);
      } else if (response) {
        callback(null, response);
      } else {
        callback(null);
      }
    };
  }
  @if apiTest.hasServerStreaming

    function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
      return function(actualRequest) {
        assert.deepStrictEqual(actualRequest, expectedRequest);
        var mockStream = through2.obj(function (chunk, enc, callback) {
          if (error) {
            callback(error);
          } else {
            callback(null, response);
          }
        });
        mockStream.write();
        return mockStream;
      };
    }
  @end
  @if apiTest.hasBidiStreaming

    function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
      return function() {
        var mockStream = through2.obj(function (chunk, enc, callback) {
          assert.deepStrictEqual(chunk, expectedRequest);
          if (error) {
            callback(error);
          } else {
            callback(null, response);
          }
        });
        return mockStream;
      }
    }
  @end
  @if apiTest.hasLongRunning

    function mockLongRunningGrpcMethod(expectedRequest, response, error) {
      return function(request) {
        assert.deepStrictEqual(request, expectedRequest);
        var mockOperation = {
          promise: function() {
            return new Promise(function(resolve, reject) {
              if (error) {
                reject(error)
              } else {
                resolve([response]);
              }
            });
          }
        };
        return Promise.resolve([mockOperation]);
      };
    }
  @end
@end

@private testCase(test, moduleName)
  @switch test.grpcStreamingType
  @case "NonStreaming"
    @switch test.clientMethodType
    @case "RequestObjectMethod"
      {@requestObjectTestCase(test, moduleName)}
    @case "PagedRequestObjectMethod"
      {@pagedRequestObjectTestCase(test, moduleName)}
    @case "OperationCallableMethod"
      {@operationTestCase(test, moduleName)}
    @default
      $unhandled case: {@test.clientMethodType.toString}$
    @end
  @case "ServerStreaming"
    {@streamingTestCase(test, moduleName)}
  @case "BidiStreaming"
    {@streamingTestCase(test, moduleName)}
  @default
    $unhandled case: {@test.grpcStreamingType.toString}$
  @end
@end

@private requestObjectTestCase(test, moduleName)
  describe('{@test.clientMethodName}', function() {
    it('invokes {@test.clientMethodName} without error', function(done) {
      {@commonInit(test, moduleName)}

      @if test.hasReturnValue
        // Mock response
        {@initCodeLines(test.mockResponse.initCode)}

      @end
      // Mock Grpc layer
      @if test.hasReturnValue
        client._{@test.clientMethodName} = mockSimpleGrpcMethod(request, expectedResponse);
      @else
        client._{@test.clientMethodName} = mockSimpleGrpcMethod(request);
      @end

      @if test.hasReturnValue
        client.{@test.clientMethodName}(request, function(err, response) {
          assert.ifError(err);
          assert.deepStrictEqual(response, expectedResponse);
          done();
        });
      @else
        client.{@test.clientMethodName}(request, function(err) {
          assert.ifError(err);
          done();
        });
      @end
    });

    {@simpleTestWithError(test, moduleName)}
  });
@end

@private operationTestCase(test, moduleName)
  describe('{@test.clientMethodName}', function() {
    it('invokes {@test.clientMethodName} without error', function(done) {
      {@commonInit(test, moduleName)}

      // Mock response
      {@initCodeLines(test.mockResponse.initCode)}

      // Mock Grpc layer
      client._{@test.clientMethodName} = mockLongRunningGrpcMethod(request, expectedResponse);

      client.{@test.clientMethodName}(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(function(err) {
        done(err);
      });
    });

    it('invokes {@test.clientMethodName} with error', function(done) {
      {@commonInit(test, moduleName)}

      // Mock Grpc layer
      client._{@test.clientMethodName} = mockLongRunningGrpcMethod(request, null, error);

      client.{@test.clientMethodName}(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.fail();
      }).catch(function(err) {
        {@assertError()}
        done();
      });
    });
  });
@end

@private pagedRequestObjectTestCase(test, moduleName)
  describe('{@test.clientMethodName}', function() {
    it('invokes {@test.clientMethodName} without error', function(done) {
      {@commonInit(test, moduleName)}

      // Mock response
      {@initCodeLines(test.mockResponse.initCode)}

      // Mock Grpc layer
      client._{@test.clientMethodName} = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        @join pagedResponse : test.pageStreamingResponseViews
          callback(null, expectedResponse.{@pagedResponse.resourcesFieldGetterName});
        @end
      };

      client.{@test.clientMethodName}(request, function(err, response) {
        assert.ifError(err);
        @join pagedResponse : test.pageStreamingResponseViews
          assert.deepStrictEqual(response, expectedResponse.{@pagedResponse.resourcesFieldGetterName});
        @end
        done();
      });
    });

    {@simpleTestWithError(test, moduleName)}
  });
@end

@private streamingTestCase(test, moduleName)
  describe('{@test.clientMethodName}', function() {
    it('invokes {@test.clientMethodName} without error', function(done) {
      {@commonInit(test, moduleName)}

      // Mock response
      {@initCodeLines(test.mockResponse.initCode)}

      // Mock Grpc layer
      @switch test.grpcStreamingType
      @case "ServerStreaming"
        client._{@test.clientMethodName} = mockServerStreamingGrpcMethod(request, expectedResponse);
      @case "BidiStreaming"
        client._{@test.clientMethodName} = mockBidiStreamingGrpcMethod(request, expectedResponse);
      @end

      @switch test.grpcStreamingType
      @case "ServerStreaming"
        client.{@test.clientMethodName}(request).on('data', function(response) {
          assert.deepStrictEqual(response, expectedResponse);
          done()
        }).on('error', function(err) {
          done(err);
        });
      @case "BidiStreaming"
        var stream = client.{@test.clientMethodName}().on('data', function(response) {
          assert.deepStrictEqual(response, expectedResponse);
          done()
        }).on('error', function(err) {
          done(err);
        });

        stream.write(request);
      @default
        $unhandled case: {@test.grpcStreamingType.toString}$
      @end
    });

    it('invokes {@test.clientMethodName} with error', function(done) {
      {@commonInit(test, moduleName)}

      // Mock Grpc layer
      @switch test.grpcStreamingType
      @case "ServerStreaming"
        client._{@test.clientMethodName} = mockServerStreamingGrpcMethod(request, null, error);
      @case "BidiStreaming"
        client._{@test.clientMethodName} = mockBidiStreamingGrpcMethod(request, null, error);
      @end

      @switch test.grpcStreamingType
      @case "ServerStreaming"
        client.{@test.clientMethodName}(request).on('data', function(response) {
          assert.fail();
        }).on('error', function(err) {
          {@assertError()}
          done();
        });
      @case "BidiStreaming"
        var stream = client.{@test.clientMethodName}().on('data', function(response) {
          assert.fail();
        }).on('error', function(err) {
          {@assertError()}
          done();
        });

        stream.write(request);
      @default
        $unhandled case: {@test.grpcStreamingType.toString}$
      @end
    });
  });
@end

@private simpleTestWithError(test, moduleName)
  it('invokes {@test.clientMethodName} with error', function(done) {
    {@commonInit(test, moduleName)}

    // Mock Grpc layer
    client._{@test.clientMethodName} = mockSimpleGrpcMethod(request, null, error);

    @if test.hasReturnValue
      client.{@test.clientMethodName}(request, function(err, response) {
        {@assertError()}
        done();
      });
    @else
      client.{@test.clientMethodName}(request, function(err) {
        {@assertError()}
        done();
      });
    @end
  });
@end

@private commonInit(test, moduleName)
  var client = {@moduleName}.{@test.serviceConstructorName}();
  // Mock request
  {@initCodeLines(test.initCode)}
@end

@private assertError()
  assert(err instanceof Error);
  assert.equal(err.code, FAKE_STATUS_CODE);
@end
