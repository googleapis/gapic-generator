@snippet generate(class)
  // BEFORE RUNNING:
  // ---------------
  // 1. If not already done, enable the {@class.apiTitle}
  //    and check the quota for your project at
  //    https://console.developers.google.com/apis/api/{@class.apiName}
  @switch class.auth.type
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    // 2. This sample uses Application Default Credentials for authentication.
    //    If not already done, install the gcloud CLI from
    //    https://cloud.google.com/sdk and run
    //    `gcloud beta auth application-default login`.
    //    For more information, see
    //    https://developers.google.com/identity/protocols/application-default-credentials
    // 3. Install the Node.js client library by running
    //    `npm install googleapis --save`
  @default
    // 2. Install the Node.js client library by running
    //    `npm install googleapis --save`
  @end

  var {@class.googleImportVarName} = require('googleapis');
  var {@class.serviceVarName} = {@class.googleImportVarName}.{@class.serviceTypeName}('{@class.apiVersion}');

  @switch class.auth.type
  @case "NONE"
    {@mainFuncBody(class)}
  @case "APPLICATION_DEFAULT_CREDENTIALS"
    {@mainFunc(class)}

    {@authFunc_ADC(class)}
  @case "OAUTH_3L"
    {@mainFunc(class)}

    {@authFunc_OAuth3L(class)}
  @case "API_KEY"
    var {@class.auth.authVarName} = '';  // TODO: Update placeholder with desired API key.

    {@mainFuncBody(class)}
  @end
@end

@private mainFunc(class)
  {@class.auth.authFuncName}(function({@class.auth.authVarName}) {
    {@mainFuncBody(class)}
  });
@end

@private mainFuncBody(class)
  var {@class.requestVarName} = {
    @join field : class.requiredFields if class.requiredFields
      {@field(field)}

    @end
    @join field : class.optionalFields if class.optionalFields
      {@field(field)}

    @end
    @if class.hasRequestBody
      resource: {
        @if class.requestBodyFields
          @join field : class.requestBodyFields
            {@field(field)}

          @end

        @end
        @switch class.methodVerb
        @case "PATCH"
          // TODO: Add desired properties to the request body. Only these properties
          // will be changed.
        @case "PUT"
          // TODO: Add desired properties to the request body. All existing properties
          // will be replaced.
        @default
          // TODO: Add desired properties to the request body.
        @end
      },

    @end
    @if class.hasMediaUpload
      media: {
        // TODO: Add desired media content for upload. See
        // https://github.com/google/google-api-nodejs-client#media-uploads
        mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
        body: '',
      },

    @end
    @if class.hasMediaDownload
      // TODO: To download media content, use:
      //
      // alt: 'media',

    @end
    @if class.auth.type != "NONE"
      auth: {@class.auth.authVarName},
    @end
  };

  @if class.isPageStreaming
    var {@class.pageStreaming.handlePageVarName} = function(err, {@class.responseVarName}) {
      if (err) {
        console.error(err);
        return;
      }

      var {@class.pageStreaming.pageVarName} = {@class.responseVarName}['{@class.pageStreaming.resourceFieldName}'];
      if (!{@class.pageStreaming.pageVarName}) {
        return;
      }
      @if class.pageStreaming.isResourceRepeated
        @if class.pageStreaming.isResourceMap
          Object.keys({@class.pageStreaming.pageVarName}).forEach(function({@class.pageStreaming.resourceKeyVarName}) {
            // TODO: Change code below to process each `{@class.pageStreaming.resourceKeyVarName}` property:
            console.log({@class.pageStreaming.resourceKeyVarName} + ': ' + JSON.stringify({@class.pageStreaming.pageVarName}[{@class.pageStreaming.resourceKeyVarName}], null, 2));
          });
        @else
          for (var i = 0; i < {@class.pageStreaming.pageVarName}.length; i++) {
            // TODO: Change code below to process each resource in `{@class.pageStreaming.pageVarName}`:
            console.log(JSON.stringify({@class.pageStreaming.pageVarName}[i], null, 2));
          }
        @end
      @else
        // TODO: Change code below to process each `{@class.pageStreaming.pageVarName}` resource:
        console.log({@class.pageStreaming.pageVarName});
      @end

      if ({@class.responseVarName}.{@class.pageStreaming.nextPageTokenName}) {
        {@pageToken(class)} = {@class.responseVarName}.{@class.pageStreaming.nextPageTokenName};
        {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@class.requestVarName}, {@class.pageStreaming.handlePageVarName});
      }
    };

    {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@class.requestVarName}, {@class.pageStreaming.handlePageVarName});
  @else
    @if class.hasResponse
      {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@class.requestVarName}, function(err, {@class.responseVarName}) {
        if (err) {
          console.error(err);
          return;
        }

        // TODO: Change code below to process the `{@class.responseVarName}` object:
        console.log(JSON.stringify({@class.responseVarName}, null, 2));
      });
    @else
      {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@class.requestVarName}, function(err) {
        if (err) {
          console.error(err);
          return;
        }
      });
    @end
  @end
@end

@private pageToken(class)
  @if class.pageStreaming.isResourceSetterInRequestBody
    {@class.requestVarName}.resource.{@class.pageStreaming.pageTokenName}
  @else
    {@class.requestVarName}.{@class.pageStreaming.pageTokenName}
  @end
@end

@private authFunc_ADC(class)
  function {@class.auth.authFuncName}(callback) {
    google.auth.getApplicationDefault(function(err, authClient) {
      if (err) {
        console.error('authentication failed: ', err);
        return;
      }
      if ({@class.auth.authVarName}.createScopedRequired && authClient.createScopedRequired()) {
        var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
        authClient = authClient.createScoped(scopes);
      }
      callback(authClient);
    });
  }
@end

@private authFunc_OAuth3L(class)
  function {@class.auth.authFuncName}(callback) {
    // TODO: Change placeholder below to generate authentication credentials. See
    // {@class.auth.instructionsUrl}
    //
    @if class.auth.isScopesSingular
      // Authorize using the following scope:
    @else
      // Authorize using one of the following scopes:
    @end
    @join scope : class.auth.scopes
      //   '{@scope}'
    @end
    var authClient = null;

    if (authClient == null) {
      console.log('authentication failed');
      return;
    }
    callback(authClient);
  }
@end

@private field(field)
  @if field.description
    @join line : util.getDocLines(field.description, 100)
      // {@line}
    @end


  @end
  {@field.name}: {@field.defaultValue},  // TODO: Update placeholder value.
  @if field.example
    // {@field.example}
  @end
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end
