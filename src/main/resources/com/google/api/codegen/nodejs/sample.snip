@snippet generate(sampleClass)
  // BEFORE RUNNING:
  // ---------------
  // 1. If not already done, enable the {@sampleClass.apiTitle}
  //    and check the quota for your project at
  //    https://console.developers.google.com/apis/api/{@sampleClass.apiName}
  // 2. This sample uses Application Default Credentials for authentication.
  //    If not already done, install the gcloud CLI from
  //    https://cloud.google.com/sdk and run
  //    `gcloud beta auth application-default login`
  // 3. Install the Node.js client library by running
  //    `npm install googleapis --save`

  var {@sampleClass.body.googleImportVarName} = require('googleapis');
  var {@sampleClass.body.serviceVarName} = {@sampleClass.body.googleImportVarName}.{@sampleClass.body.serviceTypeName}('{@sampleClass.apiVersion}');

  {@mainFunc(sampleClass.body)}

  {@authFunc(sampleClass.body)}
@end

@private mainFunc(sampleBody)
  {@sampleBody.authFuncName}(function(authClient) {
    var {@sampleBody.requestVarName} = {
      @join field : sampleBody.fields if sampleBody.fields
        @if field.description
          @join line : util.getDocLines(field.description, 100)
            // {@line}
          @end


        @end
        {@field.name}: {@field.defaultValue},  // TODO: Update placeholder value.
        @if field.example
          // {@field.example}
        @end

      @end
      @if sampleBody.hasRequestBody
        resource: {
          // TODO: Add desired properties of the request body.
          @if sampleBody.methodVerb == "PATCH"
            // Only added properties will be changed.
          @end
        },

      @end
      @if sampleBody.hasMediaUpload
        media: {
          // TODO: Add desired media content for upload. See:
          // https://github.com/google/google-api-nodejs-client#media-uploads
          mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
          body: {}
        },

      @end
      @if sampleBody.hasMediaDownload
        // TODO: To download media content, use:
        //
        // alt: 'media',

      @end
      auth: authClient
    };

    @if sampleBody.isPageStreaming
      var {@sampleBody.handlePageVarName} = function(err, {@sampleBody.responseVarName}) {
        if (err) {
          console.log(err);
          return;
        }

        var {@sampleBody.pageVarName} = {@sampleBody.responseVarName}['{@sampleBody.resourceFieldName}'];
        if (!{@sampleBody.pageVarName}) {
          return;
        }
        @if sampleBody.isResourceMap
          Object.keys({@sampleBody.pageVarName}).forEach(function (name) {
            // TODO: Change code below to process each `name` property:
            console.log(name + ': ' + JSON.stringify({@sampleBody.pageVarName}['name'], null, 2));
          });
        @else
          for (var i = 0; i < {@sampleBody.pageVarName}.length; i++) {
            // TODO: Change code below to process each resource in `{@sampleBody.pageVarName}`:
            console.log(JSON.stringify({@sampleBody.pageVarName}[i], null, 2));
          }
        @end

        if ({@sampleBody.responseVarName}.nextPageToken) {
          {@sampleBody.requestVarName}.pageToken = {@sampleBody.responseVarName}.nextPageToken;
          {@sampleBody.serviceVarName}.{@callChain(sampleBody.methodNameComponents)}({@sampleBody.requestVarName}, {@sampleBody.handlePageVarName});
        }
      };

      {@sampleBody.serviceVarName}.{@callChain(sampleBody.methodNameComponents)}({@sampleBody.requestVarName}, {@sampleBody.handlePageVarName});
    @else
      @if sampleBody.hasResponse
        {@sampleBody.serviceVarName}.{@callChain(sampleBody.methodNameComponents)}({@sampleBody.requestVarName}, function(err, {@sampleBody.responseVarName}) {
          if (err) {
            console.log(err);
            return;
          }

          // TODO: Change code below to process the `{@sampleBody.responseVarName}` object:
          console.log(JSON.stringify({@sampleBody.responseVarName}, null, 2));
        });
      @else
        {@sampleBody.serviceVarName}.{@callChain(sampleBody.methodNameComponents)}({@sampleBody.requestVarName}, function(err) {
          if (err) {
            console.log(err);
            return;
          }
        });
      @end
    @end
  });
@end

@private authFunc(sampleBody)
  function {@sampleBody.authFuncName}(callback) {
    google.auth.getApplicationDefault(function(err, authClient)) {
      if (err) {
        console.log('authentication failed: ', err);
        return;
      }
      if (authClient.createScopedRequired && authClient.createScopedRequired()) {
        var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
        authClient = authClient.createScoped(scopes);
      }
      callback(authClient);
    });
  }
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end
