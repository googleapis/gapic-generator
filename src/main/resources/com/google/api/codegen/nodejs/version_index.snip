@extends "nodejs/common.snip"

@snippet generate(index)
  {@header()}

  {@imports(index)}

  {@constants()}

  {@clients(index)}

  {@exports(index)}
@end

@private header()
  /*
   {@copyright()}
   */
  'use strict';
@end

@private imports(index)
  var gapic = {
   {@index.apiVersion}: require('./{@index.apiVersion}'),
  };
@end

@private constants()
   const VERSION = require('../package.json').version;
 @end

@private clients(index)
  @join service : index.requireViews on BREAK.add(BREAK)
    {@client(service, index.apiVersion)}
  @end
@end

@private client(service, version)
   /**
    * Create an {@service.clientName} with additional helpers for common
    * tasks.
    *
    * @@param {Object=} opts - The optional parameters.
    * @@param {String=} opts.servicePath
    *   The domain name of the API remote host.
    * @@param {number=} opts.port
    *   The port on which to connect to the remote host.
    * @@param {grpc.ClientCredentials=} opts.sslCreds
    *   A ClientCredentials for use with an SSL-enabled channel.
    * @@param {Object=} opts.clientConfig
    *   The customized config to build the call settings. See
    *   {@@link gax.constructSettings} for the format.
    */
   function {@service.serviceName}_{@version}(opts) {
     // Define the header options.
     opts = opts || {};
     opts.libName = 'gccl';
     opts.libVersion = VERSION;

     // Create the image annotator client with the provided options.
     var client = gapic.{@version}(opts).{@service.clientName}(opts);
     return client;
   }
@end

@private exports(index)
  @if index.hasMultipleServices
    {@multipleServicesExports(index.requireViews, index.apiVersion)}
  @else
    {@singleServiceExport(index.primaryService, index.apiVersion)}
  @end
@end

@private multipleServicesExports(services, version)
  @join service : services
    module.exports.{@service.serviceName} = {@service.serviceName}_{@version};
  @end

  @join service : services
    module.exports.{@version}.{@service.serviceName} = {@service.serviceName}_{@version};
  @end
@end

@private singleServiceExport(service, version)
  module.exports = {@service.serviceName}_{@version};
  module.exports.{@version} = {@service.serviceName}_{@version};
@end
