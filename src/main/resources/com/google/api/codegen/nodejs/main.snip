@extends "nodejs/common.snip"
@extends "nodejs/method_sample.snip"

@snippet generate(xapi)
  {@header(xapi.fileHeader, xapi.protoFilename)}

  {@serviceClass(xapi)}
@end

@private header(fileHeader, protoFilename)
  /*
   {@comments(fileHeader.copyrightLines)}
   *
   {@comments(fileHeader.licenseLines)}
   {@editingInstructions(protoFilename)}
   */
  /* TODO: introduce line-wrapping so that it never exceeds the limit. */
  /* jscs: disable maximumLineLength */
  'use strict';

  {@importSection(fileHeader.importSection)}
@end

@private importSection(imports)
  {@importGroup(imports.externalImports)}
@end

@private importGroup(group)
  @join import : group
    # Currently there is only one type per import. This will need to be refactored if changed.
    @join type : import.types
      var {@type.nickname} = require('{@import.moduleName}');
    @end
  @end
@end

@private editingInstructions(protoFileName)
   *
   * EDITING INSTRUCTIONS
   * This file was generated from the file
   * https://github.com/googleapis/googleapis/blob/master/{@protoFileName},
   * and updates to that file get reflected here through a refresh process.
   * For the short term, the refresh process will only be runnable by Google
   * engineers.
   *
   * The only allowed edits are to method and file documentation. A 3-way
   * merge preserves those additions if the generated source changes.
@end


@private serviceClass(xapi)
  {@constantSection(xapi)}

  {@constructor(xapi)}

  @if xapi.pathTemplates
    // Path templates

    {@pathTemplateSection(xapi)}
  @end

  /**
   * Get the project ID used by this class.
   * @@param {function(Error, string)} callback - the callback to be called with
   *   the current project Id.
   */
  {@xapi.name}.prototype.getProjectId = function(callback) {
    return this.auth.getProjectId(callback);
  };

  {@serviceMethodsSection(xapi)}

  function {@xapi.name}Builder(gaxGrpc) {
    if (!(this instanceof {@xapi.name }Builder)) {
      return new {@xapi.name}Builder(gaxGrpc);
    }

    @join stub : xapi.stubs on BREAK.add(BREAK)
      var {@stub.grpcClientVariableName} = gaxGrpc.load([{
        @if xapi.isGcloud
          root: require('google-proto-files')('..'),
        @else
          @if xapi.fileHeader.hasVersion
            root: require('path').join(__dirname, '..', '..', 'proto'),
          @else
            root: require('path').join(__dirname, '..', 'proto'),
          @end
        @end
        file: '{@stub.protoFileName}'
      }]);
      extend(this, {@stub.grpcClientVariableName}.{@stub.namespace});
    @end

    @switch xapi.stubs.size.toString
    @case "1"
    @default
      var grpcClients = merge(
        {},
        @join stub : xapi.stubs on ", ".add(BREAK)
          {@stub.grpcClientVariableName}
        @end
      );
    @end

    /**
     * Build a new instance of {@@link {@xapi.name}}.
     *
     * @@param {Object=} opts - The optional parameters.
     * @@param {String=} opts.servicePath
     *   The domain name of the API remote host.
     * @@param {number=} opts.port
     *   The port on which to connect to the remote host.
     * @@param {grpc.ClientCredentials=} opts.sslCreds
     *   A ClientCredentials for use with an SSL-enabled channel.
     * @@param {Object=} opts.clientConfig
     *   The customized config to build the call settings. See
     *   {@@link gax.constructSettings} for the format.
     */
    this.{@xapi.constructorName} = function(opts) {
      return new {@xapi.name}(gaxGrpc, {@clientsParamName(xapi.stubs)}, opts);
    };
    extend(this.{@xapi.constructorName}, {@xapi.name});
  }
  module.exports = {@xapi.name}Builder;
  module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
  module.exports.ALL_SCOPES = ALL_SCOPES;
@end

@private clientsParamName(stubs)
  @switch stubs.size.toString
    @case "1"
      {@stubs.iterator.next.grpcClientVariableName}
    @default
      grpcClients
    @end
@end

@private constantSection(xapi)
  var SERVICE_ADDRESS = '{@xapi.serviceAddress}';

  var DEFAULT_SERVICE_PORT = {@xapi.servicePort};

  var CODE_GEN_NAME_VERSION = 'gapic/{@xapi.packageVersion}';
  @if xapi.hasPageStreamingMethods

    var PAGE_DESCRIPTORS = {
      @join descriptor : xapi.pageStreamingDescriptors on {@", "}.add(BREAK)
        {@descriptor.methodName}: new gax.PageDescriptor(
            '{@descriptor.requestTokenFieldName}',
            '{@descriptor.responseTokenFieldName}',
            '{@descriptor.resourcesFieldName}')
      @end
    };
  @end
  @if xapi.hasGrpcStreamingMethods

    var STREAM_DESCRIPTORS = {
      @join descriptor : xapi.grpcStreamingDescriptors on {@", "}.add(BREAK)
        {@descriptor.methodName}: new gax.StreamDescriptor({@descriptor.streamTypeName})
      @end
    };
  @end

  /**
   * The scopes needed to make gRPC calls to all of the methods defined in
   * this service.
   */
  var ALL_SCOPES = [
    @join auth_scope : xapi.authScopes on ",".add(BREAK)
      '{@auth_scope}'
    @end
  ];
@end

@private constructor(xapi)
  /**
   @if xapi.doc.lines
     {@comments(xapi.doc.lines)}
     *
   @end
   * This will be created through a builder function which can be obtained by the module.
   * See the following example of how to initialize the module and how to access to the builder.
   * @@see {@@link {@xapi.constructorName}}
   *
   * @@example
   @if xapi.fileHeader.hasVersion
     * var {@xapi.fileHeader.localPackageName} = require('{@xapi.fileHeader.packageName()}').{@xapi.fileHeader.version}({
     *   // optional auth parameters.
     * });
   @else
     * var {@xapi.fileHeader.localPackageName} = require('{@xapi.fileHeader.packageName()}')({
     *   // optional auth parameters.
     * });
   @end
   * var client = {@xapi.fileHeader.localPackageName}.{@xapi.constructorName}();
   *
   * @@class
   */
  function {@xapi.name}(gaxGrpc, grpcClients, opts) {
    opts = extend({
      servicePath: SERVICE_ADDRESS,
      port: DEFAULT_SERVICE_PORT,
      clientConfig: {}
    }, opts);

    var googleApiClient = [
      'gl-node/' + process.versions.node
    ];
    if (opts.libName && opts.libVersion) {
      googleApiClient.push(opts.libName + '/' + opts.libVersion);
    }
    googleApiClient.push(
      CODE_GEN_NAME_VERSION,
      'gax/' + gax.version,
      'grpc/' + gaxGrpc.grpcVersion
    );
    @if xapi.hasBatchingMethods

      {@batchingDescriptors(xapi.batchingDescriptors)}
    @end
    @if xapi.hasLongRunningOperations

      {@longrunningSetup(xapi.longRunningDescriptors)}
    @end

    {@constructDefaults(xapi)}

    var self = this;

    this.auth = gaxGrpc.auth;
    @join stub : xapi.stubs on BREAK.add(BREAK)
      var {@stub.name} = gaxGrpc.createStub(
          grpcClients.{@stub.fullyQualifiedType},
          opts);
      var {@stub.stubMethodsArrayName} = [
        @join method : {@stub.methodNames} on {@","}.add(BREAK)
            '{@method}'
        @end
      ];
      {@stub.stubMethodsArrayName}.forEach(function(methodName) {
        self['_' + methodName] = gax.createApiCall(
          {@stub.name}.then(function({@stub.name}) {
            return function() {
              var args = Array.prototype.slice.call(arguments, 0);
              return {@stub.name}[methodName].apply({@stub.name}, args);
            };
          }),
          defaults[methodName],
          {@getDescriptors(xapi)});
      });
    @end
  }
@end

@private batchingDescriptors(descriptors)
  var bundleDescriptors = {
    @join descriptor : descriptors on {@", "}.add(BREAK)
      {@descriptor.methodName}: new gax.BundleDescriptor(
        '{@descriptor.batchedFieldName}',
        [
          @join fieldName : descriptor.discriminatorFieldNames() on {@", "}.add(BREAK)
            '{@fieldName}'
          @end
        ],
        @if descriptor.hasSubresponseField()
          '{@descriptor.subresponseFieldName}',
        @else
          null,
        @end
        {@descriptor.byteLengthFunctionName})
    @end
  };
@end

@private longrunningSetup(descriptors)
  this.operationsClient = new gax.lro({
    auth: gaxGrpc.auth,
    grpc: gaxGrpc.grpc
  }).operationsClient(opts);

  this.longrunningDescriptors = {
    @join descriptor : descriptors on {@", "}.add(BREAK)
      {@descriptor.methodName}: new gax.LongrunningDescriptor(
        this.operationsClient,
        grpcClients.{@descriptor.operationPayloadTypeName}.decode,
        grpcClients.{@descriptor.metadataTypeName}.decode)
    @end
  };
@end

@private constructDefaults(xapi)
  var defaults = gaxGrpc.constructSettings(
      '{@xapi.interfaceKey}',
      configData,
      opts.clientConfig,
      {'x-goog-api-client': googleApiClient.join(' ')});
@end

@private getDescriptors(xapi)
  @if xapi.validDescriptorsNames
    @join name : xapi.validDescriptorsNames() on {@" || "}
      {@name}[methodName]
    @end
  @else
    null
  @end
@end

@private pathTemplateSection(xapi)
  @join pathTemplate : xapi.pathTemplates on BREAK
    var {@pathTemplate.name} = new gax.PathTemplate(
        '{@pathTemplate.pattern}');

  @end
  @join function : xapi.formatResourceFunctions

    {@createResourceFunction(function, xapi.name)}
  @end

  @join function : xapi.parseResourceFunctions

    {@createMatchFunction(function, xapi.name)}
  @end
@end

@private createResourceFunction(function, apiName)
  /**
   * Returns a fully-qualified {@function.entityName} resource name string.
   @join param : function.resourceIdParams
     * @@param {String} {@param.name}
   @end
   * @@returns {String}
   */
  {@apiName}.prototype.{@function.name} = \
  function({@createResourceFunctionParams(function.resourceIdParams)}) {
    return {@function.pathTemplateName}.render({
      {@createRenderDictionary(function.resourceIdParams)}
    });
  };
@end

@private createMatchFunction(function, apiName)
  /**
   * Parses the {@function.entityNameParamName} from a {@function.entityName} resource.
   * @@param {String} {@function.entityNameParamName}
   *   A fully-qualified path representing a {@function.entityName} resources.
   * @@returns {String} - A string representing the {@function.outputResourceId}.
   */
  {@apiName}.prototype.{@function.name} = function({@function.entityNameParamName}) {
    return {@function.pathTemplateName}.match({@function.entityNameParamName}).{@function.outputResourceId};
  };
@end

@private createResourceFunctionParams(resourceIdParams)
  @join param : resourceIdParams on ", "
    {@param.name}
  @end
@end

@private createRenderDictionary(resourceIdParams)
  @join param: resourceIdParams on {@","}.add(BREAK)
    {@param.templateKey}: {@param.name}
  @end
@end

@private serviceMethodsSection(xapi)
  // Service calls
  @join method : xapi.apiMethods

    {@flattenedMethod(method)}
  @end
@end

@private decorateSampleCodeSegment(method)
  @let coreSampleCode = sampleCode(method), \
      finalSampleCode = decorateSampleCode(method, coreSampleCode)
    @if finalSampleCode
      {@finalSampleCode}
    @end
  @end
@end

@private flattenedMethod(method)
  {@methodComments(method)}
  {@method.apiClassName}.prototype.{@method.name} = function({@methodRequestParameters(method)}options{@callbackParams(method)}) {
    @switch method.grpcStreamingType.toString
    @case "ClientStreaming"
      {@handleCallback()}
    @case "NonStreaming"
      {@handleCallback()}
    @default
    @end
    if (options === undefined) {
      options = {};
    }
    {@maybeHandleRequest(method)}
    return this._{@method.name}({@requestObject(method)}options{@callbackParams(method)});
  };
  @switch method.type.toString
  @case "PagedOptionalArrayMethod"

    {@pagedOptionalArrayMethod(method)}
  @default
  @end
@end

@private methodComments(method)
  @let doc = method.doc
    /**
     @if comments(doc.mainDocLines)
       {@comments(doc.mainDocLines)}
       *
     @end
     {@createParamTypesComment(doc.paramDocs)}
     {@createReturnTypeComment(doc.returnTypeName, doc.returnsDocLines)}
     *
     * @@example
     *
     {@comments(util.getDocLines(decorateSampleCodeSegment(method)))}
     */
  @end
@end

@private createParamTypesComment(paramDocs)
  @join doc : paramDocs
    {@paramDoc(doc)}
  @end
@end

@private paramDoc(doc)
  * @@param {{@doc.typeName}} {@doc.paramName}
  @join line : doc.lines
    *   {@line}
  @end
@end

@private createReturnTypeComment(typeName, lines)
  @join line : lines
    * {@line}
  @end
@end

@private pagedOptionalArrayMethod(method)
  /**
   * Equivalent to {@@link {@method.name}}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@@link {@method.name}} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @@see {@@link https://nodejs.org/api/stream.html}
   *
   {@createParamTypesComment(method.doc.paramDocs)}
   * @@return {Stream}
   *   An object stream which emits {@method.doc.pageStreamingResourceTypeName} on 'data' event.
   *
   * @@example
   *
   {@comments(util.getDocLines(decorateSampleCode(method, sampleCodePageStreaming(method))))}
   */
  {@method.apiClassName}.prototype.{@method.name}Stream = function({@methodRequestParameters(method)}options) {
    if (options === undefined) {
      options = {};
    }
    {@maybeHandleRequest(method)}
    return PAGE_DESCRIPTORS.{@method.name}.createStream(this._{@method.name}, {@requestObject(method)}options);
  };
@end

@private handleCallback()
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
@end

@private maybeHandleRequest(method)
  @switch method.grpcStreamingType.toString
  @case "ClientStreaming"
  @case "BidiStreaming"
  @default
    @if and(method.requiredRequestObjectParams.isEmpty, \
            method.optionalRequestObjectParamsNoPageToken.isEmpty)
      if (request === undefined) {
        request = {};
      }
    @end
  @end
@end

@private callbackParams(method)
  @switch method.grpcStreamingType.toString
  @case "ClientStreaming"
    , callback
  @case "NonStreaming"
    , callback
  @default
  @end
@end

@private requestObject(method)
  @switch method.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end

@private methodRequestParameters(method)
  @switch method.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end
