@extends "nodejs/method_sample.snip"

@snippet generateFilename(service)
  {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.js
@end

@snippet generateBody(service)
  {@licenseSection(service)}
  /* TODO: introduce line-wrapping so that it never exceeds the limit. */
  /* jscs: disable maximumLineLength */
  'use strict';

  {@importSection(service)}

  {@serviceClass(service)}
@end

@private licenseSection(service)
  /*
   {@copyright()}
   *
   * EDITING INSTRUCTIONS
   * This file was generated from the file
   * https://github.com/googleapis/googleapis/blob/master/{@service.getFile().getSimpleName()},
   * and updates to that file get reflected here through a refresh process.
   * For the short term, the refresh process will only be runnable by Google
   * engineers.
   *
   * The only allowed edits are to method and file documentation. A 3-way
   * merge preserves those additions if the generated source changes.
   */
@end

@private importSection(service)
  var arguejs = require('arguejs');
  var configData = require('./{@context.upperCamelToLowerUnderscore(service.getSimpleName)}_client_config');
  var extend = require('extend');
  var gax = require('google-gax');
@end

@private serviceClass(service)
  @let path_templates = {@pathTemplateSection(service)}, \
       apiName = context.getApiWrapperName(service)
    {@constantSection(service)}

    {@constructor(service)}
    @if path_templates

      // Path templates
      {@path_templates}
    @end

    {@serviceMethodsSection(service)}

    function {@apiName}Builder(gaxGrpc) {
      if (!(this instanceof {@apiName}Builder)) {
        return new {@apiName}Builder(gaxGrpc);
      }

      @if context.isGcloud
        var grpcClient = gaxGrpc.load([{
          root: require('google-proto-files')('..'),
          file: '{@service.getFile.getLocation.getDisplayString}'
        }]);
      @else
        var grpcClient = require('{@context.grpcClientName(service)}').client;
      @end
      extend(this, grpcClient.{@context.getNamespace(service)});

      /**
       * Build a new instance of {@@link {@apiName}}.
       *
       * @@param {Object=} opts - The optional parameters.
       * @@param {String=} opts.servicePath
       *   The domain name of the API remote host.
       * @@param {number=} opts.port
       *   The port on which to connect to the remote host.
       * @@param {grpc.ClientCredentials=} opts.sslCreds
       *   A ClientCredentials for use with an SSL-enabled channel.
       * @@param {Object=} opts.clientConfig
       *   The customized config to build the call settings. See
       *   {@@link gax.constructSettings} for the format.
       * @@param {number=} opts.timeout
       *   The default timeout, in seconds, for calls made through this client.
       * @@param {number=} opts.appName
       *   The codename of the calling service.
       * @@param {String=} opts.appVersion
       *   The version of the calling service.
       */
      this.{@context.upperCamelToLowerCamel(apiName)} = function(opts) {
        return new {@apiName}(gaxGrpc, grpcClient, opts);
      };
      extend(this.{@context.upperCamelToLowerCamel(apiName)}, {@apiName});
    };
    module.exports = {@apiName}Builder;
    module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
    module.exports.ALL_SCOPES = ALL_SCOPES;
  @end
@end

@private constantSection(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}';

    var DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()};

    var CODE_GEN_NAME_VERSION = 'gapic/0.1.0';

    var DEFAULT_TIMEOUT = 30;
    @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getNonStreamingMethods(service))

      var PAGE_DESCRIPTORS = {
        @join method : context.messages.filterPageStreamingMethods(ifaceConfig, context.getNonStreamingMethods(service)) on {@", "}.add(BREAK)
          @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
               requestToken = pageStreaming.getRequestTokenField().getSimpleName(), \
               responseToken = pageStreaming.getResponseTokenField().getSimpleName(), \
               resources = pageStreaming.getResourcesField().getSimpleName()
              '{@methodName(method)}': new gax.PageDescriptor(
                  '{@requestToken}',
                  '{@responseToken}',
                  '{@resources}')
          @end
        @end
      };
    @end
    @if context.messages.filterBundlingMethods(ifaceConfig, context.getNonStreamingMethods(service))

      var BUNDLE_DESCRIPTORS = {
        @join method : context.messages.filterBundlingMethods(ifaceConfig, context.getNonStreamingMethods(service)) on {@", "}.add(BREAK)
          @let bundling = ifaceConfig.getMethodConfig(method).getBundling()
            '{@methodName(method)}': new gax.BundleDescriptor(
                '{@bundling.getBundledField().getSimpleName()}',
                [
                  @join fieldSelector : bundling.getDiscriminatorFields() on {@", "}.add(BREAK)
                    '{@fieldSelector.getParamName}'
                  @end
                ],
                @if bundling.hasSubresponseField()
                  '{@bundling.getSubresponseField().getSimpleName()}',
                @else
                  null,
                @end
                {@context.getByteLengthFunction(bundling.getBundledField().getType())})
          @end
        @end
      };
    @end

    /**
     * The scopes needed to make gRPC calls to all of the methods defined in
     * this service.
     */
    var ALL_SCOPES = [
      @join auth_scope : context.getServiceConfig.getAuthScopes(service) on ",".add(BREAK)
        '{@auth_scope}'
      @end
    ];
  @end
@end

@private constructDefaults(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var defaults = gaxGrpc.constructSettings(
        '{@service.getFullName}',
        configData,
        clientConfig,
        timeout,
        @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getNonStreamingMethods(service))
          PAGE_DESCRIPTORS,
        @else
          null,
        @end
        @if context.messages.filterBundlingMethods(ifaceConfig, context.getNonStreamingMethods(service))
          BUNDLE_DESCRIPTORS,
        @else
          null,
        @end
        {'x-goog-api-client': googleApiClient});
  @end
@end

@private initExplanations(service)
  This will be created through a builder function within the result of module initialization.
  See the following examples for the
@end

@private constructor(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
       serviceName = context.getApiWrapperName(service), \
       documentation = context.defaultComments(service)
    /**
     @if documentation
       {@comments(documentation)}
       *
     @end
     * This will be created through a builder function which can be obtained by the module.
     * See the following example of how to initialize the module and how to access to the builder.
     * @see {@@link {@serviceName}Builder}
     *
     * @@example
     @let moduleName = context.getModuleName(service)
       @if context.isGcloud
       * var {@moduleName} = require('{@context.getApiConfig().getPackageName()}').{@context.getApiVersion(service)}({
       *   // optional auth parameters.
       * });
       @else
       * var {@moduleName} = require('{@context.getApiConfig().getPackageName()}')({
       *   // optional auth parameters.
       * });
       @end

       * var api = {@moduleName}.{@context.upperCamelToLowerCamel(serviceName)}();
     @end
     *
     * @@class
     */
    function {@serviceName}(gaxGrpc, grpcClient, opts) {
      opts = opts || {};
      var servicePath = opts.servicePath || SERVICE_ADDRESS;
      var port = opts.port || DEFAULT_SERVICE_PORT;
      var sslCreds = opts.sslCreds || null;
      var clientConfig = opts.clientConfig || {};
      var timeout = opts.timeout || DEFAULT_TIMEOUT;
      var appName = opts.appName || 'gax';
      var appVersion = opts.appVersion || gax.Version;

      var googleApiClient = [
        appName + '/' + appVersion,
        CODE_GEN_NAME_VERSION,
        'nodejs/' + process.version].join(' ');

      {@constructDefaults(service)}

      var stub = gaxGrpc.createStub(
          servicePath,
          port,
          grpcClient.{@service.getFullName},
          {sslCreds: sslCreds});
      var methods = [
        @join method : context.getNonStreamingMethods(service) on {@","}.add(BREAK)
          '{@methodName(method)}'
        @end
      ];
      methods.forEach(function(methodName) {
        this['_' + methodName] = gax.createApiCall(
            stub.then(function(stub) { return stub[methodName].bind(stub); }),
            defaults[methodName]);
      }.bind(this));
    }
  @end
@end

@private pathTemplateName(collectionConfig)
  {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getEntityName)}_PATH_TEMPLATE
@end

@private pathTemplateSection(service)
  @if context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

      var {@pathTemplateName(collectionConfig)} = new gax.PathTemplate(
          '{@collectionConfig.getNamePattern}');
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

      {@createResourceFunction(service, collectionConfig)}

      {@createMatchFunctions(service, collectionConfig)}
    @end
  @end
@end

@private createResourceFunction(service, collectionConfig)
  /**
   * Returns a fully-qualified {@collectionConfig.getEntityName} resource name string.
   @join param : collectionConfig.getNameTemplate.vars()
     * @@param {String} {@param}
   @end
   * @@returns {String}
   */
  {@context.getApiWrapperName(service)}.prototype.{@resourceFunctionName(collectionConfig)} = \
  function {@resourceFunctionName(collectionConfig)}({@createResourceFunctionParams(collectionConfig)}) {
    return {@pathTemplateName(collectionConfig)}.render({
      {@createRenderDictionary(collectionConfig)}
    });
  };
@end

@private createMatchFunctions(service, collectionConfig)
  @join subField : collectionConfig.getNameTemplate.vars() on BREAK.add(BREAK)
    @let fieldPath = resourceName(collectionConfig), \
         fieldParam = context.upperCamelToLowerCamel(fieldPath), \
         subFieldUpper = context.lowerUnderscoreToUpperCamel(subField)
      /**
       * Parses the {@fieldParam} from a {@collectionConfig.getEntityName} resource.
       * @@param {String} {@fieldParam}
       *   A fully-qualified path representing a {@collectionConfig.getEntityName} resources.
       * @@returns {String} - A string representing the {@subField}.
       */
      {@context.getApiWrapperName(service)}.prototype.match{@subFieldUpper}From{@fieldPath} =
          function match{@subFieldUpper}From{@fieldPath}({@fieldParam}) {
        return {@pathTemplateName(collectionConfig)}.match({@fieldParam}).{@subField};
      };
    @end
  @end
@end

@private resourceFunctionName(collectionConfig)
  {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)}Path
@end

@private resourceName(collectionConfig)
  {@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}Name
@end

@private createResourceFunctionParams(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    {@param}
  @end
@end

@private createRenderDictionary(collectionConfig)
  @join param: collectionConfig.getNameTemplate.vars() on {@","}.add(BREAK)
    '{@param}': {@param}
  @end
@end

@private serviceMethodsSection(service)
  // Service calls
  @join method : context.getNonStreamingMethods(service)

    {@flattenedMethod(service, method)}
  @end
@end

@private methodName(method)
  {@context.upperCamelToLowerCamel(method.getSimpleName())}
@end

@private decorateSampleCodeSegment(service, method)
  @let apiMethod = context.getApiMethodView(service, method), \
       coreSampleCode = sampleCode(apiMethod), \
       finalSampleCode = decorateSampleCode(apiMethod, coreSampleCode)
       @if finalSampleCode
         {@finalSampleCode}
       @end
  @end
@end

@private flattenedMethod(service, method)
  @let serviceName = context.getApiWrapperName(service), \
       documentation = comments(context.methodComments(method)), \
       methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       requiredParams = methodConfig.getRequiredFields(), \
       optionalParams = context.removePageTokenFromFields(methodConfig.getOptionalFields(), methodConfig)
    @if documentation
      /**
       {@documentation}
       *
       * @@example
       *
       @join sampleLine : util.getDocLines({@decorateSampleCodeSegment(service, method)})
         {@""}* {@sampleLine}
       @end
       */
    @end

    {@serviceName}.prototype.{@methodName(method)} = function {@methodName(method)}() {
      var args = arguejs({
        @if requiredParams
          {@requiredParameterDefs(requiredParams)},
        @end
        @if optionalParams
          otherArgs: [Object, {}],
        @end
        options: [gax.CallOptions],
        callback: [Function]
      }, arguments);
      var req = {
        @join field : requiredParams on ",".add(BREAK)
          {@field.getSimpleName}: args.{@fieldParameterName(field)}
        @end
      };
      @join field : optionalParams
        @let paramName = fieldParameterName(field)
          if ('{@paramName}' in args.otherArgs) {
            req.{@field.getSimpleName} = args.otherArgs.{@paramName};
          }
        @end
      @end
      return this._{@methodName(method)}(req, args.options, args.callback);
    };
  @end
@end

@private fieldParameterName(field)
  {@context.wrapIfKeywordOrBuiltIn(context.lowerUnderscoreToLowerCamel(field.getSimpleName))}
@end

@private requiredParameterDefs(params)
  @join field : params on ",".add(BREAK)
    {@fieldParameterName(field)}: {@context.getFieldType(field)}
  @end
@end
