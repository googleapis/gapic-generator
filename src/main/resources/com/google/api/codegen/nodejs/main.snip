@extends "nodejs/method_sample.snip"

@snippet generateFilename(service)
  {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.js
@end

@snippet generateBody(service)
  {@header(context.getFileHeader(service), service.getFile.getSimpleName)}

  {@serviceClass(service)}
@end

@private header(fileHeader, protoFilename)
  /*
   {@comments(fileHeader.copyrightLines)}
   *
   {@comments(fileHeader.licenseLines)}
   {@editingInstructions(protoFilename)}
   */
  /* TODO: introduce line-wrapping so that it never exceeds the limit. */
  /* jscs: disable maximumLineLength */
  'use strict';

  {@importSection(fileHeader.importSection)}
@end

@private importSection(imports)
  {@importGroup(imports.externalImports)}
@end

@private importGroup(group)
  @join import : group
    # Currently there is only one type per import. This will need to be refactored if changed.
    @join type : import.types
      var {@type.nickname} = require('{@import.moduleName}');
    @end
  @end
@end

@private editingInstructions(protoFileName)
   *
   * EDITING INSTRUCTIONS
   * This file was generated from the file
   * https://github.com/googleapis/googleapis/blob/master/{@protoFileName},
   * and updates to that file get reflected here through a refresh process.
   * For the short term, the refresh process will only be runnable by Google
   * engineers.
   *
   * The only allowed edits are to method and file documentation. A 3-way
   * merge preserves those additions if the generated source changes.
@end

@private serviceClass(service)
  @let apiName = context.getApiWrapperName(service)
    {@constantSection(service)}

    {@constructor(service)}
    @if context.getPathTemplates(service)

      // Path templates

      {@pathTemplateSection(service, apiName)}
    @end

    /**
     * Get the project ID used by this class.
     * @@param {function(Error, string)} callback - the callback to be called with
     *   the current project Id.
     */
    {@context.getApiWrapperName(service)}.prototype.getProjectId = function(callback) {
      return this.auth.getProjectId(callback);
    };

    {@serviceMethodsSection(service)}

    function {@apiName}Builder(gaxGrpc) {
      if (!(this instanceof {@apiName}Builder)) {
        return new {@apiName}Builder(gaxGrpc);
      }

      @let stubs = {@context.getStubs(service)}
        @join stub : stubs on BREAK.add(BREAK)
          @if context.isGcloud
            var {@stub.grpcClientVariableName} = gaxGrpc.load([{
              root: require('google-proto-files')('..'),
              file: '{@stub.protoFileName}'
            }]);
          @else
            var {@stub.grpcClientVariableName} = require('{@stub.grpcClientImportName}').client;
          @end

          extend(this, {@stub.grpcClientVariableName}.{@stub.namespace});
        @end


        @switch stubs.size.toString
        @case "1"
        @default
          var grpcClients = merge(
            {},
            @join stub : stubs on ", ".add(BREAK)
              {@stub.grpcClientVariableName}
            @end
          );
        @end

        /**
         * Build a new instance of {@@link {@apiName}}.
         *
         * @@param {Object=} opts - The optional parameters.
         * @@param {String=} opts.servicePath
         *   The domain name of the API remote host.
         * @@param {number=} opts.port
         *   The port on which to connect to the remote host.
         * @@param {grpc.ClientCredentials=} opts.sslCreds
         *   A ClientCredentials for use with an SSL-enabled channel.
         * @@param {Object=} opts.clientConfig
         *   The customized config to build the call settings. See
         *   {@@link gax.constructSettings} for the format.
         */
        this.{@context.upperCamelToLowerCamel(apiName)} = function(opts) {
          return new {@apiName}(gaxGrpc, {@clientsParamName(stubs)}, opts);
        };
        extend(this.{@context.upperCamelToLowerCamel(apiName)}, {@apiName});
      }
    @end
    module.exports = {@apiName}Builder;
    module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
    module.exports.ALL_SCOPES = ALL_SCOPES;
  @end
@end

@private clientsParamName(stubs)
  @switch stubs.size.toString
    @case "1"
      {@stubs.iterator.next.grpcClientVariableName}
    @default
      grpcClients
    @end
@end

@private constantSection(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}';

    var DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()};

    var CODE_GEN_NAME_VERSION = 'gapic/{@context.packageVersion}';
    @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethods(service))

      var PAGE_DESCRIPTORS = {
        @join method : context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethods(service)) on {@", "}.add(BREAK)
          @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
                requestToken = context.propertyName(pageStreaming.getRequestTokenField()), \
                responseToken = context.propertyName(pageStreaming.getResponseTokenField()), \
                resources = context.propertyName(pageStreaming.getResourcesField())
              {@methodName(method)}: new gax.PageDescriptor(
                  '{@requestToken}',
                  '{@responseToken}',
                  '{@resources}')
          @end
        @end
      };
    @end
    @if context.filterStreamingMethods(service)

      var STREAM_DESCRIPTORS = {
        @join method : context.filterStreamingMethods(service) on {@", "}.add(BREAK)
          {@methodName(method)}: new gax.StreamDescriptor({@streamType(method)})
        @end
      };
    @end

    /**
     * The scopes needed to make gRPC calls to all of the methods defined in
     * this service.
     */
    var ALL_SCOPES = [
      @join auth_scope : context.getServiceConfig.getAuthScopes(service) on ",".add(BREAK)
        '{@auth_scope}'
      @end
    ];
  @end
@end

@private streamType(method)
  @if method.getRequestStreaming()
    @if method.getResponseStreaming()
      gax.StreamType.BIDI_STREAMING
    @else
      gax.StreamType.CLIENT_STREAMING
    @end
  @else
    gax.StreamType.SERVER_STREAMING
  @end
@end

@private constructDefaults(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var defaults = gaxGrpc.constructSettings(
        '{@service.getFullName}',
        configData,
        opts.clientConfig,
        {'x-goog-api-client': googleApiClient.join(' ')});
  @end
@end

@private initExplanations(service)
  This will be created through a builder function within the result of module initialization.
  See the following examples for the
@end

@private constructor(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
       serviceName = context.getApiWrapperName(service), \
       documentation = context.defaultComments(service), \
       stubs = context.getStubs(service)
    /**
     @if documentation
       {@comments(documentation)}
       *
     @end
     * This will be created through a builder function which can be obtained by the module.
     * See the following example of how to initialize the module and how to access to the builder.
     * @@see {@@link {@context.upperCamelToLowerCamel(serviceName)}}
     *
     * @@example
     @let moduleName = context.getModuleName(), \
          apiVersion = context.getApiVersion()
       @if apiVersion
         * var {@moduleName} = require('{@context.getRequirePackageName()}').{@context.getApiVersion()}({
         *   // optional auth parameters.
         * });
       @else
         * var {@moduleName} = require('{@context.getRequirePackageName()}')({
         *   // optional auth parameters.
         * });
       @end

       * var client = {@moduleName}.{@context.upperCamelToLowerCamel(serviceName)}();
     @end
     *
     * @@class
     */
    function {@serviceName}(gaxGrpc, grpcClients, opts) {
      opts = extend({
        servicePath: SERVICE_ADDRESS,
        port: DEFAULT_SERVICE_PORT,
        clientConfig: {}
      }, opts);

      var googleApiClient = [
        'gl-node/' + process.versions.node
      ];
      if (opts.libName && opts.libVersion) {
        googleApiClient.push(opts.libName + '/' + opts.libVersion);
      }
      googleApiClient.push(
        CODE_GEN_NAME_VERSION,
        'gax/' + gax.version,
        'grpc/' + gaxGrpc.grpcVersion
      );
      @let methods = context.getSupportedMethods(service), \
           bundlingMethods = context.messages.filterBundlingMethods(ifaceConfig, methods), \
           longrunningMethods = context.messages.filterLongrunningMethods(ifaceConfig, methods)
        @if bundlingMethods

          var bundleDescriptors = {
            @join method : bundlingMethods on {@", "}.add(BREAK)
              @let bundling = ifaceConfig.getMethodConfig(method).getBundling()
                {@methodName(method)}: new gax.BundleDescriptor(
                  '{@bundling.getBundledField().getSimpleName()}',
                  [
                    @join fieldSelector : bundling.getDiscriminatorFields() on {@", "}.add(BREAK)
                      '{@context.fieldSelectorName(fieldSelector)}'
                    @end
                  ],
                  @if bundling.hasSubresponseField()
                    '{@context.propertyName(bundling.getSubresponseField())}',
                  @else
                    null,
                  @end
                  {@context.getByteLengthFunction(service, method, bundling.getBundledField().getType())})
              @end
            @end
          };
        @end

        @if longrunningMethods

          this.operationsClient = new gax.lro({
            auth: gaxGrpc.auth,
            grpc: gaxGrpc.grpc
          }).operationsClient(opts);
          
          this.longrunningDescriptors = {
            @join method : longrunningMethods on {@", "}.add(BREAK)
              @let longrunningConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method).getLongRunningConfig;
                {@methodName(method)}: new gax.LongrunningDescriptor(
                  this.operationsClient,
                  grpcClients.{@longrunningConfig.getReturnType}.decode,
                  grpcClients.{@longrunningConfig.getMetadataType}.decode)
              @end
            @end
          };
        @end
      @end

      {@constructDefaults(service)}

      var self = this;

      this.auth = gaxGrpc.auth;
      @join stub : stubs on BREAK.add(BREAK)
        var {@stub.name} = gaxGrpc.createStub(
            grpcClients.{@stub.fullyQualifiedType},
            opts);
        var {@stub.stubMethodsArrayName} = [
          @join method : {@stub.methodNames} on {@","}.add(BREAK)
              '{@method}'
          @end
        ];
        {@stub.stubMethodsArrayName}.forEach(function(methodName) {
          self['_' + methodName] = gax.createApiCall(
            {@stub.name}.then(function({@stub.name}) {
              return function() {
                var args = Array.prototype.slice.call(arguments, 0);
                return {@stub.name}[methodName].apply({@stub.name}, args);
              };
            }),
            defaults[methodName],
            {@getDescriptors(service)});
        });
      @end
    }
  @end
@end

@private getDescriptors(service)
  @if context.validDescriptorsNames(service)
    @join descriptor : context.validDescriptorsNames(service) on {@" || "}
      {@descriptor}[methodName]
    @end
  @else
    null
  @end
@end

@private pathTemplateSection(service, apiName)
  @join pathTemplate : context.getPathTemplates(service) on BREAK
    var {@pathTemplate.name} = new gax.PathTemplate(
        '{@pathTemplate.pattern}');

  @end
  @join function : context.getFormatResourceFunctions(service)

    {@createResourceFunction(function, apiName)}
  @end

  @join function : context.getParseResourceFunctions(service)

    {@createMatchFunction(function, apiName)}
  @end
@end

@private createResourceFunction(function, apiName)
  /**
   * Returns a fully-qualified {@function.entityName} resource name string.
   @join param : function.resourceIdParams
     * @@param {String} {@param.name}
   @end
   * @@returns {String}
   */
  {@apiName}.prototype.{@function.name} = \
  function({@createResourceFunctionParams(function.resourceIdParams)}) {
    return {@function.pathTemplateName}.render({
      {@createRenderDictionary(function.resourceIdParams)}
    });
  };
@end

@private createMatchFunction(function, apiName)
  /**
   * Parses the {@function.entityNameParamName} from a {@function.entityName} resource.
   * @@param {String} {@function.entityNameParamName}
   *   A fully-qualified path representing a {@function.entityName} resources.
   * @@returns {String} - A string representing the {@function.outputResourceId}.
   */
  {@apiName}.prototype.{@function.name} = function({@function.entityNameParamName}) {
    return {@function.pathTemplateName}.match({@function.entityNameParamName}).{@function.outputResourceId};
  };
@end

@private createResourceFunctionParams(resourceIdParams)
  @join param : resourceIdParams on ", "
    {@param.name}
  @end
@end

@private createRenderDictionary(resourceIdParams)
  @join param: resourceIdParams on {@","}.add(BREAK)
    {@param.templateKey}: {@param.name}
  @end
@end

@private serviceMethodsSection(service)
  // Service calls
  @join method : context.getSupportedMethodsV2(service)

    {@flattenedMethod(service, method)}
  @end
@end

@private methodName(method)
  {@context.upperCamelToLowerCamel(method.getSimpleName())}
@end

@private decorateSampleCodeSegment(apiMethodView)
  @let coreSampleCode = sampleCode(apiMethodView), \
      finalSampleCode = decorateSampleCode(apiMethodView, coreSampleCode)
    @if finalSampleCode
      {@finalSampleCode}
    @end
  @end
@end

@private flattenedMethod(service, method)
  @let serviceName = context.getApiWrapperName(service), \
       methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       requiredParams = methodConfig.getRequiredFields(), \
       optionalParams = context.removePageTokenFromFields(methodConfig.getOptionalFields(), methodConfig), \
       apiMethodView = context.getApiMethodView(service, method)
    {@methodComments(apiMethodView, method, methodConfig)}
    {@serviceName}.prototype.{@methodName(method)} = function({@methodRequestParameters(apiMethodView)}options{@callbackParams(apiMethodView)}) {
      @switch apiMethodView.grpcStreamingType.toString
      @case "ClientStreaming"
        {@handleCallback()}
      @case "NonStreaming"
        {@handleCallback()}
      @default
      @end
      if (options === undefined) {
        options = {};
      }
      {@maybeHandleRequest(apiMethodView)}
      return this._{@methodName(method)}({@requestObject(apiMethodView)}options{@callbackParams(apiMethodView)});
    };
    @switch apiMethodView.type.toString
    @case "PagedOptionalArrayMethod"

      /**
       * Equivalent to {@@link {@methodName(method)}}, but returns a NodeJS Stream object.
       *
       * This fetches the paged responses for {@@link {@methodName(method)}} continuously
       * and invokes the callback registered for 'data' event for each element in the
       * responses.
       *
       * The returned object has 'end' method when no more elements are required.
       *
       * autoPaginate option will be ignored.
       *
       * @@see {@@link https://nodejs.org/api/stream.html}
       *
       {@createParamTypesComment(apiMethodView.doc.paramDocs)}
       * @@return {Stream}
       *   An object stream which emits {@apiMethodView.doc.pageStreamingResourceTypeName} on 'data' event.
       *
       * @@example
       *
       {@comments(util.getDocLines(decorateSampleCode(apiMethodView, sampleCodePageStreaming(apiMethodView))))}
       */
      {@serviceName}.prototype.{@methodName(method)}Stream = function({@methodRequestParameters(apiMethodView)}options) {
        if (options === undefined) {
          options = {};
        }
        {@maybeHandleRequest(apiMethodView)}
        return PAGE_DESCRIPTORS.{@methodName(method)}.createStream(this._{@methodName(method)}, {@requestObject(apiMethodView)}options);
      };
    @default
    @end
  @end
@end

@private methodComments(apiMethodView, method, methodConfig)
  @let doc = apiMethodView.doc
    /**
     @if comments(doc.mainDocLines)
       {@comments(doc.mainDocLines)}
       *
     @end
     {@createParamTypesComment(doc.paramDocs)}
     {@createReturnTypeComment(apiMethodView.doc.returnTypeName, apiMethodView.doc.returnsDocLines)}
     *
     * @@example
     *
     {@comments(util.getDocLines(decorateSampleCodeSegment(apiMethodView)))}
     */
  @end
@end

@private createParamTypesComment(paramDocs)
  @join doc : paramDocs
    {@paramDoc(doc)}
  @end
@end

@private paramDoc(doc)
  * @@param {{@doc.typeName}} {@doc.paramName}
  @join line : doc.lines
    *   {@line}
  @end
@end

@private createReturnTypeComment(typeName, lines)
  @join line : lines
    * {@line}
  @end
@end

@private handleCallback()
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
@end

@private maybeHandleRequest(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ClientStreaming"
  @case "BidiStreaming"
  @default
    @if and(apiMethodView.requiredRequestObjectParams.isEmpty, \
            apiMethodView.optionalRequestObjectParamsNoPageToken.isEmpty)
      if (request === undefined) {
        request = {};
      }
    @end
  @end
@end

@private callbackParams(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ClientStreaming"
    , callback
  @case "NonStreaming"
    , callback
  @default
  @end
@end

@private requestObject(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end

@private methodRequestParameters(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end
