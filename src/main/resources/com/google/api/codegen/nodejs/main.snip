@extends "nodejs/method_sample.snip"

@snippet generateFilename(service)
  {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.js
@end

@snippet generateBody(service)
  {@licenseSection(service)}
  /* TODO: introduce line-wrapping so that it never exceeds the limit. */
  /* jscs: disable maximumLineLength */
  'use strict';

  {@importSection(service)}

  {@serviceClass(service)}
@end

@private licenseSection(service)
  /*
   {@copyright()}
   *
   * EDITING INSTRUCTIONS
   * This file was generated from the file
   * https://github.com/googleapis/googleapis/blob/master/{@service.getFile().getSimpleName()},
   * and updates to that file get reflected here through a refresh process.
   * For the short term, the refresh process will only be runnable by Google
   * engineers.
   *
   * The only allowed edits are to method and file documentation. A 3-way
   * merge preserves those additions if the generated source changes.
   */
@end

@private importSection(service)
  var configData = require('./{@context.upperCamelToLowerUnderscore(service.getSimpleName)}_client_config');
  var extend = require('extend');
  var gax = require('google-gax');
@end

@private serviceClass(service)
  @let path_templates = {@pathTemplateSection(service)}, \
       apiName = context.getApiWrapperName(service)
    {@constantSection(service)}

    {@constructor(service)}
    @if path_templates

      // Path templates
      {@path_templates}
    @end

    {@serviceMethodsSection(service)}

    function {@apiName}Builder(gaxGrpc) {
      if (!(this instanceof {@apiName}Builder)) {
        return new {@apiName}Builder(gaxGrpc);
      }

      @let stubs = {@context.getStubs(service)}
        @join stub : stubs on BREAK.add(BREAK)
          @if context.isGcloud
            var {@stub.grpcClientVariableName} = gaxGrpc.load([{
              root: require('google-proto-files')('..'),
              file: '{@stub.protoFileName}'
            }]);
          @else
            var {@stub.grpcClientVariableName} = require('{@stub.grpcClientImportName}').client;
          @end

          extend(this, {@stub.grpcClientVariableName}.{@stub.namespace});
        @end


        var grpcClients = {
        @join stub : stubs on ",".add(BREAK)
          {@""}  {@stub.grpcClientVariableName}: {@stub.grpcClientVariableName}
        @end
        };
      @end

      /**
       * Build a new instance of {@@link {@apiName}}.
       *
       * @@param {Object=} opts - The optional parameters.
       * @@param {String=} opts.servicePath
       *   The domain name of the API remote host.
       * @@param {number=} opts.port
       *   The port on which to connect to the remote host.
       * @@param {grpc.ClientCredentials=} opts.sslCreds
       *   A ClientCredentials for use with an SSL-enabled channel.
       * @@param {Object=} opts.clientConfig
       *   The customized config to build the call settings. See
       *   {@@link gax.constructSettings} for the format.
       * @@param {number=} opts.appName
       *   The codename of the calling service.
       * @@param {String=} opts.appVersion
       *   The version of the calling service.
       */
      this.{@context.upperCamelToLowerCamel(apiName)} = function(opts) {
        return new {@apiName}(gaxGrpc, grpcClients, opts);
      };
      extend(this.{@context.upperCamelToLowerCamel(apiName)}, {@apiName});
    }
    module.exports = {@apiName}Builder;
    module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
    module.exports.ALL_SCOPES = ALL_SCOPES;
  @end
@end

@private constantSection(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}';

    var DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()};

    var CODE_GEN_NAME_VERSION = 'gapic/0.1.0';
    @if context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethods(service))

      var PAGE_DESCRIPTORS = {
        @join method : context.messages.filterPageStreamingMethods(ifaceConfig, context.getSupportedMethods(service)) on {@", "}.add(BREAK)
          @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
                requestToken = context.propertyName(pageStreaming.getRequestTokenField()), \
                responseToken = context.propertyName(pageStreaming.getResponseTokenField()), \
                resources = context.propertyName(pageStreaming.getResourcesField())
              {@methodName(method)}: new gax.PageDescriptor(
                  '{@requestToken}',
                  '{@responseToken}',
                  '{@resources}')
          @end
        @end
      };
    @end
    @if context.filterStreamingMethods(service)

      var STREAM_DESCRIPTORS = {
        @join method : context.filterStreamingMethods(service) on {@", "}.add(BREAK)
          {@methodName(method)}: new gax.StreamDescriptor({@streamType(method)})
        @end
      };
    @end

    /**
     * The scopes needed to make gRPC calls to all of the methods defined in
     * this service.
     */
    var ALL_SCOPES = [
      @join auth_scope : context.getServiceConfig.getAuthScopes(service) on ",".add(BREAK)
        '{@auth_scope}'
      @end
    ];
  @end
@end

@private streamType(method)
  @if method.getRequestStreaming()
    @if method.getResponseStreaming()
      gax.StreamType.BIDI_STREAMING
    @else
      gax.StreamType.CLIENT_STREAMING
    @end
  @else
    gax.StreamType.SERVER_STREAMING
  @end
@end

@private constructDefaults(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
    var defaults = gaxGrpc.constructSettings(
        '{@service.getFullName}',
        configData,
        clientConfig,
        {'x-goog-api-client': googleApiClient});
  @end
@end

@private initExplanations(service)
  This will be created through a builder function within the result of module initialization.
  See the following examples for the
@end

@private constructor(service)
  @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
       serviceName = context.getApiWrapperName(service), \
       documentation = context.defaultComments(service), \
       stubs = context.getStubs(service)
    /**
     @if documentation
       {@comments(documentation)}
       *
     @end
     * This will be created through a builder function which can be obtained by the module.
     * See the following example of how to initialize the module and how to access to the builder.
     * @@see {@@link {@context.upperCamelToLowerCamel(serviceName)}}
     *
     * @@example
     @let moduleName = context.getModuleName(service)
       @if context.isGcloud
       * var {@moduleName} = require('{@context.getApiConfig().getPackageName()}').{@context.getApiVersion(service)}({
       *   // optional auth parameters.
       * });
       @else
       * var {@moduleName} = require('{@context.getApiConfig().getPackageName()}')({
       *   // optional auth parameters.
       * });
       @end

       * var api = {@moduleName}.{@context.upperCamelToLowerCamel(serviceName)}();
     @end
     *
     * @@class
     */
    function {@serviceName}(gaxGrpc, grpcClients, opts) {
      opts = opts || {};
      var servicePath = opts.servicePath || SERVICE_ADDRESS;
      var port = opts.port || DEFAULT_SERVICE_PORT;
      var sslCreds = opts.sslCreds || null;
      var clientConfig = opts.clientConfig || {};
      var appName = opts.appName || 'gax';
      var appVersion = opts.appVersion || gax.version;

      var googleApiClient = [
        appName + '/' + appVersion,
        CODE_GEN_NAME_VERSION,
        'gax/' + gax.version,
        'nodejs/' + process.version].join(' ');
      @if context.messages.filterBundlingMethods(ifaceConfig, context.getSupportedMethods(service))

        var bundleDescriptors = {
          @join method : context.messages.filterBundlingMethods(ifaceConfig, context.getSupportedMethods(service)) on {@", "}.add(BREAK)
            @let bundling = ifaceConfig.getMethodConfig(method).getBundling()
              {@methodName(method)}: new gax.BundleDescriptor(
                  '{@bundling.getBundledField().getSimpleName()}',
                  [
                    @join fieldSelector : bundling.getDiscriminatorFields() on {@", "}.add(BREAK)
                      '{@context.fieldSelectorName(fieldSelector)}'
                    @end
                  ],
                  @if bundling.hasSubresponseField()
                    '{@context.propertyName(bundling.getSubresponseField())}',
                  @else
                    null,
                  @end
                  {@context.getByteLengthFunction(service, method, bundling.getBundledField().getType())})
            @end
          @end
        };
      @end

      {@constructDefaults(service)}

      @join stub : stubs on BREAK.add(BREAK)
        var {@stub.name} = gaxGrpc.createStub(
            servicePath,
            port,
            grpcClients.{@stub.grpcClientVariableName}.{@stub.fullyQualifiedType},
            {sslCreds: sslCreds});
        var {@stub.stubMethodsArrayName} = [
          @join method : {@stub.methodNames} on {@","}.add(BREAK)
              '{@method}'
          @end
        ];
        {@stub.stubMethodsArrayName}.forEach(function(methodName) {
          this['_' + methodName] = gax.createApiCall(
            {@stub.name}.then(function({@stub.name}) {
              return {@stub.name}[methodName].bind({@stub.name});
            }),
            defaults[methodName],
            {@getDescriptors(service)});
        }.bind(this));
      @end
    }
  @end
@end

@private getDescriptors(service)
  @if context.validDescriptorsNames(service)
    @join descriptor : context.validDescriptorsNames(service) on {@" || "}
      {@descriptor}[methodName]
    @end
  @else
    null
  @end
@end

@private pathTemplateName(collectionConfig)
  {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getEntityName)}_PATH_TEMPLATE
@end

@private pathTemplateSection(service)
  @if context.getApiConfig.getInterfaceConfig(service).getSingleResourceNameConfigs()
    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getSingleResourceNameConfigs()

      var {@pathTemplateName(collectionConfig)} = new gax.PathTemplate(
          '{@collectionConfig.getNamePattern}');
    @end

    @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getSingleResourceNameConfigs()

      {@createResourceFunction(service, collectionConfig)}

      {@createMatchFunctions(service, collectionConfig)}
    @end
  @end
@end

@private createResourceFunction(service, collectionConfig)
  /**
   * Returns a fully-qualified {@collectionConfig.getEntityName} resource name string.
   @join param : collectionConfig.getNameTemplate.vars()
     * @@param {String} {@context.lowerUnderscoreToLowerCamel(param)}
   @end
   * @@returns {String}
   */
  {@context.getApiWrapperName(service)}.prototype.{@resourceFunctionName(collectionConfig)} = \
  function({@createResourceFunctionParams(collectionConfig)}) {
    return {@pathTemplateName(collectionConfig)}.render({
      {@createRenderDictionary(collectionConfig)}
    });
  };
@end

@private createMatchFunctions(service, collectionConfig)
  @join subField : collectionConfig.getNameTemplate.vars() on BREAK.add(BREAK)
    @let fieldPath = resourceName(collectionConfig), \
         fieldParam = context.upperCamelToLowerCamel(fieldPath), \
         subFieldUpper = context.lowerUnderscoreToUpperCamel(subField)
      /**
       * Parses the {@fieldParam} from a {@collectionConfig.getEntityName} resource.
       * @@param {String} {@fieldParam}
       *   A fully-qualified path representing a {@collectionConfig.getEntityName} resources.
       * @@returns {String} - A string representing the {@subField}.
       */
      {@context.getApiWrapperName(service)}.prototype.match{@subFieldUpper}From{@fieldPath} = \
          function({@fieldParam}) {
        return {@pathTemplateName(collectionConfig)}.match({@fieldParam}).{@subField};
      };
    @end
  @end
@end

@private resourceFunctionName(collectionConfig)
  {@context.lowerUnderscoreToLowerCamel(collectionConfig.getEntityName)}Path
@end

@private resourceName(collectionConfig)
  {@context.lowerUnderscoreToUpperCamel(collectionConfig.getEntityName)}Name
@end

@private createResourceFunctionParams(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    {@context.wrapIfKeywordOrBuiltIn(context.lowerUnderscoreToLowerCamel(param))}
  @end
@end

@private createRenderDictionary(collectionConfig)
  @join param: collectionConfig.getNameTemplate.vars() on {@","}.add(BREAK)
    {@param}: {@context.wrapIfKeywordOrBuiltIn(context.lowerUnderscoreToLowerCamel(param))}
  @end
@end

@private serviceMethodsSection(service)
  // Service calls
  @join method : context.getSupportedMethodsV2(service)

    {@flattenedMethod(service, method)}
  @end
@end

@private methodName(method)
  {@context.upperCamelToLowerCamel(method.getSimpleName())}
@end

@private decorateSampleCodeSegment(apiMethodView)
  @let coreSampleCode = sampleCode(apiMethodView), \
      finalSampleCode = decorateSampleCode(apiMethodView, coreSampleCode)
    @if finalSampleCode
      {@finalSampleCode}
    @end
  @end
@end

@private flattenedMethod(service, method)
  @let serviceName = context.getApiWrapperName(service), \
       methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       requiredParams = methodConfig.getRequiredFields(), \
       optionalParams = context.removePageTokenFromFields(methodConfig.getOptionalFields(), methodConfig), \
       apiMethodView = context.getApiMethodView(service, method)
    /**
     @if context.defaultComments(method)
       {@comments(context.defaultComments(method))}
       *
     @end
     {@comments(util.getDocLines(context.paramComments(service, method)))}
     {@comments(util.getDocLines(context.returnTypeComment(method, methodConfig)))}
     *
     * @@example
     *
     {@comments(util.getDocLines(decorateSampleCodeSegment(apiMethodView)))}
     */
    {@serviceName}.prototype.{@methodName(method)} = function({@methodRequestParameters(apiMethodView)}options{@callbackParams(apiMethodView)}) {
      @switch apiMethodView.grpcStreamingType.toString
      @case "ClientStreaming"
        {@handleCallback()}
      @case "NonStreaming"
        {@handleCallback()}
      @default
      @end
      if (options === undefined) {
        options = {};
      }
      {@maybeHandleRequest(apiMethodView)}
      return this._{@methodName(method)}({@requestObject(apiMethodView)}options{@callbackParams(apiMethodView)});
    };
    @switch apiMethodView.type.toString
    @case "PagedOptionalArrayMethod"

      /**
       * Equivalent to {@@link {@methodName(method)}}, but returns a NodeJS Stream object.
       *
       * This fetches the paged responses for {@@link {@methodName(method)}} continuously
       * and invokes the callback registered for 'data' event for each element in the
       * responses.
       *
       * The returned object has 'end' method when no more elements are required.
       *
       * autoPaginate option will be ignored.
       *
       * @@see {@@link https://nodejs.org/api/stream.html}
       *
       {@comments(util.getDocLines(context.paramComments(service, method)))}
       * @@return {Stream}
       *   An object stream which emits {@context.typeDocument(methodConfig.getPageStreaming.getResourcesField.getType)} on 'data' event.
       *
       * @@example
       *
       {@comments(util.getDocLines(decorateSampleCode(apiMethodView, sampleCodePageStreaming(apiMethodView))))}
       */
      {@serviceName}.prototype.{@methodName(method)}Stream = function({@methodRequestParameters(apiMethodView)}options) {
        if (options === undefined) {
          options = {};
        }
        {@maybeHandleRequest(apiMethodView)}
        return PAGE_DESCRIPTORS.{@methodName(method)}.createStream(this._{@methodName(method)}, {@requestObject(apiMethodView)}options);
      };
    @default
    @end
  @end
@end

@private handleCallback()
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
@end

@private maybeHandleRequest(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ClientStreaming"
  @case "BidiStreaming"
  @default
    @if and(apiMethodView.requiredRequestObjectParams.isEmpty, \
            apiMethodView.optionalRequestObjectParamsNoPageToken.isEmpty)
      if (request === undefined) {
        request = {};
      }
    @end
  @end
@end

@private callbackParams(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ClientStreaming"
    , callback
  @case "NonStreaming"
    , callback
  @default
  @end
@end

@private requestObject(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end

@private methodRequestParameters(apiMethodView)
  @switch apiMethodView.grpcStreamingType.toString
  @case "ServerStreaming"
    request, {@""}
  @case "NonStreaming"
    request, {@""}
  @default
  @end
@end
