@extends "nodejs/common.snip"
@extends "nodejs/init_code.snip"

@snippet generate(sampleFile)
  @let apiMethod = sampleFile.libraryMethod
    @let sample = apiMethod.samples.get(0)
      // DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")
      'use strict';

      // [START {@sample.regionTag}]
      // [START {@sample.regionTag}_core]

      {@standaloneSample(apiMethod, sample)}

      // [END {@sample.regionTag}_core]
      // [END {@sample.regionTag}]
      // tslint:disable-next-line:no-any

      @if sample.sampleInitCode.argDefaultParams
        {@processCliArguments(sample)}

      @end
      {@sample.sampleFunctionName}({@argvArgs(sample.sampleInitCode.argDefaultParams)});
    @end
  @end
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSample
#
# FIXME: Replace the following function calls with calls to functions that emit full standalone samples. These stubs have been adapted from method_sample.snip
@snippet standaloneSample(apiMethod, sample)

  @if apiMethod.hasApiVersion
    const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}').{@apiMethod.apiVersion};

  @else
    const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}');

  @end
  function {@sample.sampleFunctionName}({@formalArgs(sample.sampleInitCode.argDefaultParams)}) {
    const client = new {@apiMethod.localPackageName}.{@apiMethod.apiClassName}();
    @switch sample.callingForm
    @case "Request"
      @if apiMethod.hasReturnValue
        {@methodCallSampleCodeWithReturnValue(apiMethod, sample)}
      @else
        {@methodCallSampleCodeWithoutReturnValue(apiMethod, sample)}
      @end
    @case "RequestAsyncPaged"
      {@methodCallSampleCodeForPagedResponse(apiMethod, sample)}
    @case "RequestAsyncPagedAll"
      {@methodCallSampleCodeForPagedResponseIterative(apiMethod, sample)}
    @case "RequestStreamingBidi"
      {@bidiStreamingSampleCode(apiMethod, sample)}
    @case "RequestStreamingClient"
      {@clientStreamingSampleCode(apiMethod, sample)}
    @case "RequestStreamingServer"
      {@initCode(apiMethod, sample.sampleInitCode)}
        {@methodCallSampleCode(apiMethod, sample.sampleInitCode)}.on('data', response => {
            {@processResponse(sample)}
        });
    @case "LongRunningEventEmitter"
      {@methodCallSampleCodeLongrunningEventEmitter(apiMethod, sample)}
    @case "LongRunningPromise"
      {@methodCallSampleCodeLongrunningPromise(apiMethod, sample)}
    @default
      $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
    @end
  }

@end

@private processResponse(sample)
  @if sample.outputs.size == 0
    console.log(response);
  @else
    {@processOutputViews(sample.outputs)}
  @end
@end

@private processCliArguments(sample)
  const argv = require(`yargs`)
    @join param : sample.sampleInitCode.argDefaultParams
      .default('{@param.cliFlagName}', {@renderInitValue(param.initValue)})
    @end
    .argv;
@end

@private formalArgs(sampleArgs)
  @join param : sampleArgs on ", "
    {@param.identifier}
  @end
@end

@private argvArgs(args)
  @join arg : args on ", "
    argv.{@arg.cliFlagName}
  @end
@end

@private methodCallSampleCodeWithReturnValue(apiMethod, sample)
  {@initCode(apiMethod, sample.sampleInitCode)}
  {@methodCallSampleCodePrefix(apiMethod, sample.sampleInitCode)}
    .then(responses => {
      const response = responses[0];
      {@processResponse(sample)}
    })
    .catch(err => {
      console.error(err);
    });
@end

@private methodCallSampleCodeWithoutReturnValue(apiMethod, sample)
  {@initCode(apiMethod, sample.sampleInitCode)}
  {@methodCallSampleCodePrefix(apiMethod, sample.sampleInitCode)}.catch(err => {
    console.error(err);
  });
@end

@private methodCallSampleCodeForPagedResponse(apiMethod, sample)
  // Or obtain the paged response.
  @if initCode(apiMethod, sample.sampleInitCode)
    {@initCode(apiMethod, sample.sampleInitCode)}

  @end

  const options = {autoPaginate: false};
  const callback = responses => {
    // The actual resources in a response.
    const resources = responses[0];
    // The next request if the response shows that there are more responses.
    const nextRequest = responses[1];
    // The actual response object, if necessary.
    // const rawResponse = responses[2];
    for (const resource of resources) {
      {@processResponse(sample)}
    }
    if (nextRequest) {
      // Fetch the next page.
      return client.{@apiMethod.name}(nextRequest, options).then(callback);
    }
  }
  client.{@apiMethod.name}({@sampleMethodCallArgListAndComma(apiMethod, sample.sampleInitCode)}options)
    .then(callback)
    .catch(err => {
      console.error(err);
    });
@end

@private methodCallSampleCodeForPagedResponseIterative(apiMethod, sample)
  // Iterate over all elements.
  @if initCode(apiMethod, sample.sampleInitCode)
    {@initCode(apiMethod, sample.sampleInitCode)}

  @end
  {@methodCallSampleCodePrefix(apiMethod, sample.sampleInitCode)}
    .then(responses => {
      const resources = responses[0];
      for (const resource of resources) {
        {@processResponse(sample)}
      }
    })
    .catch(err => {
      console.error(err);
    });
@end

@snippet bidiStreamingSampleCode(apiMethod, sample)
    const stream = client.{@apiMethod.name}().on('data', response => {
      {@processResponse(sample)}
    });
    {@initCode(apiMethod, sample.sampleInitCode)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@snippet clientStreamingSampleCode(apiMethod, sample)
    const stream = client.{@apiMethod.name}((err, response) => {
      if (err) {
        console.error(err);
        return;
      }
      {@processResponse(sample)}
    });
    {@initCode(apiMethod, sample.sampleInitCode)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private methodCallSampleCodeLongrunningEventEmitter(apiMethod, sample)
  {@initCode(apiMethod, sample.sampleInitCode)}

  // Handle the operation using the event emitter pattern.
  {@methodCallSampleCodePrefix(apiMethod, sample.sampleInitCode)}
    .then(responses => {
      const [operation, initApiResponse] = responses;

      // Adding a listener for the "complete" event starts polling for the
      // completion of the operation.
      operation.on('complete', (result, metadata, finalApiResponse) => {
        {@processResponse(sample)}
      });

      // Adding a listener for the "progress" event causes the callback to be
      // called on any change in metadata when the operation is polled.
      operation.on('progress', (metadata, apiResponse) => {
        // doSomethingWith(metadata)
      });

      // Adding a listener for the "error" event handles any errors found during polling.
      operation.on('error', err => {
        // throw(err);
      });
    })
    .catch(err => {
      console.error(err);
    });
@end

@private methodCallSampleCodeLongrunningPromise(apiMethod, sample)
  {@initCode(apiMethod, sample.sampleInitCode)}

  // Handle the operation using the promise pattern.
  {@methodCallSampleCodePrefix(apiMethod, sample.sampleInitCode)}
    .then(responses => {
      const [operation, initialApiResponse] = responses;

      // Operation@#promise starts polling for the completion of the LRO.
      return operation.promise();
    })
    .then(responses => {
      const result = responses[0];
      const metadata = responses[1];
      const finalApiResponse = responses[2];

      {@processResponse(sample)}
    })
    .catch(err => {
      console.error(err);
    });
@end

@private methodCallSampleCode(apiMethod, init)
    client.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod, init)})
@end

@private methodCallSampleCodePrefix(apiMethod, init)
  @if sampleMethodCallArgList(apiMethod, init)
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod, init)})
  @else
    client.{@apiMethod.name}()
  @end
@end

@private sampleMethodCallArgListAndComma(apiMethod, init)
    @if sampleMethodCallArgList(apiMethod, init)
        {@sampleMethodCallArgList(apiMethod, init)}, {@""}
    @else
    @end
@end

@private sampleMethodCallArgList(apiMethod, init)
  @switch init.fieldSettings.size.toString
  @case "0"
    {}
  @case "1"
    @let field = init.fieldSettings.get(0)
      {{@field.fieldName}: {@field.identifier}}
    @end
  @default
    request
  @end
@end

@private sampleWriteStreamingRequest(apiMethod)
    // Write request objects.
    stream.write(request);
@end

@private processOutputViews(outputViews)
  @join view : outputViews on BREAK
    @switch view.kind
      @case "COMMENT"
        {@processCommentView(view)}
      @case "DEFINE"
        {@processDefineView(view)}
      @case "LOOP"
        {@processLoopView(view)}
      @case "PRINT"
        {@processPrintView(view)}
      @default
        $unhandledResponseForm: {@view}
    @end
  @end
@end

@private processCommentView(view)
  {@lineComments(view.lines)}
@end

@private processDefineView(view)
  const {@view.variableName} = {@variableField(view.reference)};
@end

@private processPrintView(view)
  @if view.args.size == 0
    console.log({@view.format});
  @else
    @if view.format == "%s"
      console.log({@view.args.get(0).formattedName});
    @else
      console.log(`{@view.format}`);
    @end
  @end
@end

@private processLoopView(view)
  for (const {@view.variableName} of {@variableField(view.collection)}) {
    {@processOutputViews(view.body)}
  }
@end


@private variableField(arg)
  {@arg.variable}{@accessor(arg.accessors)}
@end

@private accessor(accessors)
  @join field : accessors on ""
    {@field}
  @end
@end
