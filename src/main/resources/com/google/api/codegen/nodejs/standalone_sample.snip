@extends "nodejs/common.snip"
@extends "nodejs/method_sample.snip"


@snippet generate(sampleFile)
   //// [ This is an auto-generated sample file produced by the gapic-generator. Sample name: "{@sampleFile.className}" ]
   //// STUB standalone sample "{@sampleFile.className}" /////

   // FIXME: Insert here set-up comments that we never want to display in cloudsite. These are seen by users perusing the samples directly in the repository.

  @let apiMethod = sampleFile.libraryMethod
     @let sample = apiMethod.samples.get(0)
       // [START {@sample.regionTag}]

       // FIXME: Insert here boilerplate code not directly related to the method call itself.

       //      calling form: "{@sample.callingForm.toString}"
       //        region tag: "{@sample.regionTag}"
       //         className: "{@sampleFile.className}"
       //          valueSet: "{@sample.valueSet.id}" ("{@sample.valueSet.title}")
       //       description: "{@sample.valueSet.description}"
       //        {@sample.valueSet.parameters}
       //      apiMethod "{@apiMethod.name}" of type "{@apiMethod.type}"

       // [START {@sample.regionTag}_core]

       // FIXME: Insert here code to prepare the request fields, make the call, process the response.

       /*
       {@standaloneSample(apiMethod, sample)}
       */
       // [END {@sample.regionTag}_core]

       // FIXME: Insert here clean-up code.
       // tslint:disable-next-line:no-any
       // [END {@sample.regionTag}]
     @end
   @end
@end

# The structure of this should be parallel to that of method_sample.snip:@incodeSample
#
# FIXME: Replace the following function calls with calls to functions that emit full standalone samples. These stubs have been adapted from method_sample.snip
@snippet standaloneSample(apiMethod, sample)
  @switch sample.callingForm
  @case "Request"
    @if apiMethod.hasReturnValue
      {@methodCallSampleCodeWithReturnValue(apiMethod, sample.initCode, empty())}
    @else
      {@methodCallSampleCodeWithoutReturnValue(apiMethod, sample.initCode, empty())}
    @end
  @case "RequestAsyncPaged"
    {@methodCallSampleCodeForPagedResponse(apiMethod, sample.initCode, empty())}
  @case "RequestAsyncPagedAll"
    {@methodCallSampleCodeForPagedResponseIterative(apiMethod, sample.initCode, empty())}
  @case "RequestStreamingBidi"
    {@bidiStreamingSampleCode(apiMethod, sample.initCode, empty())}
  @case "RequestStreamingClient"
    {@clientStreamingSampleCode(apiMethod, sample.initCode, empty())}
  @case "RequestStreamingServer"
    {@initCode(apiMethod, sample.initCode)}
      {@methodCallSampleCode(apiMethod, sample.initCode)}.on('data', response => {
          // doThingsWith(response)
      });
  @case "LongRunningEventEmitter"
    {@methodCallSampleCodeLongrunningEventEmitter(apiMethod, sample.initCode, empty())}
  @case "LongRunningPromise"
    {@methodCallSampleCodeLongrunningPromise(apiMethod, sample.initCode, empty())}
  @default
    $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end
