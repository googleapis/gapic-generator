@extends "nodejs/common.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
    var api = {@apiMethod.apiModuleName}.{@apiMethod.apiVariableName}();
    {@coreSampleCode}
@end

@snippet sampleCode(apiMethod)
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
        {@optionalArrayMethodSampleCode(apiMethod)}
    @case "PagedOptionalArrayMethod"
        {@initCode(apiMethod)}
        {@pagedOptionalArrayMethodSampleCode(apiMethod)}
    @default
        $unhandledCase: {@apiMethod.type.toString}$
    @end
@end

@private methodCallReturningStream(apiMethod, elementName)
    {@methodCallSampleCode(apiMethod)}.on('data', function({@elementName}) {
        // doThingsWith({@elementName})
    });
@end

@private clientStreamingSampleCode(apiMethod)
    var stream = api.{@apiMethod.name}(function(err, response) {
        if (err) {
            console.error(err);
            return;
        }
        // doThingsWith(response)
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private bidiStreamingSampleCode(apiMethod)
    var stream = api.{@apiMethod.name}().on('data', function(response) {
        // doThingsWith(response);
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private sampleWriteStreamingRequest(apiMethod)
    // Write request objects.
    stream.write(request);
@end

@private optionalArrayMethodSampleCode(apiMethod)
    @switch apiMethod.grpcStreamingType.toString
    @case "ServerStreaming"
        {@initCode(apiMethod)}
        {@methodCallReturningStream(apiMethod, "response")}
    @case "ClientStreaming"
        {@clientStreamingSampleCode(apiMethod)}
    @case "BidiStreaming"
        {@bidiStreamingSampleCode(apiMethod)}
    @case "NonStreaming"
        {@initCode(apiMethod)}
        @if apiMethod.hasReturnValue
            {@methodCallSampleCodeWithReturnValue(apiMethod)};
        @else
            {@methodCallSampleCodeWithoutReturnValue(apiMethod)};
        @end
    @end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod)
    // Iterate over all elements.
    {@methodCallReturningStream(apiMethod, "element")}

    // Or obtain the paged response through the callback.
    {@methodCallSampleCodeForPagedResponse(apiMethod)}
@end

@private methodCallSampleCode(apiMethod)
    api.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod)})
@end

@private methodCallSampleCodeForPagedResponse(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        function callback(err, response, nextPageToken) {
            if (err) {
                console.error(err);
                return;
            }
            // doThingsWith(response)
            if (nextPageToken) {
                // fetch the next page.
                api.{@apiMethod.name}(\
                    {@sampleMethodCallArgList(apiMethod)}, {pageToken: nextPageToken}, callback);
            }
        }
        api.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod)}, {flattenPages: false}, callback);
    @else
        function callback(err, response, nextPageToken) {
            if (err) {
                console.error(err);
                return;
            }
            // doThingsWith(response)
            if (nextPageToken) {
                // fetch the next page.
                api.{@apiMethod.name}({pageToken: nextPageToken}, callback);
            }
        }
        api.{@apiMethod.name}({flattenPages: false}, callback);
    @end
@end

@private methodCallSampleCodeWithReturnValue(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        api.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod)}).then(function(response) {
            // doThingsWith(response)
        }).catch(function(err) {
            console.error(err);
        })
    @else
        api.{@apiMethod.name}().then(function(response) {
            // doThingsWith(response)
        }).catch(function(err) {
            console.error(err);
        })
    @end
@end

@private methodCallSampleCodeWithoutReturnValue(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        api.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod)}).catch(function(err) {
            console.error(err);
        })
    @else
        api.{@apiMethod.name}().catch(function(err) {
            console.error(err);
        })
    @end
@end

@private initCode(apiMethod)
    {@initCodeLines(apiMethod.initCode)}
    @if initializeRequestObject(apiMethod)
        {@initializeRequestObject(apiMethod)}
    @end
@end

@private initCodeLines(initCode)
    @join line : initCode.lines
        @switch line.lineType.toString
        @case "StructureInitLine"
            {@initLineStructure(line)}
        @case "ListInitLine"
            {@initLineList(line)}
        @case "MapInitLine"
            {@initLineMap(line)}
        @case "SimpleInitLine"
            {@initLineSimple(line)}
        @default
            $unhandledCase: {@line.lineType.toString}$
        @end
    @end
@end

@private initLineStructure(line)
    var {@line.identifier} = {
        @join fieldSetting : line.fieldSettings on ",".add(BREAK)
            {@fieldSetting.identifier} : {@fieldSetting.identifier}
        @end
    };
@end

@private initLineList(line)
    var {@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
    @join arg : args on ", "
        {@arg}
    @end
@end

@private initLineMap(line)
    var {@line.identifier} = {{@keyVarList(line.initEntries)}};
@end

@private keyVarList(mapEntries)
    @join mapEntry : mapEntries vertical
        {@mapEntry.key} : {@mapEntry.valueString},
    @end
@end

@private initLineSimple(line)
    var {@line.identifier} = {@renderInitValue(line.initValue)};
@end

@private renderInitValue(initValue)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        api.{@initValue.formatFunctionName}({@varList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end

@private sampleMethodCallArgList(apiMethod)
    @switch apiMethod.requiredRequestObjectParams.size.toString
    @case "0"
        @if apiMethod.optionalRequestObjectParamsNoPageToken.isEmpty
        @else
            {}
        @end
    @case "1"
        @let field = apiMethod.initCode.fieldSettings.get(0)
            {{@field.requestFieldName}: {@field.identifier}}
        @end
    @default
        request
    @end
@end

@private initializeRequestObject(apiMethod)
    @switch apiMethod.requiredRequestObjectParams.size.toString
    @case "0"
    @case "1"
    @default
        var request = {
        @join fieldSetting : apiMethod.initCode.fieldSettings on ", ".add(BREAK)
            {@""}    {@fieldSetting.requestFieldName}: {@fieldSetting.identifier}
        @end
        };
    @end
@end
