@extends "nodejs/common.snip"
@extends "nodejs/init_code.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
    @if apiMethod.hasApiVersion
        const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}');

        const client = new {@apiMethod.localPackageName}.{@apiMethod.apiVersion}.{@apiMethod.apiClassName}({
          // optional auth parameters.
        });

        {@coreSampleCode}
    @else
        {@decorateSampleCodeUnversioned(apiMethod, coreSampleCode)}
    @end
@end

@snippet decorateSampleCodeUnversioned(apiMethod, coreSampleCode)
    const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}');

    const client = {@apiMethod.localPackageName}.{@apiMethod.apiClassName}({
      // optional auth parameters.
    });

    {@coreSampleCode}
@end

@snippet empty()
@end

@snippet incodeSamples(apiMethod, additionalCallback)
    @join sample : apiMethod.samples on BREAK.add(BREAK)
      {@oneIncodeSample(apiMethod, sample, additionalCallback)}
    @end
@end


# The structure of this should be parallel to that of standalone_sample.snip:@standaloneSample
@snippet oneIncodeSample(apiMethod, sample, additionalCallback)
  @switch sample.callingForm
  @case "Request"
    @if apiMethod.hasReturnValue
      {@methodCallSampleCodeWithReturnValue(apiMethod, sample.sampleInitCode, additionalCallback)}
    @else
      {@methodCallSampleCodeWithoutReturnValue(apiMethod, sample.sampleInitCode, additionalCallback)}
    @end
  @case "RequestAsyncPaged"
    {@methodCallSampleCodeForPagedResponse(apiMethod, sample.sampleInitCode, additionalCallback)}
  @case "RequestAsyncPagedAll"
    {@methodCallSampleCodeForPagedResponseIterative(apiMethod, sample.sampleInitCode, additionalCallback)}
  @case "RequestStreamingBidi"
    {@bidiStreamingSampleCode(apiMethod, sample.sampleInitCode, additionalCallback)}
  @case "RequestStreamingClient"
    {@clientStreamingSampleCode(apiMethod, sample.sampleInitCode, additionalCallback)}
  @case "RequestStreamingServer"
    {@initCode(apiMethod, sample.sampleInitCode)}
    {@methodCallSampleCode(apiMethod, sample.sampleInitCode)}.on('data', response => {
      @if additionalCallback
        console.log(response);
        {@additionalCallback}();
      @else
        // doThingsWith(response)
      @end
    });
  @case "LongRunningEventEmitter"
    {@methodCallSampleCodeLongrunningEventEmitter(apiMethod, sample.sampleInitCode, additionalCallback)}
  @case "LongRunningPromise"
    {@methodCallSampleCodeLongrunningPromise(apiMethod, sample.sampleInitCode, additionalCallback)}
  @default
    $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end

@snippet sampleCodePageStreaming(apiMethod, init)
    {@sampleCodePageStreaming(apiMethod, init, empty())}
@end

@snippet sampleCodePageStreaming(apiMethod, init, additionalCallback)
    {@initCode(apiMethod, init)}
    client.{@apiMethod.name}Stream({@sampleMethodCallArgList(apiMethod, init)})
      @if additionalCallback
        .on('data', element => {
          console.log(element);
        })
        .on('error', {@additionalCallback})
        .on('end', {@additionalCallback});
      @else
        .on('data', element => {
          // doThingsWith(element)
        }).on('error', err => {
          console.log(err);
        });
      @end
@end

@snippet clientStreamingSampleCode(apiMethod, init, additionalCallback)
    const stream = client.{@apiMethod.name}((err, response) => {
      @if additionalCallback
        if (err) {
          {@additionalCallback}(err);
          return;
        }
        console.log(response);
        {@additionalCallback}();
      @else
        if (err) {
          console.error(err);
          return;
        }
        // doThingsWith(response)
      @end
    });
    {@initCode(apiMethod, init)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@snippet bidiStreamingSampleCode(apiMethod, init, additionalCallback)
    const stream = client.{@apiMethod.name}().on('data', response => {
      @if additionalCallback
        console.log(response);
        {@additionalCallback}();
      @else
        // doThingsWith(response)
      @end
    });
    {@initCode(apiMethod, init)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private sampleWriteStreamingRequest(apiMethod)
    // Write request objects.
    stream.write(request);
@end

@private optionalArrayMethodSampleCode(apiMethod, init, additionalCallback)
    @switch apiMethod.grpcStreamingType.toString
    @case "ServerStreaming"
      {@initCode(apiMethod, init)}
      {@methodCallSampleCode(apiMethod, init)}.on('data', response => {
        @if additionalCallback
          console.log(response);
          {@additionalCallback}();
        @else
          // doThingsWith(response)
        @end
      });
    @case "ClientStreaming"
      {@clientStreamingSampleCode(apiMethod, init, additionalCallback)}
    @case "BidiStreaming"
      {@bidiStreamingSampleCode(apiMethod, init, additionalCallback)}
    @case "NonStreaming"
      @if apiMethod.hasReturnValue
        {@methodCallSampleCodeWithReturnValue(apiMethod, init, additionalCallback)}
      @else
        {@methodCallSampleCodeWithoutReturnValue(apiMethod, init, additionalCallback)}
      @end
    @end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod, init, additionalCallback)
    {@methodCallSampleCodeForPagedResponseIterative(apiMethod, init, additionalCallback)}

    {@methodCallSampleCodeForPagedResponse(apiMethod, init, additionalCallback)}
@end

@snippet methodCallSampleCode(apiMethod, init)
    client.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod, init)})
@end

@private sampleMethodCallArgListAndComma(apiMethod, init)
    @if sampleMethodCallArgList(apiMethod, init)
        {@sampleMethodCallArgList(apiMethod, init)}, {@""}
    @else
    @end
@end

@snippet methodCallSampleCodeForPagedResponseIterative(apiMethod, init, additionalCallback)
  // Iterate over all elements.
  @if initCode(apiMethod, init)
    {@initCode(apiMethod, init)}

  @end
  {@methodCallSampleCodePrefix(apiMethod, init)}
    .then(responses => {
      const resources = responses[0];
      for (const resource of resources) {
        @if additionalCallback
          console.log(resources[i]);
        @else
          // doThingsWith(resources[i])
        @end
      }
    })
    {@promiseCallbacks(additionalCallback)}
@end

@snippet methodCallSampleCodeForPagedResponse(apiMethod, init, additionalCallback)
    // Or obtain the paged response.
    # TODO(landrito) figure out how to remove this repetition for method samples.
    @if initCode(apiMethod, init)
      {@initCode(apiMethod, init)}

    @end

    const options = {autoPaginate: false};
    const callback = responses => {
      // The actual resources in a response.
      const resources = responses[0];
      // The next request if the response shows that there are more responses.
      const nextRequest = responses[1];
      // The actual response object, if necessary.
      // const rawResponse = responses[2];
      for (const resource of resources) {
        @if additionalCallback
          console.log(resources[i]);
        @else
          // doThingsWith(resources[i]);
        @end
      }
      if (nextRequest) {
        // Fetch the next page.
        return client.{@apiMethod.name}(nextRequest, options).then(callback);
      }
    }
    client.{@apiMethod.name}({@sampleMethodCallArgListAndComma(apiMethod, init)}options)
      .then(callback)
      {@promiseCallbacks(additionalCallback)}
@end

@private methodCallSampleCodePrefix(apiMethod, init)
  @if sampleMethodCallArgList(apiMethod, init)
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod, init)})
  @else
    client.{@apiMethod.name}()
  @end
@end

@snippet methodCallSampleCodeWithReturnValue(apiMethod, init, additionalCallback)
  {@initCode(apiMethod, init)}
  {@methodCallSampleCodePrefix(apiMethod, init)}
    .then(responses => {
      const response = responses[0];
      @if additionalCallback
        console.log(response);
      @else
        // doThingsWith(response)
      @end
    })
    {@promiseCallbacks(additionalCallback)}
@end

@private lroSampleCode(apiMethod, init, additionalCallback)
  # TODO(landrito) figure out how to remove initcode repetition for method samples.
  {@methodCallSampleCodeLongrunningPromise(apiMethod, init, additionalCallback)}

  {@methodCallSampleCodeLongrunningEventEmitter(apiMethod, init, additionalCallback)}
@end

@snippet methodCallSampleCodeLongrunningPromise(apiMethod, init, additionalCallback)
  {@initCode(apiMethod, init)}

  // Handle the operation using the promise pattern.
  {@methodCallSampleCodePrefix(apiMethod, init)}
    .then(responses => {
      const [operation, initialApiResponse] = responses;
      @if additionalCallback
        console.log(operation);
        console.log(initialApiResponse);
      @end

      // Operation@#promise starts polling for the completion of the LRO.
      return operation.promise();
    })
    .then(responses => {
      const result = responses[0];
      const metadata = responses[1];
      const finalApiResponse = responses[2];
      @if additionalCallback

        console.log(result);
        console.log(metadata);
        console.log(finalApiResponse);
      @end
    })
    {@promiseCallbacks(additionalCallback)}
@end

@snippet methodCallSampleCodeLongrunningEventEmitter(apiMethod, init, additionalCallback)
  {@initCode(apiMethod, init)}

  // Handle the operation using the event emitter pattern.
  {@methodCallSampleCodePrefix(apiMethod, init)}
    .then(responses => {
      const [operation, initialApiResponse] = responses;

      // Adding a listener for the "complete" event starts polling for the
      // completion of the operation.
      operation.on('complete', (result, metadata, finalApiResponse) => {
        @if additionalCallback
          console.log(result);
        @else
          // doSomethingWith(result);
        @end
      });

      // Adding a listener for the "progress" event causes the callback to be
      // called on any change in metadata when the operation is polled.
      operation.on('progress', (metadata, apiResponse) => {
        @if additionalCallback
          console.log(metadata);
        @else
          // doSomethingWith(metadata)
        @end
      });

      // Adding a listener for the "error" event handles any errors found during polling.
      operation.on('error', err => {
        // throw(err);
      });
    })
    {@promiseCallbacks(additionalCallback)}
@end

@snippet methodCallSampleCodeWithoutReturnValue(apiMethod, init, additionalCallback)
    {@initCode(apiMethod, init)}
    @if additionalCallback
      {@methodCallSampleCodePrefix(apiMethod, init)}
        .then(console.log)
        .then({@additionalCallback})
        .catch({@additionalCallback});
    @else
      {@methodCallSampleCodePrefix(apiMethod, init)}.catch(err => {
        console.error(err);
      });
    @end
@end

@private sampleMethodCallArgList(apiMethod, init)
  @switch init.fieldSettings.size.toString
  @case "0"
    {}
  @case "1"
    @let field = init.fieldSettings.get(0)
      {{@field.fieldName}: {@field.identifier}}
    @end
  @default
    request
  @end
@end

@private promiseCallbacks(additionalCallback)
    @if additionalCallback
      .then({@additionalCallback})
      .catch({@additionalCallback});
    @else
      .catch(err => {
        console.error(err);
      });
    @end
@end
