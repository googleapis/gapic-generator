@snippet decorateSampleCode(apiMethod, coreSampleCode)
    var {@apiMethod.apiVariableName} = {@apiMethod.apiClassName}();
    {@initCode(apiMethod.initCode)}
    {@coreSampleCode}
@end

@snippet sampleCode(apiMethod)
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
        {@optionalArrayMethodSampleCode(apiMethod)}
    @case "PagedOptionalArrayMethod"
        {@pagedOptionalArrayMethodSampleCode(apiMethod)}
    @default
        $unhandledCase: {@apiMethod.type.toString}$
    @end
@end

@private optionalArrayMethodSampleCode(apiMethod)
    @if apiMethod.hasReturnValue
        {@methodCallSampleCodeWithReturnValue(apiMethod)};
    @else
        {@methodCallSampleCodeWithoutReturnValue(apiMethod)};
    @end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod)
    {@methodCallSampleCode(apiMethod)}.on('data', function(element) {
        // doThingsWith(element)
    });
@end

@private methodCallSampleCode(apiMethod)
    {@apiMethod.apiVariableName}.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private methodCallSampleCodeWithReturnValue(apiMethod)
    @if sampleMethodCallArgList(apiMethod.initCode.fieldSettings)
        {@apiMethod.apiVariableName}.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)}, function(err, response) {
            if (err) {
                console.error(err);
                return;
            }
            // doThingsWith(response)
        })
    @else
        {@apiMethod.apiVariableName}.{@apiMethod.name}(function(err, response) {
            if (err) {
                console.error(err);
                return;
            }
            // doThingsWith(response)
        })
    @end
@end

@private methodCallSampleCodeWithoutReturnValue(apiMethod)
    @if sampleMethodCallArgList(apiMethod.initCode.fieldSettings)
        {@apiMethod.apiVariableName}.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)}, function(err) {
            if (err) {
                console.error(err);
            }
        })
    @else
        {@apiMethod.apiVariableName}.{@apiMethod.name}(function(err) {
            if (err) {
                console.error(err);
            }
        })
    @end
@end

@private sampleMethodCallArgList(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        {@fieldSetting.identifier}
    @end
@end

@private initCode(initCodeSpec)
    @join line : initCodeSpec.lines
        @switch line.lineType.toString
        @case "StructureInitLine"
            {@initLineStructure(line)}
        @case "ListInitLine"
            {@initLineList(line)}
        @case "MapInitLine"
            {@initLineMap(line)}
        @case "SimpleInitLine"
            {@initLineSimple(line)}
        @default
            $unhandledCase: {@line.lineType.toString}$
        @end
    @end
@end

@private initLineStructure(line)
    var {@line.identifier} = new {@line.typeName}();
    @join fieldSetting : line.fieldSettings
        {@line.identifier}.{@fieldSetting.fieldSetFunction}({@fieldSetting.identifier});
    @end
@end

@private initLineList(line)
    var {@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end

@private initLineMap(line)
    var {@line.identifier} = {{@keyVarList(line.initEntries)}};
@end

@private keyVarList(mapEntries)
  @join mapEntry : mapEntries vertical
    {@mapEntry.key} : {@mapEntry.value},
  @end
@end

@private initLineSimple(line)
    var {@line.identifier} = {@renderInitValue(line.initValue)};
@end

@private renderInitValue(initValue)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        {@initValue.apiWrapperName}.{@initValue.formatFunctionName}({@varList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end
