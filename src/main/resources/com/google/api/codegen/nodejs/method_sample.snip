@extends "nodejs/common.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
    @if apiMethod.hasApiVersion
        @if apiMethod.packageHasMultipleServices
            var {@apiMethod.apiModuleName} = require('{@apiMethod.packageName}').{@apiMethod.apiVersion}.{@apiMethod.packageServiceName}({
              // optional auth parameters.
            });
        @else
            var {@apiMethod.apiModuleName} = require('{@apiMethod.packageName}').{@apiMethod.apiVersion}({
              // optional auth parameters.
            });
        @end

        {@coreSampleCode}
    @else
        {@decorateSampleCodeUnversioned(apiMethod, coreSampleCode)}
    @end
@end

@snippet decorateSampleCodeUnversioned(apiMethod, coreSampleCode)
    @if apiMethod.packageHasMultipleServices
        var {@apiMethod.apiModuleName} = require('{@apiMethod.packageName}').{@apiMethod.packageServiceName}({
          // optional auth parameters.
        });
    @else
        var {@apiMethod.apiModuleName} = require('{@apiMethod.packageName}')({
          // optional auth parameters.
        });
    @end

    {@coreSampleCode}
@end

@snippet sampleCode(apiMethod)
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
        {@optionalArrayMethodSampleCode(apiMethod, empty())}
    @case "PagedOptionalArrayMethod"
        {@initCode(apiMethod)}
        {@pagedOptionalArrayMethodSampleCode(apiMethod, empty())}
    @default
        $unhandledCase: {@apiMethod.type.toString}$
    @end
@end

@private empty()
@end

@snippet sampleCode(apiMethod, additionalCallback)
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
        {@optionalArrayMethodSampleCode(apiMethod, additionalCallback)}
    @case "PagedOptionalArrayMethod"
        {@initCode(apiMethod)}
        {@pagedOptionalArrayMethodSampleCode(apiMethod, additionalCallback)}
    @default
        $unhandledCase: {@apiMethod.type.toString}$
    @end
@end

@snippet sampleCodePageStreaming(apiMethod)
    {@initCode(apiMethod)}
    {@apiMethod.apiModuleName}.{@apiMethod.name}Stream({@sampleMethodCallArgList(apiMethod)}).on('data', function(element) {
        // doThingsWith(element)
    }).on('error', function(err) {
        console.error(err);
    });
@end

@private clientStreamingSampleCode(apiMethod, additionalCallback)
    var stream = {@apiMethod.apiModuleName}.{@apiMethod.name}(function(err, response) {
        if (err) {
            console.error(err);
            return;
        }
        @if additionalCallback
          {@additionalCallback}();
        @else
          // doThingsWith(response)
        @end
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private bidiStreamingSampleCode(apiMethod, additionalCallback)
    var stream = {@apiMethod.apiModuleName}.{@apiMethod.name}().on('data', function(response) {
        @if additionalCallback
            {@additionalCallback}();
        @else
            // doThingsWith(response)
        @end
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private sampleWriteStreamingRequest(apiMethod)
    // Write request objects.
    stream.write(request);
@end

@private optionalArrayMethodSampleCode(apiMethod, additionalCallback)
    @switch apiMethod.grpcStreamingType.toString
    @case "ServerStreaming"
        {@initCode(apiMethod)}
        {@methodCallSampleCode(apiMethod)}.on('data', function(response) {
          @if additionalCallback
            {@additionalCallback}();
          @else
            // doThingsWith(response)
          @end
        });
    @case "ClientStreaming"
        {@clientStreamingSampleCode(apiMethod, additionalCallback)}
    @case "BidiStreaming"
        {@bidiStreamingSampleCode(apiMethod, additionalCallback)}
    @case "NonStreaming"
        {@initCode(apiMethod)}
        @if apiMethod.hasReturnValue
            {@methodCallSampleCodeWithReturnValue(apiMethod, additionalCallback)}
        @else
            {@methodCallSampleCodeWithoutReturnValue(apiMethod, additionalCallback)}
        @end
    @end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod, additionalCallback)
    // Iterate over all elements.
    {@methodCallSampleCodePrefix(apiMethod)}.then(function(responses) {
        var resources = responses[0];
        for (var i = 0; i < resources.length; ++i) {
            // doThingsWith(resources[i])
        }
    }).catch(function(err) {
        console.error(err);
    });

    // Or obtain the paged response.
    {@methodCallSampleCodeForPagedResponse(apiMethod, additionalCallback)}
@end

@private methodCallSampleCode(apiMethod)
    {@apiMethod.apiModuleName}.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod)})
@end

@private sampleMethodCallArgListAndComma(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        {@sampleMethodCallArgList(apiMethod)}, {@""}
    @else
    @end
@end

@private methodCallSampleCodeForPagedResponse(apiMethod, additionalCallback)
    var options = {autoPaginate: false};
    function callback(responses) {
        // The actual resources in a response.
        var resources = responses[0];
        // The next request if the response shows there's more responses.
        var nextRequest = responses[1];
        // The actual response object, if necessary.
        // var rawResponse = responses[2];
        for (var i = 0; i < resources.length; ++i) {
            // doThingsWith(resources[i]);
        }
        if (nextRequest) {
            // Fetch the next page.
            return {@apiMethod.apiModuleName}.{@apiMethod.name}(nextRequest, options).then(callback);
        }
    }
    {@apiMethod.apiModuleName}.{@apiMethod.name}({@sampleMethodCallArgListAndComma(apiMethod)}options)
        .then(callback)
        @if additionalCallback
            .then({@additionalCallback})
        @end
        .catch(function(err) {
            console.error(err);
        });
@end

@private methodCallSampleCodePrefix(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        {@apiMethod.apiModuleName}.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod)})
    @else
        {@apiMethod.apiModuleName}.{@apiMethod.name}()
    @end
@end

@private methodCallSampleCodeWithReturnValue(apiMethod, additionalCallback)
    @if apiMethod.isLongRunningOperation

        // Handle the operation using the promise pattern.
        {@methodCallSampleCodePrefix(apiMethod)}.then(function(responses) {
            var operation = responses[0];
            var initialApiResponse = responses[1];

            // Operation@#promise starts polling for the completion of the LRO.
            return operation.promise();
        }).then(function(responses) {
            // The final result of the operation.
            var result = responses[0];

            // The metadata value of the completed operation.
            var metadata = responses[1];

            // The response of the api call returning the complete operation.
            var finalApiResponse = responses[2];
        @if additionalCallback
            }).then(additionalCallback)
            .catch(function(err) {
                console.error(err);
            });
        @else
            }).catch(function(err) {
                console.error(err);
            });
        @end

        // Handle the operation using the event emitter pattern.
        {@methodCallSampleCodePrefix(apiMethod)}.then(function(responses) {
            var operation = responses[0];
            var initialApiResponse = responses[1];

            // Adding a listener for the "complete" event starts polling for the
            // completion of the operation.
            operation.on('complete', function(result, metadata, finalApiResponse) {
              // doSomethingWith(result);
            });

            // Adding a listener for the "progress" event causes the callback to be
            // called on any change in metadata when the operation is polled.
            operation.on('progress', function(metadata, apiResponse) {
              // doSomethingWith(metadata)
            })

            // Adding a listener for the "error" event handles any errors found during polling.
            operation.on('error', function(err) {
              // throw(err);
            })
        @if additionalCallback
            }).then(additionalCallback)
            .catch(function(err) {
                console.error(err);
            });
        @else
            }).catch(function(err) {
                console.error(err);
            });
        @end
    @else
        {@methodCallSampleCodePrefix(apiMethod)}.then(function(responses) {
            var response = responses[0];
            // doThingsWith(response)
        @if additionalCallback
            }).then(additionalCallback)
            .catch(function(err) {
                console.error(err);
            });
        @else
            }).catch(function(err) {
                console.error(err);
            });
        @end
    @end
@end

@private methodCallSampleCodeWithoutReturnValue(apiMethod, additionalCallback)
    @if additionalCallback
        {@methodCallSampleCodePrefix(apiMethod)}
          .then(additionalCallback)
          .catch(function(err) {
              console.error(err);
          });
    @else
        {@methodCallSampleCodePrefix(apiMethod)}.catch(function(err) {
            console.error(err);
        });
    @end
@end

@private initCode(apiMethod)
    {@initCodeLines(apiMethod.apiModuleName, apiMethod.initCode)}
    @if initializeRequestObject(apiMethod)
        {@initializeRequestObject(apiMethod)}
    @end
@end

@snippet initCodeLines(apiModuleName, initCode)
    @join line : initCode.lines
        @switch line.lineType.toString
        @case "StructureInitLine"
            {@initLineStructure(line)}
        @case "ListInitLine"
            {@initLineList(line)}
        @case "MapInitLine"
            {@initLineMap(line)}
        @case "SimpleInitLine"
            {@initLineSimple(apiModuleName, line)}
        @default
            $unhandledCase: {@line.lineType.toString}$
        @end
    @end
@end

@private initLineStructure(line)
    var {@line.identifier} = {
        @join fieldSetting : line.fieldSettings on ",".add(BREAK)
            {@fieldSetting.fieldName} : {@fieldSetting.identifier}
        @end
    };
@end

@private initLineList(line)
    var {@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
    @join arg : args on ", "
        {@arg}
    @end
@end

@private initLineMap(line)
    var {@line.identifier} = {{@keyVarList(line.initEntries)}};
@end

@private keyVarList(mapEntries)
    @join mapEntry : mapEntries vertical
        {@mapEntry.key} : {@mapEntry.valueString},
    @end
@end

@private initLineSimple(apiModuleName, line)
    var {@line.identifier} = {@renderInitValue(apiModuleName, line.initValue)};
@end

@private renderInitValue(apiModuleName, initValue)
    @switch initValue.type
    @case "SimpleInitValueView"
        {@initValue.initialValue}
    @case "FormattedInitValueView"
        {@apiModuleName}.{@initValue.formatFunctionName}({@varList(initValue.formatArgs)})
    @default
        $unhandledCase: {@initValue.type}$
    @end
@end

@private sampleMethodCallArgList(apiMethod)
    @switch apiMethod.requiredRequestObjectParams.size.toString
    @case "0"
        {}
    @case "1"
        @let field = apiMethod.initCode.fieldSettings.get(0)
            {{@field.fieldName}: {@field.identifier}}
        @end
    @default
        request
    @end
@end

@private initializeRequestObject(apiMethod)
    @switch apiMethod.requiredRequestObjectParams.size.toString
    @case "0"
    @case "1"
    @default
        var request = {
        @join fieldSetting : apiMethod.initCode.fieldSettings on ", ".add(BREAK)
            {@""}    {@fieldSetting.fieldName}: {@fieldSetting.identifier}
        @end
        };
    @end
@end
