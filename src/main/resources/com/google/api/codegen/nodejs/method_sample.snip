@extends "nodejs/common.snip"

@snippet decorateSampleCode(apiMethod, coreSampleCode)
    @if apiMethod.hasApiVersion
        const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}');

        var client = new {@apiMethod.localPackageName}.{@apiMethod.apiVersion}.{@apiMethod.apiClassName}({
          // optional auth parameters.
        });

        {@coreSampleCode}
    @else
        {@decorateSampleCodeUnversioned(apiMethod, coreSampleCode)}
    @end
@end

@snippet decorateSampleCodeUnversioned(apiMethod, coreSampleCode)
    const {@apiMethod.localPackageName} = require('{@apiMethod.packageName}');

    var client = {@apiMethod.localPackageName}.{@apiMethod.apiClassName}({
      // optional auth parameters.
    });

    {@coreSampleCode}
@end

@snippet sampleCode(apiMethod)
    {@sampleCode(apiMethod, empty())}
@end

@private empty()
@end

@snippet sampleCode(apiMethod, additionalCallback)
    @switch apiMethod.type.toString
    @case "OptionalArrayMethod"
        {@optionalArrayMethodSampleCode(apiMethod, additionalCallback)}
    @case "LongRunningOptionalArrayMethod"
        {@lroSampleCode(apiMethod, additionalCallback)}
    @case "PagedOptionalArrayMethod"
        {@pagedOptionalArrayMethodSampleCode(apiMethod, additionalCallback)}
    @default
        $unhandledCase: {@apiMethod.type.toString}$
    @end
@end

@snippet sampleCodePageStreaming(apiMethod)
    {@sampleCodePageStreaming(apiMethod, empty())}
@end

@snippet sampleCodePageStreaming(apiMethod, additionalCallback)
    {@initCode(apiMethod)}
    client.{@apiMethod.name}Stream({@sampleMethodCallArgList(apiMethod)})
      @if additionalCallback
        .on('data', element => {
          console.log(element);
        })
        .on('error', {@additionalCallback})
        .on('end', {@additionalCallback});
      @else
        .on('data', element => {
          // doThingsWith(element)
        }).on('error', err => {
          console.log(err);
        });
      @end
@end

@private clientStreamingSampleCode(apiMethod, additionalCallback)
    var stream = client.{@apiMethod.name}((err, response) => {
      @if additionalCallback
        if (err) {
          {@additionalCallback}(err);
          return;
        }
        console.log(response);
        {@additionalCallback}();
      @else
        if (err) {
          console.error(err);
          return;
        }
        // doThingsWith(response)
      @end
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private bidiStreamingSampleCode(apiMethod, additionalCallback)
    var stream = client.{@apiMethod.name}().on('data', response => {
      @if additionalCallback
        console.log(response);
        {@additionalCallback}();
      @else
        // doThingsWith(response)
      @end
    });
    {@initCode(apiMethod)}
    {@sampleWriteStreamingRequest(apiMethod)}
@end

@private sampleWriteStreamingRequest(apiMethod)
    // Write request objects.
    stream.write(request);
@end

@private optionalArrayMethodSampleCode(apiMethod, additionalCallback)
    @switch apiMethod.grpcStreamingType.toString
    @case "ServerStreaming"
      {@initCode(apiMethod)}
      {@methodCallSampleCode(apiMethod)}.on('data', response => {
        @if additionalCallback
          console.log(response);
          {@additionalCallback}();
        @else
          // doThingsWith(response)
        @end
      });
    @case "ClientStreaming"
      {@clientStreamingSampleCode(apiMethod, additionalCallback)}
    @case "BidiStreaming"
      {@bidiStreamingSampleCode(apiMethod, additionalCallback)}
    @case "NonStreaming"
      @if apiMethod.hasReturnValue
        {@methodCallSampleCodeWithReturnValue(apiMethod, additionalCallback)}
      @else
        {@methodCallSampleCodeWithoutReturnValue(apiMethod, additionalCallback)}
      @end
    @end
@end

@private pagedOptionalArrayMethodSampleCode(apiMethod, additionalCallback)
    {@methodCallSampleCodeForPagedResponseIterative(apiMethod, additionalCallback)}

    {@methodCallSampleCodeForPagedResponse(apiMethod, additionalCallback)}
@end

@private methodCallSampleCode(apiMethod)
    client.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod)})
@end

@private sampleMethodCallArgListAndComma(apiMethod)
    @if sampleMethodCallArgList(apiMethod)
        {@sampleMethodCallArgList(apiMethod)}, {@""}
    @else
    @end
@end

@snippet methodCallSampleCodeForPagedResponseIterative(apiMethod, additionalCallback)
  // Iterate over all elements.
  @if initCode(apiMethod)
    {@initCode(apiMethod)}

  @end
  {@methodCallSampleCodePrefix(apiMethod)}
    .then(responses => {
      var resources = responses[0];
      for (let i = 0; i < resources.length; i += 1) {
        @if additionalCallback
          console.log(resources[i]);
        @else
          // doThingsWith(resources[i])
        @end
      }
    })
    {@promiseCallbacks(additionalCallback)}
@end

@snippet methodCallSampleCodeForPagedResponse(apiMethod, additionalCallback)
    // Or obtain the paged response.
    # TODO(landrito) figure out how to remove this repetition for method samples.
    @if initCode(apiMethod)
      {@initCode(apiMethod)}

    @end

    var options = {autoPaginate: false};
    var callback = responses => {
      // The actual resources in a response.
      var resources = responses[0];
      // The next request if the response shows that there are more responses.
      var nextRequest = responses[1];
      // The actual response object, if necessary.
      // var rawResponse = responses[2];
      for (let i = 0; i < resources.length; i += 1) {
        @if additionalCallback
          console.log(resources[i]);
        @else
          // doThingsWith(resources[i]);
        @end
      }
      if (nextRequest) {
        // Fetch the next page.
        return client.{@apiMethod.name}(nextRequest, options).then(callback);
      }
    }
    client.{@apiMethod.name}({@sampleMethodCallArgListAndComma(apiMethod)}options)
      .then(callback)
      {@promiseCallbacks(additionalCallback)}
@end

@private methodCallSampleCodePrefix(apiMethod)
  @if sampleMethodCallArgList(apiMethod)
    client.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod)})
  @else
    client.{@apiMethod.name}()
  @end
@end

@private methodCallSampleCodeWithReturnValue(apiMethod, additionalCallback)
  {@initCode(apiMethod)}
  {@methodCallSampleCodePrefix(apiMethod)}
    .then(responses => {
      var response = responses[0];
      @if additionalCallback
        console.log(response);
      @else
        // doThingsWith(response)
      @end
    })
    {@promiseCallbacks(additionalCallback)}
@end

@private lroSampleCode(apiMethod, additionalCallback)
  # TODO(landrito) figure out how to remove initcode repetition for method samples.
  {@methodCallSampleCodeLongrunningPromise(apiMethod, additionalCallback)}

  {@methodCallSampleCodeLongrunningEventEmitter(apiMethod, additionalCallback)}
@end

@snippet methodCallSampleCodeLongrunningPromise(apiMethod, additionalCallback)
  {@initCode(apiMethod)}

  // Handle the operation using the promise pattern.
  {@methodCallSampleCodePrefix(apiMethod)}
    .then(responses => {
      var operation = responses[0];
      var initialApiResponse = responses[1];
      @if additionalCallback
        console.log(operation);
        console.log(initialApiResponse);
      @end

      // Operation@#promise starts polling for the completion of the LRO.
      return operation.promise();
    })
    .then(responses => {
      // The final result of the operation.
      var result = responses[0];

      // The metadata value of the completed operation.
      var metadata = responses[1];

      // The response of the api call returning the complete operation.
      var finalApiResponse = responses[2];
      @if additionalCallback

        console.log(result);
        console.log(metadata);
        console.log(finalApiResponse);
      @end
    })
    {@promiseCallbacks(additionalCallback)}
@end

@snippet methodCallSampleCodeLongrunningEventEmitter(apiMethod, additionalCallback)
  {@initCode(apiMethod)}

  // Handle the operation using the event emitter pattern.
  {@methodCallSampleCodePrefix(apiMethod)}
    .then(responses => {
      var operation = responses[0];
      var initialApiResponse = responses[1];

      // Adding a listener for the "complete" event starts polling for the
      // completion of the operation.
      operation.on('complete', (result, metadata, finalApiResponse) => {
        @if additionalCallback
          console.log(result);
        @else
          // doSomethingWith(result);
        @end
      });

      // Adding a listener for the "progress" event causes the callback to be
      // called on any change in metadata when the operation is polled.
      operation.on('progress', (metadata, apiResponse) => {
        @if additionalCallback
          console.log(metadata);
        @else
          // doSomethingWith(metadata)
        @end
      });

      // Adding a listener for the "error" event handles any errors found during polling.
      operation.on('error', err => {
        // throw(err);
      });
    })
    {@promiseCallbacks(additionalCallback)}
@end

@private methodCallSampleCodeWithoutReturnValue(apiMethod, additionalCallback)
    {@initCode(apiMethod)}
    @if additionalCallback
      {@methodCallSampleCodePrefix(apiMethod)}
        .then(console.log)
        .then({@additionalCallback})
        .catch({@additionalCallback});
    @else
      {@methodCallSampleCodePrefix(apiMethod)}.catch(err => {
        console.error(err);
      });
    @end
@end

@private initCode(apiMethod)
  {@initCodeLines(apiMethod.initCode)}
  @if initializeRequestObject(apiMethod)
    {@initializeRequestObject(apiMethod)}
  @end
@end

@snippet initCodeLines(initCode)
  @join line : initCode.lines
    @switch line.lineType.toString
    @case "StructureInitLine"
      {@initLineStructure(line)}
    @case "ListInitLine"
      {@initLineList(line)}
    @case "MapInitLine"
      {@initLineMap(line)}
    @case "SimpleInitLine"
      {@initLineSimple(line)}
    @default
      $unhandledCase: {@line.lineType.toString}$
    @end
  @end
@end

@private initLineStructure(line)
  var {@line.identifier} = {
    @join fieldSetting : line.fieldSettings on BREAK
      {@fieldSetting.fieldName}: {@fieldSetting.identifier},
    @end
  };
@end

@private initLineList(line)
    var {@line.identifier} = [{@varList(line.elementIdentifiers)}];
@end

@snippet varList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end

@private initLineMap(line)
  var {@line.identifier} = {{@keyVarList(line.initEntries)}};
@end

@private keyVarList(mapEntries)
  @join mapEntry : mapEntries vertical
    {@mapEntry.key} : {@mapEntry.valueString},
  @end
@end

@private initLineSimple(line)
  var {@line.identifier} = {@renderInitValue(line.initValue)};
@end

@private renderInitValue(initValue)
  @switch initValue.type
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    client.{@initValue.formatFunctionName}({@varList(initValue.formatArgs)})
  @default
    $unhandledCase: {@initValue.type}$
  @end
@end

@private sampleMethodCallArgList(apiMethod)
  @switch apiMethod.initCode.fieldSettings.size.toString
  @case "0"
    {}
  @case "1"
    @let field = apiMethod.initCode.fieldSettings.get(0)
      {{@field.fieldName}: {@field.identifier}}
    @end
  @default
    request
  @end
@end

@private initializeRequestObject(apiMethod)
    @switch apiMethod.initCode.fieldSettings.size.toString
    @case "0"
    @case "1"
    @default
      var request = {
        @join fieldSetting : apiMethod.initCode.fieldSettings on BREAK
          {@fieldSetting.fieldName}: {@fieldSetting.identifier},
        @end
      };
    @end
@end

@private promiseCallbacks(additionalCallback)
    @if additionalCallback
      .then({@additionalCallback})
      .catch({@additionalCallback});
    @else
      .catch(err => {
        console.error(err);
      });
    @end
@end
