@extends "csharp/common.snip"

@snippet generate(common)
    // Copyright 2016 Google Inc. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //     http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    // Generated code. DO NOT EDIT!

    @join import : common.api.imports
        using {@import.fullName};
    @end

    namespace {@common.api.packageName}
    {
        {@settings(common.api, common.settings)}

        {@abstractClient(common.api, common.settings)}

        {@implClient(common.api, common.settings)}

        {@partialPageStreaming(common.api, common.settings)}
    }

@end

@private settings(api, settings)
    /// <summary>
    /// Settings for a <see cref="{@api.name}"/>.
    /// </summary>
    public sealed partial class {@settings.name} : ServiceSettingsBase
    {
        /// <summary>
        /// Get a new instance of the default <see cref="{@settings.name}"/>.
        /// </summary>
        /// <returns>
        /// A new instance of the default <see cref="{@settings.name}"/>.
        /// </returns>
        public static {@settings.name} GetDefault() => new {@settings.name}();

        /// <summary>
        /// Constructs a new <see cref="{@settings.name}"/> object with default settings.
        /// </summary>
        public {@settings.name}() { }
        
        private {@settings.name}({@settings.name} existing) : base(existing)
        {
            GaxPreconditions.CheckNotNull(existing, nameof(existing));
            @join call : settings.callSettings
                {@call.memberName} = existing.{@call.memberName};
            @end
        }
        
        @join retry : settings.retryCodesDefinitions
            /// <summary>
            /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
            /// for "{@retry.name}" <see cref="{@api.name}"/> RPC methods.
            /// </summary>
            /// <remarks>
            @if retry.codes
               /// The eligible RPC <see cref="StatusCode"/>s for retry for "{@retry.name}" RPC methods are:
               /// <list type="bullet">
               @join code : retry.codeNames
                   /// <item><description><see cref="StatusCode.{@code}"/></description></item>
               @end
               /// </list>
            @else
                /// There are no RPC <see cref="StatusCode"/>s eligible for retry for "{@retry.name}" RPC methods.
            @end
            /// </remarks>
            public static Predicate<RpcException> {@retry.retryFilterMethodName} { get; } =
                RetrySettings.FilterForStatusCodes({@retryCodes(retry.codeNames)});

        @end
        @join retry : settings.retryParamsDefinitions
            /// <summary>
            /// "{@retry.name}" retry backoff for <see cref="{@api.name}"/> RPC methods.
            /// </summary>
            /// <returns>
            /// The "{@retry.name}" retry backoff for <see cref="{@api.name}"/> RPC methods.
            /// </returns>
            /// <remarks>
            /// The "{@retry.name}" retry backoff for <see cref="{@api.name}"/> RPC methods is defined as:
            /// <list type="bullet">
            /// <item><description>Initial delay: {@retry.initialRetryDelay.getMillis} milliseconds</description></item>
            /// <item><description>Maximum delay: {@retry.maxRetryDelay.getMillis} milliseconds</description></item>
            /// <item><description>Delay multiplier: {@retry.retryDelayMultiplier}</description></item>
            /// </list>
            /// </remarks>
            public static BackoffSettings {@retry.retryBackoffMethodName}() => new BackoffSettings(
                delay: TimeSpan.FromMilliseconds({@retry.initialRetryDelay.getMillis}),
                maxDelay: TimeSpan.FromMilliseconds({@retry.maxRetryDelay.getMillis}),
                delayMultiplier: {@retry.retryDelayMultiplier}
            );
            
            /// <summary>
            /// "{@retry.name}" timeout backoff for <see cref="{@api.name}"/> RPC methods.
            /// </summary>
            /// <returns>
            /// The "{@retry.name}" timeout backoff for <see cref="{@api.name}"/> RPC methods.
            /// </returns>
            /// <remarks>
            /// The "{@retry.name}" timeout backoff for <see cref="{@api.name}"/> RPC methods is defined as:
            /// <list type="bullet">
            /// <item><description>Initial timeout: {@retry.initialRpcTimeout.getMillis} milliseconds</description></item>
            /// <item><description>Timeout multiplier: {@retry.rpcTimeoutMultiplier}</description></item>
            /// <item><description>Maximum timeout: {@retry.maxRpcTimeout.getMillis} milliseconds</description></item>
            /// </list>
            /// </remarks>
            public static BackoffSettings {@retry.timeoutBackoffMethodName}() => new BackoffSettings(
                delay: TimeSpan.FromMilliseconds({@retry.initialRpcTimeout.getMillis}),
                maxDelay: TimeSpan.FromMilliseconds({@retry.maxRpcTimeout.getMillis}),
                delayMultiplier: {@retry.rpcTimeoutMultiplier}
            );

        @end
        @join call : settings.callSettings
            /// <summary>
            /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
            /// <c>{@api.name}.{@call.methodName}</c> and <c>{@api.name}.{@call.asyncMethodName}</c>.
            /// </summary>
            /// <remarks>
            /// The default <c>{@api.name}.{@call.methodName}</c> and
            /// <c>{@api.name}.{@call.asyncMethodName}</c> <see cref="RetrySettings"/> are:
            /// <list type="bullet">
            /// <item><description>Initial retry delay: {@call.retryParamsView.initialRetryDelay.getMillis} milliseconds</description></item>
            /// <item><description>Retry delay multiplier: {@call.retryParamsView.retryDelayMultiplier}</description></item>
            /// <item><description>Retry maximum delay: {@call.retryParamsView.maxRetryDelay.getMillis} milliseconds</description></item>
            /// <item><description>Initial timeout: {@call.retryParamsView.initialRpcTimeout.getMillis} milliseconds</description></item>
            /// <item><description>Timeout multiplier: {@call.retryParamsView.rpcTimeoutMultiplier}</description></item>
            /// <item><description>Timeout maximum delay: {@call.retryParamsView.maxRpcTimeout.getMillis} milliseconds</description></item>
            /// </list>
            /// Retry will be attempted on the following response status codes:
            /// <list>
            @if call.retryCodesView.codeNames
                @join code : call.retryCodesView.codeNames
                    /// <item><description><see cref="StatusCode.{@code}"/></description></item>
                @end
            @else
                /// <item><description>No status codes</description></item>
            @end
            /// </list>
            /// Default RPC expiration is {@call.retryParamsView.totalTimeout.getMillis} milliseconds.
            /// </remarks>
            public CallSettings {@call.memberName} { get; set; } = CallSettings.FromCallTiming(
                CallTiming.FromRetry(new RetrySettings(
                    retryBackoff: {@call.retryParamsView.retryBackoffMethodName}(),
                    timeoutBackoff: {@call.retryParamsView.timeoutBackoffMethodName}(),
                    totalExpiration: Expiration.FromTimeout(TimeSpan.FromMilliseconds({@call.retryParamsView.totalTimeout.getMillis})),
                    retryFilter: {@call.retryCodesView.retryFilterMethodName}
                )));

        @end
        /// <summary>
        /// Creates a deep clone of this object, with all the same property values.
        /// </summary>
        /// <returns>A deep clone of this <see cref="{@settings.name}"/> object.</returns>
        public {@settings.name} Clone() => new {@settings.name}(this);
    }
@end

@private abstractClient(api, settings)
    /// <summary>
    /// {@api.grpcServiceName} client wrapper, for convenient use.
    /// </summary>
    public abstract partial class {@api.name}
    {
        /// <summary>
        /// The default endpoint for the {@api.grpcServiceName} service, which is a host of "{@settings.serviceAddress}" and a port of {@settings.servicePort}.
        /// </summary>
        public static ServiceEndpoint DefaultEndpoint { get; } = new ServiceEndpoint("{@settings.serviceAddress}", {@settings.servicePort});

        /// <summary>
        /// The default {@api.grpcServiceName} scopes.
        /// </summary>
        /// <remarks>
        /// The default {@api.grpcServiceName} scopes are:
        /// <list type="bullet">
        @join scope : settings.authScopes
            /// <item><description>"{@scope}"</description></item>
        @end
        /// </list>
        /// </remarks>
        public static IReadOnlyList<string> DefaultScopes { get; } = new ReadOnlyCollection<string>(new string[] {
        @join scope : settings.authScopes
            {@""}    "{@scope}",
        @end
        });

        private static readonly ChannelPool s_channelPool = new ChannelPool(DefaultScopes);

        @join format : api.formatResourceFunctions
            /// <summary>
            /// Path template for a {@format.entityName} resource. Parameters:
            /// <list type="bullet">
            @join param : format.resourceIdParams
                /// <item><description>{@param.docName}</description></item>
            @end
            /// </list>
            /// </summary>
            public static PathTemplate {@format.pathTemplateName} { get; } = new PathTemplate("{@format.pattern}");
        
            /// <summary>
            /// Creates a {@format.entityName} resource name from its component IDs.
            /// </summary>
            @join param : format.resourceIdParams
                /// <param name="{@param.name}">The {@param.docName} ID.</param>
            @end
            /// <returns>
            /// The full {@format.entityName} resource name.
            /// </returns>
            public static string {@format.name}({@formatResourceParams(format.resourceIdParams)}) => {@format.pathTemplateName}.Expand({@formatResourceArgs(format.resourceIdParams)});

        @end
        // Note: we could have parameterless overloads of Create and CreateAsync,
        // documented to just use the default endpoint, settings and credentials.
        // Pros:
        // - Might be more reassuring on first use
        // - Allows method group conversions
        // Con: overloads!
        
        /// <summary>
        /// Asynchronously creates a <see cref="{@api.name}"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="{@settings.name}"/>.</param>
        /// <returns>The task representing the created <see cref="{@api.name}"/>.</returns>
        public static async Task<{@api.name}> CreateAsync(ServiceEndpoint endpoint = null, {@settings.name} settings = null)
        {
            Channel channel = await s_channelPool.GetChannelAsync(endpoint ?? DefaultEndpoint).ConfigureAwait(false);
            return Create(channel, settings);
        }

        /// <summary>
        /// Synchronously creates a <see cref="{@api.name}"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="{@settings.name}"/>.</param>
        /// <returns>The created <see cref="{@api.name}"/>.</returns>
        public static {@api.name} Create(ServiceEndpoint endpoint = null, {@settings.name} settings = null)
        {
            Channel channel = s_channelPool.GetChannel(endpoint ?? DefaultEndpoint);
            return Create(channel, settings);
        }

        /// <summary>
        /// Creates a <see cref="{@api.name}"/> which uses the specified channel for remote operations.
        /// </summary>
        /// <param name="channel">The <see cref="Channel"/> for remote operations. Must not be null.</param>
        /// <param name="settings">Optional <see cref="{@settings.name}"/>.</param>
        /// <returns>The created <see cref="{@api.name}"/>.</returns>
        public static {@api.name} Create(Channel channel, {@settings.name} settings = null)
        {
            GaxPreconditions.CheckNotNull(channel, nameof(channel));
            {@api.grpcTypeName} grpcClient = new {@api.grpcTypeName}(channel);
            return new {@api.implName}(grpcClient, settings);
        }

        /// <summary>
        /// Shuts down any channels automatically created by <see cref="Create(ServiceEndpoint, {@settings.name})"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, {@settings.name})"/>. Channels which weren't automatically
        /// created are not affected.
        /// </summary>
        /// <remarks>After calling this method, further calls to <see cref="Create(ServiceEndpoint, {@settings.name})"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, {@settings.name})"/> will create new channels, which could
        /// in turn be shut down by another call to this method.</remarks>
        /// <returns>A task representing the asynchronous shutdown operation.</returns>
        public static Task ShutdownDefaultChannelsAsync() => s_channelPool.ShutdownChannelsAsync();

        /// <summary>
        /// The underlying gRPC {@api.grpcServiceName} client.
        /// </summary>
        public virtual {@api.grpcTypeName} GrpcClient
        {
            get { throw new NotImplementedException(); }
        }

        @join method : api.apiMethods
            {@xmlDoc(method.doc)}
            {@method(method, FALSE)}

        @end
    }
@end

@private implClient(api, settings)
    /// <summary>
    /// {@api.grpcServiceName} client wrapper implementation, for convenient use.
    /// </summary>
    public sealed partial class {@api.implName} : {@api.name}
    {
        private readonly ClientHelper _clientHelper;
        @join call : api.apiCallableMembers
            private readonly ApiCall<{@call.requestTypeName}, {@call.responseTypeName}> {@call.name};
        @end

        /// <summary>
        /// Constructs a client wrapper for the {@api.grpcServiceName} service, with the specified gRPC client and settings.
        /// </summary>
        /// <param name="grpcClient">The underlying gRPC client.</param>
        /// <param name="settings">The base <see cref="{@settings.name}"/> used within this client </param>
        public {@api.implName}({@api.grpcTypeName} grpcClient, {@settings.name} settings)
        {
            this.GrpcClient = grpcClient;
            {@settings.name} effectiveSettings = settings ?? {@settings.name}.GetDefault();
            _clientHelper = new ClientHelper(effectiveSettings);
            @join rerouted : api.reroutedGrpcClients
                {@rerouted.typeName} {@rerouted.grpcClientVarName} = grpcClient.{@rerouted.getMethodName}();
            @end
            @join call : api.apiCallableMembers
                {@call.name} = _clientHelper.BuildApiCall<{@call.requestTypeName}, {@call.responseTypeName}>(
                    {@call.grpcClientVarName}.{@call.asyncMethodName}, {@call.grpcClientVarName}.{@call.methodName}, effectiveSettings.{@call.memberName});
            @end
        }

        /// <summary>
        /// The underlying gRPC {@api.grpcServiceName} client.
        /// </summary>
        public override {@api.grpcTypeName} GrpcClient { get; }
        
        @join method : api.apiMethodsImpl
            {@xmlDoc(method.doc)}
            {@method(method, TRUE)}

        @end
    }
@end

@private method(method, isImpl)
    @switch method.type.toString
    @case "FlattenedMethod"
        {@flattenedMethodSync(method, isImpl)}
    @case "FlattenedAsyncCallSettingsMethod"
        {@flattenedMethodAsyncCallSettings(method, isImpl)}
    @case "FlattenedAsyncCancellationTokenMethod"
        {@flattenedMethodAsyncCancellationToken(method, isImpl)}
    @case "PagedFlattenedMethod"
        {@pagedFlattenedMethodSync(method, isImpl)}
    @case "PagedFlattenedAsyncMethod" 
        {@pagedFlattenedMethodAsync(method, isImpl)}
    @default
        *** ERROR: Cannot handle method type '{@method.type.toString}' ***
    @end
@end

@private flattenedMethodSync(method, isImpl)
    @if isImpl
        public override {@method.responseTypeName} {@method.name}(
            {@objectParams(method.methodParams)}) => {@method.callableName}.Sync(
                new {@method.apiRequestTypeName}
                {
                    {@requestProperties(method.forwardingMethodParams)}
                },
                callSettings);
    @else
        public virtual {@method.responseTypeName} {@method.name}(
            {@objectParams(method.methodParams)})
        {
            throw new NotImplementedException();
        }
    @end
@end

@private flattenedMethodAsyncCallSettings(method, isImpl)
    @if isImpl
        public override {@method.responseTypeName} {@method.name}(
            {@objectParams(method.methodParams)}) => {@method.callableName}.Async(
                new {@method.apiRequestTypeName}
                {
                    {@requestProperties(method.forwardingMethodParams)}
                },
                callSettings);
    @else
        public virtual {@method.responseTypeName} {@method.name}(
            {@objectParams(method.methodParams)})
        {
            throw new NotImplementedException();
        }
    @end
@end

@private flattenedMethodAsyncCancellationToken(method, isImpl)
    @if isImpl
        *** ERROR: Should never get here ***
    @else
        public virtual {@method.responseTypeName} {@method.name}(
            {@objectParams(method.methodParams)}) => {@method.name}(
                {@objectArgs(method.forwardingMethodParams)},
                CallSettings.FromCancellationToken(cancellationToken));
    @end
@end

@private pagedFlattenedMethodSync(method, isImpl)
    @if isImpl
        public override IPagedEnumerable<{@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}> {@method.name}(
            {@objectParams(method.methodParams)}) => new PagedEnumerable<{@method.listMethod.requestTypeName}, {@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}>(
                {@method.callableName},
                new {@method.apiRequestTypeName}
                {
                    {@requestProperties(method.forwardingMethodParams)}
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);
    @else
        public virtual IPagedEnumerable<{@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}> {@method.name}(
            {@objectParams(method.methodParams)})
        {
            throw new NotImplementedException();
        }
    @end
@end

@private pagedFlattenedMethodAsync(method, isImpl)
    @if isImpl
        public override IPagedAsyncEnumerable<{@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}> {@method.name}(
            {@objectParams(method.methodParams)}) => new PagedAsyncEnumerable<{@method.listMethod.requestTypeName}, {@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}>(
                {@method.callableName},
                new {@method.apiRequestTypeName}
                {
                    {@requestProperties(method.forwardingMethodParams)}
                    PageToken = pageToken ?? "",
                    PageSize = pageSize ?? 0,
                },
                callSettings);
    @else
        public virtual IPagedAsyncEnumerable<{@method.listMethod.responseTypeName}, {@method.listMethod.resourceTypeName}> {@method.name}(
            {@objectParams(method.methodParams)})
        {
            throw new NotImplementedException();
        }
    @end
@end

@private requestProperties(params)
    @join param : params
        @if param.isArray
            {@param.nameAsMethodName} = { {@param.name} },
        @else
            {@param.nameAsMethodName} = {@param.name},
        @end
    @end
@end

@private partialPageStreaming(api, settings)
    // Partial classes to enable page-streaming

    @join method : api.apiMethods if method.type.toString == "PagedFlattenedMethod"
        public partial class {@method.listMethod.requestTypeName} : IPageRequest { }
        public partial class {@method.listMethod.responseTypeName} : IPageResponse<{@method.listMethod.resourceTypeName}>
        {
            /// <summary>
            /// Returns an enumerator that iterates through the resources in this response.
            /// </summary>
            public IEnumerator<{@method.listMethod.resourceTypeName}> GetEnumerator() => {@method.listMethod.resourcesFieldGetFunction}.GetEnumerator();

            /// <inheritdoc/>
            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }

    @end
@end
