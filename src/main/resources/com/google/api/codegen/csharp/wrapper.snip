@snippet generateFilename(service)
  {@service.getSimpleName}Client.cs
@end

@snippet generateClass(service, body, imports)
    // Copyright 2016 Google Inc. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //     http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.

    // Generated code. DO NOT EDIT!

    @join import : imports
        using {@import};
    @end

    namespace {@context.getNamespace(service.getFile)}
    {
        {@body}
    }
@end

@snippet generateBody(service)
    {@imports()}
    {@extensions(service.getSimpleName)}

    {@settings(context.getRetryInfo(service), context.getMethodInfos(service), service.getSimpleName)}

    {@abstractClient(service, service.getSimpleName)}

    {@clientImpl(service, service.getSimpleName, context.getMethodInfos(service))}

    {@pageStreamPartials(context.getPageStreamerInfos(service))}
@end

@private imports() fill
    {@context.addImport("Google.Api.Gax")}
    {@context.addImport("Grpc.Core")}
    {@context.addImport("System")}
    {@context.addImport("System.Collections.Generic")}
    {@context.addImport("System.Collections.ObjectModel")}
    {@context.addImport("System.Threading")}
    {@context.addImport("System.Threading.Tasks")}
@end

@private extensions(name)
    /// <summary>
    /// Extension methods to assist with using <see cref="{@name}Client"/>.
    /// </summary>
    public static partial class {@name}Extensions
    {
        /// <summary>
        /// Wrap a GRPC {@name} client for more convenient use.
        /// </summary>
        /// <param name="grpcClient">A GRPC client to wrap.</param>
        /// <param name="settings">
        /// An optional <see cref="{@name}Settings"/> to configure this wrapper.
        /// If null or not specified, then the default settings are used.
        /// </param>
        /// <returns>A <see cref="{@name}Client"/> that wraps the specified GRPC client.</returns>
        public static {@name}Client ToClient(
            this {@name}.{@name}Client grpcClient,
            {@name}Settings settings = null
        ) => new {@name}ClientImpl(grpcClient, settings);
    }
@end

@private settings(retry, methods, name)
    /// <summary>
    /// Settings for a {@name} wrapper.
    /// </summary>
    public sealed partial class {@name}Settings : ServiceSettingsBase
    {
        /// <summary>
        /// Get a new instance of the default <see cref="{@name}Settings"/>.
        /// </summary>
        /// <returns>A new instance of the default {@name}Settings.</returns>
        public static {@name}Settings GetDefault() => new {@name}Settings();

        /// <summary>
        /// Constructs a new {@name}Settings object with default settings.
        /// </summary>
        public {@name}Settings() { }

        private {@name}Settings({@name}Settings existing) : base(existing)
        {
            GaxPreconditions.CheckNotNull(existing, nameof(existing));
            @join method : methods
                {@method.grpcName}Settings = existing.{@method.grpcName}Settings?.Clone();
            @end
        }

        @join def : retry.defs
            /// <summary>
            /// The filter specifying which RPC <see cref="StatusCode"/>s are eligible for retry
            /// for "{@def.name}" <see cref="{@name}Client"/> RPC methods.
            /// </summary>
            /// <remarks>
            @if def.anyStatusCodes
                /// The eligible RPC <see cref="StatusCode"/>s for retry for "{@def.name}" RPC methods are:
                /// <list type="bullet">
                @join statusCodeName : def.statusCodeNames
                /// <item><description><see cref="StatusCode.{@statusCodeName}"/></description></item>
                @end
                /// </list>
            @else
                /// There are no RPC <see cref="StatusCode"/>s eligible for retry for "{@def.name}" RPC methods.
            @end
            /// </remarks>
            public static Predicate<RpcException> {@def.name}RetryFilter { get; } =
                RetrySettings.FilterForStatusCodes({@def.statusCodeUseList});

        @end
        @join setting : retry.settings
            /// <summary>
            /// "{@setting.name}" retry backoff for <see cref="{@name}Client"/> RPC methods.
            /// </summary>
            /// <returns>The "{@setting.name}" retry backoff for <see cref="{@name}Client"/> RPC methods.</returns>
            /// <remarks>
            /// The "{@setting.name}" retry backoff for <see cref="{@name}Client"/> RPC methods is defined as:
            /// <list type="bullet">
            /// <item><description>Initial delay: {@setting.delayMs} milliseconds</description></item>
            /// <item><description>Delay multiplier: {@setting.delayMultiplier}</description></item>
            /// <item><description>Maximum delay: {@setting.delayMaxMs} milliseconds</description></item>
            /// </list>
            /// </remarks>
            public static BackoffSettings Get{@setting.name}RetryBackoff() => new BackoffSettings
            {
                Delay = TimeSpan.FromMilliseconds({@setting.delayMs}),
                DelayMultiplier = {@setting.delayMultiplier},
                MaxDelay = TimeSpan.FromMilliseconds({@setting.delayMaxMs}),
            };

            /// <summary>
            /// "{@setting.name}" timeout backoff for <see cref="{@name}Client"/> RPC methods.
            /// </summary>
            /// <returns>The "{@setting.name}" timeout backoff for <see cref="{@name}Client"/> RPC methods.</returns>
            /// <remarks>
            /// The "{@setting.name}" timeout backoff for <see cref="{@name}Client"/> RPC methods is defined as:
            /// <list type="bullet">
            /// <item><description>Initial timeout: {@setting.timeoutMs} milliseconds</description></item>
            /// <item><description>Timeout multiplier: {@setting.timeoutMultiplier}</description></item>
            /// <item><description>Maximum timeout: {@setting.timeoutMaxMs} milliseconds</description></item>
            /// </list>
            /// </remarks>
            public static BackoffSettings Get{@setting.name}TimeoutBackoff() => new BackoffSettings
            {
                Delay = TimeSpan.FromMilliseconds({@setting.timeoutMs}),
                DelayMultiplier = {@setting.timeoutMultiplier},
                MaxDelay = TimeSpan.FromMilliseconds({@setting.timeoutMaxMs}),
            };

        @end
        @join method : methods
            /// <summary>
            /// <see cref="CallSettings"/> for synchronous and asynchronous calls to
            /// <see cref="{@name}Client.{@method.name}"/> and <see cref="{@name}Client.{@method.name}Async"/>.
            /// </summary>
            /// <remarks>
            /// The default <see cref="{@name}Client.{@method.name}"/> and
            /// <see cref="{@name}Client.{@method.name}Async"/> <see cref="RetrySettings"/> are:
            /// <list type="bullet">
            /// <item><description>Initial retry delay: {@method.retrySetting.delayMs} milliseconds</description></item>
            /// <item><description>Retry delay multiplier: {@method.retrySetting.delayMultiplier}</description></item>
            /// <item><description>Retry maximum delay: {@method.retrySetting.delayMaxMs} milliseconds</description></item>
            /// <item><description>Initial timeout: {@method.retrySetting.timeoutMs} milliseconds</description></item>
            /// <item><description>Timeout multiplier: {@method.retrySetting.timeoutMultiplier}</description></item>
            /// <item><description>Timeout maximum delay: {@method.retrySetting.timeoutMaxMs} milliseconds</description></item>
            /// </list>
            /// Retry will be attempted on the following response status codes:
            /// <list>
            @if method.retryCodes.anyStatusCodes
                @join statusCodeName : method.retryCodes.statusCodeNames
                    /// <item><description><see cref="StatusCode.{@statusCodeName}"/></description></item>
                @end
            @else
                /// <item><description>No status codes</description></item>
            @end
            /// </list>
            /// Default RPC expiration is {@method.retrySetting.totalTimeoutMs} milliseconds.
            /// </remarks>
            public CallSettings {@method.grpcName}Settings { get; set; } = new CallSettings
            {
                RetrySettings = new RetrySettings
                {
                    RetryBackoff = Get{@method.retrySetting.name}RetryBackoff(),
                    TimeoutBackoff = Get{@method.retrySetting.name}TimeoutBackoff(),
                    RetryFilter = {@method.retryCodes.name}RetryFilter,
                },
                Expiration = Expiration.FromTimeout(TimeSpan.FromMilliseconds({@method.retrySetting.totalTimeoutMs})),
            };

        @end

        /// <summary>
        /// Creates a deep clone of this object, with all the same property values.
        /// </summary>
        /// <returns>A deep clone of this set of {@name} settings.</returns>
        public {@name}Settings Clone() => new {@name}Settings(this);
    }
@end

@private asyncMethodDeclaration(method, flat, modifier, withCallSettings)
    @join line : flat.xmlDocAsync
        {@line}
    @end
    
    @if withCallSettings
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
    @else
        /// <param name="cancellationToken">A <see cref="CancellationToken"/> to use for this RPC.</param>
    @end
    @if method.isPageStreaming
        /// <returns>An asynchronous sequence of pages of {@method.pageStreaming.resourceTypeName} items.</returns>
    @else
        /// <returns>A Task containing the RPC response.</returns>
    @end
    public {@modifier} {@method.asyncReturnTypeName} {@method.name}Async(
        @join param : flat.params
            {@param.typeName} {@param.name}{@param.defaultValue},
        @end
        @if withCallSettings
            CallSettings callSettings = null)
        @else
            CancellationToken cancellationToken)
        @end
@end

@private syncMethodDeclaration(method, flat, modifier)
    @join line : flat.xmlDocSync
        {@line}
    @end
    
    /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
    @if method.isPageStreaming
        /// <returns>A sequence of pages of {@method.pageStreaming.resourceTypeName} items.</returns>
    @else
        /// <returns>The RPC response.</returns>
    @end
    public {@modifier} {@method.syncReturnTypeName} {@method.name}(
        @join param : flat.params
            {@param.typeName} {@param.name}{@param.defaultValue},
        @end
        CallSettings callSettings = null)
@end

@private abstractClient(service, name)
    /// <summary>
    /// {@name} client wrapper, for convenient use.
    /// </summary>
    public abstract partial class {@name}Client
    {
        private static readonly ChannelPool s_channelPool = new ChannelPool();

        @let serviceInfo = context.getServiceInfo(service)
            /// <summary>
            /// The default endpoint for the {@name} service, which is a host of \
                "{@serviceInfo.host}" and a port of {@serviceInfo.port}.
            /// </summary>
            public static ServiceEndpoint DefaultEndpoint { get; } = \
                new ServiceEndpoint("{@serviceInfo.host}", {@serviceInfo.port});

            /// <summary>
            /// The default {@name} scopes
            /// </summary>
            /// <remarks>
            /// The default {@name} scopes are:
            /// <list type="bullet">
            @join scope : serviceInfo.scopes
                /// <item><description>"{@scope}"</description></item>
            @end
            /// </list>
            /// </remarks>
            public static IReadOnlyList<string> DefaultScopes { get; } = new ReadOnlyCollection<string>(new[] {
                @join scope : context.getServiceConfig.getAuthScopes(service)
                    "{@scope}",
                @end
            });
        @end

        @join pathTemplate : context.getPathTemplateInfos(service)
            /// <summary>
            /// Path template for a {@pathTemplate.docName} resource. Parameters:
            /// <list type="bullet">
            @join var : pathTemplate.vars
                /// <item><description>{@var}</description></item>
            @end
            /// </list>
            /// </summary>
            public static PathTemplate {@pathTemplate.baseName}Template { get; } = \
                new PathTemplate("{@pathTemplate.namePattern}");

            /// <summary>
            /// Creates a {@pathTemplate.docName} resource name from its component IDs.
            /// </summary>
            @join var : pathTemplate.vars
                /// <param name="{@var}Id">The {@var} ID.</param>
            @end
            /// <returns>The full {@pathTemplate.docName} resource name.</returns>
            public static string Get{@pathTemplate.baseName}Name({@pathTemplate.varArgDeclList}) => \
                {@pathTemplate.baseName}Template.Expand({@pathTemplate.varArgUseList});

        @end
        // Note: we could have parameterless overloads of Create and CreateAsync,
        // documented to just use the default endpoint, settings and credentials.
        // Pros:
        // - Might be more reassuring on first use
        // - Allows method group conversions
        // Con: overloads!

        /// <summary>
        /// Asynchronously creates a <see cref="{@name}Client"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="{@name}Settings"/>.</param>
        /// <returns>The task representing the created <see cref="{@name}Client"/>.</returns>
        public static async Task<{@name}Client> CreateAsync(ServiceEndpoint endpoint = null, {@name}Settings settings = null)
        {
            Channel channel = await s_channelPool.GetChannelAsync(endpoint ?? DefaultEndpoint).ConfigureAwait(false);
            return Create(channel, settings);
        }

        /// <summary>
        /// Synchronously creates a <see cref="{@name}Client"/>, applying defaults for all unspecified settings,
        /// and creating a channel connecting to the given endpoint with application default credentials where
        /// necessary.
        /// </summary>
        /// <param name="endpoint">Optional <see cref="ServiceEndpoint"/>.</param>
        /// <param name="settings">Optional <see cref="{@name}Settings"/>.</param>
        /// <returns>The created <see cref="{@name}Client"/>.</returns>
        public static {@name}Client Create(ServiceEndpoint endpoint = null, {@name}Settings settings = null)
        {
            Channel channel = s_channelPool.GetChannel(endpoint ?? DefaultEndpoint);
            return Create(channel, settings);
        }

        /// <summary>
        /// Creates a <see cref="{@name}Client"/> which uses the specified channel for remote operations.
        /// </summary>
        /// <param name="channel">The <see cref="Channel"/> for remote operations. Must not be null.</param>
        /// <param name="settings">Optional <see cref="{@name}Settings"/>.</param>
        /// <returns>The created <see cref="{@name}Client"/>.</returns>
        public static {@name}Client Create(Channel channel, {@name}Settings settings = null)
        {
            GaxPreconditions.CheckNotNull(channel, nameof(channel));
            {@name}.{@name}Client grpcClient = new {@name}.{@name}Client(channel);
            return new {@name}ClientImpl(grpcClient, settings);
        }

        /// <summary>
        /// Shuts down any channels automatically created by <see cref="Create(ServiceEndpoint, {@name}Settings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, {@name}Settings)"/>. Channels which weren't automatically
        /// created are not affected.
        /// </summary>
        /// <remarks>After calling this method, further calls to <see cref="Create(ServiceEndpoint, {@name}Settings)"/>
        /// and <see cref="CreateAsync(ServiceEndpoint, {@name}Settings)"/> will create new channels, which could
        /// in turn be shut down by another call to this method.</remarks>
        /// <returns>A task representing the asynchronous shutdown operation.</returns>
        public static Task ShutdownDefaultChannelsAsync() => s_channelPool.ShutdownChannelsAsync();

        /// <summary>
        /// The underlying GRPC {@name} client.
        /// </summary>
        public virtual {@name}.{@name}Client GrpcClient
        {
            get { throw new NotImplementedException(); }
        }

        @join method : context.getMethodInfos(service)
            @join flat : method.flats
                {@asyncMethodDeclaration(method, flat, "virtual", TRUE)}
                {
                    throw new NotImplementedException();
                }

                @if method.isPageStreaming == FALSE
                    {@asyncMethodDeclaration(method, flat, "virtual", FALSE)} => {@method.name}Async(
                            @join param : flat.params
                                {@param.name},
                            @end
                            new CallSettings { CancellationToken = cancellationToken });

                @end
                {@syncMethodDeclaration(method, flat, "virtual")}
                {
                    throw new NotImplementedException();
                }

            @end
        @end
    }
@end

@private clientImpl(service, name, methods)
    public sealed partial class {@name}ClientImpl : {@name}Client
    {
        private readonly ClientHelper _clientHelper;
        @join method : methods
            private readonly ApiCall<{@method.requestTypeName}, {@method.responseTypeName}> _call{@method.grpcName};
        @end

        public {@name}ClientImpl({@name}.{@name}Client grpcClient, {@name}Settings settings)
        {
            this.GrpcClient = grpcClient;
            {@name}Settings effectiveSettings = settings ?? {@name}Settings.GetDefault();
            _clientHelper = new ClientHelper(effectiveSettings);
            @join method : methods
                _call{@method.grpcName} = _clientHelper.BuildApiCall<{@method.requestTypeName}, {@method.responseTypeName}>(
                    GrpcClient.{@method.grpcName}Async, GrpcClient.{@method.grpcName}, effectiveSettings.{@method.grpcName}Settings);
            @end
        }

        public override {@name}.{@name}Client GrpcClient { get; }

        @join method : context.getMethodInfos(service)
            @join flat : method.flats
                @if method.isPageStreaming
                    {@asyncMethodDeclaration(method, flat, "override", TRUE)} => \
                            new PagedAsyncEnumerable<{@method.pageStreaming.requestTypeName}, \
                            {@method.pageStreaming.responseTypeName}, {@method.pageStreaming.resourceTypeName}>(
                            _call{@method.grpcName},
                            {@createRequest(method, flat)},
                            callSettings);

                    {@syncMethodDeclaration(method, flat, "override")} => \
                            new PagedEnumerable<{@method.pageStreaming.requestTypeName}, \
                            {@method.pageStreaming.responseTypeName}, {@method.pageStreaming.resourceTypeName}>(
                            _call{@method.grpcName},
                            {@createRequest(method, flat)},
                            callSettings);

                @else
                    {@asyncMethodDeclaration(method, flat, "override", TRUE)} => _call{@method.grpcName}.Async(
                            {@createRequest(method, flat)},
                            callSettings);

                    {@syncMethodDeclaration(method, flat, "override")} => _call{@method.grpcName}.Sync(
                            {@createRequest(method, flat)},
                            callSettings);

                @end
            @end
        @end
    }
@end

@private createRequest(method, flat)
    new {@method.requestTypeName}
    {
        @join param : flat.params
            @if param.isRepeated
                {@param.propertyName} = { {@param.name} },
            @else
                {@param.propertyName} = {@param.name}{@param.propertyTransform},
            @end
        @end
    }
@end

@private pageStreamPartials(pages)
    // Partial classes to enable page-streaming

    @join page : pages
        public partial class {@page.requestTypeName} : IPageRequest { }
        public partial class {@page.responseTypeName} : IPageResponse<{@page.resourceTypeName}>
        {
            public IEnumerator<{@page.resourceTypeName}> GetEnumerator() => {@page.responseResourceFieldName}.GetEnumerator();
            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }

    @end
@end
