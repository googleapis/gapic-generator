@extends "csharp/common.snip"
@extends "csharp/common_initcode.snip"

# snippets: SnippetsFileView
@snippet generate(snippets)
    {@initialComments(snippets.fileHeader)}

    namespace {@snippets.fileHeader.examplePackageName}
    {
        {@imports(snippets.fileHeader.importSection)}

        {@renderSnippets(snippets)}
    }

@end

# snippets: SnippetsFileView
@private renderSnippets(snippets)
    /// <summary>Generated snippets</summary>
    public class {@snippets.name}
    {
        # snpipetMethod: StaticLangApiMethodSnippetView
        @join snippetMethod : snippets.snippetMethods
            {@method(snippetMethod)}

        @end
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private method(snippetMethod)
    /// <summary>Snippet for {@snippetMethod.method.name}</summary>
    @switch snippetMethod.method.type.toString
    @case "FlattenedMethod"
        {@flattenedMethodSync(snippetMethod)}
    @case "FlattenedAsyncCallSettingsMethod"
        {@flattenedMethodAsyncCallSettings(snippetMethod)}
    @case "PagedFlattenedMethod"
        {@pagedFlattenedMethodSync(snippetMethod)}
    @case "PagedFlattenedAsyncMethod" 
        {@pagedFlattenedMethodAsync(snippetMethod)}
    @case "RequestObjectMethod"
        @if snippetMethod.method.isStreaming
            {@streamingRequestObjectMethod(snippetMethod)}
        @else
            {@requestObjectMethodSync(snippetMethod)}
        @end
    @case "AsyncRequestObjectCallSettingsMethod"
        {@requestObjectMethodAsyncCallSettings(snippetMethod)}
    @case "PagedRequestObjectMethod"
        {@pagedRequestObjectMethodSync(snippetMethod)}
    @case "AsyncPagedRequestObjectMethod"
        {@pagedRequestObjectMethodAsync(snippetMethod)}
    @case "OperationFlattenedMethod"
        {@operationFlattenedMethodSync(snippetMethod)}
    @case "AsyncOperationFlattenedMethod"
        {@operationFlattenedMethodAsync(snippetMethod)}
    @case "OperationRequestObjectMethod"
        {@operationRequestObjectMethodSync(snippetMethod)}
    @case "AsyncOperationRequestObjectMethod"
        {@operationRequestObjectMethodAsync(snippetMethod)}
    @default
        $unhandledCase: {@snippetMethod.method.type.toString}$
    @end
@end

@private flattenedMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        @if snippetMethod.method.hasReturnValue
            {@snippetMethod.callerResponseTypeName} response = {@sampleMethodCall(snippetMethod)};
        @else
            {@sampleMethodCall(snippetMethod)};
        @end
        // End snippet
    }
@end

@private flattenedMethodAsyncCallSettings(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        // Additional: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CancellationToken)
        {@preparations(snippetMethod, TRUE)}
        @if snippetMethod.method.hasReturnValue
            {@snippetMethod.callerResponseTypeName} response = await {@sampleMethodCall(snippetMethod)};
        @else
            await {@sampleMethodCall(snippetMethod)};
        @end
        // End snippet
    }
@end

@private pagedFlattenedMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumePagedResponseSync(snippetMethod)}
    }
@end

@private pagedRequestObjectMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumePagedResponseSync(snippetMethod)}
    }
@end

@private consumePagedResponseSync(snippetMethod)
    // Iterate over all response items, lazily performing RPCs as required
    foreach ({@snippetMethod.method.listMethod.resourceTypeName} item in response)
    {
        // Do something with each item
        Console.WriteLine(item);
    }

    // Or iterate over pages (of server-defined size), performing one RPC per page
    foreach ({@snippetMethod.method.listMethod.responseTypeName} page in response.AsRawResponses())
    {
        // Do something with each page of items
        Console.WriteLine("A page of results:");
        foreach ({@snippetMethod.method.listMethod.resourceTypeName} item in page)
        {
            Console.WriteLine(item);
        }
    }

    // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
    int pageSize = 10;
    Page<{@snippetMethod.method.listMethod.resourceTypeName}> singlePage = response.ReadPage(pageSize);
    // Do something with the page of items
    Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
    foreach ({@snippetMethod.method.listMethod.resourceTypeName} item in singlePage)
    {
        Console.WriteLine(item);
    }
    // Store the pageToken, for when the next page is required.
    string nextPageToken = singlePage.NextPageToken;
    // End snippet
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private pagedFlattenedMethodAsync(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        {@preparations(snippetMethod, TRUE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumePagedResponseAsync(snippetMethod)}
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private pagedRequestObjectMethodAsync(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        {@preparations(snippetMethod, TRUE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumePagedResponseAsync(snippetMethod)}
    }
@end

@private consumePagedResponseAsync(snippetMethod)
    // Iterate over all response items, lazily performing RPCs as required
    await response.ForEachAsync(({@snippetMethod.method.listMethod.resourceTypeName} item) =>
    {
        // Do something with each item
        Console.WriteLine(item);
    });

    // Or iterate over pages (of server-defined size), performing one RPC per page
    await response.AsRawResponses().ForEachAsync(({@snippetMethod.method.listMethod.responseTypeName} page) =>
    {
        // Do something with each page of items
        Console.WriteLine("A page of results:");
        foreach ({@snippetMethod.method.listMethod.resourceTypeName} item in page)
        {
            Console.WriteLine(item);
        }
    });

    // Or retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
    int pageSize = 10;
    Page<{@snippetMethod.method.listMethod.resourceTypeName}> singlePage = await response.ReadPageAsync(pageSize);
    // Do something with the page of items
    Console.WriteLine($"A page of {pageSize} results (unless it's the final page):");
    foreach ({@snippetMethod.method.listMethod.resourceTypeName} item in singlePage)
    {
        Console.WriteLine(item);
    }
    // Store the pageToken, for when the next page is required.
    string nextPageToken = singlePage.NextPageToken;
    // End snippet
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private requestObjectMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        @if snippetMethod.method.hasReturnValue
            {@snippetMethod.callerResponseTypeName} response = {@sampleMethodCall(snippetMethod)};
        @else
            {@sampleMethodCall(snippetMethod)};
        @end
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private streamingRequestObjectMethod(snippetMethod)
    @switch snippetMethod.method.grpcStreamingType
    @case "ServerStreaming"
        {@streamingRequestObjectMethodServer(snippetMethod)}
    @case "BidiStreaming"
        {@streamingRequestObjectMethodBidirectional(snippetMethod)}
    @default
        *** ERROR: Cannot handle streaming type '{@snippetMethod.method.grpcStreamingType.toString}' ***
    @end
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private streamingRequestObjectMethodServer(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        // Create client
        {@snippetMethod.apiClassName} {@snippetMethod.apiVariableName} = {@snippetMethod.apiClassName}.Create();
        // Initialize request argument
        {@topLevelInitCode(snippetMethod.method.initCode)}
        // Make the request, returning a streaming response
        {@snippetMethod.apiClassName}.{@snippetMethod.callerResponseTypeName} streamingResponse = {@sampleMethodCall(snippetMethod)};

        // Read streaming responses from server until complete
        IAsyncEnumerator<{@snippetMethod.method.serviceResponseTypeName}> responseStream = streamingResponse.ResponseStream;
        while (await responseStream.MoveNext())
        {
            {@snippetMethod.method.serviceResponseTypeName} response = responseStream.Current;
            // Do something with streamed response
        }
        // The response stream has completed
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private streamingRequestObjectMethodBidirectional(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}(CallSettings,BidirectionalStreamingSettings)
        // Create client
        {@snippetMethod.apiClassName} {@snippetMethod.apiVariableName} = {@snippetMethod.apiClassName}.Create();
        // Initialize streaming call, retrieving the stream object
        {@snippetMethod.apiClassName}.{@snippetMethod.callerResponseTypeName} duplexStream = {@snippetMethod.method.apiVariableName}.{@snippetMethod.method.name}();

        // Sending requests and retrieving responses can be arbitrarily interleaved.
        // Exact sequence will depend on client/server behavior.
        
        // Create task to do something with responses from server
        Task responseHandlerTask = Task.Run(async () =>
        {
            IAsyncEnumerator<{@snippetMethod.method.serviceResponseTypeName}> responseStream = duplexStream.ResponseStream;
            while (await responseStream.MoveNext())
            {
                {@snippetMethod.method.serviceResponseTypeName} response = responseStream.Current;
                // Do something with streamed response
            }
            // The response stream has completed
        });
        
        // Send requests to the server
        bool done = false;
        while (!done)
        {
            // Initialize a request
            {@topLevelInitCode(snippetMethod.method.initCode)}
            // Stream a request to the server
            await duplexStream.WriteAsync(request);
            
            // Set "done" to true when sending requests is complete
        }
        // Complete writing requests to the stream
        await duplexStream.WriteCompleteAsync();
        // Await the response handler.
        // This will complete once all server responses have been processed.
        await responseHandlerTask;
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private requestObjectMethodAsyncCallSettings(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        // Additional: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CancellationToken)
        {@preparations(snippetMethod, TRUE)}
        @if snippetMethod.method.hasReturnValue
            {@snippetMethod.callerResponseTypeName} response = await {@sampleMethodCall(snippetMethod)};
        @else
            await {@sampleMethodCall(snippetMethod)};
        @end
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private operationFlattenedMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumeOperationResponse(snippetMethod, FALSE)}
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private operationFlattenedMethodAsync(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CallSettings)
        // Additional: {@snippetMethod.method.name}({@snippetArgTypes(snippetMethod.method.methodParams)},CancellationToken)
        {@preparations(snippetMethod, TRUE)}
        {@snippetMethod.callerResponseTypeName} response =
            await {@sampleMethodCall(snippetMethod)};

        {@consumeOperationResponse(snippetMethod, TRUE)}
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private operationRequestObjectMethodSync(snippetMethod)
    public void {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        {@preparations(snippetMethod, FALSE)}
        {@snippetMethod.callerResponseTypeName} response =
            {@sampleMethodCall(snippetMethod)};

        {@consumeOperationResponse(snippetMethod, FALSE)}
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private operationRequestObjectMethodAsync(snippetMethod)
    public async Task {@snippetMethod.snippetMethodName}()
    {
        // Snippet: {@snippetMethod.method.name}({@snippetMethod.method.serviceRequestTypeName},CallSettings)
        {@preparations(snippetMethod, TRUE)}
        {@snippetMethod.callerResponseTypeName} response =
            await {@sampleMethodCall(snippetMethod)};

        {@consumeOperationResponse(snippetMethod, TRUE)}
        // End snippet
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView, isAsync: Boolean
@private consumeOperationResponse(snippetMethod, isAsync)
    // Poll until the returned long-running operation is complete
    {@snippetMethod.callerResponseTypeName} completedResponse =
        {@if(isAsync, "await ", "")}response.PollUntilCompleted{@if(isAsync, "Async", "")}();
    @if snippetMethod.method.hasReturnValue
        // Retrieve the operation result
        {@snippetMethod.method.responseTypeName} result = completedResponse.Result;
    @else
        // The long-running operation is now complete.
    @end

    // Or get the name of the operation
    string operationName = response.Name;
    // This name can be stored, then the long-running operation retrieved later by name
    {@snippetMethod.callerResponseTypeName} retrievedResponse =
        {@if(isAsync, "await ", "")}{@snippetMethod.apiVariableName}.PollOnce{@snippetMethod.method.name}(operationName);
    // Check if the retrieved long-running operation has completed
    if (retrievedResponse.IsCompleted)
    {
        @if snippetMethod.method.hasReturnValue
            // If it has completed, then access the result
            {@snippetMethod.method.responseTypeName} retrievedResult = retrievedResponse.Result;
        @else
            // The long-running operation is now complete.
        @end
    }
@end

# snippetMethod: StaticLangApiMethodSnippetView, isAsync: Boolean
@private preparations(snippetMethod, isAsync)
    // Create client
    @if isAsync
        {@snippetMethod.apiClassName} {@snippetMethod.apiVariableName} = await {@snippetMethod.apiClassName}.CreateAsync();
    @else
        {@snippetMethod.apiClassName} {@snippetMethod.apiVariableName} = {@snippetMethod.apiClassName}.Create();
    @end
    @if snippetMethod.method.initCode.topLevelLines.size
        // Initialize request argument(s)
        {@topLevelInitCode(snippetMethod.method.initCode)}
    @end
    // Make the request
@end

@private snippetArgTypes(params)
    @join param : params on ","
        {@param.typeName}
    @end
@end

# snippetMethod: StaticLangApiMethodSnippetView
@private sampleMethodCall(snippetMethod)
    {@snippetMethod.method.apiVariableName}.{@snippetMethod.method.name}(\
        {@rpcMethodCallArgList(snippetMethod.method.initCode.fieldSettings, snippetMethod.requiresNamedArguments)})
@end
