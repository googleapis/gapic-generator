@extends "csharp/common.snip"
@extends "csharp/common_initcode.snip"

# smoke: SmokeTestClassView
# smoke.apiMethod: StaticLangApiMethodView
@snippet generate(smoke)
    {@initialComments(smoke.fileHeader)}

    namespace {@smoke.fileHeader.packageName}.SmokeTests
    {
        {@imports(smoke.fileHeader.importSection)}

        public class {@smoke.name}
        {
            public static int Main(string[] args)
            {
                @if smoke.requireProjectId
                    // Read projectId from args
                    if (args.Length != 1)
                    {
                        Console.WriteLine("Usage: Project ID must be passed as first argument.");
                        Console.WriteLine();
                        return 1;
                    }
                    string projectId = args[0];

                @end
                // Create client
                {@smoke.apiClassName} client = {@smoke.apiClassName}.Create();

                @if smoke.hasMethod
                  {@methodCall(smoke.apiMethod)}
                @else
                  // Add your method call here.
                @end

                // Success
                Console.WriteLine("Smoke test passed OK");
                return 0;
            }
        }
    }

@end

# method: StaticLangApiMethodView
@private methodCall(apiMethod)
    // Initialize request argument(s)
    {@topLevelInitCode(apiMethod.initCode)}

    // Call API method
    @switch apiMethod.type
    @case "PagedFlattenedMethod"
        {@apiMethod.responseTypeName} pagedResponse = client.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
        // Show the result
        foreach (var item in pagedResponse)
        {
            Console.WriteLine(item);
        }
    @case "OperationFlattenedMethod"
        {@apiMethod.operationMethod.clientReturnTypeName} operationResponse = client.{@apiMethod.name}(\
            {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
        // Poll the operation until it's complete.
        // This returns a new operation containing the result (or error).
        operationResponse = operationResponse.PollUntilCompleted();
        // Show the result
        Console.WriteLine(operationResponse.Result);
    @case "FlattenedMethod"
        @if apiMethod.hasReturnValue
            {@apiMethod.responseTypeName} response = client.{@apiMethod.name}(\
                {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
            // Show the result
            Console.WriteLine(response);
        @else
            client.{@apiMethod.name}({@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
        @end
    @end
@end

@private sampleMethodCallArgList(fieldSettings)
    @join fieldSetting : fieldSettings on ", "
        {@fieldSetting.identifier}
    @end
@end
