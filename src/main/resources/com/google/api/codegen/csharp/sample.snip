@snippet generate(class)
    // BEFORE RUNNING:
    // ---------------
    // 1. If not already done, enable the {@class.apiTitle}
    //    and check the quota for your project at
    //    https://console.developers.google.com/apis/api/{@class.apiName}
    @switch class.auth.type
    @case "APPLICATION_DEFAULT_CREDENTIALS"
        // 2. This sample uses Application Default Credentials for authentication.
        //    If not already done, install the gcloud CLI from
        //    https://cloud.google.com/sdk and run
        //    `gcloud beta auth application-default login`.
        //    For more information, see
        //    https://developers.google.com/identity/protocols/application-default-credentials
        // 3. Install the C# client library by adding a dependency on the relevant NuGet
        //    package. Libraries published by Google are owned by google-apis-packages:
        //    https://www.nuget.org/profiles/google-apis-packages
    @default
        // 2. Install the C# client library by adding a dependency on the relevant NuGet
        //    package. Libraries published by Google are owned by google-apis-packages:
        //    https://www.nuget.org/profiles/google-apis-packages
    @end

    @join fileImport : class.importSection.appImports
        @join import : fileImport.types
            using {@import.fullName};
        @end
    @end

    @if class.dataNamespace
        using Data = {@class.dataNamespace};

    @end
    namespace {@class.namespaceName}
    {
        public class {@class.className}
        {
            {@mainFunc(class)}
            @switch class.auth.type
            @case "APPLICATION_DEFAULT_CREDENTIALS"

                {@getCredentialFunc_ADC()}
            @case "OAUTH_3L"

                {@getCredentialFunc_OAuth3L(class)}
            @default
            @end
        }
    }
@end

@private mainFunc(class)
    public static void Main(string[] args)
    {
        @if class.auth.type != "NONE"
            {@class.serviceTypeName} {@class.serviceVarName} = new {@class.serviceTypeName}(new BaseClientService.Initializer
            {
                @if class.auth.type == "API_KEY"
                    ApiKey = "",  // TODO: Update placeholder with desired API key.
                @else
                    HttpClientInitializer = GetCredential(),
                @end
                ApplicationName = "{@class.appName}",
            });
        @else
            {@class.serviceTypeName} {@class.serviceVarName} = new {@class.serviceTypeName}(new BaseClientService.Initializer());
        @end

        @join field : class.requiredFields if class.requiredFields
            {@field(field)}

        @end
        @join field : class.optionalFields if class.optionalFields
            {@field(field)}

        @end
        @if class.hasRequestBody
            @if class.requestBodyFields
                @join field : class.requestBodyFields
                    {@field(field)}

                @end


            @end
            @switch class.methodVerb
            @case "PATCH"
                // TODO: Assign values to desired properties of `{@class.requestBodyVarName}`. Only assigned
                // properties will be changed:
            @case "PUT"
                // TODO: Assign values to desired properties of `{@class.requestBodyVarName}`. All existing
                // properties will be replaced:
            @default
                // TODO: Assign values to desired properties of `{@class.requestBodyVarName}`:
            @end

            {@class.requestBodyTypeName} {@class.requestBodyVarName} = new {@class.requestBodyTypeName}();
            @join field : class.requestBodyFields if class.requestBodyFields
                {@class.requestBodyVarName}.{@field.setterFuncName} = {@field.name};
            @end

        @end
        @if class.hasMediaUpload
            // TODO: Add desired media content for upload. See
            // https://developers.google.com/api-client-library/dotnet/guide/media_upload

        @end
        {@class.requestTypeName} {@class.requestVarName} = {@class.serviceVarName}.{@callChain(class.methodNameComponents)}({@argList(class.methodCallFieldVarNames)});
        @join field : class.optionalFields if class.optionalFields
            {@class.requestVarName}.{@field.setterFuncName} = {@field.name};
        @end

        @if class.hasMediaDownload
            // TODO: Download media content if desired. See
            // https://developers.google.com/api-client-library/dotnet/guide/media_download

        @end
        @if class.isPageStreaming
            {@class.responseTypeName} {@class.responseVarName};
            do
            {
                // To execute asynchronously in an async method, replace `{@class.requestVarName}.Execute()` as shown:
                {@class.responseVarName} = {@class.requestVarName}.Execute();
                // {@class.responseVarName} = await {@class.requestVarName}.ExecuteAsync();

                if ({@class.responseVarName}.{@class.pageStreaming.resourceFieldName} == null)
                {
                    continue;
                }
                @if class.pageStreaming.isResourceRepeated
                    @if class.pageStreaming.isResourceMap
                        foreach ({@class.pageStreaming.resourceElementTypeName} {@class.pageStreaming.resourceVarName} in response.{@class.pageStreaming.resourceFieldName})
                        {
                            // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` element:
                            Console.WriteLine("[" + {@class.pageStreaming.resourceVarName}.Key + "] = " + JsonConvert.SerializeObject({@class.pageStreaming.resourceVarName}.Value));
                        }
                    @else
                        foreach ({@class.pageStreaming.resourceElementTypeName} {@class.pageStreaming.resourceVarName} in response.{@class.pageStreaming.resourceFieldName})
                        {
                            // TODO: Change code below to process each `{@class.pageStreaming.resourceVarName}` resource:
                            Console.WriteLine(JsonConvert.SerializeObject({@class.pageStreaming.resourceVarName}));
                        }
                    @end
                @else
                    // TODO: Change code below to process each `response.{@class.pageStreaming.resourceFieldName}` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(response.{@class.pageStreaming.resourceFieldName}));

                @end
                @if class.pageStreaming.isResourceSetterInRequestBody
                    {@class.requestBodyVarName}.{@class.pageStreaming.pageTokenName} = {@class.responseVarName}.{@class.pageStreaming.nextPageTokenName};
                @else
                    {@class.requestVarName}.{@class.pageStreaming.pageTokenName} = {@class.responseVarName}.{@class.pageStreaming.nextPageTokenName};
                @end
            } while ({@class.responseVarName}.{@class.pageStreaming.nextPageTokenName} != null);
        @else
            @if class.hasResponse
                // To execute asynchronously in an async method, replace `{@class.requestVarName}.Execute()` as shown:
                {@class.responseTypeName} {@class.responseVarName} = {@class.requestVarName}.Execute();
                // {@class.responseTypeName} {@class.responseVarName} = await {@class.requestVarName}.ExecuteAsync();

                // TODO: Change code below to process the `response` object:
                Console.WriteLine(JsonConvert.SerializeObject({@class.responseVarName}));
            @else
                // To execute asynchronously in an async method, replace `{@class.requestVarName}.Execute()` as shown:
                {@class.requestVarName}.Execute();
                // await {@class.requestVarName}.ExecuteAsync();
            @end
        @end
    }
@end

@private getCredentialFunc_ADC()
    public static GoogleCredential GetCredential()
    {
        GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
        if (credential.IsCreateScopedRequired)
        {
            credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
        }
       return credential;
    }
@end

@private getCredentialFunc_OAuth3L(class)
    public static UserCredential GetCredential()
    {
        // TODO: Change placeholder below to generate authentication credentials. See:
        // {@class.auth.instructionsUrl}
        //
        @if class.auth.isScopesSingular
            // Authorize using the following scope:
        @else
            // Authorize using one of the following scopes:
        @end
        @join scope : class.auth.scopes
            //     "{@scope}"
        @end
        return null;
    }
@end

@private field(field)
    @if field.description
        @join line : util.getDocLines(field.description, 100)
            // {@line}
        @end


    @end
    {@field.typeName} {@field.name} = {@field.defaultValue};  // TODO: Update placeholder value.
    @if field.example
        // {@field.example}
    @end
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end

@private argList(methodCallFieldVarNames)
  @join fieldVarName : methodCallFieldVarNames on ", "
    {@fieldVarName}
  @end
@end
