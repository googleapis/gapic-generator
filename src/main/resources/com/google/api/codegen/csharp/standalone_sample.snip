@extends "common.snip"
@extends "csharp/common.snip"
@extends "csharp/common_initcode.snip"

# StaticLangFileView
@snippet generate(sampleFile)
  @let sampleClass = sampleFile.classView
    @let apiMethod = sampleClass.libraryMethod, sample = sampleClass.sample
  	{@initialComments(sampleFile.fileHeader)}
    // DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")

    // [START {@sample.regionTag}]
    @if sample.sampleImports
      {@imports(sample.sampleImports)}

    @end
    class {@sampleClass.name}
    {
      @if not(sample.sampleFunctionDoc.isEmpty)
        {@processDoc(sample.sampleFunctionDoc)}
      @end
      public static void {@sample.sampleFunctionName}({@commaSeparatedArgAndTypes(sample.sampleInitCode.argDefaultParams)})
      {
        @switch sample.callingForm
        # Unary Methods
        @case "Request"
          {@requestMethod(apiMethod, sample)}
        @case "RequestAsync"
          {@requestAsyncMethod(apiMethod, sample)}
        @case "Flattened"
          {@flattenedMethod(apiMethod, sample)}
        @case "FlattenedAsync"
          {@flattenedAsyncMethod(apiMethod, sample)}

        # Pagination
        @case "RequestPaged"
          {@requesPagedMethod(apiMethod, sample)}
        @case "RequestPagedAll"
          {@requestPagedAllMethod(apiMethod, sample)}
        @case "RequestPagedPageSize"
          {@requestPagedPageSizeMethod(apiMethod, sample)}
        @case "FlattenedPaged"
          {@flattenedPagedMethod(apiMethod, sample)}
        @case "FlattenedPagedAll"
          {@flattenedPagedAllMethod(apiMethod, sample)}
        @case "FlattenedPagedPageSize"
          {@flattenedPagedPageSizeMethod(apiMethod, sample)}

        @case "RequestAsyncPaged"
          {@requestAsyncPagedMethod(apiMethod, sample)}
        @case "RequestAsyncPagedAll"
          {@requestAsyncPagedAllMethod(apiMethod, sample)}
        @case "RequestAsyncPagedPageSize"
          {@requestAsyncPagedPageSizeMethod(apiMethod, sample)}
        @case "FlattenedAsyncPaged"
          {@flattenedAsyncPagedMethod(apiMethod, sample)}
        @case "FlattenedAsyncPagedAll"
          {@flattenedAsyncPagedAllMethod(apiMethod, sample)}
        @case "FlattenedAsyncPagedPagedPageSize"
          {@flattenedAsyncPagedPageSizeMethod(apiMethod, sample)}

        # LRO
        @case "LongRunningFlattenedPollUntilComplete"
          {@longRunningFlattenedMethodPollUntilComplete(apiMethod, sample)}
        @case "LongRunningFlattenedPollLater"
          {@longRunningFlattenedMethodPollLater(apiMethod, sample)}
        @case "LongRunningFlattenedAsycPollUntilComplete"
          {@longRunningFlattenedAsyncMethodPollUntilComplete(apiMethod, sample)}
        @case "LongRunningFlattenedAsycPollLater"
          {@longRunningFlattenedAsyncMethodPollLater(apiMethod, sample)}
        @case "LongRunningRequestPollUntilComplete"
          {@longRunningRequestMethodPollUntilComplete(apiMethod, sample)}
        @case "LongRunningRequestPollLater"
          {@longRunningRequestMethodPollLater(apiMethod, sample)}
        @case "LongRunningRequestAsyncPollUntilComplete"
          {@longRunningRequestAsyncMethodPollUntilComplete(apiMethod, sample)}
        @case "LongRunningRequestAsyncPollLater"
          {@longRunningRequestAsyncMethodPollLater(apiMethod, sample)}
        @default
          "grpc streaming not supported yet."
        @end
        // FIXME: inspect the results
      }

      // [END {@sample.regionTag}]
      public static void Main(String[] args)
      {
      	// FIXME: pass in commandline arguments
      	// FIXME: call the sample function
      }
    }
    @end
  @end
@end

# Unary Methods
@private requestMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
  }
@end

@private requestAsyncMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
  }
@end

@private flattenedMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
  }
@end

@private flattenedAsyncMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
  }
@end


# Pagination
@private requestPagedMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@paging(apiMethod, sample)}
  }
@end

@private requestPagedAllMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingAll(apiMethod, sample)}
  }
@end

@private requestPagedPageSizeMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingPageSize(apiMethod, sample)}
  }
@end

@private requestAsyncPagedMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@paging(apiMethod, sample)}
  }
@end

@private requestAsyncPagedAllMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingAll(apiMethod, sample)}
  }
@end

@private requestAsyncPagedPageSizeMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingPageSize(apiMethod, sample)}
  }
@end

@private flattenedPagedMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@paging(apiMethod, sample)}  
  }
@end

@private flattenedPagedAllMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingAll(apiMethod, sample)}
  }
@end

@private flattenedPagedPageSizeMethod(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)} 
    {@methodCall(apiMethod, sample)}
    {@pagingPageSize(apiMethod, sample)}
  }
@end

@private flattenedAsyncPagedMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@paging(apiMethod, sample)}
  }
@end

@private flattenedAsyncPagedAllMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@methodCall(apiMethod, sample)}
    {@pagingAll(apiMethod, sample)}
  }
@end

@private flattenedAsyncPagedPageSizeMethod(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)} 
    {@methodCall(apiMethod, sample)}
    {@pagingPageSize(apiMethod, sample)}
  }
@end

# LRO

@private longRunningRequestMethodPollUntilComplete(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationUntilComplete(apiMethod, sample)}
  }
@end

@private longRunningRequestMethodPollLater(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationLater(apiMethod, sample)}
  }
@end

@private longRunningRequestAsyncMethodPollUntilComplete(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationUntilComplete(apiMethod, sample)}
  }
@end

@private longRunningRequestAsyncMethodPollLater(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationPollLater(apiMethod, sample)}
  }
@end

@private longRunningFlattenedMethodPollUntilComplete(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationUntilComplete(apiMethod, sample)}
  }
@end

@private longRunningFlattenedMethodPollLater(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationLater(apiMethod, sample)}
  }
@end

@private longRunningFlattenedAsyncMethodPollUntilComplete(apiMethod, sample)
  {@asyncSampleFunction(sample)}
  {
    {@asyncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationUntilComplete(apiMethod, sample)}
  }
@end

@private longRunningFlattenedAsyncMethodPollLater(apiMethod, sample)
  {@syncSampleFunction(sample)}
  {
    {@syncClient(apiMethod)}
    {@standaloneSampleInitCode(sample.sampleInitCode)}
    {@pollOperationPollLater(apiMethod, sample)}
  }
@end

@private commaSeparatedArgAndTypes(args)
  @join arg : args on ", "
    {@arg.typeName} {@arg.identifier}
  @end
@end

@private syncSampleFunction(sample)
  public static void {@sample.sampleFunctionName}({@commaSeparatedArgAndTypes(sample.sampleInitCode.argDefaultParams)})
@end

@private asyncSampleFunction(sample)
  public static async Task {@sample.sampleFunctionName}Async({@commaSeparatedArgAndTypes(sample.sampleInitCode.argDefaultParams)})
@end 

@private syncClient(apiMethod)
  {@apiMethod.apiClassName} {@apiMethod.apiVariableName} = \
      {@apiMethod.apiClassName}.Create();
@end

@private asyncClient(apiMethod)
  {@apiMethod.apiClassName} {@apiMethod.apiVariableName} = await \
      {@apiMethod.apiClassName}.CreateAsync();
@end

@private methodCall(apiMethod, sample)
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@rpcMethodCallArgList(sample.sampleInitCode.fieldSettings, FALSE)});
  @else
    {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@rpcMethodCallArgList(sample.sampleInitCode.fieldSettings, FALSE)});
  @end
@end

@private paging(apiMethod, sample)
  // Iterate over all response items, lazily performing RPCs as required
  foreach ({@apiMethod.listMethod.responseTypeName} page in response.asRawResponses())
  {
    foreach ({@apiMethod.listMethod.resourceTypeName} item in page)
    {
      processResponse
    }
  }
@end

@private pagingAll(apiMethod, sample)
  // Iterate over pages (of server-defined size), performing one RPC per page
  foreach ({@apiMethod.listMethod.resourceTypeName} item in response)
  {
    processResponse
  }
@end

@private pagingPageSize(apiMethod, sample)
  // Retrieve a single page of known size (unless it's the final page), performing as many RPCs as required
  int pageSize = 10;
  Page<{@apiMethod.listMethod.resourceTypeName}> singlePage = response.ReadPage(pageSize);
  foreach ({@apiMethod.listMethod.resourceTypeName} item in response)
  {
    processResponse
  }
@end

@private pollOperationUntilCompleteSync(apiMethod, sample)
  // Poll until the returned long-running operation is complete
  {@methodCall(apiMethod, sample)}.PollUntilCompleted(){@if(apiMethod.hasReturnValue, ".Result", "")};
  processResponse
@end

@private pollOperationUntilCompleteAsync(apiMethod, sample)
  // Poll until the returned long-running operation is complete
  {@methodCall(apiMethod, sample)}.PollUntilCompletedAsync(){@if(apiMethod.hasReturnValue, ".Result", "")};
  processResponse
@end

@private pollOperationLaterSync(apiMethod, sample)
  // Get the name of the operation
  string operationName = response.Name;

  // This name can be stored, then the long-running operation retrieved later by name
  Not Done Yet
  processResponse
@end

@private pollOperationLaterAsync(apiMethod, sample)
  // Get the name of the operation
  string operationName = response.Name;

  // This name can be stored, then the long-running operation retrieved later by name
  Not Done Yet
  processResponse
@end

# SampleFunctionDocView
@private processDoc(doc)
  @if doc.mainDocLines.size
    /// <summary>
    @join line : @doc.mainDocLines
      /// {@line}
    @end
    /// </summary>
  @end

  @join paramDoc : doc.paramDocLines
    @join line : paramDoc
      /// {@line}
    @end
  @end
@end
