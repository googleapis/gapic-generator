@snippet generateFilename(method)
  {@method.getName}.frag.cs
@end

@snippet generateClass(method, body, imports)
    @let api = context.getApi, \
         apiName = api.getName, \
         apiVersion = api.getVersion, \
         serviceTitle = context.getService.getTitle
        // PRE-REQUISITES:
        // ---------------
        // 1. If not already done, enable the {@serviceTitle}
        //    and check the quota for your project at
        //    https://console.developers.google.com/apis/api/{@apiName}
        // 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
        //    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
        // 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
        //    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
        {@imports()}
        @join import : context.sortUsings(imports)
            {@import}
        @end

        {@body}
    @end
@end

@private imports() fill
    {@context.addImport("Google.Apis.Auth.OAuth2")}
    {@context.addImport("Google.Apis.Services")}
    {@context.addImport("System.Threading.Tasks")}
@end

@snippet generateBody(method)
    @let sample = context.getSampleInfo(method)
        namespace {@sample.namespace}
        {
            public class Program
            {
                public static void Main(string[] args)
                {
                    {@mainMethod(sample)}
                }
            }
        }
    @end
@end

@private mainMethod(sample)
    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when runing on GCE.
    GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

    // Running locally requires scopes to be passed in manually.
    // GCE automatically pulls the scopes from the GCE metadata server.
    // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
    if (credential.IsCreateScopedRequired)
    {
        credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
    }

    {@sample.serviceTypeName} {@sample.serviceVarName} = new {@sample.serviceTypeName}(new BaseClientService.Initializer
    {
        HttpClientInitializer = credential,
        ApplicationName = "Google Cloud Platform Sample",
    });

    // TODO: Change placeholders below to values for parameters to the {@sample.methodName}() method:
    @join param : sample.params
        @join line : param.description
            {@line}
        @end

        {@param.typeName} {@param.name} = {@param.defaultValue};
    @end
    @if sample.hasRequestField

      // TODO Add code to assign values to properties of '{@sample.requestFieldName}'.
      {@sample.requestFieldTypeName} {@sample.requestFieldName} = new {@sample.requestFieldTypeName}();
    @end

    {@sample.requestTypeName} request = {@sample.serviceVarName}.{@sample.resourcePath}.{@sample.methodName}({@sample.paramList});
    @if sample.responseTypeName == "void"
        request.Execute();
    @else
        @if sample.isPageStreaming
            @let ps = sample.pageStreaming
                {@sample.responseTypeName} response;
                do
                {
                    response = request.Execute();
                    if (response.{@ps.resourceFieldName} == null)
                    {
                        continue;
                    }
                    foreach ({@ps.resourceTypeName} item in response.{@ps.resourceFieldName})
                    {
                        // TODO: Add code here to process each item.
                    }
                    request.PageToken = response.NextPageToken;
                } while (response.NextPageToken != null);
            @end
        @else
            {@sample.responseTypeName} response = request.Execute();
        @end
    @end

    // To execute asynchronously in an async method, use
    @if sample.responseTypeName == "void"
        // await request.ExecuteAsync();
    @else
        // {@sample.responseTypeName} response = await request.ExecuteAsync();
    @end
@end
