@extends "common.snip"

@snippet generateFilename(method)
  {@method.getName}.frag.cs
@end

@snippet generateClass(method, body, imports)
    @let api = context.getApi, \
         apiName = api.getName, \
         apiVersion = api.getVersion, \
         serviceTitle = context.getService.getTitle, \
         authType = context.getApiaryConfig.getAuthType
        // BEFORE RUNNING:
        // ---------------
        // 1. If not already done, enable the {@serviceTitle}
        //    and check the quota for your project at
        //    https://console.developers.google.com/apis/api/{@apiName}
        @if authType == "APPLICATION_DEFAULT_CREDENTIALS"
            // 2. This sample uses Application Default Credentials for authentication.
            //    If not already done, install the gcloud CLI from
            //    https://cloud.google.com/sdk/ and run
            //    `gcloud beta auth application-default login`
            // 3. Install the C# client library by adding a dependency on the relevant NuGet
            //    package. Libraries published by Google are owned by google-apis-packages:
            //    https://www.nuget.org/profiles/google-apis-packages
        @else
            // 2. Install the C# client library by adding a dependency on the relevant NuGet
            //    package. Libraries published by Google are owned by google-apis-packages:
            //    https://www.nuget.org/profiles/google-apis-packages
        @end
        {@imports()}
        @join import : context.sortUsings(imports)
            {@import}
        @end

        {@body}
    @end
@end

@private imports() fill
    {@context.addImport("Google.Apis.Auth.OAuth2")}
    {@context.addImport("Google.Apis.Services")}
    {@context.addImport("System.Threading.Tasks")}
@end

@snippet generateBody(method)

    @let sample = context.getSampleInfo(method), \
         apiaryConfig = context.getApiaryConfig, \
         authType = apiaryConfig.getAuthType
        namespace {@sample.namespace}
        {
            public class {@sample.serviceTypeName}Example
            {
                public static void Main(string[] args)
                {
                    {@mainMethod(sample, method)}
                }
                @if authType == "OAUTH_3L"

                    public static UserCredential GetCredential() {
                        // {@TODO()} Change placeholder below to get authentication credentials.
                        @let authInstructionsUrl = apiaryConfig.getAuthInstructionsUrl
                            @if authInstructionsUrl
                                // See: {@authInstructionsUrl}
                            @end
                        @end
                        @if context.hasAuthScopes(method)
                            //
                            // To use the `{@sample.methodName}` method, authorize using one of the following scopes:
                            @join scope : context.getAuthScopes(method)
                                //   {@scope}
                            @end
                        @end
                        return null;
                    }
                @end
            }
        }
    @end
@end

@private mainMethod(sample, method)
    @switch context.getApiaryConfig.getAuthType
    @case "APPLICATION_DEFAULT_CREDENTIALS"
        // Use Application Default Credentials for authentication when running locally.
        // For more information, see:
        // https://developers.google.com/identity/protocols/application-default-credentials
        GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
        if (credential.IsCreateScopedRequired)
        {
            credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
        }

        {@sample.serviceTypeName} {@sample.serviceVarName} = new {@sample.serviceTypeName}(new BaseClientService.Initializer
        {
            HttpClientInitializer = credential,
            ApplicationName = "Google Cloud Platform Sample",
        });
    @case "OAUTH_3L"
        UserCredential credential = GetCredential();

        {@sample.serviceTypeName} {@sample.serviceVarName} = new {@sample.serviceTypeName}(new BaseClientService.Initializer
        {
            HttpClientInitializer = credential,
            ApplicationName = "Google Cloud Platform Sample",
        });
    @default
        {@sample.serviceTypeName} {@sample.serviceVarName} = new {@sample.serviceTypeName}(new BaseClientService.Initializer
        {
            ApplicationName = "Google Cloud Platform Sample",

            // {@TODO()} Change placeholder below to desired API key:
            ApiKey = "{MY-API-KEY}",
        });
    @end
    {@BREAK}
    @if sample.params

        // {@TODO()} Change placeholders below to desired parameter values for the `{@sample.methodName}` method:

        @join param : sample.params
            {@description(param.description)}
            @if param.sample
                {@param.typeName} {@param.name} = {@param.defaultValue};  // {@param.sample}
            @else
                {@param.typeName} {@param.name} = {@param.defaultValue};
            @end

        @end

    @end
    @if sample.hasRequestField
        {@sample.requestFieldTypeName} {@sample.requestFieldName} = new {@sample.requestFieldTypeName}();
        @if context.isPatch(method)
            // {@TODO()} Assign values to desired properties of the `{@sample.requestFieldName}` object to be changed.
        @else
            // {@TODO()} Assign values to desired properties of the `{@sample.requestFieldName}` object.
        @end


    @end
    @if context.hasMediaUpload(method)
      // {@TODO()} Add desired media content for upload. For more information, see:
      // https://developers.google.com/api-client-library/dotnet/guide/media_upload


    @end
    {@sample.requestTypeName} {@requestName()} = {@sample.serviceVarName}.{@sample.resourcePath}.{@sample.methodName}({@sample.paramList});

    @if sample.responseTypeName == "void"
        // To execute asynchronously in an async method, replace `{@requestName()}.Execute()` as shown:
        {@requestName()}.Execute();
        // await {@requestName()}.ExecuteAsync();
    @else
        @if sample.isPageStreaming
            @let ps = sample.pageStreaming, \
                 responseTypeRef = context.getApiaryConfig.getType(method.getResponseTypeUrl), \
                 resourceField = context.getFirstRepeatedField(responseTypeRef)
                {@sample.responseTypeName} {@responseName()};
                do
                {
                    // To execute asynchronously in an async method, replace `{@requestName()}.Execute()` as shown:
                    {@responseName()} = {@requestName()}.Execute();
                    // {@responseName()} = await {@requestName()}.ExecuteAsync();

                    if ({@responseName()}.{@ps.resourceFieldName} == null)
                    {
                        continue;
                    }
                    @if context.isMapField(responseTypeRef, resourceField.getName)
                        foreach ({@ps.resourceTypeName} {@itemName()} in {@responseName()}.{@ps.resourceFieldName})
                        {
                            // {@TODO()} Change code below to process each `{@itemName()}` element:
                            {@printEntry(itemName())}
                        }
                    @else
                        @let resourceName = context.getSampleVarName(ps.resourceTypeName)
                            foreach ({@ps.resourceTypeName} {@resourceName} in {@responseName()}.{@ps.resourceFieldName})
                            {
                                // {@TODO()} Change code below to process each `{@resourceName}` resource:
                                {@print(resourceName)}
                            }
                        @end
                    @end
                    {@requestName()}.PageToken = {@responseName()}.NextPageToken;
                } while ({@responseName()}.NextPageToken != null);
            @end
        @else
            // To execute asynchronously in an async method, replace `{@requestName()}.Execute()` as shown:
            {@sample.responseTypeName} {@responseName()} = {@requestName()}.Execute();
            // {@sample.responseTypeName} {@responseName()} = await {@requestName()}.ExecuteAsync();

            // {@TODO()} Change code below to process the `{@responseName()}` object:
            {@print(responseName())}
        @end
    @end
@end

@private itemName()
    item
@end

@private requestName()
    request
@end

@private responseName()
    response
@end

@private description(description)
  @join line : context.lineWrapDoc(description)
    // {@line}
  @end
@end

# Unlike placeholders for other languages, this placeholder does not pretty-print output.
# This seems to require a third-party library like Json.NET: https://www.nuget.org/packages/newtonsoft.json/
@private print(element)
    @let JavaScriptSerializer = context.using("System.Web.Script.Serialization.JavaScriptSerializer")
        Console.WriteLine(new {@JavaScriptSerializer}().Serialize({@element}));
    @end
@end

@private printEntry(entry)
    @let JavaScriptSerializer = context.using("System.Web.Script.Serialization.JavaScriptSerializer")
        Console.WriteLine("[" + {@entry}.Key + "] = " + new {@JavaScriptSerializer}().Serialize({@entry}.Value));
    @end
@end
