@extends "csharp/common.snip"

# resourceNames: StaticLangResourceNamesView
@snippet generate(resourceNames)
    {@renderFileHeader(resourceNames.fileHeader)}

    namespace {@resourceNames.fileHeader.packageName}
    {
        {@resourceClasses(resourceNames.resourceNames)}

        {@partialProtoClasses(resourceNames.resourceProtos)}
    }
@end

# resource: List[ResourceNameView]
@private resourceClasses(resources)
    @join resource : resources
        @switch resource.type.toString
        @case "SINGLE"
            {@resourceClassSingle(resource)}
        @case "ONEOF"
            {@resourceClassOneof(resource)}
        @case "FIXED"
            {@resourceClassFixed(resource)}
        @end


    @end
@end

# resource: ResourceNameSingleView
@private resourceClassSingle(resource)
    /// <summary>
    /// Resource name for the '{@resource.docName}' resource.
    /// </summary>
    public sealed partial class {@resource.typeName} : gax::IResourceName, sys::IEquatable<{@resource.typeName}>
    {
        private static readonly gax::PathTemplate s_template = new gax::PathTemplate("{@resource.pattern}");

        /// <summary>
        /// Parses the given {@resource.docName} resource name in string form into a new
        /// <see cref="{@resource.typeName}"/> instance.
        /// </summary>
        /// <param name="{@resource.paramName}">The {@resource.docName} resource name in string form. Must not be <c>null</c>.</param>
        /// <returns>The parsed <see cref="{@resource.typeName}"/> if successful.</returns>
        public static {@resource.typeName} Parse(string {@resource.paramName})
        {
            gax::GaxPreconditions.CheckNotNull({@resource.paramName}, nameof({@resource.paramName}));
            gax::TemplatedResourceName resourceName = s_template.ParseName({@resource.paramName});
            return new {@resource.typeName}({@formatResourceNameArgs(resource.params)});
        }
        
        /// <summary>
        /// Tries to parse the given {@resource.docName} resource name in string form into a new
        /// <see cref="{@resource.typeName}"/> instance.
        /// </summary>
        /// <remarks>
        /// This method still throws <see cref="sys::ArgumentNullException"/> if <paramref name="{@resource.paramName}"/> is null,
        /// as this would usually indicate a programming error rather than a data error.
        /// </remarks>
        /// <param name="{@resource.paramName}">The {@resource.docName} resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="{@resource.typeName}"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed successfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string {@resource.paramName}, out {@resource.typeName} result)
        {
            gax::GaxPreconditions.CheckNotNull({@resource.paramName}, nameof({@resource.paramName}));
            gax::TemplatedResourceName resourceName;
            if (s_template.TryParseName({@resource.paramName}, out resourceName))
            {
                result = new {@resource.typeName}({@formatResourceNameArgs(resource.params)});
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="{@resource.typeName}"/> resource name class
        /// from its component parts.
        /// </summary>
        # param: ResourceNameParamView
        @join param : resource.params
            /// <param name="{@param.nameAsParam}">The {@param.docName} ID. Must not be <c>null</c>.</param>
        @end
        public {@resource.typeName}({@formatParams(resource.params)})
        {
            # param: ResourceNameParamView
            @join param : resource.params
                {@param.nameAsProperty} = gax::GaxPreconditions.CheckNotNull({@param.nameAsParam}, nameof({@param.nameAsParam}));
            @end
        }

        @join param : resource.params
            /// <summary>
            /// The {@param.docName} ID. Never <c>null</c>.
            /// </summary>
            public string {@param.nameAsProperty} { get; }

        @end
        /// <inheritdoc />
        public gax::ResourceNameKind Kind => gax::ResourceNameKind.Simple;

        /// <inheritdoc />
        public override string ToString() => s_template.Expand({@formatArgs(resource.params)});

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as {@resource.typeName});

        /// <inheritdoc />
        public bool Equals({@resource.typeName} other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==({@resource.typeName} a, {@resource.typeName} b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=({@resource.typeName} a, {@resource.typeName} b) => !(a == b);
    }
@end

# resource: ResourceNamOneofeView
@private resourceClassOneof(resource)
    /// <summary>
    /// Resource name which will contain one of a choice of resource names.
    /// </summary>
    /// <remarks>
    /// This resource name will contain one of the following:
    /// <list type="bullet">
    @join child : resource.children
        /// <item><description>{@child.enumName}: A resource of type '{@child.docName}'.</description></item>
    @end
    /// </list>
    /// </remarks>
    public sealed partial class {@resource.typeName} : gax::IResourceName, sys::IEquatable<{@resource.typeName}>
    {
        /// <summary>
        /// The possible contents of <see cref="{@resource.typeName}"/>.
        /// </summary>
        public enum OneofType
        {
            /// <summary>
            /// A resource of an unknown type.
            /// </summary>
            Unknown = 0,
            @join child : resource.children

                /// <summary>
                /// A resource of type '{@child.docName}'.
                /// </summary>
                {@child.enumName} = {@child.index},
            @end
        }

        /// <summary>
        /// Parses a resource name in string form into a new <see cref="{@resource.typeName}"/> instance.
        /// </summary>
        /// <remarks>
        /// To parse successfully the resource name must be one of the following:
        /// <list type="bullet">
        @join child : resource.children
            /// <item><description>{@child.enumName}: A resource of type '{@child.docName}'.</description></item>
        @end
        /// </list>
        /// Or an <see cref="gax::UnknownResourceName"/> if <paramref name="allowUnknown"/> is <c>true</c>.
        /// </remarks>
        /// <param name="name">The resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="allowUnknown">If true, will successfully parse an unknown resource name
        /// into an <see cref="gax::UnknownResourceName"/>; otherwise will throw an
        /// <see cref="sys::ArgumentException"/> if an unknown resource name is given.</param>
        /// <returns>The parsed <see cref="{@resource.typeName}"/> if successful.</returns>
        public static {@resource.typeName} Parse(string name, bool allowUnknown)
        {
            {@resource.typeName} result;
            if (TryParse(name, allowUnknown, out result))
            {
                return result;
            }
            throw new sys::ArgumentException("Invalid name", nameof(name));
        }

        /// <summary>
        /// Tries to parse a resource name in string form into a new <see cref="{@resource.typeName}"/> instance.
        /// </summary>
        /// <remarks>
        /// To parse successfully the resource name must be one of the following:
        /// <list type="bullet">
        @join child : resource.children
            /// <item><description>{@child.enumName}: A resource of type '{@child.docName}'.</description></item>
        @end
        /// </list>
        /// Or an <see cref="gax::UnknownResourceName"/> if <paramref name="allowUnknown"/> is <c>true</c>.
        /// </remarks>
        /// <param name="name">The resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="allowUnknown">If true, will successfully parse an unknown resource name
        /// into an <see cref="gax::UnknownResourceName"/>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="{@resource.typeName}"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string name, bool allowUnknown, out {@resource.typeName} result)
        {
            gax::GaxPreconditions.CheckNotNull(name, nameof(name));
            @join child : resource.children
                {@child.typeName} {@child.paramName};
                if ({@child.typeName}.TryParse(name, out {@child.paramName}))
                {
                    result = new {@resource.typeName}(OneofType.{@child.enumName}, {@child.paramName});
                    return true;
                }
            @end
            if (allowUnknown)
            {
                gax::UnknownResourceName unknownResourceName;
                if (gax::UnknownResourceName.TryParse(name, out unknownResourceName))
                {
                    result = new {@resource.typeName}(OneofType.Unknown, unknownResourceName);
                    return true;
                }
            }
            result = null;
            return false;
        }

        @join child : resource.children
            /// <summary>
            /// Construct a new instance of <see cref="{@resource.typeName}"/> from the provided <see cref="{@child.typeName}"/>
            /// </summary>
            /// <param name="{@child.paramName}">The <see cref="{@child.typeName}"/> to be contained within
            /// the returned <see cref="{@resource.typeName}"/>. Must not be <c>null</c>.</param>
            /// <returns>A new <see cref="{@resource.typeName}"/>, containing <paramref name="{@child.paramName}"/>.</returns>
            public static {@resource.typeName} From({@child.typeName} {@child.paramName}) => new {@resource.typeName}(OneofType.{@child.enumName}, {@child.paramName});

        @end
        private static bool IsValid(OneofType type, gax::IResourceName name)
        {
            switch (type)
            {
                case OneofType.Unknown: return true; // Anything goes with Unknown.
                @join child : resource.children
                    case OneofType.{@child.enumName}: return name is {@child.typeName};
                @end
                default: return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="{@resource.typeName}"/> resource name class
        /// from a suitable <see cref="gax::IResourceName"/> instance.
        /// </summary>
        public {@resource.typeName}(OneofType type, gax::IResourceName name)
        {
            Type = gax::GaxPreconditions.CheckEnumValue<OneofType>(type, nameof(type));
            Name = gax::GaxPreconditions.CheckNotNull(name, nameof(name));
            if (!IsValid(type, name))
            {
                throw new sys::ArgumentException($"Mismatched OneofType '{type}' and resource name '{name}'");
            }
        }

        /// <summary>
        /// The <see cref="OneofType"/> of the Name contained in this instance.
        /// </summary>
        public OneofType Type { get; }

        /// <summary>
        /// The <see cref="gax::IResourceName"/> contained in this instance.
        /// </summary>
        public gax::IResourceName Name { get; }

        private T CheckAndReturn<T>(OneofType type)
        {
            if (Type != type)
            {
                throw new sys::InvalidOperationException($"Requested type {type}, but this one-of contains type {Type}");
            }
            return (T)Name;
        }

        @join child : resource.children
            /// <summary>
            /// Get the contained <see cref="gax::IResourceName"/> as <see cref="{@child.typeName}"/>.
            /// </summary>
            /// <remarks>
            /// An <see cref="sys::InvalidOperationException"/> will be thrown if this does not
            /// contain an instance of <see cref="{@child.typeName}"/>.
            /// </remarks>
            public {@child.typeName} {@child.propertyName} => CheckAndReturn<{@child.typeName}>(OneofType.{@child.enumName});

        @end
        /// <inheritdoc />
        public gax::ResourceNameKind Kind => gax::ResourceNameKind.Oneof;

        /// <inheritdoc />
        public override string ToString() => Name.ToString();

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as {@resource.typeName});

        /// <inheritdoc />
        public bool Equals({@resource.typeName} other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==({@resource.typeName} a, {@resource.typeName} b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=({@resource.typeName} a, {@resource.typeName} b) => !(a == b);
    }
@end

# resource: ResourceNameFixedView
@private resourceClassFixed(resource)
    /// <summary>
    /// Resource name to represent the fixed string "{@resource.value}".
    /// </summary>
    public sealed partial class {@resource.typeName} : gax::IResourceName, sys::IEquatable<{@resource.typeName}>
    {
        /// <summary>
        /// The fixed string value: "{@resource.value}".
        /// </summary>
        public const string FixedValue = "{@resource.value}";

        /// <summary>
        /// An instance of <see cref="{@resource.typeName}"/>.
        /// </summary>
        public static {@resource.typeName} Instance => new {@resource.typeName}();

        /// <summary>
        /// Parses the given string into a new <see cref="{@resource.typeName}"/> instance.
        /// Only succeeds if the string is equal to "{@resource.value}".
        /// </summary>
        public static {@resource.typeName} Parse(string {@resource.paramName})
        {
            {@resource.typeName} result;
            if (!TryParse({@resource.paramName}, out result))
            {
                throw new sys::ArgumentException($"Invalid resource name, must be \"{FixedValue}\"", nameof({@resource.paramName}));
            }
            return result;
        }

        /// <summary>
        /// Tries to parse the given string into a new <see cref="{@resource.typeName}"/> instance.
        /// Only succeeds if the string is equal to "{@resource.value}".
        /// </summary>
        public static bool TryParse(string {@resource.paramName}, out {@resource.typeName} result)
        {
            gax::GaxPreconditions.CheckNotNull({@resource.paramName}, nameof({@resource.paramName}));
            if ({@resource.paramName} == FixedValue)
            {
                result = Instance;
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        private {@resource.typeName}() { }

        /// <inheritdoc />
        public gax::ResourceNameKind Kind => gax::ResourceNameKind.Fixed;

        /// <inheritdoc />
        public override string ToString() => FixedValue;

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as {@resource.typeName});

        /// <inheritdoc />
        public bool Equals({@resource.typeName} other) => other != null;

        /// <inheritdoc />
        public static bool operator ==({@resource.typeName} a, {@resource.typeName} b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=({@resource.typeName} a, {@resource.typeName} b) => !(a == b);
    }
@end

@private formatParams(params)
    @join param : params on ", "
        string {@param.nameAsParam}
    @end
@end

@private formatArgs(params)
    @join param : params on ", "
        {@param.nameAsProperty}
    @end
@end

@private formatResourceNameArgs(params)
    @join param : params on ", "
        resourceName[{@param.index}]
    @end
@end

# protos: List[ResourceProtoView]
@private partialProtoClasses(protos)
    # proto: ResourceProtoView
    @join proto : protos
        public partial class {@proto.protoClassName}
        {
            # field: ResourceProtoFieldView
            @join field : proto.fields
                /// <summary>
                /// <see cref="{@field.docTypeName}"/>-typed view over the <see cref="{@field.underlyingPropertyName}"/> resource name property.
                /// </summary>
                @if field.isRepeated
                    public {@field.typeName} {@field.propertyName} =>
                        new gax::ResourceNameList<{@field.elementTypeName}>({@field.underlyingPropertyName},
                            @if field.isAny
                                str => gax::UnknownResourceName.Parse(str));
                            @else
                                @if field.isOneof
                                    str => {@field.elementTypeName}.Parse(str, true));
                                @else
                                    str => {@field.elementTypeName}.Parse(str));
                                @end
                            @end
                @else
                    public {@field.typeName} {@field.propertyName}
                    {
                        @if field.isAny
                            get { return string.IsNullOrEmpty({@field.underlyingPropertyName}) ? null : gax::UnknownResourceName.Parse({@field.underlyingPropertyName}); }
                        @else
                            @if field.isOneof
                                get { return string.IsNullOrEmpty({@field.underlyingPropertyName}) ? null : {@field.parseMethodTypeName}.Parse({@field.underlyingPropertyName}, true); }
                            @else
                                get { return string.IsNullOrEmpty({@field.underlyingPropertyName}) ? null : {@field.parseMethodTypeName}.Parse({@field.underlyingPropertyName}); }
                            @end
                        @end
                        set { {@field.underlyingPropertyName} = value != null ? value.ToString() : ""; }
                    }
                @end

            @end
        }

    @end
@end
