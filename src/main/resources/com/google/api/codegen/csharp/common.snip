#fileHeader: FileHeaderView
@snippet renderFileHeader(fileHeader)
    {@initialComments(fileHeader)}

    {@imports(fileHeader.importSection)}
@end

@snippet initialComments(fileHeader)
    @join line : fileHeader.copyrightLines
      // {@line}
    @end

    //
    @join line : fileHeader.licenseLines
      // {@line}
    @end

    // Generated code. DO NOT EDIT!
@end

#importSection: ImportSectionView
@snippet imports(importSection)
    # fileImport: ImportFileView
    @join fileImport : importSection.appImports
        # import: ImportTypeView
        @join import : fileImport.types
            @if import.nickname
                using {@import.nickname} = {@import.fullName};
            @else
                using {@import.fullName};
            @end
        @end
    @end
@end

# doc: ApiMethodDocView
@snippet xmlDoc(doc)
    /// <summary>
    @if doc.mainDocLines
        @join line : doc.mainDocLines
            /// {@line}
        @end
    @else
        ///
    @end
    /// </summary>
    # param: ParamDocView
    @join param : doc.paramDocs
        @switch param.type.toString
        @case "SimpleParamDocView"
            /// <param name="{@skipAtSign(param.paramName)}">
            @if param.lines
                @join line : param.lines
                    /// {@line}
                @end
            @else
                ///
            @end
            /// </param>
        @default
            *** ERROR: Cannot display parameter doc of type '{@param.type.toString}' ***
        @end
    @end
    @if doc.returnsDocLines
        /// <returns>
        @join line : doc.returnsDocLines
            /// {@line}
        @end
        /// </returns>
    @end
@end

@private skipAtSign(s)
    @if s.startsWith("@")
        {@s.substring(1)}
    @else
        {@s}
    @end
@end

@snippet if(c, t, f)
    @if c
        {@t}
    @else
        {@f}
    @end
@end

@snippet retryCodes(codes)
    @join code : codes on ", "
        grpccore::StatusCode.{@code}
    @end
@end

@snippet formatResourceParams(vars)
    @join var : vars on ", "
        string {@var.name}
    @end
@end

@snippet formatResourceArgs(vars)
    @join var : vars on ", "
        {@var.name}
    @end
@end

@snippet objectParams(params)
    @join param : params on ",".add(BREAK)
        {@param.typeName} {@param.name}{@paramDefault(param)}
    @end
@end

@private paramDefault(param)
    @if param.hasDefaultValue
        {@""} = {@param.defaultValue}
    @end
@end

@snippet objectArgs(args)
    @join arg : args on ",".add(BREAK)
        {@arg.name}
    @end
@end

@snippet argList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end
