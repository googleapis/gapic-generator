@snippet generate(class)
  <html>
    <head></head>
    <body>
      <!--
      BEFORE RUNNING:
      ---------------
      1. If not already done, enable the {@class.apiTitle}
         and check the quota for your project at
         https://console.developers.google.com/apis/api/{@class.apiName}
      2. Get access keys for your application. See
         https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
      @if class.auth.instructionsUrl
        3. For additional information on authentication, see
           {@class.auth.instructionsUrl}
      @end
      -->
      <script>
      function {@class.makeApiCallFuncName}() {
        @if class.needParams
          @if class.requiredFields
            var {@class.paramsVarName} = {
              @join field : class.requiredFields if class.requiredFields on BREAK.add(BREAK)
                {@field(field)}
              @end
            };
          @else
            var {@class.paramsVarName} = {};
          @end


        @end
        @if class.hasRequestBody
          var {@class.requestBodyVarName} = {
            @if class.requestBodyFields
              @join field : class.requestBodyFields
                {@field(field)}

              @end

            @end
            @switch class.methodVerb
            @case "PATCH"
              // TODO: Add desired properties to the request body. Only these properties
              // will be changed.
            @case "PUT"
              // TODO: Add desired properties to the request body. All existing properties
              // will be replaced.
            @default
              // TODO: Add desired properties to the request body.
            @end
          };

        @end
        @if class.hasMediaUpload
          // TODO: To upload media, use CORS. See
          // https://developers.google.com/api-client-library/javascript/features/cors

        @end
        @if class.hasMediaDownload
          // TODO: To download media, use CORS. See
          // https://developers.google.com/api-client-library/javascript/features/cors

        @end
        @if class.isPageStreaming
          {@class.pageStreaming.executeRequestFuncName}({@argList(class, @FALSE)});
        @else
          var {@class.requestVarName} = gapi.client.{@callChain(class.methodNameComponents)}({@argList(class, @TRUE)});
          @if class.hasResponse
            {@class.requestVarName}.then(function({@class.responseVarName}) {
              // TODO: Change code below to process the `{@class.responseVarName}` object:
              console.log({@class.responseVarName}.result);
            }, function(reason) {
              console.error('error: ' + reason.result.error.message);
            });
          @else
            {@class.requestVarName}.then(function() {}, function(reason) {
              console.error('error: ' + reason.result.error.message');
            });
          @end
        @end
      }

      @if class.isPageStreaming
        function {@class.pageStreaming.executeRequestFuncName}({@argList(class, @FALSE)}) {
          var {@class.requestVarName} = gapi.client.{@callChain(class.methodNameComponents)}({@argList(class, @TRUE)});
          request.then(function({@class.responseVarName}) {
            var {@class.pageStreaming.pageVarName} = {@class.responseVarName}.result.{@class.pageStreaming.resourceFieldName};
            @if class.pageStreaming.isResourceRepeated
              @if class.pageStreaming.isResourceMap
                Object.keys({@class.pageStreaming.pageVarName}).forEach(function({@class.pageStreaming.resourceKeyVarName}) {
                  // TODO: Change code below to process each `{@class.pageStreaming.resourceKeyVarName}` property:
                  console.log({@class.pageStreaming.resourceKeyVarName}, {@class.pageStreaming.pageVarName}[{@class.pageStreaming.resourceKeyVarName}]);
                });
              @else
                for (var i = 0; i < {@class.pageStreaming.pageVarName}.length; i++) {
                  // TODO: Change code below to process each resource in `{@class.pageStreaming.pageVarName}`:
                  console.log({@class.pageStreaming.pageVarName}[i]);
                }
              @end
            @else
              // TODO: Change code below to process each `{@class.pageStreaming.pageVarName}` resource:
              console.log({@class.pageStreaming.pageVarName});
            @end

            if ({@class.responseVarName}.result.nextPageToken) {
              @if class.pageStreaming.isResourceSetterInRequestBody
                {@class.requestBodyVarName}.pageToken = {@class.responseVarName()}.result.nextPageToken;
              @else
                {@class.paramsVarName}.pageToken = {@class.responseVarName()}.result.nextPageToken;
              @end
              {@class.pageStreaming.executeRequestFuncName}({@argList(class, @FALSE)});
            }
          }, function(reason) {
            console.error('error: ' + reason.result.error.message);
          });
        }

      @end
      function {@class.initClientFuncName}() {
        @if class.auth.type != "NONE"
          var API_KEY = '';  // TODO: Update placeholder with desired API key.

        @end
        @switch class.auth.type
        @case "NONE"
        @case "API_KEY"
        @default
          var CLIENT_ID = '';  // TODO: Update placeholder with desired client ID.

          @if class.auth.isScopesSingular
            // TODO: Authorize using the following scope:
          @else
            // TODO: Authorize using one of the following scopes:
          @end
          @join scope : class.auth.scopes
            //   '{@scope}'
          @end
          var SCOPE = '';

        @end
        gapi.client.init({
          @if class.auth.type != "NONE"
            'apiKey': API_KEY,
          @end
          @switch class.auth.type
          @case "NONE"
          @case "API_KEY"
          @default
            'clientId': CLIENT_ID,
            'scope': SCOPE,
          @end
          'discoveryDocs': ['{@class.discoveryDocUrl}'],
        }).then(function() {
          @switch class.auth.type
          @case "NONE"
            {@class.makeApiCallFuncName}();
          @case "API_KEY"
            {@class.makeApiCallFuncName}();
          @default
            gapi.auth2.getAuthInstance().isSignedIn.listen({@class.updateSignInStatusFuncName});
            {@class.updateSignInStatusFuncName}(gapi.auth2.getAuthInstance().isSignedIn.get());
          @end
        });
      }

      function {@class.handleClientLoadFuncName}() {
        @switch class.auth.type
        @case "NONE"
          gapi.load('client', {@class.initClientFuncName});
        @case "API_KEY"
          gapi.load('client', {@class.initClientFuncName});
        @default
          gapi.load('client:auth2', {@class.initClientFuncName});
        @end
      }
      @switch class.auth.type
      @case "NONE"
      @case "API_KEY"
      @default

        function {@class.updateSignInStatusFuncName}(isSignedIn) {
          if (isSignedIn) {
            {@class.makeApiCallFuncName}();
          }
        }

        function {@class.handleSignInClickFuncName}(event) {
          gapi.auth2.getAuthInstance().signIn();
        }

        function {@class.handleSignOutClickFuncName}(event) {
          gapi.auth2.getAuthInstance().signOut();
        }
      @end
      </script>
      <script async defer src="https://apis.google.com/js/api.js"
        onload="this.onload=function(){};{@class.handleClientLoadFuncName}()"
        onreadystatechange="if (this.readyState === 'complete') this.onload()">
      </script>
      @switch class.auth.type
      @case "NONE"
      @case "API_KEY"
      @default
        <button id="signin-button" onclick="{@class.handleSignInClickFuncName}()">Sign in</button>
        <button id="signout-button" onclick="{@class.handleSignOutClickFuncName}()">Sign out</button>
      @end
    </body>
  </html>
@end

@private field(field)
  @if field.description
    @join line : util.getDocLines(field.description, 100)
      // {@line}
    @end


  @end
  {@field.name}: {@field.defaultValue},  // TODO: Update placeholder value.
  @if field.example
    // {@field.example}
  @end
@end

# If `needParams` is false and `hasRequestBody` is true, then the function will
# return "{}, {@class.requestBodyVarName}" if `isCall` is true, otherwise will
# return "{@class.requestBodyVarName}".
# The first case is needed for calls to the function dynamically generated by
# the client library, which takes the parameter list as first argument. The
# second case is used to simplify functions defined in the sample.
@private argList(class, isCall)
  @if class.needParams
    @if class.hasRequestBody
      {@class.paramsVarName}, {@class.requestBodyVarName}
    @else
      {@class.paramsVarName}
    @end
  @else
    @if class.hasRequestBody
      @if isCall
        {}, {@class.requestBodyVarName}
      @else
        {@class.requestBodyVarName}
      @end
    @end
  @end
@end

@private callChain(methodNameComponents)
  @join resource : methodNameComponents on "."
    {@resource}
  @end
@end
