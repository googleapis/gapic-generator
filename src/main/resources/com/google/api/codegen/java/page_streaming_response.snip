@extends "java/common.snip"

@snippet generate(pagedResponseClasses)
  {@renderFileHeader(pagedResponseClasses.fileHeader)}

  // AUTO-GENERATED DOCUMENTATION AND CLASS
  /**
   * Wrapper class to contain paged response types for page streaming methods.
   * Each static class inside this wrapper class is used as the return type of
   * one of an API method that implements the page streaming pattern.
   */
  @@Generated("by GAPIC")
  @@ExperimentalApi
  public class {@pagedResponseClasses.name} {

    @join pagedResponseClass : pagedResponseClasses.pagedResponseWrapperList
      public static class {@pagedResponseClass.name} extends AbstractPagedListResponse<
          {@pagedResponseClass.requestTypeName},
          {@pagedResponseClass.responseTypeName},
          {@pagedResponseClass.resourceTypeName},
          {@pagedResponseClass.pageName},
          {@pagedResponseClass.fixedSizeCollectionName}> {

        public static ApiFuture<{@pagedResponseClass.name}> createAsync(
            PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
            ApiFuture<{@pagedResponseClass.responseTypeName}> futureResponse) {
          ApiFuture<{@pagedResponseClass.pageName}> futurePage =
              {@pagedResponseClass.pageName}.createEmptyPage().createPageAsync(context, futureResponse);
          return ApiFutures.transform(
              futurePage,
              new ApiFunction<{@pagedResponseClass.pageName}, {@pagedResponseClass.name}>() {
                @@Override
                public {@pagedResponseClass.name} apply({@pagedResponseClass.pageName} input) {
                  return new {@pagedResponseClass.name}(input);
                }
              });
        }

        private {@pagedResponseClass.name}({@pagedResponseClass.pageName} page) {
          super(page, {@pagedResponseClass.fixedSizeCollectionName}.createEmptyCollection());
        }
        {@iterateAllResourceMethods(pagedResponseClass)}
      }

      public static class {@pagedResponseClass.pageName} extends AbstractPage<
          {@pagedResponseClass.requestTypeName},
          {@pagedResponseClass.responseTypeName},
          {@pagedResponseClass.resourceTypeName},
          {@pagedResponseClass.pageName}> {

        private {@pagedResponseClass.pageName}(
            PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
            {@pagedResponseClass.responseTypeName} response) {
          super(context, response);
        }

        private static {@pagedResponseClass.pageName} createEmptyPage() {
          return new {@pagedResponseClass.pageName}(null, null);
        }

        @@Override
        protected {@pagedResponseClass.pageName} createPage(
            PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
            {@pagedResponseClass.responseTypeName} response) {
          return new {@pagedResponseClass.pageName}(context, response);
        }

        @@Override
        protected ApiFuture<{@pagedResponseClass.pageName}> createPageAsync(
            PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
            ApiFuture<{@pagedResponseClass.responseTypeName}> futureResponse) {
          return super.createPageAsync(context, futureResponse);
        }
        {@iterateAllResourceMethods(pagedResponseClass)}
        {@getValuesResourceMethods(pagedResponseClass)}
      }

      public static class {@pagedResponseClass.fixedSizeCollectionName} extends AbstractFixedSizeCollection<
          {@pagedResponseClass.requestTypeName},
          {@pagedResponseClass.responseTypeName},
          {@pagedResponseClass.resourceTypeName},
          {@pagedResponseClass.pageName},
          {@pagedResponseClass.fixedSizeCollectionName}> {

        private {@pagedResponseClass.fixedSizeCollectionName}(List<{@pagedResponseClass.pageName}> pages, int collectionSize) {
          super(pages, collectionSize);
        }

        private static {@pagedResponseClass.fixedSizeCollectionName} createEmptyCollection() {
          return new {@pagedResponseClass.fixedSizeCollectionName}(null, 0);
        }

        @@Override
        protected {@pagedResponseClass.fixedSizeCollectionName} createCollection(
            List<{@pagedResponseClass.pageName}> pages, int collectionSize) {
          return new {@pagedResponseClass.fixedSizeCollectionName}(pages, collectionSize);
        }
        {@getValuesResourceMethods(pagedResponseClass)}
      }

    @end
  }
@end

@private iterateAllResourceMethods(pagedResponseClass)
  @join iterateMethod : pagedResponseClass.iterateMethods
    public Iterable<{@iterateMethod.overloadResourceTypeName}> {@iterateMethod.overloadResourceTypeIterateMethodName}() {
      return Iterables.transform({@iterateMethod.iterateMethodName}(), new Function<{@pagedResponseClass.resourceTypeName}, {@iterateMethod.overloadResourceTypeName}>() {
          @@Override
          public {@iterateMethod.overloadResourceTypeName} apply({@pagedResponseClass.resourceTypeName} arg0) {
            return {@iterateMethod.overloadResourceTypeParseFunctionName}(arg0);
          }
        }
      );
    }
  @end
  {@BREAK}
@end

@private getValuesResourceMethods(pagedResponseClass)
  @join iterateMethod : pagedResponseClass.iterateMethods
    public Iterable<{@iterateMethod.overloadResourceTypeName}> {@iterateMethod.overloadResourceTypeGetValuesMethodName}() {
      return Iterables.transform({@iterateMethod.getValuesMethodName}(), new Function<{@pagedResponseClass.resourceTypeName}, {@iterateMethod.overloadResourceTypeName}>() {
          @@Override
          public {@iterateMethod.overloadResourceTypeName} apply({@pagedResponseClass.resourceTypeName} arg0) {
            return {@iterateMethod.overloadResourceTypeParseFunctionName}(arg0);
          }
        }
      );
    }
  @end
  {@BREAK}
@end
