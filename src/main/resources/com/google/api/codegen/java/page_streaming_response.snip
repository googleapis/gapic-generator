@extends "java/common.snip"

@snippet generate(pagedResponseClass)
  {@renderFileHeader(pagedResponseClass.fileHeader)}

  // AUTO-GENERATED DOCUMENTATION AND CLASS
  /**
   * Wrapper class to contain paged response types for page streaming methods.
   * Each static class inside this wrapper class is used as the return type of
   * one of an API method that implements the page streaming pattern.
   */
  @@Generated("by GAPIC")
  @if pagedResponseClass.releaseLevelAnnotation
    {@pagedResponseClass.releaseLevelAnnotation}
  @end
  public static class {@pagedResponseClass.pagedResponseTypeName} extends AbstractPagedListResponse<
      {@pagedResponseClass.requestTypeName},
      {@pagedResponseClass.responseTypeName},
      {@pagedResponseClass.resourceTypeName},
      {@pagedResponseClass.pageTypeName},
      {@pagedResponseClass.fixedSizeCollectionTypeName}> {

    public static ApiFuture<{@pagedResponseClass.pagedResponseTypeName}> createAsync(
        PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context,
        ApiFuture<{@pagedResponseClass.responseTypeName}> futureResponse) {
      ApiFuture<{@pagedResponseClass.pageTypeName}> futurePage =
          {@pagedResponseClass.pageTypeName}.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<{@pagedResponseClass.pageTypeName}, {@pagedResponseClass.pagedResponseTypeName}>() {
            @@Override
            public {@pagedResponseClass.pagedResponseTypeName} apply({@pagedResponseClass.pageTypeName} input) {
              return new {@pagedResponseClass.pagedResponseTypeName}(input);
            }
          });
    }

    private {@pagedResponseClass.pagedResponseTypeName}({@pagedResponseClass.pageTypeName} page) {
      super(page, {@pagedResponseClass.fixedSizeCollectionTypeName}.createEmptyCollection());
    }
    {@iterateAllResourceMethods(pagedResponseClass)}
  }
@end

@private iterateAllResourceMethods(pagedResponseClass)
  @join iterateMethod : pagedResponseClass.iterateMethods
    public Iterable<{@iterateMethod.overloadResourceTypeName}> {@iterateMethod.overloadResourceTypeIterateMethodName}() {
      return Iterables.transform({@iterateMethod.iterateMethodName}(), new Function<{@pagedResponseClass.resourceTypeName}, {@iterateMethod.overloadResourceTypeName}>() {
          @@Override
          public {@iterateMethod.overloadResourceTypeName} apply({@pagedResponseClass.resourceTypeName} arg0) {
            return {@iterateMethod.overloadResourceTypeParseFunctionName}(arg0);
          }
        }
      );
    }
  @end
  {@BREAK}
@end
