@extends "java/common.snip"

@snippet generate(pagedResponseClasses)
  {@renderFileHeader(pagedResponseClasses.fileHeader)}

  // AUTO-GENERATED DOCUMENTATION AND CLASS
  /**
   * Wrapper class to contain paged response types for page streaming methods.
   * Each static class inside this wrapper class is used as the return type of
   * one of an API method that implements the page streaming pattern.
   */
  @@Generated("by GAPIC")
  @@ExperimentalApi
  public class {@pagedResponseClasses.name} {

    @join pagedResponseClass : pagedResponseClasses.pagedResponseWrapperList
      public static class {@pagedResponseClass.name} implements PagedListResponse<{@pagedResponseClass.resourceTypeName}> {

        private final PagedListResponseContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context;
        private final {@pagedResponseClass.pageName} page;

        public {@pagedResponseClass.name}(
            UnaryCallable<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}> callable,
            PagedListDescriptor<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> pageDescriptor,
            {@pagedResponseClass.requestTypeName} request,
            CallContext callContext) {
          this.context = new PagedListResponseContext<>(callable, pageDescriptor, request, callContext);
          this.page = new {@pagedResponseClass.pageName}(this.context);
        }

        public Iterator<{@pagedResponseClass.resourceTypeName}> iterateAll() {
          return context.iterateAll();
        }

        public Page<{@pagedResponseClass.resourceTypeName}> getPage() {
          return page;
        }

        public Iterator<{@pagedResponseClass.pageName}> iteratePages() {
          return new PageContext.PageIterator<{@pagedResponseClass.pageName}>(
            new PageContext.PageFetcher<{@pagedResponseClass.pageName}>() {
              @@Override
              public {@pagedResponseClass.pageName} getNextPage({@pagedResponseClass.pageName} currentPage) {
                return currentPage.getNextPage();
              }
            },
            page);
        }

        public String getNextPageToken() {
          return context.getNextPageToken();
        }

        public FixedSizeCollection<{@pagedResponseClass.resourceTypeName}> expandToFixedSizeCollection(int collectionSize) {
          return context.expandToFixedSizeCollection(collectionSize);
        }

        public Iterator<FixedSizeCollection<{@pagedResponseClass.resourceTypeName}>> iterateFixedSizeCollections(int collectionSize) {
          return context.iterateFixedSizeCollections(collectionSize);
        }
        {@iterateMethods(pagedResponseClass)}
      }

      public static class {@pagedResponseClass.pageName} implements Page<{@pagedResponseClass.resourceTypeName}> {
        private final PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context;

        public {@pagedResponseClass.pageName}(PageContext<{@pagedResponseClass.requestTypeName}, {@pagedResponseClass.responseTypeName}, {@pagedResponseClass.resourceTypeName}> context) {
          this.context = context;
        }

        @@Override
        public Iterator<{@pagedResponseClass.resourceTypeName}> iterator() {
          return context.getResourceIterator();
        }

        @@Override
        public boolean hasNextPage() {
          return context.hasNextPage();
        }

        @@Override
        public String getNextPageToken() {
          return context.getNextPageToken();
        }

        @@Override
        public {@pagedResponseClass.pageName} getNextPage() {
          return new {@pagedResponseClass.pageName}(context.getNextPageContext());
        }

        public {@pagedResponseClass.pageName} getNextPage(int pageSize) {
          return new {@pagedResponseClass.pageName}(context.getNextPageContext(pageSize));
        }

        @@Override
        public Iterator<{@pagedResponseClass.resourceTypeName}> iterateAll() {
          return context.iterateAll();
        }

        public {@pagedResponseClass.responseTypeName} getResponse() {
          return context.getResponse();
        }

        public {@pagedResponseClass.requestTypeName} getRequest() {
          return context.getRequest();
        }
        {@iterateMethods(pagedResponseClass)}
      }

    @end
  }
@end

@private iterateMethods(pagedResponseClass)
  @join iterateMethod : pagedResponseClass.iterateMethods
    public Iterator<{@iterateMethod.overloadResourceTypeName}> {@iterateMethod.overloadResourceTypeIterateMethodName}() {
      return Iterators.transform({@iterateMethod.iterateMethodName}(), new Function<{@pagedResponseClass.resourceTypeName}, {@iterateMethod.overloadResourceTypeName}>() {
          @@Override
          public {@iterateMethod.overloadResourceTypeName} apply({@pagedResponseClass.resourceTypeName} arg0) {
            return {@iterateMethod.overloadResourceTypeParseFunctionName}(arg0);
          }
        }
      );
    }
  @end
  {@BREAK}
@end
