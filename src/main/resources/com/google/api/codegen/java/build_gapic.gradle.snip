@snippet generate(metadata)
  buildscript {
    repositories {
      mavenCentral()
    }
  }

  apply plugin: 'java'

  description = 'GAPIC library for {@metadata.identifier}'
  group = 'com.google.cloud'
  version = (findProperty('version') == 'unspecified') ? '0.0.0-SNAPSHOT' : version
  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  repositories {
    mavenCentral()
    mavenLocal()
  }

  compileJava.options.encoding = 'UTF-8'
  javadoc.options.encoding = 'UTF-8'

  dependencies {
    compile 'com.google.api:gax:{@metadata.gaxVersionBound.lower}'
    testCompile 'com.google.api:gax:{@metadata.gaxVersionBound.lower}:testlib'
    @switch metadata.artifactType.toString
    @case "DISCOGAPIC"
      compile 'com.google.api:gax-httpjson:{@metadata.gaxHttpVersionBound.lower}'
      testCompile 'com.google.api:gax-httpjson:{@metadata.gaxHttpVersionBound.lower}:testlib'
    @case "GAPIC"
      compile 'com.google.api:gax-grpc:{@metadata.gaxGrpcVersionBound.lower}'
      testCompile 'com.google.api:gax-grpc:{@metadata.gaxGrpcVersionBound.lower}:testlib'
      testCompile 'io.grpc:grpc-netty-shaded:{@metadata.grpcVersionBound.lower}'
    @default
    @end
    testCompile 'junit:junit:4.12'
    @switch metadata.artifactType.toString
    @case "DISCOGAPIC"
    @case "DISCOGAPIC_CONFIG"
    @case "GAPIC_ONLY"
      @join dependency : metadata.protoPackageDependencies
        compile project(':proto-{@dependency.name}')
        testCompile project(':grpc-{@dependency.name}')
      @end
    @default
      // Remove this line if you are bundling your proto-generated classes together with your client classes
      compile project(':{@metadata.protoPackageName}')
      // Remove this line if you are bundling your proto-generated classes together with your client classes
      testCompile project(':{@metadata.grpcPackageName}')
    @end
    @join dependency : metadata.protoPackageTestDependencies
      testCompile '{@dependency.group}:grpc-{@dependency.name}:{@dependency.versionBound.lower}'
    @end
  }

  task smokeTest(type: Test) {
    filter {
      includeTestsMatching "*SmokeTest"
      setFailOnNoMatchingTests false
    }
  }

  test {
    exclude "**/*SmokeTest*"
  }

  sourceSets {
    main {
      java {
        srcDir 'src/main/java'
      }
    }
  }

  clean {
    delete 'all-jars'
  }

  task allJars(type: Copy) {
    dependsOn test, jar
    into 'all-jars'
    // Replace with `from configurations.testRuntime, jar` to include test dependencies
    from configurations.runtime, jar
  }
@end
