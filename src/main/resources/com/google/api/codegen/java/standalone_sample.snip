@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(sampleFile)
  //// [ This is an auto-generated sample file produced by the gapic-generator. Sample name: "{@sampleFile.classView.name}" ]
  //// STUB standalone sample "{@sampleFile.classView.name}" /////

  # FIXME: Insert here set-up comments that we never want to display in cloudsite. These are seen by users perusing the samples directly in the repository.
   
  // [START full_sample]

  @let apiMethod = sampleFile.classView.libraryMethod, \
       sample = apiMethod.samples.get(0)
    //     calling form "{@sample.callingForm.toString}"
    //     valueSet "{@sample.valueSet.id}" ("{@sample.valueSet.title}")
    //       {@sample.valueSet.parameters}
    //     apiMethod "{@apiMethod.name}" of type "{@apiMethod.type}"

    {@importList(sampleFile.fileHeader.importSection.appImports)}

    public class {@sampleFile.classView.name} {
      public static void main(String[] args) {
        // [START core_sample]

        # FIXME: maybe also use the response?
        try ({@apiMethod.apiClassName} {@apiMethod.apiVariableName} = {@apiMethod.apiClassName}.create()) {
          @let coreSampleCode = generateSample(apiMethod, sample.callingForm, sample.initCode)
            {@methodDoc(coreSampleCode)}
          @end
        }
        // [END core_sample]
      }
    }
  @end
  // [END full_sample]
@end

# adapted from main.snip:apiMethods(xapiClass) and its dependencies
# For real use, we'll want to switch on the calling form id.
@private generateSample(apiMethod, callingForm, initCode)
    @switch callingForm
    @case "FlattenedPaging"
      {@pagedCallableMethodSampleCode(apiMethod, initCode)}
    @case "RequestPaged"
      {@pagedRequestObjectMethod(apiMethod, initCode)}
    @case "CallablePaging"
      {@pagedCallableMethodSampleCode(apiMethod, initCode)}
    @case "CallableList"
      {@unpagedListCallableMethodSampleCode(apiMethod, initCode)}
    @case "Flattened"
      {@syncMethodSampleCode(apiMethod, initCode)}
    @case "Request"
      {@syncMethodSampleCode(apiMethod, initCode)}
    @case "Callable"
      @if apiMethod.isStreaming
        {@streamingCallableMethodSampleCode(apiMethod, initCode)}
      @else
        {@callableMethodSampleCode(apiMethod, initCode)}
      @end
    @case "LongRunningFlattenedAsync"
      {@asyncOperationMethodSampleCode(apiMethod, initCode)}
    @case "LongRunningRequestAsync"
      {@asyncOperationMethodSampleCode(apiMethod, initCode)}
    @case "LongRunningCallable"
      {@asyncOperationCallableMethodSampleCall(apiMethod, initCode)}
    @default
      $unhandledCase: {@apiMethod.getClass.getSimpleName}$
    @end
@end

# copied & modified from main.snip
@private methodDoc(methodSampleCode)
  @join sampleLine : util.splitLines(methodSampleCode)
    {@sampleLine}
  @end
@end
