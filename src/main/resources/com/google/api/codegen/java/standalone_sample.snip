@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(sampleFile)
  //// [ This is an auto-generated sample file produced by the gapic-generator. Sample name: "{@sampleFile.classView.name}" ]
  //// STUB standalone sample "{@sampleFile.classView.name}" /////

  // FIXME: Insert here set-up comments that we never want to display in cloudsite. These are seen by users perusing the samples directly in the repository.
   
  @let apiMethod = sampleFile.classView.libraryMethod, \
       sample = apiMethod.samples.get(0)
    // [START {@sample.regionTag}]

    // FIXME: Insert here boilerplate code not directly related to the method call itself.
       
    //      calling form: "{@sample.callingForm.toString}"
    //        region tag: "{@sample.regionTag}"
    //         className: "{@sampleFile.classView.name}"
    //          valueSet: "{@sample.valueSet.id}" ("{@sample.valueSet.title}")
    //       description: "{@sample.valueSet.description}"
    //        {@sample.valueSet.parameters}
    //      apiMethod "{@apiMethod.name}" of type "{@apiMethod.type}"

    // FIXME: Insert here code to prepare the request fields, make the call, process the response.

    public class {@sampleFile.classView.name} {
      public static void main(String[] args) {
        // [START {@sample.regionTag}_core]
        @let coreSampleCode = generateSample(apiMethod, sample.callingForm, sample.initCode)
          {@methodLines(coreSampleCode)}
        @end
        // [END {@sample.regionTag}_core]
      }
    }

    // FIXME: Insert here clean-up code.

    // [END {@sample.regionTag}]
  @end
@end

# adapted from main.snip:apiMethods(xapiClass) and its dependencies
# For real use, we'll want to switch on the calling form id.
@private generateSample(apiMethod, callingForm, initCode)
  @switch callingForm
  @case "Request"
    {@syncMethodSampleCode(apiMethod, initCode)}
  @case "RequestPaged"
    {@pagedIterableMethodSampleCode(apiMethod, initCode)}
  @case "Flattened"
    {@syncMethodSampleCode(apiMethod, initCode)}
  @case "FlattenedPaged"
    {@pagedCallableMethodSampleCode(apiMethod, initCode)}      
  @case "Callable"
    {@callableMethodSampleCode(apiMethod, initCode)}
  @case "CallableList"
    {@unpagedListCallableMethodSampleCode(apiMethod, initCode)}
  @case "CallablePaged"
    {@pagedCallableMethodSampleCode(apiMethod, initCode)}
  @case "CallableStreamingBidi"
    {@bidiStreamingCallableSampleCode(apiMethod, initCode)}      
  @case "CallableStreamingClient"
    {@clientStreamingCallableSampleCode(apiMethod, initCode)}
  @case "CallableStreamingServer"
    {@serverStreamingCallableSampleCode(apiMethod, initCode)}
  @case "LongRunningCallable"
    {@asyncOperationCallableMethodSampleCode(apiMethod, initCode)}
  @case "LongRunningFlattenedAsync"
    {@asyncOperationMethodSampleCode(apiMethod, initCode)}
  @case "LongRunningRequestAsync"
    {@asyncOperationMethodSampleCode(apiMethod, initCode)}
  @default
    $unhandledCallingForm: {@callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end

# copied & modified from main.snip
@private methodLines(methodSampleCode)
  @join sampleLine : util.splitLines(methodSampleCode)
    {@sampleLine}
  @end
@end
