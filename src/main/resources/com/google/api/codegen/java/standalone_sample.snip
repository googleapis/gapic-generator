@extends "java/common.snip"
@extends "java/initcode.snip"

#FIXME: currently the variable of output of an api call is hardcoded to "response"
# and "response_item". We should fix it by saving the variable name in the view model
@snippet generate(sampleFile)
  @let apiMethod = sampleFile.classView.libraryMethod, \
       sample = apiMethod.samples.get(0)
    // DO NOT EDIT! This is a generated sample ("{@sample.callingForm}",  "{@sample.valueSet.id}")
    package {@sampleFile.fileHeader.examplePackageName};
    
    @if sample.initCode.argDefaultParams.size
      import org.apache.commons.cli.CommandLine;
      import org.apache.commons.cli.DefaultParser;
      import org.apache.commons.cli.Option;
      import org.apache.commons.cli.Options;     
    @end
    // [START {@sample.regionTag}]
    @if sample.initCode.importSection.appImports.size
      {@importList(sample.initCode.importSection.appImports)}
    
    @end
    public class {@sampleFile.classView.name} {
      public static void {@sample.sampleFunctionName}({@commaSeparatedArgAndTypes(sample.initCode.argDefaultParams)}) {
        // [START {@sample.regionTag}_core]
        try ({@apiMethod.apiClassName} {@apiMethod.apiVariableName} = {@apiMethod.apiClassName}.create()) {
          @let coreSampleCode = generateSample(apiMethod, sample)
            {@methodLines(coreSampleCode)}
          @end
        } catch (Exception exception) {
          System.err.println("Failed to create the client due to: " + exception);          
        }
        // [END {@sample.regionTag}_core]
      }

      public static void main(String[] args) {
        @if sample.initCode.argDefaultParams.size
          {@processCliArguments(sample)}

        @end
        {@sample.sampleFunctionName}({@commaSeparatedArgs(sample.initCode.argDefaultParams)});
      }
    }
    // FIXME: Insert here clean-up code.

    // [END {@sample.regionTag}]
  @end
@end

# switch on the calling form to find the correct snippet
@private generateSample(apiMethod, sample)
  @switch sample.callingForm
  @case "Request"
    {@syncMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @case "RequestPaged"
    {@pagedIterableMethodSampleCode(apiMethod, sample)}
  @case "Flattened"
    {@syncMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @case "FlattenedPaged"
    {@pagedCallableMethodSampleCode(apiMethod, sample)}
  @case "Callable"
    {@callableMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @case "CallableList"
    {@unpagedListCallableMethodSampleCode(apiMethod, sample)}
  @case "CallablePaged"
    {@pagedCallableMethodSampleCode(apiMethod, sample)}
  @case "CallableStreamingBidi"
    {@bidiStreamingCallableSampleCode(apiMethod, sample)}
  @case "CallableStreamingClient"
    {@clientStreamingCallableSampleCode(apiMethod, sample)}
  @case "CallableStreamingServer"
    {@serverStreamingCallableSampleCode(apiMethod, sample)}
  @case "LongRunningCallable"
    {@asyncOperationCallableMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @case "LongRunningFlattenedAsync"
    {@asyncOperationMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @case "LongRunningRequestAsync"
    {@asyncOperationMethodSampleCode(apiMethod, sample)}
    {@processResponse(sample)}
  @default
    $unhandledCallingForm: {@sample.callingForm} in sample "{@apiMethod.getClass.getSimpleName}"$
  @end
@end

# The snippets are modified versions of those in method_sample.snip
# since standalone samples can perform more sophisticated response handling
@private pagedIterableMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  for ({@apiMethod.listMethod.resourceTypeName} responseItem : {@sampleSyncMethodCall(apiMethod)}.{@apiMethod.listMethod.iterateMethodName}()) {
    {@processResponse(sample)}
  }
@end

@private pagedCallableMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  ApiFuture<{@apiMethod.responseTypeName}> future = {@sampleFutureMethodCall(apiMethod)};

  // Do something

  for ({@apiMethod.listMethod.resourceTypeName} responseItem : future.get().{@apiMethod.listMethod.iterateMethodName}()) {
    {@processResponse(sample)}
  }
@end

@private unpagedListCallableMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  while (true) {
    {@apiMethod.responseTypeName} response = \
        {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
        {@sampleMethodCallArgList(sample.initCode.fieldSettings)});
    for ({@apiMethod.listMethod.resourceTypeName} responseItem : \
        {@resourceListGetCall(apiMethod)}) {
      {@processResponse(sample)}
    }
    String nextPageToken = response.getNextPageToken();
    if (!Strings.isNullOrEmpty(nextPageToken)) {
      request = request.toBuilder().setPageToken(nextPageToken).build();
    } else {
      break;
    }
  }
@end

@private resourceListGetCall(apiMethod)
  @if apiMethod.unpagedListCallableMethod.resourceListParseFunction
    {@apiMethod.unpagedListCallableMethod.resourceListParseFunction}(\
      response.{@apiMethod.unpagedListCallableMethod.resourceListGetFunction}())
  @else
    response.{@apiMethod.unpagedListCallableMethod.resourceListGetFunction}()
  @end
@end

@private syncMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@sampleSyncMethodCall(apiMethod)};
  @else
    {@sampleSyncMethodCall(apiMethod)};
  @end
@end

@private asyncOperationMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  {@apiMethod.responseTypeName} response = {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(sample.initCode.fieldSettings)}).get();
@end

@private callableMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  ApiFuture<{@apiMethod.callableMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};

  // Do something

  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = future.get();
  @else
    future.get();
  @end
@end

@private asyncOperationCallableMethodSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}
  OperationFuture<{@apiMethod.callableMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};

  // Do something

  {@apiMethod.responseTypeName} response = future.get();
@end

@private streamingCallableMethodSampleCode(apiMethod, sample)
  @switch apiMethod.grpcStreamingType
  @case "BidiStreaming"
    {@bidiStreamingCallableSampleCode(apiMethod, sample)}
  @case "ServerStreaming"
    {@serverStreamingCallableSampleCode(apiMethod, sample)}
  @case "ClientStreaming"
    {@clientStreamingCallableSampleCode(apiMethod, sample)}
  @default
    $unhandledCase: {@apiMethod.grpcStreamingType}$
  @end
@end

@private bidiStreamingCallableSampleCode(apiMethod, sample)
  BidiStream<{@apiMethod.callableMethod.requestType}, {@apiMethod.callableMethod.genericAwareResponseType}> bidiStream =
      {@apiMethod.apiVariableName}.{@apiMethod.name}().call();

  {@initCode(sample.initCode)}
  bidiStream.send(request);
  for ({@apiMethod.callableMethod.genericAwareResponseType} responseItem : bidiStream) {
    {@processResponse(sample)}
  }
@end

@private serverStreamingCallableSampleCode(apiMethod, sample)
  {@initCode(sample.initCode)}

  ServerStream<{@apiMethod.callableMethod.genericAwareResponseType}> stream = {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
      {@sampleMethodCallArgList(sample.initCode.fieldSettings)});
  for ({@apiMethod.callableMethod.genericAwareResponseType} responseItem : stream) {
    {@processResponse(sample)}
  }
@end

@private clientStreamingCallableSampleCode(apiMethod, sample)
  {@responseObserver(apiMethod, sample)}
  ApiStreamObserver<{@apiMethod.callableMethod.requestType}> requestObserver =
      {@apiMethod.apiVariableName}.{@apiMethod.name}().clientStreamingCall(responseObserver);

  {@initCode(sample.initCode)}
  requestObserver.onNext(request);
@end


# copied & modified from main.snip
@private methodLines(methodSampleCode)
  @join sampleLine : util.splitLines(methodSampleCode)
    {@sampleLine}
  @end
@end

@private processCliArguments(sample)
  Options options = new Options();
  @join param : sample.initCode.argDefaultParams
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("{@param.identifier}")
          .build());
  @end

  CommandLine cl = (new DefaultParser()).parse(options, args);
  @join param : sample.initCode.argDefaultParams
    @switch param.typeName
    @case "String"
      String {@param.identifier} = cl.getOptionValue("{@param.identifier}", {@renderInitValue(param.initValue)});
    @case "int"
      int {@param.identifier} = 
          cl.getOptionValue("{@param.identifier}") != null
              ? Integer.parseInt(cl.getOptionValue("{@param.identifier}"))
              : {@renderInitValue(param.initValue)};
    @case "double"
      double {@param.identifier} = 
          cl.getOptionValue("{@param.identifier}") != null
              ? Double.parseDouble(cl.getOptionValue("{@param.identifier}"))
              : {@renderInitValue(param.initValue)};
    @case "boolean"
      boolean {@param.identifier} =
          cl.getOptionValue("{@param.identifier}") != null
              ? Boolean.parseBoolean(cl.getOptionValue("{@param.identifier}"))
              : {@renderInitValue(param.initValue)};
    @default
      $unhandledCase: {@param.typeName}$
    @end
  @end
@end

@private commaSeparatedArgs(args)
  @join arg : args on ", "
    {@arg.identifier}
  @end
@end

@private commaSeparatedArgAndTypes(args)
  @join arg : args on ", "
    {@arg.typeName} {@arg.identifier}
  @end
@end

@private processResponse(sample)
  @if sample.outputs.size == 0
    System.out.println(response);
  @else
    {@processOutputViews(sample.outputs)}
  @end
@end

@private processOutputViews(outputViews)
  @join view : outputViews on BREAK
   @switch view.kind
     @case "COMMENT"
       {@processCommentView(view)}
     @case "DEFINE"
       {@processDefineView(view)}
     @case "LOOP"
       {@processLoopView(view)}
     @case "PRINT"
       {@processPrintView(view)}
     @default
       $unhandledResponseForm: {@view}
    @end
  @end
@end

@private processCommentView(view)
  {@toComments(view.lines)}
@end

@private processDefineView(view)
  {@view.variableType} {@view.variableName} = {@variableField(view.reference)};
@end

@private processPrintView(view)
  @if not(view.args.size)
    System.out.println("{@view.format}");
  @else
    @if view.format == ""
      System.out.println({@printVariableField(view.args.get(0))});
    @else
      @if view.format == "%s"
        System.out.println({@printVariableField(view.args.get(0))});
      @else
        System.out.printf("{@view.format}\n", {@commaSeparatedFields(view.args)});
      @end
    @end
  @end
@end

@private processLoopView(view)
  for ({@view.variableType} {@view.variableName} : {@variableField(@view.collection)}) {
    {@processOutputViews(@view.body)}
  }
@end

@private commaSeparatedFields(args)
  @join arg : args on ", "
    {@printVariableField(arg)}
  @end
@end

@private printVariableField(arg)
  @join segment : arg.segments
    @switch segment.kind
      @case "TEXT"
        {@segment.text}
      @case "VARIABLE"
        {@variableField(segment.variable)}
      @default
        $unhandledPrintArgView: arg
    @end
  @end
@end

@private variableField(arg)
  {@arg.variable}{@accessor(arg.accessors)}
@end

@private accessor(accessors)
  @join field : accessors on ""
    @switch field.kind
    @case "FIELD"
      .{@field.field}()
    @case "INDEX"
      # Assume that sample config is right; no need to check bounds.
      .get({@field.index})
    @end
  @end
@end

@private sampleFutureMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}().futureCall(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleSyncMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@renderFieldSettingValue(fieldSetting)}
  @end
@end

@private responseObserver(apiMethod, sample)
  ApiStreamObserver<{@apiMethod.callableMethod.genericAwareResponseType}> responseObserver =
      new ApiStreamObserver<{@apiMethod.callableMethod.genericAwareResponseType}>() {
        @@Override
        public void onNext({@apiMethod.callableMethod.genericAwareResponseType} response) {
          {@processResponse(sample)}
        }

        @@Override
        public void onError(Throwable t) {
          // Add error-handling
        }

        @@Override
        public void onCompleted() {
          // Do something when complete.
        }
      };
@end
