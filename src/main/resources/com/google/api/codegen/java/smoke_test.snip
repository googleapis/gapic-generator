@extends "java/common.snip"
@extends "java/initcode.snip"
@extends "java/method_sample.snip"


@snippet generate(smokeTest)
  {@renderFileHeader(smokeTest.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@smokeTest.name} {
    private static final String PROJECT_ENV_NAME = "GOOGLE_CLOUD_PROJECT";
    private static final String LEGACY_PROJECT_ENV_NAME = "GCLOUD_PROJECT";

    public static void main(String args[]) {
      Logger.getLogger("").setLevel(Level.WARNING);
      try {
        {@testBody(smokeTest)}
        System.out.println("OK");
      } catch (Exception e) {
        System.err.println("Failed with exception:");
        e.printStackTrace(System.err);
        System.exit(1);
      }
    }

    @if smokeTest.requireProjectId
      {@executeWithProjectID(smokeTest)}
    @else
      {@executeWithNoProjectID(smokeTest)}
    @end

    {@getProjectIdForTest()}
  }
@end

@private testBody(smokeTest)
  @if smokeTest.requireProjectId
    executeNoCatch(getProjectId());
  @else
    executeNoCatch();
  @end
@end

@private getProjectIdForTest()
  private static String getProjectId() {
    String projectId = System.getProperty(PROJECT_ENV_NAME, System.getenv(PROJECT_ENV_NAME));
    if (projectId == null) {
      projectId = System.getProperty(LEGACY_PROJECT_ENV_NAME, System.getenv(LEGACY_PROJECT_ENV_NAME));
    }
    Preconditions.checkArgument(projectId != null, "A project ID is required.");
    return projectId;
  }
@end

@private executeWithProjectID(smokeTest)
  public static void executeNoCatch(String projectId) throws Exception {
    try ({@smokeTest.apiClassName} client = {@smokeTest.apiClassName}.create()) {
      {@methodCall(smokeTest.apiMethod)}
    }
  }
@end

@private executeWithNoProjectID(smokeTest)
  public static void executeNoCatch() throws Exception {
    try ({@smokeTest.apiClassName} client = {@smokeTest.apiClassName}.create()) {
      @if smokeTest.hasMethod
        {@methodCall(smokeTest.apiMethod)}
      @else
        // Add your method call here.
      @end
    }
  }
@end

@private methodCall(apiMethod)
  {@initCode(apiMethod.initCode)}

  @switch apiMethod.type
  @case "PagedFlattenedMethod"
    {@apiMethod.responseTypeName} pagedResponse =
        client.{@apiMethod.name}(\
          {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
  @case "AsyncOperationFlattenedMethod"
      {@apiMethod.responseTypeName} response = \
        client.{@apiMethod.name}({@args(apiMethod.initCode.fieldSettings)}).get();
  @case "FlattenedMethod"
    @if apiMethod.hasReturnValue
      {@apiMethod.responseTypeName} response = \
        client.{@apiMethod.name}({@args(apiMethod.initCode.fieldSettings)});
    @else
      client.{@apiMethod.name}(\
        {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
    @end
  @end
@end

@private args(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end

