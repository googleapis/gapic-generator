@extends "java/common.snip"
@extends "java/initcode.snip"
@extends "java/method_sample.snip"


@snippet generate(smokeTest)
  {@renderFileHeader(smokeTest.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@smokeTest.name} {
    public static void main(String args[]) {
      Logger.getLogger("").setLevel(Level.WARNING);
      try {
        {@testBody(smokeTest)}
        System.out.println("OK");
      } catch (Exception e) {
        System.err.println("Failed with exception:");
        e.printStackTrace(System.err);
        System.exit(1);
      }
    }
    @if smokeTest.requireProjectId
      {@executeWithProjectID(smokeTest)}
    @else
      {@executeWithNoProjectID(smokeTest)}
    @end
  }
@end

@private testBody(smokeTest)
  @if smokeTest.requireProjectId
    Options options = new Options();
    options.addOption("h", "help", false, "show usage");
    options.addOption(
        Option.builder()
            .longOpt("project_id")
            .desc("Project id")
            .hasArg()
            .argName("PROJECT-ID")
            .required(true)
            .build());
    CommandLine cl = (new DefaultParser()).parse(options, args);
    if (cl.hasOption("help")) {
      HelpFormatter formater = new HelpFormatter();
      formater.printHelp("{@smokeTest.name}", options);
    }
    executeNoCatch(cl.getOptionValue("project_id"));
  @else
    executeNoCatch();
  @end
@end

@private executeWithProjectID(smokeTest)
  public static void executeNoCatch(String projectId) throws Exception {
    try ({@smokeTest.apiClassName} client = {@smokeTest.apiClassName}.create()) {
      {@methodCall(smokeTest.method)}
    }
  }
@end

@private executeWithNoProjectID(smokeTest)
  public static void executeNoCatch() throws Exception {
    try ({@smokeTest.apiClassName} client = {@smokeTest.apiClassName}.create()) {
      {@methodCall(smokeTest.method)}
    }
  }
@end

@private methodCall(method)
  {@initCode(method.initCode)}

  @switch method.clientMethodType
  @case "PagedFlattenedMethod"
    {@method.responseTypeName} pagedResponse =
        client.{@method.clientMethodName}(\
          {@sampleMethodCallArgList(method.initCode.fieldSettings)});
    System.out.println(ReflectionToStringBuilder.toString(pagedResponse));
  @case "FlattenedMethod"
    @if method.hasReturnValue
      {@method.responseTypeName} response = \
        client.{@method.clientMethodName}({@args(method.initCode.fieldSettings)});
      System.out.println(ReflectionToStringBuilder.toString(response, ToStringStyle.MULTI_LINE_STYLE));
    @else
      client.{@method.clientMethodName}(\
        {@sampleMethodCallArgList(method.initCode.fieldSettings)});
    @end
  @end
@end

@private args(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
