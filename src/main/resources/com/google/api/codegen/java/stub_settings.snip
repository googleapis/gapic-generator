@extends "java/common.snip"
@extends "java/settings.snip"

@override generate(classFile)
  {@renderFileHeader(classFile.fileHeader)}

  {@classDoc(classFile.classView.doc)}
  @@Generated("by gapic-generator")
  @if classFile.classView.releaseLevelAnnotation
    {@classFile.classView.releaseLevelAnnotation}
  @end
  {@renderClass(classFile.classView)}
@end

@private renderClass(classView)
  public class {@classView.name} extends StubSettings<{@classView.name}> {
    {@constants(classView)}
    {@members(classView)}
    {@constructors(classView)}
    {@descriptors(classView)}
    {@innerBuilderClass(classView)}
  }
@end

@private constants(xsettingsClass)
  @if xsettingsClass.hasDefaultServiceScopes
    /**
     * The default scopes of the service.
     */
    private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
        @join scope : {@xsettingsClass.authScopes}
          .add("{@scope}")
        @end
        .build();
    {@""}
  @end
  {@""}
@end

@private members(xsettingsClass)
  {@methodMembers(xsettingsClass)}
  {@methodGetters(xsettingsClass)}

  @@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public {@xsettingsClass.stubInterfaceName} createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals({@xsettingsClass.rpcTransportName}.{@xsettingsClass.transportNameGetter}())) {
      return {@xsettingsClass.rpcStubClassName}.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  @if xsettingsClass.hasDefaultServiceAddress
    /**
     * Returns the default service endpoint.
     */
    @if xsettingsClass.useDefaultServicePortInEndpoint
      public static String getDefaultEndpoint() {
        return "{@xsettingsClass.serviceAddress}:{@xsettingsClass.servicePort}";
      }
    @else
      public static String getDefaultEndpoint() {
        return "{@xsettingsClass.serviceAddress}";
      }

      /**
       * Returns the default service port.
       */
      public static int getDefaultServicePort() {
        return {@xsettingsClass.servicePort};
      }
    @end

  @end

  @if xsettingsClass.hasDefaultServiceScopes
    /**
     * Returns the default service scopes.
     */
    public static List<String> getDefaultServiceScopes() {
      return DEFAULT_SERVICE_SCOPES;
    }

  @end

  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        @if xsettingsClass.hasDefaultServiceScopes
            .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        @end
        ;
  }

  @if xsettingsClass.hasDefaultServiceAddress
    /** Returns a builder for the default ChannelProvider for this service. */
    public static {@xsettingsClass.instantiatingChannelProvider}.Builder {@xsettingsClass.defaultTransportProviderBuilder}() {
      return {@xsettingsClass.instantiatingChannelProvider}.newBuilder();
    }

    public static TransportChannelProvider defaultTransportChannelProvider() {
      return {@xsettingsClass.defaultTransportProviderBuilder}().build();
    }
  @end

  @@BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion({@xsettingsClass.name}.class))
        @if xsettingsClass.transportProtocol == "GRPC"
          .setTransportToken(GaxGrpcProperties.getGrpcTokenName(), GaxGrpcProperties.getGrpcVersion());
        @else
          .setTransportToken(GaxHttpJsonProperties.getHttpJsonTokenName(), GaxHttpJsonProperties.getHttpJsonVersion());
        @end
  }

  {@settingsBuilderConstructors(xsettingsClass)}
  {@""}
@end

@private methodMembers(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    @switch settings.type
    @case "SimpleApiCallable"
      private final UnaryCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "PagedApiCallable"
      private final PagedCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.memberName};
    @case "BatchingApiCallable"
      private final BatchingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "OperationApiCallable"
      private final OperationCallSettings<{@settings.requestTypeName}, \
          {@settings.operationMethod.operationPayloadTypeName}, \
          {@settings.operationMethod.metadataTypeName}> {@settings.memberName};
    @case "ServerStreamingApiCallable"
      private final ServerStreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @default
      @if settings.isStreaming
        private final StreamingCallSettings<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.memberName};
      @else
        $unhandledCase: {@settings.type}$
      @end
    @end
  @end
  {@BREAK}
@end

@private methodGetters(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    /**
     * Returns the object with the settings used for calls to {@settings.methodName}.
     */
    @switch settings.type
    @case "SimpleApiCallable"
        public UnaryCallSettings<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
          return {@settings.memberName};
       }
    @case "PagedApiCallable"
      public PagedCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "BatchingApiCallable"
      public BatchingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "OperationApiCallable"
      @@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
      public OperationCallSettings<{@settings.requestTypeName}, \
            {@settings.operationMethod.operationPayloadTypeName}, \
            {@settings.operationMethod.metadataTypeName}> \
            {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "ServerStreamingApiCallable"
        public ServerStreamingCallSettings<{@settings.requestTypeName}, \
              {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
          return {@settings.memberName};
        }
    @default
      @if settings.isStreaming
        public StreamingCallSettings<{@settings.requestTypeName}, \
              {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
          return {@settings.memberName};
        }
      @else
        $unhandledCase: {@settings.type}$
      @end
    @end
    {@""}
  @end
@end

@private constructors(xsettingsClass)
  protected {@xsettingsClass.name}(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    @join settings : xsettingsClass.callSettings
      {@settings.memberName} = settingsBuilder.{@settings.settingsGetFunction}().build();
    @end
  }
  {@""}
@end

@private descriptors(xsettingsClass)
  {@pageStreamingDescriptors(xsettingsClass)}
  {@pagedListResponseFactories(xsettingsClass)}
  {@batchingDescriptors(xsettingsClass)}
@end

@private pageStreamingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.pageStreamingDescriptors
    private static final PagedListDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}> {@desc.name} =
        new PagedListDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}>() {
          @@Override
          public String emptyToken() {
            return {@desc.defaultTokenValue};
          }
          @@Override
          public {@desc.requestTypeName} injectToken({@desc.requestTypeName} payload, String token) {
            return {@desc.requestTypeName}
              .newBuilder(payload)
              .{@desc.requestTokenSetFunction}(token)
              .build();
          }
          @@Override
          public {@desc.requestTypeName} injectPageSize({@desc.requestTypeName} payload, int pageSize) {
            @if desc.requestHasPageSize
              return {@desc.requestTypeName}
                .newBuilder(payload)
                .{@desc.requestPageSizeSetFunction}(pageSize)
                .build();
            @else
              throw new UnsupportedOperationException("page size is not supported by this API method");
            @end
          }
          @@Override
          public Integer extractPageSize({@desc.requestTypeName} payload) {
            @if desc.requestHasPageSize
              return payload.{@desc.requestPageSizeGetFunction}();
            @else
              throw new UnsupportedOperationException("page size is not supported by this API method");
            @end
          }
          @@Override
          public String extractNextToken({@desc.responseTypeName} payload) {
            return payload.{@desc.responseTokenGetFunction}();
          }
          @@Override
          public Iterable<{@desc.resourceTypeName}> extractResources({@desc.responseTypeName} payload) {
            @if desc.resourcesFieldIsMap
              return payload.{@desc.resourcesFieldGetFunction}().values();
            @else
              return payload.{@desc.resourcesFieldGetFunction}();
            @end
          }
        };
    {@""}
  @end
@end

@private pagedListResponseFactories(xsettingsClass)
  @join factory : xsettingsClass.pagedListResponseFactories
    private static final PagedListResponseFactory<{@factory.requestTypeName}, {@factory.responseTypeName}, {@factory.pagedListResponseTypeName}> {@factory.name} =
        new PagedListResponseFactory<{@factory.requestTypeName}, {@factory.responseTypeName}, {@factory.pagedListResponseTypeName}>() {
          @@Override
          public ApiFuture<{@factory.pagedListResponseTypeName}> getFuturePagedResponse(
              UnaryCallable<{@factory.requestTypeName}, {@factory.responseTypeName}> callable,
              {@factory.requestTypeName} request,
              ApiCallContext context,
              ApiFuture<{@factory.responseTypeName}> futureResponse) {
            PageContext<{@factory.requestTypeName}, {@factory.responseTypeName}, {@factory.resourceTypeName}> pageContext =
                PageContext.create(callable, {@factory.pageStreamingDescriptorName}, request, context);
            return {@factory.pagedListResponseTypeName}.createAsync(pageContext, futureResponse);
          }
        };
    {@""}
  @end
@end

@private batchingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.batchingDescriptors
    private static final BatchingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}> {@desc.name} =
        new BatchingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}>() {
          @@Override
          public PartitionKey getBatchPartitionKey({@desc.requestTypeName} request) {
            return new PartitionKey({@partitionKeyCode(desc)});
          }

          @@Override
          public RequestBuilder<{@desc.requestTypeName}> getRequestBuilder() {
            return new RequestBuilder<{@desc.requestTypeName}>() {
              private {@desc.requestTypeName}.Builder builder;
              @@Override
              public void appendRequest({@desc.requestTypeName} request) {
                if (builder == null) {
                  builder = request.toBuilder();
                } else {
                  builder.{@desc.batchedFieldSetFunction}(request.{@desc.batchedFieldGetFunction}());
                }
              }
              @@Override
              public {@desc.requestTypeName} build() {
                return builder.build();
              }
            };
          }

          @@Override
          public void splitResponse(
              {@desc.responseTypeName} batchResponse,
              Collection<? extends BatchedRequestIssuer<{@desc.responseTypeName}>> batch) {
            int batchMessageIndex = 0;
            for (BatchedRequestIssuer<{@desc.responseTypeName}> responder : batch) {
              @if desc.hasSubresponse
                {@desc.subresponseTypeName} subresponseElements = new ArrayList<>();
                long subresponseCount = responder.getMessageCount();
                for (int i = 0; i < subresponseCount; i++) {
                  subresponseElements.add(batchResponse.{@desc.subresponseByIndexGetFunction}(batchMessageIndex));
                  batchMessageIndex += 1;
                }
                {@desc.responseTypeName} response =
                    {@desc.responseTypeName}.newBuilder().{@desc.subresponseSetFunction}(subresponseElements).build();
              @else
                {@desc.responseTypeName} response =
                    {@desc.responseTypeName}.newBuilder().build();
              @end
              responder.setResponse(response);
            }
          }

          @@Override
          public void splitException(
              Throwable throwable,
              Collection<? extends BatchedRequestIssuer<{@desc.responseTypeName}>> batch) {
            for (BatchedRequestIssuer<{@desc.responseTypeName}> responder : batch) {
              responder.setException(throwable);
            }
          }

          @@Override
          public long countElements({@desc.requestTypeName} request) {
            return request.{@desc.batchedFieldCountGetFunction}();
          }

          @@Override
          public long countBytes({@desc.requestTypeName} request) {
            return request.getSerializedSize();
          }
        };
    {@""}
  @end
@end

@private innerBuilderClass(xsettingsClass)
  /**
   * Builder for {@xsettingsClass.name}.
   */
  public static class Builder extends StubSettings.Builder<{@xsettingsClass.name}, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    {@builderMembers(xsettingsClass)}

    {@builderConstants(xsettingsClass)}

    {@builderConstructors(xsettingsClass)}

    {@builderMethods(xsettingsClass)}
  }
@end

@private builderMembers(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    @switch settings.type.toString
    @case "SimpleApiCallable"
      private final UnaryCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "PagedApiCallable"
      private final PagedCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.memberName};
    @case "BatchingApiCallable"
      private final BatchingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "OperationApiCallable"
          private final OperationCallSettings.Builder<{@settings.requestTypeName}, \
              {@settings.operationMethod.operationPayloadTypeName}, \
              {@settings.operationMethod.metadataTypeName}> {@settings.memberName};
    @case "ServerStreamingApiCallable"
      private final ServerStreamingCallSettings.Builder<{@settings.requestTypeName}, \
                  {@settings.responseTypeName}> {@settings.memberName};
    @default
      @if settings.isStreaming
        private final StreamingCallSettings.Builder<{@settings.requestTypeName}, \
              {@settings.responseTypeName}> {@settings.memberName};
      @else
        $unhandledCase: {@settings.type.toString}$
      @end
    @end
  @end
@end

@private builderConstants(xsettingsClass)
  private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
    @join retryCodesDef : xsettingsClass.retryCodesDefinitions
      definitions.put(
          "{@retryCodesDef.key}",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList({@statusCodes(retryCodesDef.codes)})));
    @end
    RETRYABLE_CODE_DEFINITIONS = definitions.build();
  }

  private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
    RetrySettings settings = null;
    @join retryParamsDef : xsettingsClass.retryParamsDefinitions
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis({@retryParamsDef.params.getInitialRetryDelayMillis}L))
          .setRetryDelayMultiplier({@retryParamsDef.params.getRetryDelayMultiplier})
          .setMaxRetryDelay(Duration.ofMillis({@retryParamsDef.params.getMaxRetryDelayMillis}L))
          .setInitialRpcTimeout(Duration.ofMillis({@retryParamsDef.params.getInitialRpcTimeoutMillis}L))
          .setRpcTimeoutMultiplier({@retryParamsDef.params.getRpcTimeoutMultiplier})
          .setMaxRpcTimeout(Duration.ofMillis({@retryParamsDef.params.getMaxRpcTimeoutMillis}L))
          .setTotalTimeout(Duration.ofMillis({@retryParamsDef.params.getTotalTimeoutMillis}L))
          .build();
      definitions.put("{@retryParamsDef.key}", settings);
    @end
    RETRY_PARAM_DEFINITIONS = definitions.build();
  }
@end

@private builderConstructors(xsettingsClass)
  protected Builder() {
    this((ClientContext) null);
  }

  protected Builder(ClientContext clientContext) {
    super(clientContext);

    @join settings : xsettingsClass.callSettings
      @switch settings.type.toString
      @case "SimpleApiCallable"
        {@settings.memberName} = UnaryCallSettings.newUnaryCallSettingsBuilder();
      @case "PagedApiCallable"
        {@settings.memberName} = PagedCallSettings.newBuilder(
            {@settings.pagedListResponseFactoryName});
      @case "BatchingApiCallable"
        {@settings.memberName} = BatchingCallSettings.newBuilder(
            {@settings.batchingDescriptorName})
                .setBatchingSettings(BatchingSettings.newBuilder().build());
      @case "OperationApiCallable"
        {@settings.memberName} = OperationCallSettings.newBuilder();
      @case "ServerStreamingApiCallable"
        {@settings.memberName} = ServerStreamingCallSettings.newBuilder();
      @default
        @if settings.isStreaming
          {@settings.memberName} = StreamingCallSettings.newBuilder();
        @else
          $unhandledCase: {@settings.type.toString}$
        @end
      @end
      {@BREAK}
    @end
    unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
        @join settings : xsettingsClass.unaryCallSettings vertical on ",".add(BREAK)
          {@settings.memberName}
        @end
    );

    initDefaults(this);
  }

  private static Builder createDefault() {
    Builder builder = new Builder((ClientContext) null);
    @if xsettingsClass.hasDefaultInstance
      builder.setTransportChannelProvider(defaultTransportChannelProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());
      builder.setEndpoint(getDefaultEndpoint());
    @end
    return initDefaults(builder);
  }

  private static Builder initDefaults(Builder builder) {
    @join settings : xsettingsClass.singleRequestRpcCallSettings
      {@""}
      # batching settings
      @switch settings.type
      @case "BatchingApiCallable"
        builder.{@settings.settingsGetFunction}().setBatchingSettings(
            BatchingSettings.newBuilder()
            .setElementCountThreshold({@settings.batchingConfig.elementCountThreshold}L)
            .setRequestByteThreshold({@settings.batchingConfig.requestByteThreshold}L)
            .setDelayThreshold(Duration.ofMillis({@settings.batchingConfig.delayThresholdMillis}))
            .setFlowControlSettings(
              FlowControlSettings.newBuilder()
                @if settings.batchingConfig.hasFlowControlElementLimit
                  .setMaxOutstandingElementCount({@settings.batchingConfig.flowControlElementLimit}L)
                @end
                @if settings.batchingConfig.hasFlowControlByteLimit
                  .setMaxOutstandingRequestBytes({@settings.batchingConfig.flowControlByteLimit}L)
                @end
                .setLimitExceededBehavior(LimitExceededBehavior.{@settings.batchingConfig.flowControlLimitExceededBehavior})
                .build())
            .build());
      @default
      @end
      # retry settings
      builder.{@settings.settingsGetFunction}()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("{@settings.retryCodesName}"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("{@settings.retryParamsName}"));
    @end
    @join settings : xsettingsClass.longRunningCallSettings
      builder
          .{@settings.settingsGetFunction}()
          .setInitialCallSettings(
              UnaryCallSettings.<{@settings.requestTypeName}, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create({@settings.operationMethod.operationPayloadTypeName}.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create({@settings.operationMethod.metadataTypeName}.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis({@settings.operationMethod.initialPollDelay}L))
                     .setRetryDelayMultiplier({@settings.operationMethod.pollDelayMultiplier})
                     .setMaxRetryDelay(Duration.ofMillis({@settings.operationMethod.maxPollDelay}L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis({@settings.operationMethod.totalPollTimeout}L))
                     .build()));
    @end

    return builder;
  }

  protected Builder({@xsettingsClass.name} settings) {
    super(settings);

    @join settings : xsettingsClass.callSettings
      {@settings.memberName} = settings.{@settings.memberName}.toBuilder();
    @end

    unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
        @join settings : xsettingsClass.unaryCallSettings vertical on ",".add(BREAK)
          {@settings.memberName}
        @end
    );
  }
@end

@private builderMethods(xsettingsClass)
  // NEXT_MAJOR_VER: remove 'throws Exception'
  /**
   * Applies the given settings updater function to all of the unary API methods in this service.
   *
   * Note: This method does not support applying settings to streaming methods.
   */
  public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
    super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
    return this;
  }

  public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
    return unaryMethodSettingsBuilders;
  }

  @join settings : xsettingsClass.callSettings
    /**
     * Returns the builder for the settings used for calls to {@settings.methodName}.
     */
    @switch settings.type
    @case "SimpleApiCallable"
      public UnaryCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "PagedApiCallable"
      public PagedCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, {@settings.pagedListResponseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "BatchingApiCallable"
      public BatchingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "OperationApiCallable"
      @@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
      public OperationCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.operationMethod.operationPayloadTypeName}, \
          {@settings.operationMethod.metadataTypeName}> \
          {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "ServerStreamingApiCallable"
      public ServerStreamingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @default
      @if settings.isStreaming
        public StreamingCallSettings.Builder<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
          return {@settings.memberName};
        }
      @else
        $unhandledCase: {@settings.type}$
      @end
    @end
    {@""}
  @end
  @@Override
  public {@xsettingsClass.name} build() throws IOException {
    return new {@xsettingsClass.name}(this);
  }
@end
