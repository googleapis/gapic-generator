@extends "java/common.snip"

@snippet generate(xsettingsClass)
  {@license()}
  package {@xsettingsClass.packageName};

  {@importList(xsettingsClass.imports)}

  {@settingsDoc(xsettingsClass.doc)}
  @@javax.annotation.Generated("by GAPIC")
  public class {@xsettingsClass.name} extends ServiceApiSettings {
    {@constants(xsettingsClass)}
    {@members(xsettingsClass)}
    {@constructors(xsettingsClass)}
    {@descriptors(xsettingsClass)}
    {@innerBuilderClass(xsettingsClass)}
  }
@end

@private settingsDoc(doc)
  // AUTO-GENERATED DOCUMENTATION AND CLASS
  /**
   * Settings class to configure an instance of {@@link {@doc.apiClassName}}.
  @if doc.hasDefaultInstance
    {@""} *
     * <p>The default instance has everything set to sensible defaults:
     *
     * <ul>
     * <li>The default service address ({@doc.serviceAddress}) and default port ({@doc.servicePort})
     * are used.
     * <li>Credentials are acquired automatically through Application Default Credentials.
     * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
     * </ul>
     *
     * <p>The builder of this class is recursive, so contained classes are themselves builders.
     * When build() is called, the tree of builders is called to create the complete settings
     * object. For example, to set the total timeout of {@doc.exampleApiMethodName} to 30 seconds:
     *
     * <pre>
     * <code>
     * {@doc.settingsClassName}.Builder {@doc.settingsBuilderVarName} =
     *     {@doc.settingsClassName}.defaultBuilder();
     * {@doc.settingsBuilderVarName}.{@doc.exampleApiMethodSettingsGetter}().getRetrySettingsBuilder()
     *     .setTotalTimeout(Duration.standardSeconds(30));
     * {@doc.settingsClassName} {@doc.settingsVarName} = {@doc.settingsBuilderVarName}.build();
     * </code>
     * </pre>
  @end
   */
@end

@private constants(xsettingsClass)
  @if xsettingsClass.hasDefaultServiceAddress
    /**
     * The default address of the service.
     */
    private static final String DEFAULT_SERVICE_ADDRESS = "{@xsettingsClass.serviceAddress}";
    {@""}
  @end

  /**
   * The default port of the service.
   */
  private static final int DEFAULT_SERVICE_PORT = {@xsettingsClass.servicePort};

  @if xsettingsClass.hasDefaultServiceScopes
    /**
     * The default scopes of the service.
     */
    private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
        @join scope : {@xsettingsClass.authScopes}
          .add("{@scope}")
        @end
        .build();
    {@""}
  @end
  {@""}
@end

@private members(xsettingsClass)
  {@methodMembers(xsettingsClass)}
  {@methodGetters(xsettingsClass)}
  @if xsettingsClass.hasDefaultServiceAddress
    /**
     * Returns the default service address.
     */
    public static String getDefaultServiceAddress() {
      return DEFAULT_SERVICE_ADDRESS;
    }

  @end
  /**
   * Returns the default service port.
   */
  public static int getDefaultServicePort() {
    return DEFAULT_SERVICE_PORT;
  }

  @if xsettingsClass.hasDefaultServiceScopes
    /**
     * Returns the default service scopes.
     */
    public static ImmutableList<String> getDefaultServiceScopes() {
      return DEFAULT_SERVICE_SCOPES;
    }

  @end
  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }
  {@""}
@end

@private methodMembers(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    @switch settings.type.toString
    @case "SimpleApiCallable"
      private final SimpleCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "PagedApiCallable"
      private final PageStreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.memberName};
    @case "BundlingApiCallable"
      private final BundlingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "StreamingApiCallable"
      private final StreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
  @end
  {@BREAK}
@end

@private methodGetters(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    /**
     * Returns the object with the settings used for calls to {@settings.methodName}.
     */
    @switch settings.type.toString
    @case "SimpleApiCallable"
        public SimpleCallSettings<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
          return {@settings.memberName};
       }
    @case "PagedApiCallable"
      public PageStreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "BundlingApiCallable"
      public BundlingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "StreamingApiCallable"
      public StreamingCallSettings<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
    {@""}
  @end
@end

@private constructors(xsettingsClass)
  private {@xsettingsClass.name}(Builder settingsBuilder) throws IOException {
    super(settingsBuilder.getChannelProvider(),
          settingsBuilder.getExecutorProvider(),
          settingsBuilder.getGeneratorName(),
          settingsBuilder.getGeneratorVersion(),
          settingsBuilder.getClientLibName(),
          settingsBuilder.getClientLibVersion());

    @join settings : xsettingsClass.callSettings
      {@settings.memberName} = settingsBuilder.{@settings.settingsGetFunction}().build();
    @end
  }
  {@""}
@end

@private descriptors(xsettingsClass)
  {@pageStreamingDescriptors(xsettingsClass)}
  {@pagedListResponseFactories(xsettingsClass)}
  {@bundlingDescriptors(xsettingsClass)}
@end

@private pageStreamingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.pageStreamingDescriptors
    private static final PageStreamingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}> {@desc.name} =
        new PageStreamingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}>() {
          @@Override
          public Object emptyToken() {
            return {@desc.defaultTokenValue};
          }
          @@Override
          public {@desc.requestTypeName} injectToken({@desc.requestTypeName} payload, Object token) {
            return {@desc.requestTypeName}
              .newBuilder(payload)
              .{@desc.requestTokenSetFunction}(({@desc.tokenTypeName}) token)
              .build();
          }
          @@Override
          public {@desc.requestTypeName} injectPageSize({@desc.requestTypeName} payload, int pageSize) {
            @if desc.requestHasPageSize
              return {@desc.requestTypeName}
                .newBuilder(payload)
                .{@desc.requestPageSizeSetFunction}(pageSize)
                .build();
            @else
              throw new UnsupportedOperationException("page size is not supported by this API method");
            @end
          }
          @@Override
          public Integer extractPageSize({@desc.requestTypeName} payload) {
            @if desc.requestHasPageSize
              return payload.{@desc.requestPageSizeGetFunction}();
            @else
              throw new UnsupportedOperationException("page size is not supported by this API method");
            @end
          }
          @@Override
          public Object extractNextToken({@desc.responseTypeName} payload) {
            return payload.{@desc.responseTokenGetFunction}();
          }
          @@Override
          public Iterable<{@desc.resourceTypeName}> extractResources({@desc.responseTypeName} payload) {
            return payload.{@desc.resourcesFieldGetFunction}();
          }
        };
    {@""}
  @end
@end

@private pagedListResponseFactories(xsettingsClass)
  @join factory : xsettingsClass.pagedListResponseFactories
    private static final PagedListResponseFactory<{@factory.requestTypeName}, {@factory.responseTypeName}, {@factory.pagedListResponseTypeName}> {@factory.name} =
        new PagedListResponseFactory<{@factory.requestTypeName}, {@factory.responseTypeName}, {@factory.pagedListResponseTypeName}>() {
          @@Override
          public {@factory.pagedListResponseTypeName} createPagedListResponse(
              UnaryApiCallable<{@factory.requestTypeName}, {@factory.responseTypeName}> callable,
              {@factory.requestTypeName} request,
              CallContext context) {
            return new {@factory.pagedListResponseTypeName}(callable, {@factory.pageStreamingDescriptorName}, request, context);
          }
        };
    {@""}
  @end
@end

@private bundlingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.bundlingDescriptors
    private static final BundlingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}> {@desc.name} =
        new BundlingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}>() {
          @@Override
          public String getBundlePartitionKey({@desc.requestTypeName} request) {
            return {@partitionKeyCode(desc)};
          }

          @@Override
          public {@desc.requestTypeName} mergeRequests(Collection<{@desc.requestTypeName}> requests) {
            {@desc.requestTypeName} firstRequest = requests.iterator().next();

            {@desc.bundledFieldTypeName} elements = new ArrayList<>();
            for ({@desc.requestTypeName} request : requests) {
              elements.addAll(request.{@desc.bundledFieldGetFunction}());
            }

            {@desc.requestTypeName} bundleRequest =
                {@desc.requestTypeName}.newBuilder()
                    {@fieldCopyCalls(desc.discriminatorFieldCopies)}
                    .{@desc.bundledFieldSetFunction}(elements)
                    .build();
            return bundleRequest;
          }

          @@Override
          public void splitResponse(
              {@desc.responseTypeName} bundleResponse,
              Collection<? extends RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}>> bundle) {
            # TODO(garrettjones) support case of no subresponse_field (e.g. Logging)
            int bundleMessageIndex = 0;
            for (RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}> responder : bundle) {
              {@desc.subresponseTypeName} subresponseElements = new ArrayList<>();
              int subresponseCount = responder.getRequest().{@desc.bundledFieldCountGetFunction}();
              for (int i = 0; i < subresponseCount; i++) {
                subresponseElements.add(bundleResponse.{@desc.subresponseByIndexGetFunction}(bundleMessageIndex));
                bundleMessageIndex += 1;
              }
              {@desc.responseTypeName} response =
                  {@desc.responseTypeName}.newBuilder().{@desc.subresponseSetFunction}(subresponseElements).build();
              responder.setResponse(response);
            }
          }

          @@Override
          public void splitException(
              Throwable throwable,
              Collection<? extends RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}>> bundle) {
            for (RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}> responder : bundle) {
              responder.setException(throwable);
            }
          }

          @@Override
          public long countElements({@desc.requestTypeName} request) {
            return request.{@desc.bundledFieldCountGetFunction}();
          }

          @@Override
          public long countBytes({@desc.requestTypeName} request) {
            return request.getSerializedSize();
          }
        };
    {@""}
  @end
@end

@private partitionKeyCode(bundlingDesc)
  @join partitionKey : bundlingDesc.partitionKeys on " + "
    request.{@partitionKey.fieldGetFunction}() + {@partitionKey.separatorLiteral}
  @end
@end

@private fieldCopyCalls(fieldCopies)
  @join fieldCopy : fieldCopies
    .{@fieldCopy.fieldSetFunction}(firstRequest.{@fieldCopy.fieldGetFunction}())
  @end
@end

@private innerBuilderClass(xsettingsClass)
  /**
   * Builder for {@xsettingsClass.name}.
   */
  public static class Builder extends ServiceApiSettings.Builder {
    private final ImmutableList<UnaryApiCallSettings.Builder> unaryMethodSettingsBuilders;

    {@builderMembers(xsettingsClass)}

    {@builderConstants(xsettingsClass)}

    {@builderConstructors(xsettingsClass)}

    {@builderMethods(xsettingsClass)}
  }
@end

@private builderMembers(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    @switch settings.type.toString
    @case "SimpleApiCallable"
      private final SimpleCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "PagedApiCallable"
      private final PageStreamingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, \
          {@settings.pagedListResponseTypeName}> {@settings.memberName};
    @case "BundlingApiCallable"
      private final BundlingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "StreamingApiCallable"
      private final StreamingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
  @end
@end

@private builderConstants(xsettingsClass)
  private static final ImmutableMap<String, ImmutableSet<Status.Code>> RETRYABLE_CODE_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, ImmutableSet<Status.Code>> definitions = ImmutableMap.builder();
    @join retryCodesDef : xsettingsClass.retryCodesDefinitions
      definitions.put(
          "{@retryCodesDef.key}",
          Sets.immutableEnumSet(Lists.<Status.Code>newArrayList({@statusCodes(retryCodesDef.codes)})));
    @end
    RETRYABLE_CODE_DEFINITIONS = definitions.build();
  }

  private static final ImmutableMap<String, RetrySettings.Builder> RETRY_PARAM_DEFINITIONS;

  static {
    ImmutableMap.Builder<String, RetrySettings.Builder> definitions = ImmutableMap.builder();
    RetrySettings.Builder settingsBuilder = null;
    @join retryParamsDef : xsettingsClass.retryParamsDefinitions
      settingsBuilder = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.millis({@retryParamsDef.initialRetryDelay.getMillis}L))
          .setRetryDelayMultiplier({@retryParamsDef.retryDelayMultiplier})
          .setMaxRetryDelay(Duration.millis({@retryParamsDef.maxRetryDelay.getMillis}L))
          .setInitialRpcTimeout(Duration.millis({@retryParamsDef.initialRpcTimeout.getMillis}L))
          .setRpcTimeoutMultiplier({@retryParamsDef.rpcTimeoutMultiplier})
          .setMaxRpcTimeout(Duration.millis({@retryParamsDef.maxRpcTimeout.getMillis}L))
          .setTotalTimeout(Duration.millis({@retryParamsDef.totalTimeout.getMillis}L));
      definitions.put("{@retryParamsDef.key}", settingsBuilder);
    @end
    RETRY_PARAM_DEFINITIONS = definitions.build();
  }
@end

@private statusCodes(codes)
  @join code : codes on ", "
    Status.Code.{@code}
  @end
@end

@private builderConstructors(xsettingsClass)
  private Builder() {
    @if xsettingsClass.hasDefaultInstance
      super(s_getDefaultConnectionSettingsBuilder().build());
    @end

    @join settings : xsettingsClass.callSettings
      @switch settings.type.toString
      @case "SimpleApiCallable"
        {@settings.memberName} = SimpleCallSettings.newBuilder({@settings.grpcTypeName}.{@settings.grpcMethodConstant});
      @case "PagedApiCallable"
        {@settings.memberName} = PageStreamingCallSettings.newBuilder(
            {@settings.grpcTypeName}.{@settings.grpcMethodConstant},
            {@settings.pagedListResponseFactoryName});
      @case "BundlingApiCallable"
        {@settings.memberName} = BundlingCallSettings.newBuilder(
            {@settings.grpcTypeName}.{@settings.grpcMethodConstant},
            {@settings.bundlingDescriptorName})
                .setBundlingSettingsBuilder(BundlingSettings.newBuilder());
      @case "StreamingApiCallable"
        {@settings.memberName} = StreamingCallSettings.newBuilder({@settings.grpcTypeName}.{@settings.grpcMethodConstant});
      @default
        $unhandledCase: {@settings.type.toString}$
      @end
      {@BREAK}
    @end
    unaryMethodSettingsBuilders = ImmutableList.<UnaryApiCallSettings.Builder>of(
        @join settings : xsettingsClass.unaryCallSettings vertical on ",".add(BREAK)
          {@settings.memberName}
        @end
    );
  }

  private static Builder createDefault() {
    Builder builder = new Builder();
    @join settings : xsettingsClass.unaryCallSettings
      {@""}
      @switch settings.type
      @case "SimpleApiCallable"
      @case "PagedApiCallable"
      @case "BundlingApiCallable"
        builder.{@settings.settingsGetFunction}().getBundlingSettingsBuilder()
            .setElementCountThreshold({@settings.bundlingConfig.elementCountThreshold})
            .setElementCountLimit({@settings.bundlingConfig.elementCountLimit})
            .setRequestByteThreshold({@settings.bundlingConfig.requestByteThreshold})
            .setRequestByteLimit({@settings.bundlingConfig.requestByteLimit})
            .setDelayThreshold(Duration.millis({@settings.bundlingConfig.delayThresholdMillis}))
            .setBlockingCallCountThreshold(1);
      @default
        $unhandledCase: {@settings.type.toString}$
      @end
      builder.{@settings.settingsGetFunction}()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("{@settings.retryCodesName}"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("{@settings.retryParamsName}"));
    @end

    return builder;
  }

  private Builder({@xsettingsClass.name} settings) {
    super(settings);

    @join settings : xsettingsClass.callSettings
      {@settings.memberName} = settings.{@settings.memberName}.toBuilder();
    @end

    unaryMethodSettingsBuilders = ImmutableList.<UnaryApiCallSettings.Builder>of(
        @join settings : xsettingsClass.unaryCallSettings vertical on ",".add(BREAK)
          {@settings.memberName}
        @end
    );
  }
@end

@private builderMethods(xsettingsClass)
  private static ConnectionSettings.Builder s_getDefaultConnectionSettingsBuilder() {
    return ConnectionSettings.newBuilder()
      @if xsettingsClass.hasDefaultServiceAddress
        .setServiceAddress(DEFAULT_SERVICE_ADDRESS)
      @end
      .setPort(DEFAULT_SERVICE_PORT)
      @if xsettingsClass.hasDefaultServiceScopes
        .provideCredentialsWith(DEFAULT_SERVICE_SCOPES)
      @end
      ;
  }
  @@Override
  protected ConnectionSettings.Builder getDefaultConnectionSettingsBuilder() {
    return s_getDefaultConnectionSettingsBuilder();
  }
  @@Override
  public Builder provideExecutorWith(ScheduledExecutorService executor, boolean shouldAutoClose) {
    super.provideExecutorWith(executor, shouldAutoClose);
    return this;
  }
  @@Override
  public Builder provideChannelWith(ManagedChannel channel, boolean shouldAutoClose) {
    super.provideChannelWith(channel, shouldAutoClose);
    return this;
  }
  @@Override
  public Builder provideChannelWith(ConnectionSettings settings) {
    super.provideChannelWith(settings);
    return this;
  }
  @@Override
  public Builder provideChannelWith(Credentials credentials) {
    super.provideChannelWith(credentials);
    return this;
  }
  @@Override
  public Builder provideChannelWith(List<String> scopes) {
    super.provideChannelWith(scopes);
    return this;
  }
  @@Override
  public Builder setGeneratorHeader(String name, String version) {
    super.setGeneratorHeader(name, version);
    return this;
  }
  @@Override
  public Builder setClientLibHeader(String name, String version) {
    super.setClientLibHeader(name, version);
    return this;
  }

  /**
   * Applies the given settings to all of the unary API methods in this service. Only
   * values that are non-null will be applied, so this method is not capable
   * of un-setting any values.
   *
   * Note: This method does not support applying settings to streaming methods.
   */
  public Builder applyToAllApiMethods(UnaryApiCallSettings.Builder apiCallSettings) throws Exception {
    super.applyToAllApiMethods(unaryMethodSettingsBuilders, apiCallSettings);
    return this;
  }

  @join settings : xsettingsClass.callSettings
    /**
     * Returns the builder for the settings used for calls to {@settings.methodName}.
     */
    @switch settings.type.toString
    @case "SimpleApiCallable"
      public SimpleCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "PagedApiCallable"
      public PageStreamingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, {@settings.pagedListResponseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "BundlingApiCallable"
      public BundlingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @case "StreamingApiCallable"
      public StreamingCallSettings.Builder<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.settingsGetFunction}() {
        return {@settings.memberName};
      }
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
    {@""}
  @end
  @@Override
  public {@xsettingsClass.name} build() throws IOException {
    return new {@xsettingsClass.name}(this);
  }
@end
