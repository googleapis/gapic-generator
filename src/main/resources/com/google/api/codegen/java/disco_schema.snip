@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  public final class {@apiFile.schema.typeName} implements Serializable {
    {@members(apiFile.schema)}
    {@constructor(apiFile.schema)}
    {@getters(apiFile.schema)}
    {@newBuilder(apiFile.schema)}
    {@builder(apiFile.schema)}
    {@toString(apiFile.schema)}
    {@equalsMethod(apiFile.schema)}
    {@hashCode(apiFile.schema)}
  }
@end

@private toString(xschema)
  @@Override
    public String toString() {
      return "{@xschema.typeName}{"
      @join property : xschema.properties
          + "{@property.name}=" + {@property.name} + ", "
      @end
          + "}";
  }
@end

@private equalsMethod(xschema)
   @@Override
   public boolean equals(Object o) {
       if (o == this) {
         return true;
       }
       if (o instanceof {@xschema.typeName}) {
         {@xschema.typeName} that = ({@xschema.typeName}) o;
         return true
         @join property : xschema.properties
            && (this.{@property.name}.equals(that.{@property.name}()))
         @end
       }
         return false;
       }
  }
@end

@private hashCode(xschema)
  @@Override
  public int hashCode() {
    int h = 1;
    @join property : xschema.properties
      h *= 1000003;
      h ^= this.{@property.name}.hashCode();
    @end
    return h;
  }
@end

@private newBuilder(xschema)
  public static Builder newBuilder() {
    return new AutoValue_{@xschema.typeName}.Builder();
  }
@end

@private getters(xschema)
  @join property : xschema.properties
    public String {@property.typeName}() {
      return {@property.typeName};
    }
    {@""}
  @end
@end

@private constructor(xschema)
  private {@xschema.typeName}(
    {@paramList{xschema.properties}) {
    @join property : xschema.properties
      this.{@property.typeName} = {@property.name};
      {@""}
    @end
  }
@end

@private members(xschema)
  @join property : xschema.properties
    private final {@property.typeName} {@property.name};
    {@""}
  @end
@end

@private builder(xschema)
  public static class Builder {
    {@members(xschema)}
    Builder() {}
    Builder(@{xschema.typeName} source) {
    @join property : xschema.properties
      this.{@property.name} = source.{@property.name};
      {@""}
    @end
    }

    public Builder
    @join property : xschema.properties
      public Builder {@property.name}(@{property.type} @{property.name}) {
        this.{@property.name} = {@property.name};
        return this;
      {@""}
      }
    @end

    public @{xschema.typeName} build() {
     return new @{xschema.typeName}(
     @join property : xschema.properties on ", "
        this.{@property.name}
     @end
     ;
    }
  }
@end

@private builderMembers(xschema)
  @join property : xschema.properties
    public abstract {@xschema.typeName}.Builder {@property.name}({@property.typeName} val);
    {@""}
  @end
@end
