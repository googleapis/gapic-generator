@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  {@nameClassDef(apiFile.resourceName)}
@end

@private nameClassDef(resourceName)
  public final class {@resourceName.typeName} implements ResourceName {
    {@members(resourceName)}

    {@constructors(resourceName)}

    {@populateMapMethod(resourceName)}

    {@getters(resourceName)}

    {@newBuilder(resourceName)}

    {@builder(resourceName)}

    {@toString(resourceName)}

    {@equalsMethod(resourceName)}

    {@hashCode(resourceName)}
  }

@end

@private populateMapMethod(schema)
  @@Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    @join param : schema.pathParams
      if (fieldNames.contains("{@param.name}")) {
        @if param.canRepeat
          fieldMap.put("{@param.name}", {@param.name});
        @else
          fieldMap.put("{@param.name}", Collections.singletonList(String.valueOf({@param.name})));
        @end
      }
    @end
    return fieldMap;
  }
@end

@private members(schema)
  @join property : schema.pathParams
    private final {@property.typeName} {@property.name};
  @end
@end

@private getTypeFunction(schema)
  @Override
  public ResourceNameType getType() {
    return {@schema.nameType}.instance();
  }
@end

@private toString(schema)
  @@Override
  public String toString() {
    return PATH_TEMPLATE.instantiate(
        @join property : schema.pathParams on ",".add(BREAK)
          + "{@property.name}", {@property.name}
        @end
        ")";
  }
@end

@private equalsMethod(schema)
  @@Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {@schema.typeName}) {
      {@schema.typeName} that = ({@schema.typeName}) o;
      return
          @join param : schema.pathParams on " &&".add(BREAK)
            Objects.equals(this.{@param.name}, that.{@param.fieldGetFunction}())
          @end
          ;
    }
    return false;
  }
@end

@private hashCode(schema)
  @@Override
  public int hashCode() {
    return Objects.hash(
      @join pathParams : schema.pathParams on ", ".add(BREAK)
        {@pathParams.name}
      @end
    );
  }
@end

@private newBuilder(schema)
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder({@schema.typeName} prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
  }

  public static {@schema.typeName} getDefaultInstance() {
      return DEFAULT_INSTANCE;
  }
  private static final {@schema.typeName} DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new {@schema.typeName}();
  }
@end

@private getters(schema)
  @join param : schema.pathParams
    public {@param.typeName} {@param.fieldGetFunction}() {
      return {@param.name};
    }

  @end
@end

@private constructors(schema)
  private {@schema.typeName}(Builder builder) {
    @join param : schema.pathParams
      {@param.name} = Preconditions.checkNotNull(builder.{@schema.fieldGetFunction}());
    @end
  }

  public static {@schema.typeName} create(
      @join param : schema.pathParams on ",".add(BREAK)
        {@param.typeName} {@param.name}
      @end
      ) {
    return newBuilder()
    @join param : schema.pathParams
      .@{param.fieldSetFunction)({@param.name})
    @end
      .build();
  }
@end

@private builder(schema)
  public static class Builder {
    @join param : schema.pathParams
      private {@param.typeName} {@param.name};
    @end

    @join property : schema.pathParams
      public {@property.typeName} {@property.fieldGetFunction}() {
        return {@property.name};
      }
    @end

    @join property: schema.pathParams
      public Builder {@property.fieldSetFunction}({@property.typeName} {@property.name}) {
        this.{@property.name} = {@property.name};
        return this;
      }
    @end

    private Builder() {}

    public Builder ({@schema.typeName} {@schema.name}) {
      @join property : schema.pathParams
        {@property.name} = {@schema.name}.{@property.name};
      @end
    }

    public {@schema.typeName} build() {
      return new {@schema.typeName}(this);
    }
  }
@end
