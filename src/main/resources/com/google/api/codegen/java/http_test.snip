@extends "java/common.snip"
@extends "java/initcode.snip"

@snippet generate(apiTest)
  {@renderFileHeader(apiTest.fileHeader)}

  @@javax.annotation.Generated("by GAPIC")
  public class {@apiTest.testClass.name} {

     private static final List<ApiMethodDescriptor> METHOD_DESCRIPTORS = ImmutableList.copyOf(
          Lists.<ApiMethodDescriptor>newArrayList(
            @join test : apiTest.testClass.testCases on ", ".add(BREAK)
              {@test.methodDescriptor}
            @end
          ));
    private static final MockHttpService mockService
        = new MockHttpService(METHOD_DESCRIPTORS, {@apiTest.testClass.apiStubSettingsClassName}.getDefaultEndpoint());

    private static {@apiTest.testClass.apiClassName} client;
    private static {@apiTest.testClass.apiSettingsClassName} clientSettings;

    @@BeforeClass
    public static void setUp() throws IOException {
      clientSettings =
          {@apiTest.testClass.apiSettingsClassName}.newBuilder()
             .setTransportChannelProvider(
                 {@apiTest.testClass.apiSettingsClassName}.defaultHttpJsonTransportProviderBuilder()
                     .setHttpTransport(mockService).build())
             .setCredentialsProvider(NoCredentialsProvider.create())
             .build();
      client =
         {@apiTest.testClass.apiClassName}.create(clientSettings);
    }

    @@After
    public void cleanUp() {
      mockService.reset();
    }

    @@AfterClass
    public static void tearDown() throws Exception {
      client.close();
    }

    @join test : apiTest.testClass.testCases
      {@testCase(test)}

    @end
  }
@end

@private testCase(test)
  @switch test.clientMethodType
  @case "FlattenedMethod"
      {@unaryTestCase(test)}
  @case "PagedFlattenedMethod"
      {@unaryTestCase(test)}
  @end
@end

@private unaryTestCase(test)
  @@Test
  @@SuppressWarnings("all")
  public void {@test.name}() {
    {@addResponse(test)}

    {@initCode(test.testCaseInitCode)}

    {@methodCall(test)}

    {@unarySuccessAsserts(test)}
  }

  @@Test
  @@SuppressWarnings("all")
  public void {@test.nameWithException}() throws Exception {
    {@addException(test)}

    try {
      {@initCode(test.testCaseInitCode)}

      client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }
@end

@private addResponse(test)
  @if test.hasReturnValue
    {@initCode(test.mockResponse.rpcResponseInitCode)}
    mockService.addResponse(expectedResponse);
  @else
    mockService.addNullResponse();
  @end
  {@""}
@end

@private addException(test)
  ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
  mockService.addException(exception);
@end

@private methodCall(test)
  @switch test.clientMethodType
  @case "PagedFlattenedMethod"
    {@test.responseTypeName} pagedListResponse = client.{@test.clientMethodName}(\
      {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});

    @join pageStreamingResponseView : test.pageStreamingResponseViews
      List<{@pageStreamingResponseView.resourceTypeName}> {@pageStreamingResponseView.resourcesVarName} = Lists.newArrayList(pagedListResponse.{@pageStreamingResponseView.resourcesIterateMethod}());
      Assert.assertEquals(1, {@pageStreamingResponseView.resourcesVarName}.size());
      @if pageStreamingResponseView.resourcesFieldIsMap
        Assert.assertEquals(expectedResponse.{@pageStreamingResponseView.resourcesFieldGetterName}().values().iterator().next(),
      @else
        Assert.assertEquals(expectedResponse.{@pageStreamingResponseView.resourcesFieldGetterName}().get(0),
      @end
          {@pageStreamingResponseView.resourcesVarName}.get(0));
    @end
  @case "FlattenedMethod"
    @if test.hasReturnValue
      {@test.responseTypeName} actualResponse =
          client.{@test.clientMethodName}(\
          {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
      Assert.assertEquals(expectedResponse, actualResponse);
    @else
      client.{@test.clientMethodName}(\
            {@sampleMethodCallArgList(test.testCaseInitCode.fieldSettings)});
    @end
  @default
    $unhandledCase: {@test.clientMethodType}$
  @end
@end

# TODO(andrealin) comparison of request content.
@private unarySuccessAsserts(test)
  List<String> actualRequests = mockService.getRequestPaths();
  Assert.assertEquals(1, actualRequests.size());

  String apiClientHeaderKey = mockService.getRequestHeaders()
      .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
  Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
      .matcher(apiClientHeaderKey).matches());
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end
