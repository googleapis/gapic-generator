@extends "java/common.snip"
@extends "java/method_sample.snip"

@snippet generate(apiFile)
  {@renderFileHeader(apiFile.fileHeader)}

  @@Generated("by GAPIC")
  @@BetaApi
  {@requestClassDef(apiFile.request)}
@end

@private requestClassDef(request)
  public final class {@request.typeName} {
    {@members(request)}

    {@constructors(request)}

    {@getters(request)}

    {@newBuilder(request)}

    {@builder(request)}

    {@toString(request)}

    {@equalsMethod(request)}

    {@hashCode(request)}
  }

@end

@private members(request)
  @join field : request.staticFinalMembers
    private static final {@field.typeName} {@field.name} = {@field.value};
  @end

  private ImmutableMap<String, String> queryParams;

  @if request.hasRequestObject
    private {@request.requestObject.typeName} {@request.requestObject.name};
  @end
@end

@private toString(request)
  @@Override
  public String toString() {
    return "{@request.typeName}{"
    @join param : request.queryParams on " + \", \""

        + "{@param.name}=" + {@param.name}
    @end
        + "}";
  }
@end

@private equalsMethod(request)
  @@Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof {@request.typeName}) {
      {@request.typeName} that = ({@request.typeName}) o;
      return
      @join param : request.queryParams on "&&"

        this.{@param.name}.equals(that.{@param.getterFunction}())
      @end
      ;
    }
    return false;
  }
@end

@private hashCode(request)
  @@Override
  public int hashCode() {
    int h = 1;
    @join param : request.queryParams
      h *= 1000003;
      h ^= this.{@param.name}.hashCode();
    @end
    return h;
  }
@end

@private newBuilder(request)
  public static Builder newBuilder() {
    return new {@request.typeName}.Builder();
  }
@end

@private getters(request)
  public ImmutableMap<String, String> queryParams() {
    return queryParams;
  }

  @if request.hasRequestObject
   public {@request.requestObject.typeName} {@request.requestObject.getterFunction}() {
      return {@request.requestObject.name};
    }
  @end
@end

@private constructors(request)
  private {@request.typeName}(
    ImmutableMap<String, String> queryParams
    @if request.hasRequestObject
      , {@request.requestObject.typeName} {@request.requestObject.name}
    @end
    ) {
      this.queryParams = queryParams;
      @if request.hasRequestObject
        this.{@request.requestObject.name} = {@request.requestObject.name};
      @end
    }
  private {@request.typeName}() {
    this.queryParams = ImmutableMap.<String, String>Builder
  }
@end

@private builder(request)
  public static class Builder {
    @join param : request.queryParams
      private {@param.typeName} {@param.name};
    @end
    @if request.hasRequestObject
      private {@request.requestObject.typeName} {@request.requestObject.name}
    @end

    Builder() {}

    Builder({@request.typeName} source) {
      @join param : request.queryParams
        this.{@param.name} = source.{@param.name};
      @end
    }

    @join param : request.queryParams
      public {@param.typeName} {@param.getterFunction}() {
        return {@param.name};
      }

      public Builder {@param.setterFunction}({@param.typeName} {@param.name}) {
        this.{@param.name} = {@param.name};
        return this;
      }

    @end

    public {@request.typeName} build() {
      return new {@request.typeName}(
        @join param : request.queryParams on ", "

          {@param.name}
        @end
      );
    }
  }
@end

@private builderMembers(request)
  @join param : request.queryParams
    public abstract {@request.typeName}.Builder {@param.name}({@param.typeName} val);
    {@""}
  @end
@end
